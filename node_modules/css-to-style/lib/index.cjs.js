'use strict';

// Convert a string from kebab-case to camelCase
var camelCase = function camelCase(string) {
  return string.replace(/\-(\w|$)/g, function (m, p1) {
    return p1.toUpperCase();
  });
};

var convertPropertyName = function convertPropertyName(prop) {
  prop = prop.toLowerCase(); // Always return 'float' as 'cssFloat'

  if (prop === 'float') {
    return 'cssFloat';
  } // Skip CSS variables


  if (prop.startsWith('--')) {
    return prop;
  } // Handle `-ms-` prefix to camelCase as msPropertyName, not MsPropertyName


  if (prop.startsWith('-ms-')) {
    prop = prop.substr(1);
  }

  return camelCase(prop);
};

var splitDeclarations = function splitDeclarations(cssText) {
  var declarations = [];
  var capturing;
  var i = cssText.length;
  var last = i; // Split into declarations by semi-colon (outside quotes or parentheses)

  while (i-- > -1) {
    // Capture unescaped quotes
    if ((cssText[i] === '"' || cssText[i] === "'") && cssText[i - 1] !== '\\') {
      if (!capturing) {
        capturing = cssText[i];
      } else if (cssText[i] === capturing) {
        capturing = false;
      }
    } // Start capturing parentheses


    if (!capturing && cssText[i] === ')') {
      capturing = cssText[i];
    } // Stop capturing parentheses


    if (cssText[i] === '(' && capturing === ')') {
      capturing = false;
    } // Split at semi-colon


    if (i < 0 || !capturing && cssText[i] === ';') {
      declarations.unshift(cssText.slice(i + 1, last));
      last = i;
    }
  }

  return declarations;
};

var splitDeclaration = function splitDeclaration(declaration) {
  var i = declaration.indexOf(':');
  return [declaration.substr(0, i).trim(), declaration.substr(i + 1).trim()];
};

var cssToStyle = function cssToStyle(cssText) {
  return splitDeclarations(cssText).map(splitDeclaration).filter(function (_ref) {
    var name = _ref[0],
        value = _ref[1];
    return name && value;
  }).reduce(function (styles, _ref2) {
    var name = _ref2[0],
        value = _ref2[1];
    styles[convertPropertyName(name)] = value;
    return styles;
  }, {});
};

module.exports = cssToStyle;
//# sourceMappingURL=index.cjs.js.map
