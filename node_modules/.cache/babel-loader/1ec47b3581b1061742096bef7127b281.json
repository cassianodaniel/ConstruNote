{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { InviteServerTransaction } from \"../transactions\";\nimport { UserAgentServer } from \"./user-agent-server\";\n/**\n * Re-INVITE UAS.\n * @remarks\n * 14 Modifying an Existing Session\n * https://tools.ietf.org/html/rfc3261#section-14\n * 14.2 UAS Behavior\n * https://tools.ietf.org/html/rfc3261#section-14.2\n * @public\n */\n\nexport var ReInviteUserAgentServer = /*#__PURE__*/function (_UserAgentServer) {\n  _inherits(ReInviteUserAgentServer, _UserAgentServer);\n\n  var _super = _createSuper(ReInviteUserAgentServer);\n\n  function ReInviteUserAgentServer(dialog, message, delegate) {\n    var _this;\n\n    _classCallCheck(this, ReInviteUserAgentServer);\n\n    _this = _super.call(this, InviteServerTransaction, dialog.userAgentCore, message, delegate);\n    dialog.reinviteUserAgentServer = _assertThisInitialized(_this);\n    _this.dialog = dialog;\n    return _this;\n  }\n  /**\n   * Update the dialog signaling state on a 2xx response.\n   * @param options - Options bucket.\n   */\n\n\n  _createClass(ReInviteUserAgentServer, [{\n    key: \"accept\",\n    value: function accept() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        statusCode: 200\n      };\n      // FIXME: The next two lines SHOULD go away, but I suppose it's technically harmless...\n      // These are here because some versions of SIP.js prior to 0.13.8 set the route set\n      // of all in dialog ACKs based on the Record-Route headers in the associated 2xx\n      // response. While this worked for dialog forming 2xx responses, it was technically\n      // broken for re-INVITE ACKS as it only worked if the UAS populated the Record-Route\n      // headers in the re-INVITE 2xx response (which is not required and a waste of bandwidth\n      // as the should be ignored if present in re-INVITE ACKS) and the UAS populated\n      // the Record-Route headers with the correct values (would be weird not too, but...).\n      // Anyway, for now the technically useless Record-Route headers are being added\n      // to maintain \"backwards compatibility\" with the older broken versions of SIP.js.\n      options.extraHeaders = options.extraHeaders || [];\n      options.extraHeaders = options.extraHeaders.concat(this.dialog.routeSet.map(function (route) {\n        return \"Record-Route: \".concat(route);\n      })); // Send and return the response\n\n      var response = _get(_getPrototypeOf(ReInviteUserAgentServer.prototype), \"accept\", this).call(this, options);\n\n      var session = this.dialog;\n      var result = Object.assign(Object.assign({}, response), {\n        session: session\n      });\n\n      if (options.body) {\n        // Update dialog signaling state with offer/answer in body\n        this.dialog.signalingStateTransition(options.body);\n      } // Update dialog\n\n\n      this.dialog.reConfirm();\n      return result;\n    }\n    /**\n     * Update the dialog signaling state on a 1xx response.\n     * @param options - Progress options bucket.\n     */\n\n  }, {\n    key: \"progress\",\n    value: function progress() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        statusCode: 180\n      };\n\n      // Send and return the response\n      var response = _get(_getPrototypeOf(ReInviteUserAgentServer.prototype), \"progress\", this).call(this, options);\n\n      var session = this.dialog;\n      var result = Object.assign(Object.assign({}, response), {\n        session: session\n      }); // Update dialog signaling state\n\n      if (options.body) {\n        this.dialog.signalingStateTransition(options.body);\n      }\n\n      return result;\n    }\n    /**\n     * TODO: Not Yet Supported\n     * @param contacts - Contacts to redirect to.\n     * @param options - Redirect options bucket.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"redirect\",\n    value: function redirect(contacts) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        statusCode: 302\n      };\n      this.dialog.signalingStateRollback();\n      this.dialog.reinviteUserAgentServer = undefined; // ACK will be handled by transaction\n\n      throw new Error(\"Unimplemented.\");\n    }\n    /**\n     * 3.1 Background on Re-INVITE Handling by UASs\n     * An error response to a re-INVITE has the following semantics.  As\n     * specified in Section 12.2.2 of RFC 3261 [RFC3261], if a re-INVITE is\n     * rejected, no state changes are performed.\n     * https://tools.ietf.org/html/rfc6141#section-3.1\n     * @param options - Reject options bucket.\n     */\n\n  }, {\n    key: \"reject\",\n    value: function reject() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        statusCode: 488\n      };\n      this.dialog.signalingStateRollback();\n      this.dialog.reinviteUserAgentServer = undefined; // ACK will be handled by transaction\n\n      return _get(_getPrototypeOf(ReInviteUserAgentServer.prototype), \"reject\", this).call(this, options);\n    }\n  }]);\n\n  return ReInviteUserAgentServer;\n}(UserAgentServer);","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/core/user-agents/re-invite-user-agent-server.js"],"names":["InviteServerTransaction","UserAgentServer","ReInviteUserAgentServer","dialog","message","delegate","userAgentCore","reinviteUserAgentServer","options","statusCode","extraHeaders","concat","routeSet","map","route","response","session","result","Object","assign","body","signalingStateTransition","reConfirm","contacts","signalingStateRollback","undefined","Error"],"mappings":"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","sourcesContent":["import { InviteServerTransaction } from \"../transactions\";\nimport { UserAgentServer } from \"./user-agent-server\";\n/**\n * Re-INVITE UAS.\n * @remarks\n * 14 Modifying an Existing Session\n * https://tools.ietf.org/html/rfc3261#section-14\n * 14.2 UAS Behavior\n * https://tools.ietf.org/html/rfc3261#section-14.2\n * @public\n */\nexport class ReInviteUserAgentServer extends UserAgentServer {\n    constructor(dialog, message, delegate) {\n        super(InviteServerTransaction, dialog.userAgentCore, message, delegate);\n        dialog.reinviteUserAgentServer = this;\n        this.dialog = dialog;\n    }\n    /**\n     * Update the dialog signaling state on a 2xx response.\n     * @param options - Options bucket.\n     */\n    accept(options = { statusCode: 200 }) {\n        // FIXME: The next two lines SHOULD go away, but I suppose it's technically harmless...\n        // These are here because some versions of SIP.js prior to 0.13.8 set the route set\n        // of all in dialog ACKs based on the Record-Route headers in the associated 2xx\n        // response. While this worked for dialog forming 2xx responses, it was technically\n        // broken for re-INVITE ACKS as it only worked if the UAS populated the Record-Route\n        // headers in the re-INVITE 2xx response (which is not required and a waste of bandwidth\n        // as the should be ignored if present in re-INVITE ACKS) and the UAS populated\n        // the Record-Route headers with the correct values (would be weird not too, but...).\n        // Anyway, for now the technically useless Record-Route headers are being added\n        // to maintain \"backwards compatibility\" with the older broken versions of SIP.js.\n        options.extraHeaders = options.extraHeaders || [];\n        options.extraHeaders = options.extraHeaders.concat(this.dialog.routeSet.map((route) => `Record-Route: ${route}`));\n        // Send and return the response\n        const response = super.accept(options);\n        const session = this.dialog;\n        const result = Object.assign(Object.assign({}, response), { session });\n        if (options.body) {\n            // Update dialog signaling state with offer/answer in body\n            this.dialog.signalingStateTransition(options.body);\n        }\n        // Update dialog\n        this.dialog.reConfirm();\n        return result;\n    }\n    /**\n     * Update the dialog signaling state on a 1xx response.\n     * @param options - Progress options bucket.\n     */\n    progress(options = { statusCode: 180 }) {\n        // Send and return the response\n        const response = super.progress(options);\n        const session = this.dialog;\n        const result = Object.assign(Object.assign({}, response), { session });\n        // Update dialog signaling state\n        if (options.body) {\n            this.dialog.signalingStateTransition(options.body);\n        }\n        return result;\n    }\n    /**\n     * TODO: Not Yet Supported\n     * @param contacts - Contacts to redirect to.\n     * @param options - Redirect options bucket.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    redirect(contacts, options = { statusCode: 302 }) {\n        this.dialog.signalingStateRollback();\n        this.dialog.reinviteUserAgentServer = undefined; // ACK will be handled by transaction\n        throw new Error(\"Unimplemented.\");\n    }\n    /**\n     * 3.1 Background on Re-INVITE Handling by UASs\n     * An error response to a re-INVITE has the following semantics.  As\n     * specified in Section 12.2.2 of RFC 3261 [RFC3261], if a re-INVITE is\n     * rejected, no state changes are performed.\n     * https://tools.ietf.org/html/rfc6141#section-3.1\n     * @param options - Reject options bucket.\n     */\n    reject(options = { statusCode: 488 }) {\n        this.dialog.signalingStateRollback();\n        this.dialog.reinviteUserAgentServer = undefined; // ACK will be handled by transaction\n        return super.reject(options);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}