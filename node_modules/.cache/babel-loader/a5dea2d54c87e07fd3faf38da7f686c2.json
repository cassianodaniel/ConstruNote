{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ChatInput.tsx\";\nimport React, { useState } from \"react\";\nimport { Button, Input, Row, Col, UncontrolledTooltip, ButtonDropdown, DropdownToggle, DropdownMenu, Label, Form } from \"reactstrap\";\nimport { Picker } from \"emoji-mart\";\nimport \"emoji-mart/css/emoji-mart.css\";\nimport { Emoji } from \"emoji-mart\";\n\nconst ChatInput = () => {\n  const [textMessage, settextMessage] = useState(\"\");\n  const [isOpen, setisOpen] = useState(false);\n  const [file, setfile] = useState({\n    name: \"\",\n    size: \"\"\n  });\n  const [fileImage, setfileImage] = useState(\"\");\n  console.log(textMessage);\n\n  const toggle = () => setisOpen(!isOpen); //function for text input value change\n\n\n  const handleChange = e => {\n    settextMessage(e.target.value);\n  };\n\n  const checkCharactersExceeded = () => {\n    if (textMessage.length > 9900) {\n      return 10000 - textMessage.length + \"caracteres restantes\";\n    }\n\n    if (textMessage.length == 10000) {\n      return \"Limite de texto excedido.\";\n    }\n  }; //function for add emojis\n\n\n  const addEmoji = e => {\n    let emoji = e.native;\n    console.log(emoji);\n    settextMessage(textMessage + emoji);\n  }; //function for file input change\n\n\n  const handleFileChange = e => {\n    if (e.target.files.length !== 0) setfile({\n      name: e.target.files[0].name,\n      size: e.target.files[0].size\n    });\n  }; //function for image input change\n\n\n  const handleImageChange = e => {\n    if (e.target.files.length !== 0) setfileImage(URL.createObjectURL(e.target.files[0]));\n  }; //function for send data to onaddMessage function(in userChat/index.js component)\n\n\n  const onaddMessage = (e, textMessage) => {\n    e.preventDefault(); //if text value is not emptry then call onaddMessage function\n\n    if (textMessage !== \"\") {\n      /* props.onaddMessage(textMessage, \"textMessage\"); */\n      settextMessage(\"\");\n    } //if file input value is not empty then call onaddMessage function\n\n\n    if (file.name !== \"\") {\n      /* props.onaddMessage(file, \"fileMessage\"); */\n      setfile({\n        name: \"\",\n        size: \"\"\n      });\n    } //if image input value is not empty then call onaddMessage function\n\n\n    if (fileImage !== \"\") {\n      /* props.onaddMessage(fileImage, \"imageMessage\"); */\n      setfileImage(\"\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"p-3 p-lg-4 border-top mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: e => onaddMessage(e, textMessage),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    value: textMessage,\n    onChange: handleChange,\n    className: \"form-control form-control-lg bg-light border-light\",\n    placeholder: \"Send message...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      color: \"red\",\n      fontSize: 12\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, textMessage.length > 9900 ? 10000 - textMessage.length + \" caracteres restantes\" : null))), /*#__PURE__*/React.createElement(Col, {\n    xs: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-input-links ml-md-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list-inline mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    className: \"list-inline-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ButtonDropdown, {\n    className: \"emoji-dropdown\",\n    direction: \"up\",\n    isOpen: isOpen,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(DropdownToggle, {\n    id: \"emoji\",\n    color: \"link\",\n    className: \"text-decoration-none font-size-16 btn-lg waves-effect\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"ri-emotion-happy-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(DropdownMenu, {\n    className: \"dropdown-menu-lg-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Picker, {\n    set: \"apple\",\n    onSelect: addEmoji,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Emoji, {\n    emoji: \"santa\",\n    set: \"apple\",\n    size: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(UncontrolledTooltip, {\n    target: \"emoji\",\n    placement: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 21\n    }\n  }, \"Emoji\")), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"list-inline-item input-file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    id: \"files\",\n    className: \"btn btn-link text-decoration-none font-size-16 btn-lg waves-effect\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"ri-attachment-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    onChange: e => handleFileChange(e),\n    type: \"file\",\n    name: \"fileInput\",\n    size: 60,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(UncontrolledTooltip, {\n    target: \"files\",\n    placement: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }, \"Attached File\")), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"list-inline-item input-file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    id: \"images\",\n    className: \"mr-1 btn btn-link text-decoration-none font-size-16 btn-lg waves-effect\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"ri-image-fill\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    onChange: e => handleImageChange(e),\n    accept: \"image/*\",\n    type: \"file\",\n    name: \"fileInput\",\n    size: 60,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(UncontrolledTooltip, {\n    target: \"images\",\n    placement: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }, \"Images\")), /*#__PURE__*/React.createElement(\"li\", {\n    className: \"list-inline-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: textMessage.length < 10000 ? \"submit\" : \"button\",\n    color: \"primary\",\n    className: \"font-size-16 btn-lg chat-send waves-effect waves-light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"ri-send-plane-2-fill\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 23\n    }\n  }))))))))));\n};\n\nexport default ChatInput;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ChatInput.tsx"],"names":["React","useState","Button","Input","Row","Col","UncontrolledTooltip","ButtonDropdown","DropdownToggle","DropdownMenu","Label","Form","Picker","Emoji","ChatInput","textMessage","settextMessage","isOpen","setisOpen","file","setfile","name","size","fileImage","setfileImage","console","log","toggle","handleChange","e","target","value","checkCharactersExceeded","length","addEmoji","emoji","native","handleFileChange","files","handleImageChange","URL","createObjectURL","onaddMessage","preventDefault","color","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  UncontrolledTooltip,\r\n  ButtonDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  Label,\r\n  Form,\r\n} from \"reactstrap\";\r\nimport { Picker } from \"emoji-mart\";\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\n\r\nimport { Emoji } from \"emoji-mart\";\r\nimport { isConstructorDeclaration } from \"typescript\";\r\n\r\nconst ChatInput: React.FC = () => {\r\n  const [textMessage, settextMessage] = useState(\"\");\r\n  const [isOpen, setisOpen] = useState(false);\r\n  const [file, setfile] = useState({\r\n    name: \"\",\r\n    size: \"\",\r\n  });\r\n  const [fileImage, setfileImage] = useState(\"\");\r\n\r\n  console.log(textMessage);\r\n\r\n  const toggle = () => setisOpen(!isOpen);\r\n\r\n  //function for text input value change\r\n  const handleChange = (e: any) => {\r\n    settextMessage(e.target.value);\r\n  };\r\n\r\n  const checkCharactersExceeded = () => {\r\n    if (textMessage.length > 9900) {\r\n      return 10000 - textMessage.length + \"caracteres restantes\";\r\n    }\r\n    if (textMessage.length == 10000) {\r\n      return \"Limite de texto excedido.\";\r\n    }\r\n  };\r\n\r\n  //function for add emojis\r\n  const addEmoji = (e: any) => {\r\n    let emoji = e.native;\r\n    console.log(emoji);\r\n    settextMessage(textMessage + emoji);\r\n  };\r\n\r\n  //function for file input change\r\n  const handleFileChange = (e: any) => {\r\n    if (e.target.files.length !== 0)\r\n      setfile({\r\n        name: e.target.files[0].name,\r\n        size: e.target.files[0].size,\r\n      });\r\n  };\r\n\r\n  //function for image input change\r\n  const handleImageChange = (e: any) => {\r\n    if (e.target.files.length !== 0)\r\n      setfileImage(URL.createObjectURL(e.target.files[0]));\r\n  };\r\n\r\n  //function for send data to onaddMessage function(in userChat/index.js component)\r\n  const onaddMessage = (e: any, textMessage: any) => {\r\n    e.preventDefault();\r\n    //if text value is not emptry then call onaddMessage function\r\n    if (textMessage !== \"\") {\r\n      /* props.onaddMessage(textMessage, \"textMessage\"); */\r\n      settextMessage(\"\");\r\n    }\r\n\r\n    //if file input value is not empty then call onaddMessage function\r\n    if (file.name !== \"\") {\r\n      /* props.onaddMessage(file, \"fileMessage\"); */\r\n      setfile({\r\n        name: \"\",\r\n        size: \"\",\r\n      });\r\n    }\r\n\r\n    //if image input value is not empty then call onaddMessage function\r\n    if (fileImage !== \"\") {\r\n      /* props.onaddMessage(fileImage, \"imageMessage\"); */\r\n      setfileImage(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"p-3 p-lg-4 border-top mb-0\">\r\n        <Form onSubmit={(e) => onaddMessage(e, textMessage)}>\r\n          <Row noGutters>\r\n            <Col>\r\n              <div>\r\n                <Input\r\n                  type=\"text\"\r\n                  value={textMessage}\r\n                  onChange={handleChange}\r\n                  className=\"form-control form-control-lg bg-light border-light\"\r\n                  placeholder={\"Send message...\"}\r\n                ></Input>\r\n                <div\r\n                  style={{\r\n                    color: \"red\",\r\n                    fontSize: 12,\r\n                  }}\r\n                >\r\n                  {textMessage.length > 9900\r\n                    ? 10000 - textMessage.length + \" caracteres restantes\"\r\n                    : null}\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <Col xs=\"auto\">\r\n              <div className=\"chat-input-links ml-md-2\">\r\n                <ul className=\"list-inline mb-0\">\r\n                  <li className=\"list-inline-item\">\r\n                    <ButtonDropdown\r\n                      className=\"emoji-dropdown\"\r\n                      direction=\"up\"\r\n                      isOpen={isOpen}\r\n                      toggle={toggle}\r\n                    >\r\n                      <DropdownToggle\r\n                        id=\"emoji\"\r\n                        color=\"link\"\r\n                        className=\"text-decoration-none font-size-16 btn-lg waves-effect\"\r\n                      >\r\n                        <i className=\"ri-emotion-happy-line\"></i>\r\n                      </DropdownToggle>\r\n                      <DropdownMenu className=\"dropdown-menu-lg-right\">\r\n                        <Picker set=\"apple\" onSelect={addEmoji} />\r\n                        <Emoji emoji=\"santa\" set=\"apple\" size={16} />\r\n                      </DropdownMenu>\r\n                    </ButtonDropdown>\r\n                    <UncontrolledTooltip target=\"emoji\" placement=\"top\">\r\n                      Emoji\r\n                    </UncontrolledTooltip>\r\n                  </li>\r\n                  <li className=\"list-inline-item input-file\">\r\n                    <Label\r\n                      id=\"files\"\r\n                      className=\"btn btn-link text-decoration-none font-size-16 btn-lg waves-effect\"\r\n                    >\r\n                      <i className=\"ri-attachment-line\"></i>\r\n                      <Input\r\n                        onChange={(e) => handleFileChange(e)}\r\n                        type=\"file\"\r\n                        name=\"fileInput\"\r\n                        size={60}\r\n                      />\r\n                    </Label>\r\n                    <UncontrolledTooltip target=\"files\" placement=\"top\">\r\n                      Attached File\r\n                    </UncontrolledTooltip>\r\n                  </li>\r\n                  <li className=\"list-inline-item input-file\">\r\n                    <Label\r\n                      id=\"images\"\r\n                      className=\"mr-1 btn btn-link text-decoration-none font-size-16 btn-lg waves-effect\"\r\n                    >\r\n                      <i className=\"ri-image-fill\"></i>\r\n                      <Input\r\n                        onChange={(e) => handleImageChange(e)}\r\n                        accept=\"image/*\"\r\n                        type=\"file\"\r\n                        name=\"fileInput\"\r\n                        size={60}\r\n                      />\r\n                    </Label>\r\n                    <UncontrolledTooltip target=\"images\" placement=\"top\">\r\n                      Images\r\n                    </UncontrolledTooltip>\r\n                  </li>\r\n                  <li className=\"list-inline-item\">\r\n                    <Button\r\n                      type={textMessage.length < 10000 ? \"submit\" : \"button\"}\r\n                      color=\"primary\"\r\n                      className=\"font-size-16 btn-lg chat-send waves-effect waves-light\"\r\n                    >\r\n                      <i className=\"ri-send-plane-2-fill\"></i>\r\n                    </Button>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ChatInput;\r\n"]},"metadata":{},"sourceType":"module"}