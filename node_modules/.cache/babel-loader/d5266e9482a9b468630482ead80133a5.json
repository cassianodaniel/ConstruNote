{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ModalNewConference.tsx\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input, Alert } from \"reactstrap\"; //simple bar\n\nimport SimpleBar from \"simplebar-react\"; //components\n\nimport SelectContact from \"./SelectContact\";\nimport { useTranslation } from \"react-i18next\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport EmailList from \"./EmailList\";\nimport { useConference } from \"../contexts/ConferenceContext\";\nexport const ModalNewConference = ({\n  show,\n  toggle\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    contacts\n  } = useContact();\n  const {\n    setCreateConference\n  } = useConference();\n  const [isOpenAlert, setIsOpenAlert] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [startDate, setStartDate] = useState(today().date);\n  const [startTime, setStartTime] = useState(today().time);\n  const [duration, setDuration] = useState(\"01:00\");\n  const [mdCheck, setMdCheck] = useState(false);\n  const [selectedContact, setSelectedContact] = useState([]);\n  const [emailList, setEmailList] = useState([]);\n  const [parsedDate, setParsedDate] = useState(new Date().toISOString());\n  const [flagWrongStartTime, setFlagWrongStartTime] = useState(false);\n\n  const refreshTime = () => {\n    setTime(today().time);\n  };\n\n  useEffect(refreshTime, [show]);\n\n  const handleCalendarChange = e => {\n    if (e) {\n      let year = e.split('-')[0];\n      let month = e.split('-')[1];\n      let day = e.split('-')[2].slice(0, 2);\n      setParsedDate(year + '-' + month + '-' + day + 'T12:00:00.000Z');\n      setStartDate(year + '-' + month + '-' + day);\n    }\n  };\n\n  const handleCreateGroup = () => {\n    setCreateConference({\n      name,\n      description,\n      startDate,\n      startTime,\n      duration,\n      mdCheck,\n      selectedContact,\n      emailList\n    });\n    setIsOpenAlert(true);\n    setMessage(\"Criando conferÃªncia...\");\n    setTimeout(() => {\n      setIsOpenAlert(false);\n      setMessage(\"\");\n      setSearch(\"\");\n      setName(\"\");\n      setDescription(\"\");\n      setStartDate(today().date);\n      setStartTime(today().time);\n      setDuration(\"01:00\");\n      setMdCheck(false);\n      setSelectedContact([]);\n      setEmailList([]);\n    }, 3000);\n    toggle();\n  };\n\n  const closeAndCleanData = () => {\n    setMessage(\"\");\n    setSearch(\"\");\n    setName(\"\");\n    setDescription(\"\");\n    setStartDate(today().date);\n    setStartTime(today().time);\n    setDuration(\"01:00\");\n    setMdCheck(false);\n    setSelectedContact([]);\n    setEmailList([]);\n    toggle();\n  };\n\n  const handleCheckContact = (selected, contact) => {\n    if (selected) {\n      setSelectedContact([...selectedContact, contact]);\n    } else {\n      setSelectedContact(selectedContact.filter(sel => {\n        if (sel.id === contact.id) {\n          return false;\n        }\n\n        return true;\n      }));\n    }\n  };\n\n  const updatedTime = () => {\n    setTime(startTime);\n  };\n\n  useEffect(updatedTime, [startDate]);\n\n  const setTime = value => {\n    let time = value.split(\":\");\n    let currentTime = today().time.split(\":\");\n    console.log(startDate);\n    console.log(today().date);\n\n    if (startDate === today().date) {\n      if (parseInt(time[0]) < parseInt(currentTime[0])) {\n        setFlagWrongStartTime(true);\n        return;\n      } else {\n        setFlagWrongStartTime(false);\n        setStartTime(value);\n      }\n\n      if (parseInt(time[0]) === parseInt(currentTime[0]) && parseInt(time[1]) < parseInt(currentTime[1])) {\n        setFlagWrongStartTime(true);\n        return;\n      } else {\n        setFlagWrongStartTime(false);\n        setStartTime(value);\n      }\n    } else {\n      setFlagWrongStartTime(false);\n      setStartTime(value);\n    }\n  };\n\n  const inputName = useRef(null);\n  useEffect(() => {\n    setTimeout(() => {\n      var _inputName$current;\n\n      return (_inputName$current = inputName.current) === null || _inputName$current === void 0 ? void 0 : _inputName$current.focus();\n    }, 500);\n  }, [show]);\n\n  var DatePicker = require(\"reactstrap-date-picker\");\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: show,\n    size: \"lg\",\n    centered: true,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    tag: \"h5\",\n    className: \"modal-title font-size-16\",\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }, t(\"Create conference\")), /*#__PURE__*/React.createElement(ModalBody, {\n    className: \"p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"name-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }\n  }, t(\"Room name\")), /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputName,\n    type: \"text\",\n    className: \"form-control\",\n    id: \"name-input\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    placeholder: t(\"Room name\") + \"...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  }), name === \"\" && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-2\",\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 19\n    }\n  }, t(\"The field is required\"))), /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"description-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 17\n    }\n  }, t(\"Room description\")), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"description-input\",\n    value: description,\n    onChange: e => setDescription(e.target.value),\n    placeholder: t(\"Room description\") + \"...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4 col-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"date-start-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 19\n    }\n  }, t(\"Starting date\")), /*#__PURE__*/React.createElement(DatePicker, {\n    id: \"example-datepicker\",\n    onChange: e => handleCalendarChange(e),\n    minDate: new Date().toISOString(),\n    value: parsedDate,\n    showClearButton: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4 col-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"time-start-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 19\n    }\n  }, t(\"Starting time\")), /*#__PURE__*/React.createElement(Input, {\n    type: \"time\",\n    className: \"form-control\",\n    id: \"time-start-input\",\n    value: startTime,\n    onChange: e => {\n      setTime(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 19\n    }\n  }), flagWrongStartTime === true && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-2\",\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 19\n    }\n  }, t(\"Invalid time\"))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4 col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"duration-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 19\n    }\n  }, t(\"Duration\")), /*#__PURE__*/React.createElement(Input, {\n    type: \"time\",\n    className: \"form-control\",\n    id: \"date-end-input\",\n    value: duration,\n    onChange: e => setDuration(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4 col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"custom-control custom-checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"checkbox\",\n    className: \"custom-control-input\",\n    onChange: e => {\n      setMdCheck(e.target.checked);\n    },\n    id: \"mdCheck\",\n    value: mdCheck ? 1 : 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    className: \"custom-control-label\",\n    htmlFor: \"mdCheck\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 21\n    }\n  }, t(\"Wait for call administrator to start\")))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"search-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 17\n    }\n  }, t(\"Conference Members\")), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    className: \"form-control mb-2\",\n    id: \"search-input\",\n    value: search,\n    onChange: e => setSearch(e.target.value),\n    placeholder: t(\"Search users..\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SimpleBar, {\n    style: {\n      height: \"320px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"addContacts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(SelectContact, {\n    handleCheckContact: handleCheckContact,\n    contacts: contacts,\n    search: search,\n    checkedContacts: selectedContact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 23\n    }\n  }))))))), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 11\n    }\n  }, t(\"External participants\")), /*#__PURE__*/React.createElement(EmailList, {\n    emailList: emailList,\n    setEmailList: setEmailList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Alert, {\n    isOpen: isOpenAlert,\n    color: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }\n  }, message)), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"link\",\n    onClick: closeAndCleanData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }\n  }, t(\"Close\")), name !== \"\" && flagWrongStartTime === false ? /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"primary\",\n    onClick: handleCreateGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 9\n    }\n  }, t(\"Create conference\")) : /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"primary\",\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 11\n    }\n  }, t(\"Create conference\"))));\n};\n/* https://app.citrussquad.com/api/v1/read?authUser=698dbe5b-bf91-2a34-fc87-63883c91a94f@test.citrussquad.com&between=11d3a709-8c53-0392-0149-3a3a0e0eeaae@test.citrussquad.com&id=0eb03fc3-4b69-4d5d-a330-ddd63df32541&chatType=chat */","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ModalNewConference.tsx"],"names":["React","useState","useEffect","useRef","Button","Modal","ModalHeader","ModalBody","ModalFooter","Form","FormGroup","Label","Input","Alert","SimpleBar","SelectContact","useTranslation","useContact","EmailList","useConference","ModalNewConference","show","toggle","t","contacts","setCreateConference","isOpenAlert","setIsOpenAlert","search","setSearch","message","setMessage","name","setName","description","setDescription","startDate","setStartDate","today","date","startTime","setStartTime","time","duration","setDuration","mdCheck","setMdCheck","selectedContact","setSelectedContact","emailList","setEmailList","parsedDate","setParsedDate","Date","toISOString","flagWrongStartTime","setFlagWrongStartTime","refreshTime","setTime","handleCalendarChange","e","year","split","month","day","slice","handleCreateGroup","setTimeout","closeAndCleanData","handleCheckContact","selected","contact","filter","sel","id","updatedTime","value","currentTime","console","log","parseInt","inputName","current","focus","DatePicker","require","target","color","checked","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Alert,\r\n} from \"reactstrap\";\r\n\r\n//simple bar\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\n//components\r\nimport SelectContact from \"./SelectContact\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\nimport IContact from \"../alias/IContact\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport EmailList from \"./EmailList\";\r\nimport IEmailList from \"../alias/IEmailList\";\r\nimport { zeroLeft } from \"./../helpers/zeroLeft\";\r\nimport { useConference } from \"../contexts/ConferenceContext\";\r\n\r\ninterface IProps {\r\n  show: boolean;\r\n  toggle(): void;\r\n}\r\n\r\nexport const ModalNewConference: React.FC<IProps> = ({ show, toggle }) => {\r\n  const { t } = useTranslation();\r\n  const { contacts } = useContact();\r\n  const { setCreateConference } = useConference();\r\n\r\n  const [isOpenAlert, setIsOpenAlert] = useState(false);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const [name, setName] = useState<string>(\"\");\r\n  const [description, setDescription] = useState<string>(\"\");\r\n  const [startDate, setStartDate] = useState<string>(today().date);\r\n  const [startTime, setStartTime] = useState<string>(today().time);\r\n  const [duration, setDuration] = useState<string>(\"01:00\");\r\n  const [mdCheck, setMdCheck] = useState<boolean>(false);\r\n  const [selectedContact, setSelectedContact] = useState<IContact[]>([]);\r\n  const [emailList, setEmailList] = useState<IEmailList[]>([]);\r\n  const [parsedDate, setParsedDate] = useState(new Date().toISOString());\r\n  const [flagWrongStartTime, setFlagWrongStartTime] = useState<boolean>(false);\r\n\r\n  const refreshTime = () => {\r\n    setTime(today().time);\r\n  }\r\n\r\n  useEffect(refreshTime, [show]);\r\n\r\n  const handleCalendarChange = (e: string) => {\r\n    if(e){\r\n      let year = e.split('-')[0];\r\n      let month = e.split('-')[1];\r\n      let day = e.split('-')[2].slice(0,2);\r\n      setParsedDate(year+'-'+month+'-'+day+'T12:00:00.000Z');\r\n      setStartDate(year+'-'+month+'-'+day);\r\n    }\r\n  }\r\n\r\n  const handleCreateGroup = () => {\r\n    setCreateConference({\r\n      name,\r\n      description,\r\n      startDate,\r\n      startTime,\r\n      duration,\r\n      mdCheck,\r\n      selectedContact,\r\n      emailList,\r\n    });\r\n\r\n    setIsOpenAlert(true);\r\n    setMessage(\"Criando conferÃªncia...\");\r\n\r\n    setTimeout(() => {\r\n      setIsOpenAlert(false);\r\n      setMessage(\"\");\r\n      setSearch(\"\");\r\n      setName(\"\");\r\n      setDescription(\"\");\r\n      setStartDate(today().date);\r\n      setStartTime(today().time);\r\n      setDuration(\"01:00\");\r\n      setMdCheck(false);\r\n      setSelectedContact([]);\r\n      setEmailList([]);\r\n    }, 3000);\r\n    toggle();\r\n  };\r\n\r\n  const closeAndCleanData = () => {\r\n      setMessage(\"\");\r\n      setSearch(\"\");\r\n      setName(\"\");\r\n      setDescription(\"\");\r\n      setStartDate(today().date);\r\n      setStartTime(today().time);\r\n      setDuration(\"01:00\");\r\n      setMdCheck(false);\r\n      setSelectedContact([]);\r\n      setEmailList([]);\r\n      toggle();\r\n  }\r\n\r\n  const handleCheckContact = (selected: boolean, contact: IContact) => {\r\n    if (selected) {\r\n      setSelectedContact([...selectedContact, contact]);\r\n    } else {\r\n      setSelectedContact(\r\n        selectedContact.filter((sel) => {\r\n          if (sel.id === contact.id) {\r\n            return false;\r\n          }\r\n          return true;\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const updatedTime = () => {\r\n    setTime(startTime);\r\n  };\r\n\r\n  useEffect(updatedTime, [startDate]);\r\n\r\n  const setTime = (value: string) => {\r\n    let time = value.split(\":\");\r\n    let currentTime = today().time.split(\":\");\r\n    console.log(startDate);\r\n    console.log(today().date);\r\n    if (startDate === today().date) {\r\n      if(parseInt(time[0]) < parseInt(currentTime[0])) {\r\n        setFlagWrongStartTime(true);\r\n        return;\r\n      }else{\r\n        setFlagWrongStartTime(false);\r\n        setStartTime(value);\r\n      }\r\n\r\n      if(\r\n        parseInt(time[0]) === parseInt(currentTime[0]) &&\r\n        parseInt(time[1]) < parseInt(currentTime[1])\r\n      ){\r\n        setFlagWrongStartTime(true);\r\n        return;\r\n      }else{\r\n        setFlagWrongStartTime(false);\r\n        setStartTime(value);\r\n      }\r\n    }else{\r\n      setFlagWrongStartTime(false);\r\n      setStartTime(value);\r\n    }\r\n  }\r\n  const inputName = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => inputName.current?.focus(), 500);\r\n  }, [show]);\r\n  \r\n  var DatePicker = require(\"reactstrap-date-picker\");\r\n\r\n\r\n  return (\r\n    <Modal isOpen={show} size=\"lg\" centered toggle={toggle}>\r\n      <ModalHeader\r\n        tag=\"h5\"\r\n        className=\"modal-title font-size-16\"\r\n        toggle={toggle}\r\n      >\r\n        {t(\"Create conference\")}\r\n      </ModalHeader>\r\n      <ModalBody className=\"p-4\">\r\n        <Form>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <FormGroup className=\"mb-4\">\r\n                <Label htmlFor=\"name-input\">{t(\"Room name\")}</Label>\r\n                <input\r\n                  ref={inputName}\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"name-input\"\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                  placeholder={t(\"Room name\") + \"...\"}\r\n                />\r\n                {name === \"\" &&\r\n                  <div className={\"mt-2\"} style={{\r\n                  color: \"red\",\r\n                }}>{t(\"The field is required\")}</div>}\r\n              </FormGroup>\r\n              <FormGroup className=\"mb-4\">\r\n                <Label htmlFor=\"description-input\">\r\n                  {t(\"Room description\")}\r\n                </Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"description-input\"\r\n                  value={description}\r\n                  onChange={(e) => setDescription(e.target.value)}\r\n                  placeholder={t(\"Room description\") + \"...\"}\r\n                />\r\n              </FormGroup>\r\n              <div className=\"row\">\r\n                <FormGroup className=\"mb-4 col-6\">\r\n                  <Label htmlFor=\"date-start-input\">{t(\"Starting date\")}</Label>\r\n                  {/* <Input\r\n                    type=\"date\"\r\n                    className=\"form-control\"\r\n                    id=\"date-start-input\"\r\n                    minDate={\"2021-01-22T12:00:00.000Z\"}\r\n                    value={startDate}\r\n                    onChange={(e) => {\r\n                      setStartDate(e.target.value);\r\n                    }}\r\n                  /> */}\r\n                  <DatePicker\r\n                    id=\"example-datepicker\" \r\n                    onChange={(e: any) => handleCalendarChange(e)}\r\n                    minDate={new Date().toISOString()}\r\n                    value={parsedDate}\r\n                    showClearButton={false}\r\n                    />\r\n                  </FormGroup>\r\n                <FormGroup className=\"mb-4 col-6\">\r\n                  <Label htmlFor=\"time-start-input\">{t(\"Starting time\")}</Label>\r\n                  <Input\r\n                    type=\"time\"\r\n                    className=\"form-control\"\r\n                    id=\"time-start-input\"\r\n                    value={startTime}\r\n                    onChange={(e) => {\r\n                      setTime(e.target.value);\r\n                    }}\r\n                  />\r\n                  {flagWrongStartTime === true &&\r\n                  <div className={\"mt-2\"} style={{\r\n                    color: \"red\",\r\n                  }}>{t(\"Invalid time\")}</div>}\r\n                </FormGroup>\r\n                <div>\r\n                  \r\n                </div>\r\n              </div>\r\n              <div className=\"row\">\r\n                <FormGroup className=\"mb-4 col-12\">\r\n                  <Label htmlFor=\"duration-input\">{t(\"Duration\")}</Label>\r\n                  <Input\r\n                    type=\"time\"\r\n                    className=\"form-control\"\r\n                    id=\"date-end-input\"\r\n                    value={duration}\r\n                    onChange={(e) => setDuration(e.target.value)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup className=\"mb-4 col-12\">\r\n                  <div className=\"custom-control custom-checkbox\">\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      className=\"custom-control-input\"\r\n                      onChange={(e) => {\r\n                        setMdCheck(e.target.checked);\r\n                      }}\r\n                      id={\"mdCheck\"}\r\n                      value={mdCheck ? 1 : 0}\r\n                    />\r\n                    <Label className=\"custom-control-label\" htmlFor={\"mdCheck\"}>\r\n                      {t(\"Wait for call administrator to start\")}\r\n                    </Label>\r\n                  </div>\r\n                </FormGroup>\r\n              </div>\r\n            </div>\r\n            <div className=\"col\">\r\n              <FormGroup className=\"mb-4\">\r\n                <Label htmlFor=\"search-input\">{t(\"Conference Members\")}</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control mb-2\"\r\n                  id=\"search-input\"\r\n                  value={search}\r\n                  onChange={(e) => setSearch(e.target.value)}\r\n                  placeholder={t(\"Search users..\")}\r\n                />\r\n                <div className=\"border\">\r\n                  <SimpleBar style={{ height: \"320px\" }}>\r\n                    <div id=\"addContacts\">\r\n                      <SelectContact\r\n                        handleCheckContact={handleCheckContact}\r\n                        contacts={contacts}\r\n                        search={search}\r\n                        checkedContacts={selectedContact}\r\n                      />\r\n                    </div>\r\n                  </SimpleBar>\r\n                </div>\r\n              </FormGroup>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n          <h5 className=\"mb-3\">{t(\"External participants\")}</h5>\r\n          <EmailList emailList={emailList} setEmailList={setEmailList} />\r\n        </Form>\r\n        <Alert isOpen={isOpenAlert} color=\"success\">\r\n          {message}\r\n        </Alert>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button type=\"button\" color=\"link\" onClick={closeAndCleanData}>\r\n          {t(\"Close\")}\r\n        </Button>\r\n        { name !== \"\" && flagWrongStartTime === false ?\r\n        <Button type=\"button\" color=\"primary\" onClick={handleCreateGroup}>\r\n          {t(\"Create conference\")}\r\n        </Button>\r\n          :\r\n          <Button type=\"button\" color=\"primary\" disabled>\r\n          {t(\"Create conference\")}\r\n        </Button>\r\n      }\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\n/* https://app.citrussquad.com/api/v1/read?authUser=698dbe5b-bf91-2a34-fc87-63883c91a94f@test.citrussquad.com&between=11d3a709-8c53-0392-0149-3a3a0e0eeaae@test.citrussquad.com&id=0eb03fc3-4b69-4d5d-a330-ddd63df32541&chatType=chat */"]},"metadata":{},"sourceType":"module"}