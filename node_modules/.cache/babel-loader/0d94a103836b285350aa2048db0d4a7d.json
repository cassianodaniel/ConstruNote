{"ast":null,"code":"import * as React from 'react';\n\nfunction _ref2(copied) {\n  return copied;\n}\n\nfunction useCopy(text) {\n  const [copied, setCopied] = React.useState(false);\n  const reset = React.useRef(() => setCopied(false)); // Resets 'copied' if text changes\n\n  React.useEffect(() => reset.current, [text]);\n\n  function _ref() {\n    return setCopied(true);\n  }\n\n  function _ref3() {\n    return setCopied(_ref2);\n  }\n\n  return {\n    copied,\n    copy: React.useCallback(() => copyToClipboard(text).then(_ref).catch(_ref3), [text]),\n    reset: reset.current\n  };\n}\n/* istanbul ignore next */\n\n\nfunction copyToClipboard(text) {\n  // uses the Async Clipboard API when available. Requires a secure browing\n  // context (i.e. HTTPS)\n  if (navigator.clipboard) return navigator.clipboard.writeText(text); // puts the text to copy into a <span>\n\n  const span = document.createElement('span');\n  span.textContent = text; // preserves consecutive spaces and newlines\n\n  span.style.whiteSpace = 'pre'; // adds the <span> to the page\n\n  document.body.appendChild(span); // makes a selection object representing the range of text selected by the user\n\n  const selection = window.getSelection();\n  if (!selection) return Promise.reject();\n  const range = window.document.createRange();\n  selection.removeAllRanges();\n  range.selectNode(span);\n  selection.addRange(range); // copies text to the clipboard\n\n  try {\n    window.document.execCommand('copy');\n  } catch (err) {\n    return Promise.reject();\n  } // cleans up the dom element and selection\n\n\n  selection.removeAllRanges();\n  window.document.body.removeChild(span); // the Async Clipboard API returns a promise that may reject with `undefined`\n  // so we match that here for consistency\n\n  return Promise.resolve();\n}\n\nexport default useCopy;","map":{"version":3,"sources":["C:/Users/Digivox/dev/DathApp/ConstruNote/node_modules/@react-hook/copy/dist/module/index.js"],"names":["React","_ref2","copied","useCopy","text","setCopied","useState","reset","useRef","useEffect","current","_ref","_ref3","copy","useCallback","copyToClipboard","then","catch","navigator","clipboard","writeText","span","document","createElement","textContent","style","whiteSpace","body","appendChild","selection","window","getSelection","Promise","reject","range","createRange","removeAllRanges","selectNode","addRange","execCommand","err","removeChild","resolve"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,SAASC,KAAT,CAAeC,MAAf,EAAuB;AACrB,SAAOA,MAAP;AACD;;AAED,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,QAAM,CAACF,MAAD,EAASG,SAAT,IAAsBL,KAAK,CAACM,QAAN,CAAe,KAAf,CAA5B;AACA,QAAMC,KAAK,GAAGP,KAAK,CAACQ,MAAN,CAAa,MAAMH,SAAS,CAAC,KAAD,CAA5B,CAAd,CAFqB,CAE+B;;AAEpDL,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAMF,KAAK,CAACG,OAA5B,EAAqC,CAACN,IAAD,CAArC;;AAEA,WAASO,IAAT,GAAgB;AACd,WAAON,SAAS,CAAC,IAAD,CAAhB;AACD;;AAED,WAASO,KAAT,GAAiB;AACf,WAAOP,SAAS,CAACJ,KAAD,CAAhB;AACD;;AAED,SAAO;AACLC,IAAAA,MADK;AAELW,IAAAA,IAAI,EAAEb,KAAK,CAACc,WAAN,CAAkB,MAAMC,eAAe,CAACX,IAAD,CAAf,CAAsBY,IAAtB,CAA2BL,IAA3B,EAAiCM,KAAjC,CAAuCL,KAAvC,CAAxB,EAAuE,CAACR,IAAD,CAAvE,CAFD;AAGLG,IAAAA,KAAK,EAAEA,KAAK,CAACG;AAHR,GAAP;AAKD;AACD;;;AAGA,SAASK,eAAT,CAAyBX,IAAzB,EAA+B;AAC7B;AACA;AACA,MAAIc,SAAS,CAACC,SAAd,EAAyB,OAAOD,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BhB,IAA9B,CAAP,CAHI,CAGwC;;AAErE,QAAMiB,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAb;AACAF,EAAAA,IAAI,CAACG,WAAL,GAAmBpB,IAAnB,CAN6B,CAMJ;;AAEzBiB,EAAAA,IAAI,CAACI,KAAL,CAAWC,UAAX,GAAwB,KAAxB,CAR6B,CAQE;;AAE/BJ,EAAAA,QAAQ,CAACK,IAAT,CAAcC,WAAd,CAA0BP,IAA1B,EAV6B,CAUI;;AAEjC,QAAMQ,SAAS,GAAGC,MAAM,CAACC,YAAP,EAAlB;AACA,MAAI,CAACF,SAAL,EAAgB,OAAOG,OAAO,CAACC,MAAR,EAAP;AAChB,QAAMC,KAAK,GAAGJ,MAAM,CAACR,QAAP,CAAgBa,WAAhB,EAAd;AACAN,EAAAA,SAAS,CAACO,eAAV;AACAF,EAAAA,KAAK,CAACG,UAAN,CAAiBhB,IAAjB;AACAQ,EAAAA,SAAS,CAACS,QAAV,CAAmBJ,KAAnB,EAjB6B,CAiBF;;AAE3B,MAAI;AACFJ,IAAAA,MAAM,CAACR,QAAP,CAAgBiB,WAAhB,CAA4B,MAA5B;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,WAAOR,OAAO,CAACC,MAAR,EAAP;AACD,GAvB4B,CAuB3B;;;AAGFJ,EAAAA,SAAS,CAACO,eAAV;AACAN,EAAAA,MAAM,CAACR,QAAP,CAAgBK,IAAhB,CAAqBc,WAArB,CAAiCpB,IAAjC,EA3B6B,CA2BW;AACxC;;AAEA,SAAOW,OAAO,CAACU,OAAR,EAAP;AACD;;AAED,eAAevC,OAAf","sourcesContent":["import * as React from 'react';\n\nfunction _ref2(copied) {\n  return copied;\n}\n\nfunction useCopy(text) {\n  const [copied, setCopied] = React.useState(false);\n  const reset = React.useRef(() => setCopied(false)); // Resets 'copied' if text changes\n\n  React.useEffect(() => reset.current, [text]);\n\n  function _ref() {\n    return setCopied(true);\n  }\n\n  function _ref3() {\n    return setCopied(_ref2);\n  }\n\n  return {\n    copied,\n    copy: React.useCallback(() => copyToClipboard(text).then(_ref).catch(_ref3), [text]),\n    reset: reset.current\n  };\n}\n/* istanbul ignore next */\n\n\nfunction copyToClipboard(text) {\n  // uses the Async Clipboard API when available. Requires a secure browing\n  // context (i.e. HTTPS)\n  if (navigator.clipboard) return navigator.clipboard.writeText(text); // puts the text to copy into a <span>\n\n  const span = document.createElement('span');\n  span.textContent = text; // preserves consecutive spaces and newlines\n\n  span.style.whiteSpace = 'pre'; // adds the <span> to the page\n\n  document.body.appendChild(span); // makes a selection object representing the range of text selected by the user\n\n  const selection = window.getSelection();\n  if (!selection) return Promise.reject();\n  const range = window.document.createRange();\n  selection.removeAllRanges();\n  range.selectNode(span);\n  selection.addRange(range); // copies text to the clipboard\n\n  try {\n    window.document.execCommand('copy');\n  } catch (err) {\n    return Promise.reject();\n  } // cleans up the dom element and selection\n\n\n  selection.removeAllRanges();\n  window.document.body.removeChild(span); // the Async Clipboard API returns a promise that may reject with `undefined`\n  // so we match that here for consistency\n\n  return Promise.resolve();\n}\n\nexport default useCopy;"]},"metadata":{},"sourceType":"module"}