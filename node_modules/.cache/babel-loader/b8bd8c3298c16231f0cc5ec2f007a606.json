{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Provider } from './injectIntl';\nimport { DEFAULT_INTL_CONFIG, invariantIntlContext, assignUniqueKeysToParts } from '../utils';\nimport { formatMessage as coreFormatMessage, createIntl as coreCreateIntl, createIntlCache } from '@formatjs/intl';\nimport * as shallowEquals_ from 'shallow-equal/objects';\nimport { isFormatXMLElementFn } from 'intl-messageformat';\nvar shallowEquals = shallowEquals_.default || shallowEquals_;\n\nfunction processIntlConfig(config) {\n  return {\n    locale: config.locale,\n    timeZone: config.timeZone,\n    formats: config.formats,\n    textComponent: config.textComponent,\n    messages: config.messages,\n    defaultLocale: config.defaultLocale,\n    defaultFormats: config.defaultFormats,\n    onError: config.onError,\n    wrapRichTextChunksInFragment: config.wrapRichTextChunksInFragment,\n    defaultRichTextElements: config.defaultRichTextElements\n  };\n}\n\nfunction assignUniqueKeysToFormatXMLElementFnArgument(values) {\n  if (!values) {\n    return values;\n  }\n\n  return Object.keys(values).reduce(function (acc, k) {\n    var v = values[k];\n    acc[k] = isFormatXMLElementFn(v) ? assignUniqueKeysToParts(v) : v;\n    return acc;\n  }, {});\n}\n\nvar formatMessage = function (config, formatters, descriptor, rawValues) {\n  var values = assignUniqueKeysToFormatXMLElementFnArgument(rawValues);\n  var chunks = coreFormatMessage(config, formatters, descriptor, values);\n\n  if (Array.isArray(chunks)) {\n    return React.Children.toArray(chunks);\n  }\n\n  return chunks;\n};\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\n\n\nexport var createIntl = function (_a, cache) {\n  var rawDefaultRichTextElements = _a.defaultRichTextElements,\n      config = __rest(_a, [\"defaultRichTextElements\"]);\n\n  var defaultRichTextElements = assignUniqueKeysToFormatXMLElementFnArgument(rawDefaultRichTextElements);\n  var coreIntl = coreCreateIntl(__assign(__assign({}, DEFAULT_INTL_CONFIG), config), cache);\n  return __assign(__assign({}, coreIntl), {\n    formatMessage: formatMessage.bind(null, {\n      locale: coreIntl.locale,\n      timeZone: coreIntl.timeZone,\n      formats: coreIntl.formats,\n      defaultLocale: coreIntl.defaultLocale,\n      defaultFormats: coreIntl.defaultFormats,\n      messages: coreIntl.messages,\n      onError: coreIntl.onError,\n      defaultRichTextElements: defaultRichTextElements\n    }, coreIntl.formatters)\n  });\n};\n\nvar IntlProvider =\n/** @class */\nfunction (_super) {\n  __extends(IntlProvider, _super);\n\n  function IntlProvider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.cache = createIntlCache();\n    _this.state = {\n      cache: _this.cache,\n      intl: createIntl(processIntlConfig(_this.props), _this.cache),\n      prevConfig: processIntlConfig(_this.props)\n    };\n    return _this;\n  }\n\n  IntlProvider.getDerivedStateFromProps = function (props, _a) {\n    var prevConfig = _a.prevConfig,\n        cache = _a.cache;\n    var config = processIntlConfig(props);\n\n    if (!shallowEquals(prevConfig, config)) {\n      return {\n        intl: createIntl(config, cache),\n        prevConfig: config\n      };\n    }\n\n    return null;\n  };\n\n  IntlProvider.prototype.render = function () {\n    invariantIntlContext(this.state.intl);\n    return React.createElement(Provider, {\n      value: this.state.intl\n    }, this.props.children);\n  };\n\n  IntlProvider.displayName = 'IntlProvider';\n  IntlProvider.defaultProps = DEFAULT_INTL_CONFIG;\n  return IntlProvider;\n}(React.PureComponent);\n\nexport default IntlProvider;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/react-intl/lib/src/components/provider.js"],"names":["__assign","__extends","__rest","React","Provider","DEFAULT_INTL_CONFIG","invariantIntlContext","assignUniqueKeysToParts","formatMessage","coreFormatMessage","createIntl","coreCreateIntl","createIntlCache","shallowEquals_","isFormatXMLElementFn","shallowEquals","default","processIntlConfig","config","locale","timeZone","formats","textComponent","messages","defaultLocale","defaultFormats","onError","wrapRichTextChunksInFragment","defaultRichTextElements","assignUniqueKeysToFormatXMLElementFnArgument","values","Object","keys","reduce","acc","k","v","formatters","descriptor","rawValues","chunks","Array","isArray","Children","toArray","_a","cache","rawDefaultRichTextElements","coreIntl","bind","IntlProvider","_super","_this","apply","arguments","state","intl","props","prevConfig","getDerivedStateFromProps","prototype","render","createElement","value","children","displayName","defaultProps","PureComponent"],"mappings":"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","sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Provider } from './injectIntl';\nimport { DEFAULT_INTL_CONFIG, invariantIntlContext, assignUniqueKeysToParts, } from '../utils';\nimport { formatMessage as coreFormatMessage, createIntl as coreCreateIntl, createIntlCache, } from '@formatjs/intl';\nimport * as shallowEquals_ from 'shallow-equal/objects';\nimport { isFormatXMLElementFn, } from 'intl-messageformat';\nvar shallowEquals = shallowEquals_.default || shallowEquals_;\nfunction processIntlConfig(config) {\n    return {\n        locale: config.locale,\n        timeZone: config.timeZone,\n        formats: config.formats,\n        textComponent: config.textComponent,\n        messages: config.messages,\n        defaultLocale: config.defaultLocale,\n        defaultFormats: config.defaultFormats,\n        onError: config.onError,\n        wrapRichTextChunksInFragment: config.wrapRichTextChunksInFragment,\n        defaultRichTextElements: config.defaultRichTextElements,\n    };\n}\nfunction assignUniqueKeysToFormatXMLElementFnArgument(values) {\n    if (!values) {\n        return values;\n    }\n    return Object.keys(values).reduce(function (acc, k) {\n        var v = values[k];\n        acc[k] = isFormatXMLElementFn(v)\n            ? assignUniqueKeysToParts(v)\n            : v;\n        return acc;\n    }, {});\n}\nvar formatMessage = function (config, formatters, descriptor, rawValues) {\n    var values = assignUniqueKeysToFormatXMLElementFnArgument(rawValues);\n    var chunks = coreFormatMessage(config, formatters, descriptor, values);\n    if (Array.isArray(chunks)) {\n        return React.Children.toArray(chunks);\n    }\n    return chunks;\n};\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\nexport var createIntl = function (_a, cache) {\n    var rawDefaultRichTextElements = _a.defaultRichTextElements, config = __rest(_a, [\"defaultRichTextElements\"]);\n    var defaultRichTextElements = assignUniqueKeysToFormatXMLElementFnArgument(rawDefaultRichTextElements);\n    var coreIntl = coreCreateIntl(__assign(__assign({}, DEFAULT_INTL_CONFIG), config), cache);\n    return __assign(__assign({}, coreIntl), { formatMessage: formatMessage.bind(null, {\n            locale: coreIntl.locale,\n            timeZone: coreIntl.timeZone,\n            formats: coreIntl.formats,\n            defaultLocale: coreIntl.defaultLocale,\n            defaultFormats: coreIntl.defaultFormats,\n            messages: coreIntl.messages,\n            onError: coreIntl.onError,\n            defaultRichTextElements: defaultRichTextElements,\n        }, coreIntl.formatters) });\n};\nvar IntlProvider = /** @class */ (function (_super) {\n    __extends(IntlProvider, _super);\n    function IntlProvider() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.cache = createIntlCache();\n        _this.state = {\n            cache: _this.cache,\n            intl: createIntl(processIntlConfig(_this.props), _this.cache),\n            prevConfig: processIntlConfig(_this.props),\n        };\n        return _this;\n    }\n    IntlProvider.getDerivedStateFromProps = function (props, _a) {\n        var prevConfig = _a.prevConfig, cache = _a.cache;\n        var config = processIntlConfig(props);\n        if (!shallowEquals(prevConfig, config)) {\n            return {\n                intl: createIntl(config, cache),\n                prevConfig: config,\n            };\n        }\n        return null;\n    };\n    IntlProvider.prototype.render = function () {\n        invariantIntlContext(this.state.intl);\n        return React.createElement(Provider, { value: this.state.intl }, this.props.children);\n    };\n    IntlProvider.displayName = 'IntlProvider';\n    IntlProvider.defaultProps = DEFAULT_INTL_CONFIG;\n    return IntlProvider;\n}(React.PureComponent));\nexport default IntlProvider;\n"]},"metadata":{},"sourceType":"module"}