{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar LtxParser = require('ltx/lib/parsers/ltx');\n\nvar Element = require('./Element');\n\nvar EventEmitter = require('events');\n\nvar XMLError = require('./XMLError');\n\nvar Parser = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Parser, _EventEmitter);\n\n  var _super = _createSuper(Parser);\n\n  function Parser() {\n    var _this;\n\n    _classCallCheck(this, Parser);\n\n    _this = _super.call(this);\n    var parser = new LtxParser();\n    _this.root = null;\n    _this.cursor = null;\n    parser.on('startElement', _this.onStartElement.bind(_assertThisInitialized(_this)));\n    parser.on('endElement', _this.onEndElement.bind(_assertThisInitialized(_this)));\n    parser.on('text', _this.onText.bind(_assertThisInitialized(_this)));\n    _this.parser = parser;\n    return _this;\n  }\n\n  _createClass(Parser, [{\n    key: \"onStartElement\",\n    value: function onStartElement(name, attrs) {\n      var element = new Element(name, attrs);\n      var root = this.root,\n          cursor = this.cursor;\n\n      if (!root) {\n        this.root = element;\n        this.emit('start', element);\n      } else if (cursor !== root) {\n        cursor.append(element);\n      }\n\n      this.cursor = element;\n    }\n  }, {\n    key: \"onEndElement\",\n    value: function onEndElement(name) {\n      var root = this.root,\n          cursor = this.cursor;\n\n      if (name !== cursor.name) {\n        // <foo></bar>\n        this.emit('error', new XMLError(\"\".concat(cursor.name, \" must be closed.\")));\n        return;\n      }\n\n      if (cursor === root) {\n        this.emit('end', root);\n        return;\n      }\n\n      if (!cursor.parent) {\n        cursor.parent = root;\n        this.emit('element', cursor);\n        this.cursor = root;\n        return;\n      }\n\n      this.cursor = cursor.parent;\n    }\n  }, {\n    key: \"onText\",\n    value: function onText(str) {\n      var cursor = this.cursor;\n\n      if (!cursor) {\n        this.emit('error', new XMLError(\"\".concat(str, \" must be a child.\")));\n        return;\n      }\n\n      cursor.t(str);\n    }\n  }, {\n    key: \"write\",\n    value: function write(data) {\n      this.parser.write(data);\n    }\n  }, {\n    key: \"end\",\n    value: function end(data) {\n      if (data) {\n        this.parser.write(data);\n      }\n    }\n  }]);\n\n  return Parser;\n}(EventEmitter);\n\nParser.XMLError = XMLError;\nmodule.exports = Parser;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/xml/lib/Parser.js"],"names":["LtxParser","require","Element","EventEmitter","XMLError","Parser","parser","root","cursor","on","onStartElement","bind","onEndElement","onText","name","attrs","element","emit","append","parent","str","t","data","write","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,qBAAD,CAAzB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAME,YAAY,GAAGF,OAAO,CAAC,QAAD,CAA5B;;AACA,IAAMG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAxB;;IAEMI,M;;;;;AACJ,oBAAc;AAAA;;AAAA;;AACZ;AACA,QAAMC,MAAM,GAAG,IAAIN,SAAJ,EAAf;AACA,UAAKO,IAAL,GAAY,IAAZ;AACA,UAAKC,MAAL,GAAc,IAAd;AAEAF,IAAAA,MAAM,CAACG,EAAP,CAAU,cAAV,EAA0B,MAAKC,cAAL,CAAoBC,IAApB,+BAA1B;AACAL,IAAAA,MAAM,CAACG,EAAP,CAAU,YAAV,EAAwB,MAAKG,YAAL,CAAkBD,IAAlB,+BAAxB;AACAL,IAAAA,MAAM,CAACG,EAAP,CAAU,MAAV,EAAkB,MAAKI,MAAL,CAAYF,IAAZ,+BAAlB;AAEA,UAAKL,MAAL,GAAcA,MAAd;AAVY;AAWb;;;;mCAEcQ,I,EAAMC,K,EAAO;AAC1B,UAAMC,OAAO,GAAG,IAAId,OAAJ,CAAYY,IAAZ,EAAkBC,KAAlB,CAAhB;AAD0B,UAGnBR,IAHmB,GAGH,IAHG,CAGnBA,IAHmB;AAAA,UAGbC,MAHa,GAGH,IAHG,CAGbA,MAHa;;AAK1B,UAAI,CAACD,IAAL,EAAW;AACT,aAAKA,IAAL,GAAYS,OAAZ;AACA,aAAKC,IAAL,CAAU,OAAV,EAAmBD,OAAnB;AACD,OAHD,MAGO,IAAIR,MAAM,KAAKD,IAAf,EAAqB;AAC1BC,QAAAA,MAAM,CAACU,MAAP,CAAcF,OAAd;AACD;;AAED,WAAKR,MAAL,GAAcQ,OAAd;AACD;;;iCAEYF,I,EAAM;AAAA,UACVP,IADU,GACM,IADN,CACVA,IADU;AAAA,UACJC,MADI,GACM,IADN,CACJA,MADI;;AAEjB,UAAIM,IAAI,KAAKN,MAAM,CAACM,IAApB,EAA0B;AACxB;AACA,aAAKG,IAAL,CAAU,OAAV,EAAmB,IAAIb,QAAJ,WAAgBI,MAAM,CAACM,IAAvB,sBAAnB;AACA;AACD;;AAED,UAAIN,MAAM,KAAKD,IAAf,EAAqB;AACnB,aAAKU,IAAL,CAAU,KAAV,EAAiBV,IAAjB;AACA;AACD;;AAED,UAAI,CAACC,MAAM,CAACW,MAAZ,EAAoB;AAClBX,QAAAA,MAAM,CAACW,MAAP,GAAgBZ,IAAhB;AACA,aAAKU,IAAL,CAAU,SAAV,EAAqBT,MAArB;AACA,aAAKA,MAAL,GAAcD,IAAd;AACA;AACD;;AAED,WAAKC,MAAL,GAAcA,MAAM,CAACW,MAArB;AACD;;;2BAEMC,G,EAAK;AAAA,UACHZ,MADG,GACO,IADP,CACHA,MADG;;AAEV,UAAI,CAACA,MAAL,EAAa;AACX,aAAKS,IAAL,CAAU,OAAV,EAAmB,IAAIb,QAAJ,WAAgBgB,GAAhB,uBAAnB;AACA;AACD;;AAEDZ,MAAAA,MAAM,CAACa,CAAP,CAASD,GAAT;AACD;;;0BAEKE,I,EAAM;AACV,WAAKhB,MAAL,CAAYiB,KAAZ,CAAkBD,IAAlB;AACD;;;wBAEGA,I,EAAM;AACR,UAAIA,IAAJ,EAAU;AACR,aAAKhB,MAAL,CAAYiB,KAAZ,CAAkBD,IAAlB;AACD;AACF;;;;EAtEkBnB,Y;;AAyErBE,MAAM,CAACD,QAAP,GAAkBA,QAAlB;AAEAoB,MAAM,CAACC,OAAP,GAAiBpB,MAAjB","sourcesContent":["'use strict'\n\nconst LtxParser = require('ltx/lib/parsers/ltx')\nconst Element = require('./Element')\nconst EventEmitter = require('events')\nconst XMLError = require('./XMLError')\n\nclass Parser extends EventEmitter {\n  constructor() {\n    super()\n    const parser = new LtxParser()\n    this.root = null\n    this.cursor = null\n\n    parser.on('startElement', this.onStartElement.bind(this))\n    parser.on('endElement', this.onEndElement.bind(this))\n    parser.on('text', this.onText.bind(this))\n\n    this.parser = parser\n  }\n\n  onStartElement(name, attrs) {\n    const element = new Element(name, attrs)\n\n    const {root, cursor} = this\n\n    if (!root) {\n      this.root = element\n      this.emit('start', element)\n    } else if (cursor !== root) {\n      cursor.append(element)\n    }\n\n    this.cursor = element\n  }\n\n  onEndElement(name) {\n    const {root, cursor} = this\n    if (name !== cursor.name) {\n      // <foo></bar>\n      this.emit('error', new XMLError(`${cursor.name} must be closed.`))\n      return\n    }\n\n    if (cursor === root) {\n      this.emit('end', root)\n      return\n    }\n\n    if (!cursor.parent) {\n      cursor.parent = root\n      this.emit('element', cursor)\n      this.cursor = root\n      return\n    }\n\n    this.cursor = cursor.parent\n  }\n\n  onText(str) {\n    const {cursor} = this\n    if (!cursor) {\n      this.emit('error', new XMLError(`${str} must be a child.`))\n      return\n    }\n\n    cursor.t(str)\n  }\n\n  write(data) {\n    this.parser.write(data)\n  }\n\n  end(data) {\n    if (data) {\n      this.parser.write(data)\n    }\n  }\n}\n\nParser.XMLError = XMLError\n\nmodule.exports = Parser\n"]},"metadata":{},"sourceType":"script"}