{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\contexts\\\\ChatContext.tsx\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport { activeChat as activeChatData } from \"./../data/chat\"; //alias\n\nimport ChatType from \"../enuns/ChatType\";\nexport const ChatContext = createContext({});\nexport const ChatProvider = ({\n  children\n}) => {\n  const [showChat, setShowChat] = useState(false);\n  const [activeChat, setActiveChat] = useState(activeChatData);\n  const [chats, setChats] = useState([]);\n  const [groups, setGroups] = useState([]);\n  const [contacts, setContacts] = useState([]);\n\n  const openChat = obj => {\n    setShowChat(true);\n    setChats(chats.map(item => {\n      if (item.jid === obj.jid) {\n        item.unRead = 0;\n        item.messageLoaded = true;\n        setActiveChat(item);\n      }\n\n      return item;\n    }));\n  };\n\n  const openGroup = obj => {\n    let find = false;\n    setChats(chats.map(item => {\n      if (item.jid === obj.jid) {\n        item.unRead = 0;\n        item.messageLoaded = true;\n        setActiveChat(item);\n        find = true;\n      }\n\n      return item;\n    }));\n\n    if (!find) {\n      let newChat = {\n        id: obj.jid.split(\"@\")[0],\n        jid: obj.jid,\n        name: obj.name,\n        profilePicture: obj.profilePicture,\n        messageLoaded: true,\n        unRead: 1,\n        chatType: ChatType.GROUP,\n        inputMessage: \"\",\n        isTyping: false,\n        messages: []\n      };\n      setShowChat(true);\n      setActiveChat(newChat);\n    }\n  };\n\n  const openContact = obj => {\n    let find = false;\n    setChats(chats.map(item => {\n      if (item.jid === obj.jid) {\n        item.unRead = 0;\n        item.messageLoaded = true;\n        setActiveChat(item);\n        find = true;\n      }\n\n      return item;\n    }));\n\n    if (!find) {\n      let newChat = {\n        id: obj.id,\n        jid: obj.jid,\n        name: obj.name,\n        email: obj.email,\n        department: obj.department,\n        profilePicture: obj.profilePicture,\n        status: obj.status,\n        messageLoaded: true,\n        unRead: 1,\n        chatType: ChatType.USER,\n        inputMessage: \"\",\n        isTyping: false,\n        messages: []\n      };\n      setShowChat(true);\n      setActiveChat(newChat);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ChatContext.Provider, {\n    value: {\n      showChat,\n      setShowChat,\n      activeChat,\n      setActiveChat,\n      openChat,\n      openGroup,\n      openContact,\n      chats,\n      setChats,\n      groups,\n      setGroups,\n      contacts,\n      setContacts\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport function useChat() {\n  return useContext(ChatContext);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/contexts/ChatContext.tsx"],"names":["React","createContext","useContext","useState","activeChat","activeChatData","ChatType","ChatContext","ChatProvider","children","showChat","setShowChat","setActiveChat","chats","setChats","groups","setGroups","contacts","setContacts","openChat","obj","map","item","jid","unRead","messageLoaded","openGroup","find","newChat","id","split","name","profilePicture","chatType","GROUP","inputMessage","isTyping","messages","openContact","email","department","status","USER","useChat"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,SAASC,UAAU,IAAIC,cAAvB,QAA6C,gBAA7C,C,CAEA;;AAIA,OAAOC,QAAP,MAAqB,mBAArB;AAkBA,OAAO,MAAMC,WAAW,GAAGN,aAAa,CACtC,EADsC,CAAjC;AAIP,OAAO,MAAMO,YAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACC,UAAD,EAAaQ,aAAb,IAA8BT,QAAQ,CAACE,cAAD,CAA5C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAU,EAAV,CAAlC;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAW,EAAX,CAApC;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAa,EAAb,CAAxC;;AAEA,QAAMgB,QAAQ,GAAIC,GAAD,IAAgB;AAC/BT,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAG,IAAAA,QAAQ,CACND,KAAK,CAACQ,GAAN,CAAWC,IAAD,IAAU;AAClB,UAAIA,IAAI,CAACC,GAAL,KAAaH,GAAG,CAACG,GAArB,EAA0B;AACxBD,QAAAA,IAAI,CAACE,MAAL,GAAc,CAAd;AACAF,QAAAA,IAAI,CAACG,aAAL,GAAqB,IAArB;AACAb,QAAAA,aAAa,CAACU,IAAD,CAAb;AACD;;AACD,aAAOA,IAAP;AACD,KAPD,CADM,CAAR;AAUD,GAZD;;AAcA,QAAMI,SAAS,GAAIN,GAAD,IAAiB;AACjC,QAAIO,IAAI,GAAG,KAAX;AAEAb,IAAAA,QAAQ,CACND,KAAK,CAACQ,GAAN,CAAWC,IAAD,IAAU;AAClB,UAAIA,IAAI,CAACC,GAAL,KAAaH,GAAG,CAACG,GAArB,EAA0B;AACxBD,QAAAA,IAAI,CAACE,MAAL,GAAc,CAAd;AACAF,QAAAA,IAAI,CAACG,aAAL,GAAqB,IAArB;AACAb,QAAAA,aAAa,CAACU,IAAD,CAAb;AACAK,QAAAA,IAAI,GAAG,IAAP;AACD;;AACD,aAAOL,IAAP;AACD,KARD,CADM,CAAR;;AAYA,QAAI,CAACK,IAAL,EAAW;AACT,UAAIC,OAAO,GAAG;AACZC,QAAAA,EAAE,EAAET,GAAG,CAACG,GAAJ,CAAQO,KAAR,CAAc,GAAd,EAAmB,CAAnB,CADQ;AAEZP,QAAAA,GAAG,EAAEH,GAAG,CAACG,GAFG;AAGZQ,QAAAA,IAAI,EAAEX,GAAG,CAACW,IAHE;AAIZC,QAAAA,cAAc,EAAEZ,GAAG,CAACY,cAJR;AAKZP,QAAAA,aAAa,EAAE,IALH;AAMZD,QAAAA,MAAM,EAAE,CANI;AAOZS,QAAAA,QAAQ,EAAE3B,QAAQ,CAAC4B,KAPP;AAQZC,QAAAA,YAAY,EAAE,EARF;AASZC,QAAAA,QAAQ,EAAE,KATE;AAUZC,QAAAA,QAAQ,EAAE;AAVE,OAAd;AAYA1B,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAC,MAAAA,aAAa,CAACgB,OAAD,CAAb;AACD;AACF,GA/BD;;AAiCA,QAAMU,WAAW,GAAIlB,GAAD,IAAmB;AACrC,QAAIO,IAAI,GAAG,KAAX;AAEAb,IAAAA,QAAQ,CACND,KAAK,CAACQ,GAAN,CAAWC,IAAD,IAAU;AAClB,UAAIA,IAAI,CAACC,GAAL,KAAaH,GAAG,CAACG,GAArB,EAA0B;AACxBD,QAAAA,IAAI,CAACE,MAAL,GAAc,CAAd;AACAF,QAAAA,IAAI,CAACG,aAAL,GAAqB,IAArB;AACAb,QAAAA,aAAa,CAACU,IAAD,CAAb;AACAK,QAAAA,IAAI,GAAG,IAAP;AACD;;AACD,aAAOL,IAAP;AACD,KARD,CADM,CAAR;;AAYA,QAAI,CAACK,IAAL,EAAW;AACT,UAAIC,OAAc,GAAG;AACnBC,QAAAA,EAAE,EAAET,GAAG,CAACS,EADW;AAEnBN,QAAAA,GAAG,EAAEH,GAAG,CAACG,GAFU;AAGnBQ,QAAAA,IAAI,EAAEX,GAAG,CAACW,IAHS;AAInBQ,QAAAA,KAAK,EAAEnB,GAAG,CAACmB,KAJQ;AAKnBC,QAAAA,UAAU,EAAEpB,GAAG,CAACoB,UALG;AAMnBR,QAAAA,cAAc,EAAEZ,GAAG,CAACY,cAND;AAOnBS,QAAAA,MAAM,EAAErB,GAAG,CAACqB,MAPO;AAQnBhB,QAAAA,aAAa,EAAE,IARI;AASnBD,QAAAA,MAAM,EAAE,CATW;AAUnBS,QAAAA,QAAQ,EAAE3B,QAAQ,CAACoC,IAVA;AAWnBP,QAAAA,YAAY,EAAE,EAXK;AAYnBC,QAAAA,QAAQ,EAAE,KAZS;AAanBC,QAAAA,QAAQ,EAAE;AAbS,OAArB;AAeA1B,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAC,MAAAA,aAAa,CAACgB,OAAD,CAAb;AACD;AACF,GAlCD;;AAoCA,sBACE,oBAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLlB,MAAAA,QADK;AAELC,MAAAA,WAFK;AAGLP,MAAAA,UAHK;AAILQ,MAAAA,aAJK;AAKLO,MAAAA,QALK;AAMLO,MAAAA,SANK;AAOLY,MAAAA,WAPK;AAQLzB,MAAAA,KARK;AASLC,MAAAA,QATK;AAULC,MAAAA,MAVK;AAWLC,MAAAA,SAXK;AAYLC,MAAAA,QAZK;AAaLC,MAAAA;AAbK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAiBGT,QAjBH,CADF;AAqBD,CA/GM;AAiHP,OAAO,SAASkC,OAAT,GAAmB;AACxB,SAAOzC,UAAU,CAACK,WAAD,CAAjB;AACD","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport { activeChat as activeChatData } from \"./../data/chat\";\r\n\r\n//alias\r\nimport IChat from \"../alias/IChat\";\r\nimport IGroup from \"./../alias/IGroup\";\r\nimport IContact from \"./../alias/IContact\";\r\nimport ChatType from \"../enuns/ChatType\";\r\n\r\ninterface IChatContextData {\r\n  showChat: boolean;\r\n  setShowChat(value: boolean): void;\r\n  activeChat: IChat;\r\n  setActiveChat(value: IChat): void;\r\n  openChat(obj: IChat): void;\r\n  openGroup(obj: IGroup): void;\r\n  openContact(obj: IContact): void;\r\n  chats: IChat[];\r\n  setChats(value: IChat[]): void;\r\n  groups: IGroup[];\r\n  setGroups(value: IGroup[]): void;\r\n  contacts: IContact[];\r\n  setContacts(value: IContact[]): void;\r\n}\r\n\r\nexport const ChatContext = createContext<IChatContextData>(\r\n  {} as IChatContextData\r\n);\r\n\r\nexport const ChatProvider: React.FC = ({ children }) => {\r\n  const [showChat, setShowChat] = useState(false);\r\n  const [activeChat, setActiveChat] = useState(activeChatData);\r\n  const [chats, setChats] = useState<IChat[]>([]);\r\n  const [groups, setGroups] = useState<IGroup[]>([]);\r\n  const [contacts, setContacts] = useState<IContact[]>([]);\r\n\r\n  const openChat = (obj: IChat) => {\r\n    setShowChat(true);\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.jid === obj.jid) {\r\n          item.unRead = 0;\r\n          item.messageLoaded = true;\r\n          setActiveChat(item);\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  const openGroup = (obj: IGroup) => {\r\n    let find = false;\r\n\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.jid === obj.jid) {\r\n          item.unRead = 0;\r\n          item.messageLoaded = true;\r\n          setActiveChat(item);\r\n          find = true;\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n\r\n    if (!find) {\r\n      let newChat = {\r\n        id: obj.jid.split(\"@\")[0],\r\n        jid: obj.jid,\r\n        name: obj.name,\r\n        profilePicture: obj.profilePicture,\r\n        messageLoaded: true,\r\n        unRead: 1,\r\n        chatType: ChatType.GROUP,\r\n        inputMessage: \"\",\r\n        isTyping: false,\r\n        messages: [],\r\n      };\r\n      setShowChat(true);\r\n      setActiveChat(newChat);\r\n    }\r\n  };\r\n\r\n  const openContact = (obj: IContact) => {\r\n    let find = false;\r\n\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.jid === obj.jid) {\r\n          item.unRead = 0;\r\n          item.messageLoaded = true;\r\n          setActiveChat(item);\r\n          find = true;\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n\r\n    if (!find) {\r\n      let newChat: IChat = {\r\n        id: obj.id,\r\n        jid: obj.jid,\r\n        name: obj.name,\r\n        email: obj.email,\r\n        department: obj.department,\r\n        profilePicture: obj.profilePicture,\r\n        status: obj.status,\r\n        messageLoaded: true,\r\n        unRead: 1,\r\n        chatType: ChatType.USER,\r\n        inputMessage: \"\",\r\n        isTyping: false,\r\n        messages: [],\r\n      };\r\n      setShowChat(true);\r\n      setActiveChat(newChat);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        showChat,\r\n        setShowChat,\r\n        activeChat,\r\n        setActiveChat,\r\n        openChat,\r\n        openGroup,\r\n        openContact,\r\n        chats,\r\n        setChats,\r\n        groups,\r\n        setGroups,\r\n        contacts,\r\n        setContacts,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useChat() {\r\n  return useContext(ChatContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}