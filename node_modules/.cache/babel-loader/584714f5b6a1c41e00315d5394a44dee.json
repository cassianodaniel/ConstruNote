{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\SelectMember.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { Input, Label } from \"reactstrap\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport { SearchContact } from \"../helpers/SearchContact\";\nimport sortContactGroup from \"../helpers/SortContactGroup\";\n\nconst SelectMember = ({\n  search,\n  handleCheckContact\n}) => {\n  var _actualGroup$members;\n\n  const {\n    checkedMembers,\n    setCheckedMembers,\n    contacts\n  } = useContact();\n  const {\n    groups\n  } = useGroup();\n  const {\n    activeChat\n  } = useChat();\n  let actualGroup = groups.find(grp => grp.groupId === activeChat.groupId);\n  let actualGroupMembersId = actualGroup === null || actualGroup === void 0 ? void 0 : (_actualGroup$members = actualGroup.members) === null || _actualGroup$members === void 0 ? void 0 : _actualGroup$members.map(mbrs => {\n    return mbrs.userId;\n  });\n  let [contactStorage, setContactStorage] = useState([]);\n\n  const init = () => {\n    setContactStorage(contacts.filter(ctc => {\n      if (actualGroupMembersId === null || actualGroupMembersId === void 0 ? void 0 : actualGroupMembersId.find(id => id === ctc.id)) {\n        return false;\n      }\n\n      return true;\n    }));\n  };\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, sortContactGroup(SearchContact(contactStorage, search ? search : \"\")).map((contact, key) => /*#__PURE__*/React.createElement(\"div\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ml-3 pl-1 font-weight-bold text-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, contact.group), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list-unstyled contact-list mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, contact.children.map((child, keyChild) => /*#__PURE__*/React.createElement(\"li\", {\n    key: keyChild,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"custom-control custom-checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"checkbox\",\n    className: \"custom-control-input\",\n    onChange: e => {\n      handleCheckContact(e.target.checked, child);\n      setCheckedMembers(checkedMembers.includes(child) ? checkedMembers.filter(checked => checked !== child) : [...checkedMembers, child]);\n      console.log('checkedMembers :' + JSON.stringify(checkedMembers));\n    },\n    id: \"memberCheck\" + child.id,\n    value: child.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    className: \"custom-control-label\",\n    htmlFor: \"memberCheck\" + child.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 19\n    }\n  }, child.name))))))));\n};\n\nexport default SelectMember;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/SelectMember.tsx"],"names":["React","useEffect","useState","Input","Label","useGroup","useChat","useContact","SearchContact","sortContactGroup","SelectMember","search","handleCheckContact","checkedMembers","setCheckedMembers","contacts","groups","activeChat","actualGroup","find","grp","groupId","actualGroupMembersId","members","map","mbrs","userId","contactStorage","setContactStorage","init","filter","ctc","id","contact","key","group","children","child","keyChild","e","target","checked","includes","console","log","JSON","stringify","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,YAA7B;AAEA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;;AAOA,MAAMC,YAA8B,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAoC;AAAA;;AACzE,QAAM;AACJC,IAAAA,cADI;AAEJC,IAAAA,iBAFI;AAGJC,IAAAA;AAHI,MAIFR,UAAU,EAJd;AAKA,QAAM;AAAES,IAAAA;AAAF,MAAaX,QAAQ,EAA3B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAiBX,OAAO,EAA9B;AAEA,MAAIY,WAAW,GAAGF,MAAM,CAACG,IAAP,CAAaC,GAAD,IAC5BA,GAAG,CAACC,OAAJ,KAAgBJ,UAAU,CAACI,OADX,CAAlB;AAIA,MAAIC,oBAAoB,GAAGJ,WAAH,aAAGA,WAAH,+CAAGA,WAAW,CAAEK,OAAhB,yDAAG,qBAAsBC,GAAtB,CAA2BC,IAAD,IAAU;AAC7D,WAAOA,IAAI,CAACC,MAAZ;AACD,GAF0B,CAA3B;AAIA,MAAI,CAACC,cAAD,EAAiBC,iBAAjB,IAAsC1B,QAAQ,CAAa,EAAb,CAAlD;;AACA,QAAM2B,IAAI,GAAG,MAAM;AACjBD,IAAAA,iBAAiB,CACfb,QAAQ,CAACe,MAAT,CAAiBC,GAAD,IAAS;AACvB,UAAGT,oBAAH,aAAGA,oBAAH,uBAAGA,oBAAoB,CAAEH,IAAtB,CAA4Ba,EAAD,IAASA,EAAE,KAAKD,GAAG,CAACC,EAA/C,CAAH,EAAuD;AACrD,eAAO,KAAP;AACD;;AACD,aAAO,IAAP;AACD,KALD,CADe,CAAjB;AAQD,GATD;;AAWA/B,EAAAA,SAAS,CAAC4B,IAAD,EAAO,EAAP,CAAT;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGpB,gBAAgB,CACfD,aAAa,CAACmB,cAAD,EAAiBhB,MAAM,GAAGA,MAAH,GAAY,EAAnC,CADE,CAAhB,CAECa,GAFD,CAEK,CAACS,OAAD,EAAUC,GAAV,kBACJ;AAAK,IAAA,GAAG,EAAEA,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,yCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,OAAO,CAACE,KADX,CADF,eAKE;AAAI,IAAA,SAAS,EAAC,iCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,OAAO,CAACG,QAAR,CAAiBZ,GAAjB,CAAqB,CAACa,KAAD,EAAQC,QAAR,kBACpB;AAAI,IAAA,GAAG,EAAEA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,SAAS,EAAC,sBAFZ;AAGE,IAAA,QAAQ,EAAGC,CAAD,IAAO;AACf3B,MAAAA,kBAAkB,CAAC2B,CAAC,CAACC,MAAF,CAASC,OAAV,EAAmBJ,KAAnB,CAAlB;AACAvB,MAAAA,iBAAiB,CACfD,cAAc,CAAC6B,QAAf,CAAwBL,KAAxB,IAAiCxB,cAAc,CAACiB,MAAf,CAAuBW,OAAD,IAAaA,OAAO,KAAKJ,KAA/C,CAAjC,GAA0F,CAAC,GAAGxB,cAAJ,EAAoBwB,KAApB,CAD3E,CAAjB;AAEAM,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBC,IAAI,CAACC,SAAL,CAAejC,cAAf,CAAjC;AACD,KARH;AASE,IAAA,EAAE,EAAE,gBAAgBwB,KAAK,CAACL,EAT5B;AAUE,IAAA,KAAK,EAAEK,KAAK,CAACU,IAVf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAaE,oBAAC,KAAD;AACE,IAAA,SAAS,EAAC,sBADZ;AAEE,IAAA,OAAO,EAAE,gBAAgBV,KAAK,CAACL,EAFjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGK,KAAK,CAACU,IAJT,CAbF,CADF,CADD,CADH,CALF,CAHD,CADH,CADF;AAwCD,CAxED;;AA0EA,eAAerC,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Input, Label } from \"reactstrap\";\r\nimport IContact from \"../alias/IContact\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport { SearchContact } from \"../helpers/SearchContact\";\r\nimport sortContactGroup from \"../helpers/SortContactGroup\";\r\n\r\ninterface IProps {\r\n  search?: string;\r\n  handleCheckContact(selected: boolean, contact: IContact): void;\r\n}\r\n\r\nconst SelectMember: React.FC<IProps> = ({ search, handleCheckContact }) => {\r\n  const {\r\n    checkedMembers,\r\n    setCheckedMembers,\r\n    contacts,\r\n  } = useContact();\r\n  const { groups } = useGroup();\r\n  const { activeChat } = useChat();\r\n  \r\n  let actualGroup = groups.find((grp) => (\r\n    grp.groupId === activeChat.groupId\r\n  ));  \r\n\r\n  let actualGroupMembersId = actualGroup?.members?.map((mbrs) => {\r\n    return mbrs.userId;\r\n  });\r\n\r\n  let [contactStorage, setContactStorage] = useState<IContact[]>([]);\r\n  const init = () => {\r\n    setContactStorage(\r\n      contacts.filter((ctc) => {\r\n        if(actualGroupMembersId?.find((id) => (id === ctc.id))){\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    ));\r\n  }\r\n  \r\n  useEffect(init, []);\r\n\r\n  \r\n  return (\r\n    <div className=\"mt-2\">\r\n      {sortContactGroup(\r\n        SearchContact(contactStorage, search ? search : \"\")\r\n      ).map((contact, key) => (\r\n        <div key={key}>\r\n          <div className=\"ml-3 pl-1 font-weight-bold text-primary\">\r\n            {contact.group}\r\n          </div>\r\n\r\n          <ul className=\"list-unstyled contact-list mb-2\">\r\n            {contact.children.map((child, keyChild) => (\r\n              <li key={keyChild}>\r\n                <div className=\"custom-control custom-checkbox\">\r\n                  <Input\r\n                    type=\"checkbox\"\r\n                    className=\"custom-control-input\"\r\n                    onChange={(e) => {\r\n                      handleCheckContact(e.target.checked, child);\r\n                      setCheckedMembers(\r\n                        checkedMembers.includes(child) ? checkedMembers.filter((checked) => checked !== child ) : [...checkedMembers, child]);\r\n                      console.log('checkedMembers :' + JSON.stringify(checkedMembers));\r\n                    }}\r\n                    id={\"memberCheck\" + child.id}\r\n                    value={child.name}\r\n                  />\r\n                  <Label\r\n                    className=\"custom-control-label\"\r\n                    htmlFor={\"memberCheck\" + child.id}\r\n                  >\r\n                    {child.name}\r\n                  </Label>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectMember;\r\n"]},"metadata":{},"sourceType":"module"}