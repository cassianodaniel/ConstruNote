{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport Portal from \"rc-util/es/PortalWrapper\";\nimport Dialog from './Dialog'; // fix issue #10656\n\n/*\n * getContainer remarks\n * Custom container should not be return, because in the Portal component, it will remove the\n * return container element here, if the custom container is the only child of it's component,\n * like issue #10656, It will has a conflict with removeChild method in react-dom.\n * So here should add a child (div element) to custom container.\n * */\n\nvar DialogWrap = function DialogWrap(props) {\n  var visible = props.visible,\n      getContainer = props.getContainer,\n      forceRender = props.forceRender,\n      destroyOnClose = props.destroyOnClose,\n      _afterClose = props.afterClose;\n\n  var _React$useState = React.useState(visible),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      animatedVisible = _React$useState2[0],\n      setAnimatedVisible = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (visible) {\n      setAnimatedVisible(true);\n    }\n  }, [visible]); // 渲染在当前 dom 里；\n\n  if (getContainer === false) {\n    return React.createElement(Dialog, Object.assign({}, props, {\n      getOpenCount: function getOpenCount() {\n        return 2;\n      }\n    }));\n  } // Destroy on close will remove wrapped div\n\n\n  if (!forceRender && destroyOnClose && !animatedVisible) {\n    return null;\n  }\n\n  return React.createElement(Portal, {\n    visible: visible,\n    forceRender: forceRender,\n    getContainer: getContainer\n  }, function (childProps) {\n    return React.createElement(Dialog, Object.assign({}, props, {\n      afterClose: function afterClose() {\n        _afterClose === null || _afterClose === void 0 ? void 0 : _afterClose();\n        setAnimatedVisible(false);\n      }\n    }, childProps));\n  });\n};\n\nDialogWrap.displayName = 'Dialog';\nexport default DialogWrap;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/rc-dialog/es/DialogWrap.js"],"names":["_slicedToArray","React","Portal","Dialog","DialogWrap","props","visible","getContainer","forceRender","destroyOnClose","_afterClose","afterClose","_React$useState","useState","_React$useState2","animatedVisible","setAnimatedVisible","useEffect","createElement","Object","assign","getOpenCount","childProps","displayName"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAA+B;;AAE/B;;;;;;;;AAQA,IAAIC,UAAU,GAAG,SAASA,UAAT,CAAoBC,KAApB,EAA2B;AAC1C,MAAIC,OAAO,GAAGD,KAAK,CAACC,OAApB;AAAA,MACIC,YAAY,GAAGF,KAAK,CAACE,YADzB;AAAA,MAEIC,WAAW,GAAGH,KAAK,CAACG,WAFxB;AAAA,MAGIC,cAAc,GAAGJ,KAAK,CAACI,cAH3B;AAAA,MAIIC,WAAW,GAAGL,KAAK,CAACM,UAJxB;;AAMA,MAAIC,eAAe,GAAGX,KAAK,CAACY,QAAN,CAAeP,OAAf,CAAtB;AAAA,MACIQ,gBAAgB,GAAGd,cAAc,CAACY,eAAD,EAAkB,CAAlB,CADrC;AAAA,MAEIG,eAAe,GAAGD,gBAAgB,CAAC,CAAD,CAFtC;AAAA,MAGIE,kBAAkB,GAAGF,gBAAgB,CAAC,CAAD,CAHzC;;AAKAb,EAAAA,KAAK,CAACgB,SAAN,CAAgB,YAAY;AAC1B,QAAIX,OAAJ,EAAa;AACXU,MAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;AACF,GAJD,EAIG,CAACV,OAAD,CAJH,EAZ0C,CAgB3B;;AAEf,MAAIC,YAAY,KAAK,KAArB,EAA4B;AAC1B,WAAON,KAAK,CAACiB,aAAN,CAAoBf,MAApB,EAA4BgB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,KAAlB,EAAyB;AAC1DgB,MAAAA,YAAY,EAAE,SAASA,YAAT,GAAwB;AACpC,eAAO,CAAP;AACD;AAHyD,KAAzB,CAA5B,CAAP;AAKD,GAxByC,CAwBxC;;;AAGF,MAAI,CAACb,WAAD,IAAgBC,cAAhB,IAAkC,CAACM,eAAvC,EAAwD;AACtD,WAAO,IAAP;AACD;;AAED,SAAOd,KAAK,CAACiB,aAAN,CAAoBhB,MAApB,EAA4B;AACjCI,IAAAA,OAAO,EAAEA,OADwB;AAEjCE,IAAAA,WAAW,EAAEA,WAFoB;AAGjCD,IAAAA,YAAY,EAAEA;AAHmB,GAA5B,EAIJ,UAAUe,UAAV,EAAsB;AACvB,WAAOrB,KAAK,CAACiB,aAAN,CAAoBf,MAApB,EAA4BgB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBf,KAAlB,EAAyB;AAC1DM,MAAAA,UAAU,EAAE,SAASA,UAAT,GAAsB;AAChCD,QAAAA,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,WAAW,EAArE;AACAM,QAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD;AAJyD,KAAzB,EAKhCM,UALgC,CAA5B,CAAP;AAMD,GAXM,CAAP;AAYD,CA3CD;;AA6CAlB,UAAU,CAACmB,WAAX,GAAyB,QAAzB;AACA,eAAenB,UAAf","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport Portal from \"rc-util/es/PortalWrapper\";\nimport Dialog from './Dialog'; // fix issue #10656\n\n/*\n * getContainer remarks\n * Custom container should not be return, because in the Portal component, it will remove the\n * return container element here, if the custom container is the only child of it's component,\n * like issue #10656, It will has a conflict with removeChild method in react-dom.\n * So here should add a child (div element) to custom container.\n * */\n\nvar DialogWrap = function DialogWrap(props) {\n  var visible = props.visible,\n      getContainer = props.getContainer,\n      forceRender = props.forceRender,\n      destroyOnClose = props.destroyOnClose,\n      _afterClose = props.afterClose;\n\n  var _React$useState = React.useState(visible),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      animatedVisible = _React$useState2[0],\n      setAnimatedVisible = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (visible) {\n      setAnimatedVisible(true);\n    }\n  }, [visible]); // 渲染在当前 dom 里；\n\n  if (getContainer === false) {\n    return React.createElement(Dialog, Object.assign({}, props, {\n      getOpenCount: function getOpenCount() {\n        return 2;\n      }\n    }));\n  } // Destroy on close will remove wrapped div\n\n\n  if (!forceRender && destroyOnClose && !animatedVisible) {\n    return null;\n  }\n\n  return React.createElement(Portal, {\n    visible: visible,\n    forceRender: forceRender,\n    getContainer: getContainer\n  }, function (childProps) {\n    return React.createElement(Dialog, Object.assign({}, props, {\n      afterClose: function afterClose() {\n        _afterClose === null || _afterClose === void 0 ? void 0 : _afterClose();\n        setAnimatedVisible(false);\n      }\n    }, childProps));\n  });\n};\n\nDialogWrap.displayName = 'Dialog';\nexport default DialogWrap;"]},"metadata":{},"sourceType":"module"}