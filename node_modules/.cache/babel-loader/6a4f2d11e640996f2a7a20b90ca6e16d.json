{"ast":null,"code":"import { parseContact } from \"../utils/parseUtils\";\nexport default class ContactsBusiness {\n  constructor(api, settings) {\n    this.api = api;\n    this.settings = settings;\n    this.contacts = void 0;\n    this.contacts = new Map();\n  }\n\n  getContacts() {\n    return this.contacts;\n  }\n\n  list(callback)\n  /*, favoriteCallback: CreateFavoriteContactCallback*/\n  {\n    this.settings.get(settings => {\n      this.api.getContacts({\n        paramsUrl: {\n          added: true,\n          limit: 5000,\n          contactType: \"contact\",\n          domain: settings.sipDomain\n        }\n      }, (apiContacts, err) => {\n        // Populando o Map de contatos\n        if (!err) {\n          if (!this.api) return;\n          this.populate(apiContacts); //Favoritar o contato dentro da população com\n          //favoriteCallback()\n\n          callback(Array.from(this.contacts.values()));\n        }\n      });\n    });\n  }\n\n  populate(apiContacts) {\n    apiContacts.contacts.forEach(contact => {\n      this.contacts.set(contact.id, parseContact(contact));\n    });\n  }\n\n  setFavorite(favorited, callback) {\n    this.api.setFavoriteUser({\n      contactID: favorited.jid.split('@')[0],\n      contactType: favorited.jid.includes('@conference.') ? \"group\" : \"contact\",\n      favorite: favorited.favorite\n    }, callback);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Contacts.ts"],"names":["parseContact","ContactsBusiness","constructor","api","settings","contacts","Map","getContacts","list","callback","get","paramsUrl","added","limit","contactType","domain","sipDomain","apiContacts","err","populate","Array","from","values","forEach","contact","set","id","setFavorite","favorited","setFavoriteUser","contactID","jid","split","includes","favorite"],"mappings":"AAIA,SAASA,YAAT,QAA6B,qBAA7B;AASA,eAAe,MAAMC,gBAAN,CAAuB;AAEpCC,EAAAA,WAAW,CAASC,GAAT,EAA2BC,QAA3B,EAAuD;AAAA,SAA9CD,GAA8C,GAA9CA,GAA8C;AAAA,SAA5BC,QAA4B,GAA5BA,QAA4B;AAAA,SAD1DC,QAC0D;AAChE,SAAKA,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AACD;;AACDC,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKF,QAAZ;AACD;;AACDG,EAAAA,IAAI,CAACC,QAAD;AAA2B;AAAuD;AACpF,SAAKL,QAAL,CAAcM,GAAd,CAAmBN,QAAD,IAAc;AAC9B,WAAKD,GAAL,CAASI,WAAT,CACE;AACEI,QAAAA,SAAS,EAAE;AACTC,UAAAA,KAAK,EAAE,IADE;AAETC,UAAAA,KAAK,EAAE,IAFE;AAGTC,UAAAA,WAAW,EAAE,SAHJ;AAITC,UAAAA,MAAM,EAAEX,QAAQ,CAACY;AAJR;AADb,OADF,EASE,CAACC,WAAD,EAAmBC,GAAnB,KAAgC;AAC9B;AACA,YAAI,CAACA,GAAL,EAAU;AACR,cAAI,CAAC,KAAKf,GAAV,EAAe;AACf,eAAKgB,QAAL,CAAcF,WAAd,EAFQ,CAIR;AACA;;AAEAR,UAAAA,QAAQ,CAACW,KAAK,CAACC,IAAN,CAAW,KAAKhB,QAAL,CAAciB,MAAd,EAAX,CAAD,CAAR;AACD;AACF,OApBH;AAsBD,KAvBD;AAwBD;;AACDH,EAAAA,QAAQ,CAACF,WAAD,EAAmB;AACzBA,IAAAA,WAAW,CAACZ,QAAZ,CAAqBkB,OAArB,CAA8BC,OAAD,IAAkB;AAC7C,WAAKnB,QAAL,CAAcoB,GAAd,CAAkBD,OAAO,CAACE,EAA1B,EAA8B1B,YAAY,CAACwB,OAAD,CAA1C;AACD,KAFD;AAGD;;AACDG,EAAAA,WAAW,CAACC,SAAD,EAAuCnB,QAAvC,EAAsE;AAC/E,SAAKN,GAAL,CAAS0B,eAAT,CAAyB;AACvBC,MAAAA,SAAS,EAAEF,SAAS,CAACG,GAAV,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CADY;AAEvBlB,MAAAA,WAAW,EAAEc,SAAS,CAACG,GAAV,CAAcE,QAAd,CAAuB,cAAvB,IAAyC,OAAzC,GAAmD,SAFzC;AAGvBC,MAAAA,QAAQ,EAAEN,SAAS,CAACM;AAHG,KAAzB,EAIGzB,QAJH;AAKD;;AA7CmC","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport IContact from \"../../alias/IContact\";\r\nimport IChat from '../../alias/IChat'\r\nimport IGroup from '../../alias/IGroup'\r\nimport { parseContact } from \"../utils/parseUtils\";\r\nimport SettingsBusiness from \"./Settings\";\r\nimport { FavoriteUserCallback } from \"@digivox/apicommunicator/dist/types/types/types\";\r\n\r\ninterface ContactsCallBack {\r\n  (contacts: IContact[]): void;\r\n}\r\n\r\nexport default interface ContactsBusiness {}\r\nexport default class ContactsBusiness {\r\n  private contacts: Map<string, IContact>;\r\n  constructor(private api: API, private settings: SettingsBusiness) {\r\n    this.contacts = new Map<string, IContact>();\r\n  }\r\n  getContacts() {\r\n    return this.contacts;\r\n  }\r\n  list(callback: ContactsCallBack/*, favoriteCallback: CreateFavoriteContactCallback*/) {\r\n    this.settings.get((settings) => {\r\n      this.api.getContacts(\r\n        {\r\n          paramsUrl: {\r\n            added: true,\r\n            limit: 5000,\r\n            contactType: \"contact\",\r\n            domain: settings.sipDomain,\r\n          },\r\n        },\r\n        (apiContacts: any, err: any) => {\r\n          // Populando o Map de contatos\r\n          if (!err) {\r\n            if (!this.api) return;\r\n            this.populate(apiContacts);\r\n\r\n            //Favoritar o contato dentro da população com\r\n            //favoriteCallback()\r\n\r\n            callback(Array.from(this.contacts.values()));\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n  populate(apiContacts: any) {\r\n    apiContacts.contacts.forEach((contact: any) => {\r\n      this.contacts.set(contact.id, parseContact(contact));\r\n    });\r\n  }\r\n  setFavorite(favorited: IContact | IGroup | IChat, callback: FavoriteUserCallback){\r\n    this.api.setFavoriteUser({\r\n      contactID: favorited.jid.split('@')[0],\r\n      contactType: favorited.jid.includes('@conference.') ? \"group\" : \"contact\",\r\n      favorite: favorited.favorite\r\n    }, callback);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}