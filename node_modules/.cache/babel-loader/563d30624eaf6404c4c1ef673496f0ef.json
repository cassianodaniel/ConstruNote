{"ast":null,"code":"const stripPayload = (sdp, payload) => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const mediaDescs = [];\n  const lines = sdp.split(/\\r\\n/); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  let currentMediaDesc;\n\n  for (let i = 0; i < lines.length;) {\n    const line = lines[i];\n\n    if (/^m=(?:audio|video)/.test(line)) {\n      currentMediaDesc = {\n        index: i,\n        stripped: []\n      };\n      mediaDescs.push(currentMediaDesc);\n    } else if (currentMediaDesc) {\n      const rtpmap = /^a=rtpmap:(\\d+) ([^/]+)\\//.exec(line);\n\n      if (rtpmap && payload === rtpmap[2]) {\n        lines.splice(i, 1);\n        currentMediaDesc.stripped.push(rtpmap[1]);\n        continue; // Don't increment 'i'\n      }\n    }\n\n    i++;\n  }\n\n  for (const mediaDesc of mediaDescs) {\n    const mline = lines[mediaDesc.index].split(\" \"); // Ignore the first 3 parameters of the mline. The codec information is after that\n\n    for (let j = 3; j < mline.length;) {\n      if (mediaDesc.stripped.indexOf(mline[j]) !== -1) {\n        mline.splice(j, 1);\n        continue;\n      }\n\n      j++;\n    }\n\n    lines[mediaDesc.index] = mline.join(\" \");\n  }\n\n  return lines.join(\"\\r\\n\");\n};\n\nconst stripMediaDescription = (sdp, description) => {\n  const descriptionRegExp = new RegExp(\"m=\" + description + \".*$\", \"gm\");\n  const groupRegExp = new RegExp(\"^a=group:.*$\", \"gm\");\n\n  if (descriptionRegExp.test(sdp)) {\n    let midLineToRemove;\n    sdp = sdp.split(/^m=/gm).filter(section => {\n      if (section.substr(0, description.length) === description) {\n        midLineToRemove = section.match(/^a=mid:.*$/gm);\n\n        if (midLineToRemove) {\n          const step = midLineToRemove[0].match(/:.+$/g);\n\n          if (step) {\n            midLineToRemove = step[0].substr(1);\n          }\n        }\n\n        return false;\n      }\n\n      return true;\n    }).join(\"m=\");\n    const groupLine = sdp.match(groupRegExp);\n\n    if (groupLine && groupLine.length === 1) {\n      let groupLinePortion = groupLine[0]; // eslint-disable-next-line no-useless-escape\n\n      const groupRegExpReplace = new RegExp(\"\\ *\" + midLineToRemove + \"[^\\ ]*\", \"g\");\n      groupLinePortion = groupLinePortion.replace(groupRegExpReplace, \"\");\n      sdp = sdp.split(groupRegExp).join(groupLinePortion);\n    }\n  }\n\n  return sdp;\n};\n/**\n * Modifier.\n * @public\n */\n\n\nexport function stripTcpCandidates(description) {\n  description.sdp = (description.sdp || \"\").replace(/^a=candidate:\\d+ \\d+ tcp .*?\\r\\n/img, \"\");\n  return Promise.resolve(description);\n}\n/**\n * Modifier.\n * @public\n */\n\nexport function stripTelephoneEvent(description) {\n  description.sdp = stripPayload(description.sdp || \"\", \"telephone-event\");\n  return Promise.resolve(description);\n}\n/**\n * Modifier.\n * @public\n */\n\nexport function cleanJitsiSdpImageattr(description) {\n  description.sdp = (description.sdp || \"\").replace(/^(a=imageattr:.*?)(x|y)=\\[0-/gm, \"$1$2=[1:\");\n  return Promise.resolve(description);\n}\n/**\n * Modifier.\n * @public\n */\n\nexport function stripG722(description) {\n  description.sdp = stripPayload(description.sdp || \"\", \"G722\");\n  return Promise.resolve(description);\n}\n/**\n * Modifier.\n * @public\n */\n\nexport function stripRtpPayload(payload) {\n  return description => {\n    description.sdp = stripPayload(description.sdp || \"\", payload);\n    return Promise.resolve(description);\n  };\n}\n/**\n * Modifier.\n * @public\n */\n\nexport function stripVideo(description) {\n  description.sdp = stripMediaDescription(description.sdp || \"\", \"video\");\n  return Promise.resolve(description);\n}\n/**\n * Modifier.\n * @public\n */\n\nexport function addMidLines(description) {\n  let sdp = description.sdp || \"\";\n\n  if (sdp.search(/^a=mid.*$/gm) === -1) {\n    const mlines = sdp.match(/^m=.*$/gm);\n    const sdpArray = sdp.split(/^m=.*$/gm);\n\n    if (mlines) {\n      mlines.forEach((elem, idx) => {\n        mlines[idx] = elem + \"\\na=mid:\" + idx;\n      });\n    }\n\n    sdpArray.forEach((elem, idx) => {\n      if (mlines && mlines[idx]) {\n        sdpArray[idx] = elem + mlines[idx];\n      }\n    });\n    sdp = sdpArray.join(\"\");\n    description.sdp = sdp;\n  }\n\n  return Promise.resolve(description);\n}\n/**\n * The modifier that should be used when the session would like to place the call on hold.\n * @param description - The description that will be modified.\n */\n\nexport function holdModifier(description) {\n  if (!description.sdp || !description.type) {\n    throw new Error(\"Invalid SDP\");\n  }\n\n  let sdp = description.sdp;\n  const type = description.type;\n\n  if (sdp) {\n    if (!/a=(sendrecv|sendonly|recvonly|inactive)/.test(sdp)) {\n      sdp = sdp.replace(/(m=[^\\r]*\\r\\n)/g, \"$1a=sendonly\\r\\n\");\n    } else {\n      sdp = sdp.replace(/a=sendrecv\\r\\n/g, \"a=sendonly\\r\\n\");\n      sdp = sdp.replace(/a=recvonly\\r\\n/g, \"a=inactive\\r\\n\");\n    }\n  }\n\n  return Promise.resolve({\n    sdp,\n    type\n  });\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/platform/web/modifiers/modifiers.js"],"names":["stripPayload","sdp","payload","mediaDescs","lines","split","currentMediaDesc","i","length","line","test","index","stripped","push","rtpmap","exec","splice","mediaDesc","mline","j","indexOf","join","stripMediaDescription","description","descriptionRegExp","RegExp","groupRegExp","midLineToRemove","filter","section","substr","match","step","groupLine","groupLinePortion","groupRegExpReplace","replace","stripTcpCandidates","Promise","resolve","stripTelephoneEvent","cleanJitsiSdpImageattr","stripG722","stripRtpPayload","stripVideo","addMidLines","search","mlines","sdpArray","forEach","elem","idx","holdModifier","type","Error"],"mappings":"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","sourcesContent":["const stripPayload = (sdp, payload) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const mediaDescs = [];\n    const lines = sdp.split(/\\r\\n/);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let currentMediaDesc;\n    for (let i = 0; i < lines.length;) {\n        const line = lines[i];\n        if (/^m=(?:audio|video)/.test(line)) {\n            currentMediaDesc = {\n                index: i,\n                stripped: []\n            };\n            mediaDescs.push(currentMediaDesc);\n        }\n        else if (currentMediaDesc) {\n            const rtpmap = /^a=rtpmap:(\\d+) ([^/]+)\\//.exec(line);\n            if (rtpmap && payload === rtpmap[2]) {\n                lines.splice(i, 1);\n                currentMediaDesc.stripped.push(rtpmap[1]);\n                continue; // Don't increment 'i'\n            }\n        }\n        i++;\n    }\n    for (const mediaDesc of mediaDescs) {\n        const mline = lines[mediaDesc.index].split(\" \");\n        // Ignore the first 3 parameters of the mline. The codec information is after that\n        for (let j = 3; j < mline.length;) {\n            if (mediaDesc.stripped.indexOf(mline[j]) !== -1) {\n                mline.splice(j, 1);\n                continue;\n            }\n            j++;\n        }\n        lines[mediaDesc.index] = mline.join(\" \");\n    }\n    return lines.join(\"\\r\\n\");\n};\nconst stripMediaDescription = (sdp, description) => {\n    const descriptionRegExp = new RegExp(\"m=\" + description + \".*$\", \"gm\");\n    const groupRegExp = new RegExp(\"^a=group:.*$\", \"gm\");\n    if (descriptionRegExp.test(sdp)) {\n        let midLineToRemove;\n        sdp = sdp.split(/^m=/gm).filter((section) => {\n            if (section.substr(0, description.length) === description) {\n                midLineToRemove = section.match(/^a=mid:.*$/gm);\n                if (midLineToRemove) {\n                    const step = midLineToRemove[0].match(/:.+$/g);\n                    if (step) {\n                        midLineToRemove = step[0].substr(1);\n                    }\n                }\n                return false;\n            }\n            return true;\n        }).join(\"m=\");\n        const groupLine = sdp.match(groupRegExp);\n        if (groupLine && groupLine.length === 1) {\n            let groupLinePortion = groupLine[0];\n            // eslint-disable-next-line no-useless-escape\n            const groupRegExpReplace = new RegExp(\"\\ *\" + midLineToRemove + \"[^\\ ]*\", \"g\");\n            groupLinePortion = groupLinePortion.replace(groupRegExpReplace, \"\");\n            sdp = sdp.split(groupRegExp).join(groupLinePortion);\n        }\n    }\n    return sdp;\n};\n/**\n * Modifier.\n * @public\n */\nexport function stripTcpCandidates(description) {\n    description.sdp = (description.sdp || \"\").replace(/^a=candidate:\\d+ \\d+ tcp .*?\\r\\n/img, \"\");\n    return Promise.resolve(description);\n}\n/**\n * Modifier.\n * @public\n */\nexport function stripTelephoneEvent(description) {\n    description.sdp = stripPayload(description.sdp || \"\", \"telephone-event\");\n    return Promise.resolve(description);\n}\n/**\n * Modifier.\n * @public\n */\nexport function cleanJitsiSdpImageattr(description) {\n    description.sdp = (description.sdp || \"\").replace(/^(a=imageattr:.*?)(x|y)=\\[0-/gm, \"$1$2=[1:\");\n    return Promise.resolve(description);\n}\n/**\n * Modifier.\n * @public\n */\nexport function stripG722(description) {\n    description.sdp = stripPayload(description.sdp || \"\", \"G722\");\n    return Promise.resolve(description);\n}\n/**\n * Modifier.\n * @public\n */\nexport function stripRtpPayload(payload) {\n    return (description) => {\n        description.sdp = stripPayload(description.sdp || \"\", payload);\n        return Promise.resolve(description);\n    };\n}\n/**\n * Modifier.\n * @public\n */\nexport function stripVideo(description) {\n    description.sdp = stripMediaDescription(description.sdp || \"\", \"video\");\n    return Promise.resolve(description);\n}\n/**\n * Modifier.\n * @public\n */\nexport function addMidLines(description) {\n    let sdp = description.sdp || \"\";\n    if (sdp.search(/^a=mid.*$/gm) === -1) {\n        const mlines = sdp.match(/^m=.*$/gm);\n        const sdpArray = sdp.split(/^m=.*$/gm);\n        if (mlines) {\n            mlines.forEach((elem, idx) => {\n                mlines[idx] = elem + \"\\na=mid:\" + idx;\n            });\n        }\n        sdpArray.forEach((elem, idx) => {\n            if (mlines && mlines[idx]) {\n                sdpArray[idx] = elem + mlines[idx];\n            }\n        });\n        sdp = sdpArray.join(\"\");\n        description.sdp = sdp;\n    }\n    return Promise.resolve(description);\n}\n/**\n * The modifier that should be used when the session would like to place the call on hold.\n * @param description - The description that will be modified.\n */\nexport function holdModifier(description) {\n    if (!description.sdp || !description.type) {\n        throw new Error(\"Invalid SDP\");\n    }\n    let sdp = description.sdp;\n    const type = description.type;\n    if (sdp) {\n        if (!/a=(sendrecv|sendonly|recvonly|inactive)/.test(sdp)) {\n            sdp = sdp.replace(/(m=[^\\r]*\\r\\n)/g, \"$1a=sendonly\\r\\n\");\n        }\n        else {\n            sdp = sdp.replace(/a=sendrecv\\r\\n/g, \"a=sendonly\\r\\n\");\n            sdp = sdp.replace(/a=recvonly\\r\\n/g, \"a=inactive\\r\\n\");\n        }\n    }\n    return Promise.resolve({ sdp, type });\n}\n"]},"metadata":{},"sourceType":"module"}