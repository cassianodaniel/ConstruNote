{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport { useModal } from \"../contexts/ModalContext\";\nimport UserType from \"../enuns/UserType\";\nimport { useConference } from \"../contexts/ConferenceContext\";\nimport moment from \"moment\";\nimport { ConferenceRoomParticipantType } from \"./business/Conferences\";\nimport PresenceStatus from \"../enuns/PresenceStatus\";\nimport { DateTime } from \"luxon\";\nimport { useLoading } from \"../contexts/LoadingContext\"; // import { activeChat as actChtData } from \"../data/chat\";\n//import { callbackify } from \"util\";\n// import IContact from \"../alias/IContact\";\n//Comentar para Evitar Warnings no console\n\nlet squadService;\nlet typingTimeout = new Map();\n\nconst SquadCommunicator = () => {\n  var _squadService64;\n\n  const {\n    chats,\n    setChats,\n    activeChat,\n    replyMsg,\n    setReplyMsg,\n    setActiveChat,\n    forwardMessageList,\n    setForwardMessageList,\n    setShowChat,\n    showChatProfileSidebar,\n    setFavoriteMessagePayload,\n    favoriteMessagePayload,\n    flagToLoadFavoriteMessages,\n    setFlagToLoadFavoriteMessages,\n    setFavoriteMessages,\n    favoriteMessages,\n    deleteFavoriteMessage,\n    setDeleteFavoriteMessage\n  } = useChat();\n  const {\n    contactsSearch,\n    setContactsSearched,\n    newFavorite,\n    setNewFavorite,\n    contacts,\n    setContacts,\n    setContactsOutsideUserContacts,\n    toggleAddingContacts,\n    setToggleAddingContacts,\n    checkedContacts,\n    setCheckedContacts,\n    removedContact,\n    setRemovedContact,\n    checkedMembers,\n    setCheckedMembers,\n    groupToInsertMember,\n    setGroupToInsertMember,\n    clickedContact,\n    setClickedContact\n  } = useContact();\n  const {\n    user,\n    setUser,\n    changedUserData,\n    changedUserPassword,\n    setChangedUserPassword\n  } = useAuth();\n  const {\n    showModalForwardMessageTo,\n    setShowModalForwardMessageTo,\n    showModalAddContact\n  } = useModal();\n  const {\n    setDisconnected\n  } = useLoading();\n  const {\n    setGroups,\n    groups,\n    memberQuit,\n    groupIdOfLeaveRequest,\n    setGroupIdOfLeaveRequest,\n    setMemberQuit,\n    groupToRemoveContact,\n    setGroupToRemoveContact,\n    removedMember,\n    setRemovedMember,\n    toggleMemberRole,\n    setToggleMemberRole,\n    changeGroupData,\n    setChangeGroupData,\n    groupToCreate,\n    setGroupToCreate,\n    groupJid,\n    setGroupJid\n  } = useGroup();\n  const {\n    listRooms,\n    setListRooms,\n    setConferenceList,\n    setCreateConference,\n    createConference\n  } = useConference();\n\n  const init = () => {\n    var _squadService;\n\n    // localStorage.setItem(\n    //   \"authorization\",\n    //   JSON.stringify({\n    //     access_token: \"71e1503a96d94e1e231444bc5c0399ca\",\n    //     user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n    //     user_name: \"ZZ Romero 2\",\n    //     expires_in: 2592000,\n    //     email: \"romero2@digivox.com.br\",\n    //     baseUrl: \"https://app.citrussquad.com/api/v1/\",\n    //   })\n    // );\n    squadService = SquadService.getInstance({\n      chatCommunicatorSubscribe: chatCommunicatorSubscribe\n    });\n    (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.user.get(user => {\n      setUser(user); //Ao iniciar o website\n\n      Notification.requestPermission();\n    });\n  };\n\n  const clearSendFile = (chatId, messageId) => {\n    setChats(chats.map(chat => {\n      if (chat.id === chatId) {\n        chat.messages = chat.messages.map(message => {\n          if (message.id === messageId) {\n            message.deliverStatus = DeliverStatus.QUEUED;\n            message.sendFile = undefined;\n          }\n\n          return message;\n        });\n      }\n\n      return chat;\n    }));\n  };\n\n  const onChatsChange = () => {// chats.forEach((chat) => {\n    // });\n  };\n\n  const onActiveChatChange = () => {\n    checkSendMessage(activeChat);\n    checkAttachedFiles(activeChat);\n    checkNewContact(activeChat); // checkTyping(activeChat)\n  }; // const checkTyping = (chat: IChat) => {\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\n  //     if (oldTimeoutData)\n  //       clearTimeout(oldTimeoutData.timeout)\n  //     else\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\n  //     const timeoutData = {\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\n  //       msgStr: `${chat.inputMessage}`\n  //     }\n  //     typingTimeout.set(chat.jid, timeoutData)\n  //   }\n  // }\n\n\n  const checkNewContact = cht => {\n    if (!cht.added) {\n      var _squadService2;\n\n      (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.contacts.add(cht, success => {\n        if (success) {\n          var _squadService3;\n\n          setChats(chats.map(chat => {\n            if (chat.jid === cht.jid) {\n              chat.added = true;\n            }\n\n            if (activeChat.jid === chat.jid) setActiveChat(chat);\n            return chat;\n          }));\n          (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.contacts.list(ctcs => {\n            setContacts(ctcs);\n          });\n        }\n      });\n    }\n  };\n\n  const checkAttachedFiles = cht => {\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\n      var _squadService4;\n\n      (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : _squadService4.attachments.list(cht, attachments => {\n        if (attachments.length > 0) {\n          setActiveChat({ ...cht,\n            attachedFileList: attachments\n          });\n        } else setActiveChat({ ...cht,\n          attachedFileList: null\n        });\n      });\n    }\n  };\n  /* getMessageUserProfilePicture = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.profilePicture;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])\r\n        ?.profilePicture;\r\n    }\r\n  }; */\n\n\n  const checkSearchMessages = () => {\n    if (activeChat.messageLoaded) {\n      var _squadService5;\n\n      (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.messages.list(activeChat, messages => {\n        if (messages.length) {\n          setChats(chats.map(cht => {\n            if (cht.id === activeChat.id) {\n              messages.forEach(msg => {\n                if (!activeChat.messages.find(m => m.id === msg.id)) cht.messages.unshift(msg);\n              });\n              cht.messageLoaded = false;\n              setActiveChat(cht);\n            }\n\n            return cht;\n          }));\n        } else {\n          const chat = { ...activeChat,\n            messageLoaded: false\n          };\n          setActiveChat(chat);\n        }\n      });\n    }\n  };\n\n  const getFileExtension = url => {\n    return url.split(\".\")[1];\n  };\n\n  const checkSendMessage = chat => {\n    chat.messages.forEach(msg => {\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\n        if (msg.sendFile && !replyMsg) {\n          var _squadService6, _squadService6$chat;\n\n          const files = [msg.sendFile];\n          clearSendFile(chat.id, msg.id);\n          (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : (_squadService6$chat = _squadService6.chat) === null || _squadService6$chat === void 0 ? void 0 : _squadService6$chat.sendFiles(chat, files, data => {\n            var _squadService7, _squadService7$user$u, _squadService8, _squadService$user$us;\n\n            updateMessageFiles(data, chat, msg);\n            console.log(\"jidFromUser:\", (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : (_squadService7$user$u = _squadService7.user.user) === null || _squadService7$user$u === void 0 ? void 0 : _squadService7$user$u.jid);\n            (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : _squadService8.attachments.saveData({\n              createdAt: DateTime.local().toISO().split(\"T\").join(\" \").slice(0, 18),\n              src: (_squadService$user$us = squadService.user.user) === null || _squadService$user$us === void 0 ? void 0 : _squadService$user$us.jid,\n              dst: chat.jid,\n              fileExtension: getFileExtension(getFileName(data.url)),\n              fileName: getFileName(data.url),\n              fileUrl: data.url,\n              kind: chat.chatType\n            }, () => true);\n          });\n        } else {\n          if (!msg.isForwardMessage && !replyMsg) {\n            sendMessage(chat, msg.message, msgId => updateMessage(msgId, chat, msg));\n          } else if (replyMsg) {\n            var _squadService9, _squadService9$chat;\n\n            const replyMsgCopy = { ...replyMsg\n            };\n            setReplyMsg(undefined);\n            (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : (_squadService9$chat = _squadService9.chat) === null || _squadService9$chat === void 0 ? void 0 : _squadService9$chat.replyMsg(chat, msg, replyMsgCopy, msgId => {\n              updateMessage(msgId, chat, msg, replyMsgCopy);\n            });\n          }\n        }\n      }\n    });\n  };\n\n  const updateMessageFiles = (data, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        const booleans = getUrlBooleans(data.url);\n        message.id = data.msgId;\n        message.fileUrl = data.url;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n        message.message = getFileName(data.url);\n        message.isFileMessage = booleans.isFileMessage;\n        message.isImageMessage = booleans.isImageMessage;\n        message.isVideoMessage = booleans.isVideoMessage;\n        message.isAudioMessage = booleans.isAudioMessage;\n      }\n\n      return message;\n    });\n    setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      const newChats = [];\n      chats.forEach(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n          newChats.unshift(cht);\n        } else {\n          newChats.push(cht);\n        }\n      });\n      setChats(newChats);\n    }\n  };\n\n  const updateMessage = (msgId, chat, msg, replyedMsg = undefined) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        message.id = msgId;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n\n        if (replyedMsg) {\n          var _squadService10, _squadService10$conta, _squadService11, _squadService11$user, _squadService11$user$, _squadService12, _squadService12$user, _squadService12$user$;\n\n          message.isReplyMessage = true;\n          message.replyedMessage = replyedMsg.message || replyedMsg.fileUrl;\n          message.replyedMessageId = replyedMsg.id;\n          message.replyedMessageTo = ((_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : (_squadService10$conta = _squadService10.contacts.getContacts().get(replyedMsg.fromUser.split(\"@\")[0])) === null || _squadService10$conta === void 0 ? void 0 : _squadService10$conta.name) || ((_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : (_squadService11$user = _squadService11.user) === null || _squadService11$user === void 0 ? void 0 : (_squadService11$user$ = _squadService11$user.user) === null || _squadService11$user$ === void 0 ? void 0 : _squadService11$user$.id) === replyedMsg.fromUser.split(\"@\")[0] ? (_squadService12 = squadService) === null || _squadService12 === void 0 ? void 0 : (_squadService12$user = _squadService12.user) === null || _squadService12$user === void 0 ? void 0 : (_squadService12$user$ = _squadService12$user.user) === null || _squadService12$user$ === void 0 ? void 0 : _squadService12$user$.name : \"Participant\";\n        }\n\n        if (isUrl(message.message)) {\n          const booleans = getUrlBooleans(message.message);\n          message.isFileMessage = booleans.isFileMessage;\n          message.isImageMessage = booleans.isImageMessage;\n          message.isAudioMessage = booleans.isAudioMessage;\n          message.isVideoMessage = booleans.isVideoMessage;\n          message.fileUrl = message.message;\n        }\n      }\n\n      return message;\n    });\n    if (activeChat.jid === newChat.jid) setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      const newChats = [];\n      chats.forEach(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n          newChats.unshift(cht);\n        } else {\n          newChats.push(cht);\n        }\n      });\n      setChats(newChats);\n    }\n  };\n\n  const forwardMessage = () => {\n    if (forwardMessageList && showModalForwardMessageTo) {\n      const ctcs = [...forwardMessageList];\n      const message = { ...showModalForwardMessageTo\n      };\n      setForwardMessageList(undefined);\n      setShowModalForwardMessageTo(undefined);\n      const chatsFinded = [];\n      const oldChats = [...chats.map(chat => {\n        return { ...chat\n        };\n      })];\n      ctcs === null || ctcs === void 0 ? void 0 : ctcs.forEach((ctc, i) => {\n        const cht = oldChats.find(cht => cht.jid === ctc.jid);\n\n        if (cht) {\n          var _squadService13, _squadService13$chat;\n\n          const msg = { ...message,\n            id: `${cht.messages.length + 1}`,\n            userName: user.name,\n            fromUser: user.id,\n            toUser: ctc.jid.split(\"@\")[0],\n            message: message.fileUrl || message.message,\n            deliverStatus: DeliverStatus.QUEUED,\n            isForwardMessage: true\n          };\n          (_squadService13 = squadService) === null || _squadService13 === void 0 ? void 0 : (_squadService13$chat = _squadService13.chat) === null || _squadService13$chat === void 0 ? void 0 : _squadService13$chat.forwardMessage(cht, msg, msgId => {\n            msg.id = msgId;\n            cht.messages.push(msg);\n            chatsFinded.push(cht);\n          });\n        }\n      });\n      const newChats = oldChats.map(chat => chatsFinded.find(cht => cht.id === chat.id) || chat);\n      const ctcsNotInChat = ctcs.filter(ctc => !newChats.find(cht => ctc.jid === cht.jid));\n      ctcsNotInChat.forEach((ctc, i) => {\n        var _squadService14, _squadService14$chat;\n\n        const chat = {\n          id: ctc.jid.split(\"@\")[0],\n          jid: ctc.jid,\n          name: ctc.name,\n          profilePicture: ctc.profilePicture,\n          status: ctc.status || undefined,\n          unRead: 0,\n          chatType: ctc.jid.includes(\"@conference.\") ? ChatType.GROUP : ChatType.USER,\n          inputMessage: \"\",\n          messageLoaded: false,\n          isTyping: false,\n          messages: [],\n          email: ctc.email || undefined,\n          favorite: ctc.favorite,\n          added: ctc.added\n        };\n        const newMessage = { ...message,\n          id: `${1}`,\n          userName: user.name,\n          fromUser: user.id,\n          toUser: ctc.jid.split(\"@\")[0],\n          deliverStatus: DeliverStatus.QUEUED,\n          isForwardMessage: true\n        };\n        (_squadService14 = squadService) === null || _squadService14 === void 0 ? void 0 : (_squadService14$chat = _squadService14.chat) === null || _squadService14$chat === void 0 ? void 0 : _squadService14$chat.forwardMessage(chat, newMessage, msgId => {\n          newMessage.id = msgId;\n          chat.messages.push(newMessage);\n          newChats.unshift(chat);\n        });\n      });\n      setChats(newChats);\n    }\n  };\n\n  const onChangeStatus = () => {\n    var _squadService15, _squadService15$chat, _squadService15$chat$, _squadService15$chat$2;\n\n    if (((_squadService15 = squadService) === null || _squadService15 === void 0 ? void 0 : (_squadService15$chat = _squadService15.chat) === null || _squadService15$chat === void 0 ? void 0 : (_squadService15$chat$ = _squadService15$chat.chat) === null || _squadService15$chat$ === void 0 ? void 0 : (_squadService15$chat$2 = _squadService15$chat$.client) === null || _squadService15$chat$2 === void 0 ? void 0 : _squadService15$chat$2.status) === \"online\") {\n      var _squadService16, _squadService16$chat;\n\n      (_squadService16 = squadService) === null || _squadService16 === void 0 ? void 0 : (_squadService16$chat = _squadService16.chat) === null || _squadService16$chat === void 0 ? void 0 : _squadService16$chat.changeStatus(user.status);\n    }\n  };\n\n  const onSearchContacts = () => {\n    if (contactsSearch.length > 2) {\n      var _squadService17;\n\n      (_squadService17 = squadService) === null || _squadService17 === void 0 ? void 0 : _squadService17.contacts.search(contactsSearch, searchList => {\n        setContactsSearched(searchList);\n      });\n    } else {\n      setContactsSearched(undefined);\n    }\n  };\n\n  const onSearchContactsOutsideUserContacts = () => {\n    var _squadService18;\n\n    (_squadService18 = squadService) === null || _squadService18 === void 0 ? void 0 : _squadService18.contacts.getContactsOutsideUserLists(contacts => {\n      if (contacts) {\n        setContactsOutsideUserContacts(contacts);\n      }\n    });\n  };\n\n  const onToggleSidebarMenu = () => {\n    var _squadService19;\n\n    (_squadService19 = squadService) === null || _squadService19 === void 0 ? void 0 : _squadService19.contacts.getContactsOutsideUserLists(contacts => {\n      if (contacts) {\n        setContactsOutsideUserContacts(contacts);\n      }\n    });\n  };\n\n  const onRemovingMember = () => {\n    if (removedMember && groupToRemoveContact) {\n      var _squadService20;\n\n      let group = groups.find(grp => grp.groupId === groupToRemoveContact);\n      if (group) (_squadService20 = squadService) === null || _squadService20 === void 0 ? void 0 : _squadService20.groups.removeMember(group.groupId, removedMember, success => {\n        if (success) {\n          setGroups(groups.map(grp => {\n            if (grp.groupId === (group === null || group === void 0 ? void 0 : group.groupId)) grp.members = grp.members.filter(mb => mb.userId !== removedMember.userId);\n            return grp;\n          }));\n          setChats(chats.map(cht => {\n            if (cht.groupId === (group === null || group === void 0 ? void 0 : group.groupId)) {\n              var _cht$members;\n\n              cht.members = (_cht$members = cht.members) === null || _cht$members === void 0 ? void 0 : _cht$members.filter(mb => mb.userId !== removedMember.userId);\n              if (cht.groupId === activeChat.groupId) setActiveChat(cht);\n            }\n\n            return cht;\n          }));\n\n          if (group) {\n            var _squadService21, _squadService21$chat;\n\n            (_squadService21 = squadService) === null || _squadService21 === void 0 ? void 0 : (_squadService21$chat = _squadService21.chat) === null || _squadService21$chat === void 0 ? void 0 : _squadService21$chat.chat.sendEvent(group === null || group === void 0 ? void 0 : group.jid, removedMember.userId, \"6\");\n          }\n\n          setRemovedMember(undefined);\n          setGroupToRemoveContact(undefined);\n        }\n      });\n    }\n  };\n\n  const onLeavingGroup = () => {\n    if (memberQuit && groupIdOfLeaveRequest && groupJid) {\n      var _squadService22;\n\n      (_squadService22 = squadService) === null || _squadService22 === void 0 ? void 0 : _squadService22.groups.leftingGroup({\n        groupId: groupIdOfLeaveRequest,\n        memberId: memberQuit.userId\n      }, success => {\n        if (success) {\n          var _squadService23, _squadService23$chat, _squadService24, _squadService24$chat;\n\n          (_squadService23 = squadService) === null || _squadService23 === void 0 ? void 0 : (_squadService23$chat = _squadService23.chat) === null || _squadService23$chat === void 0 ? void 0 : _squadService23$chat.chat.sendPresence(PresenceStatus.UNAVAILABLE, `${groupJid}/${memberQuit.userId}`);\n          (_squadService24 = squadService) === null || _squadService24 === void 0 ? void 0 : (_squadService24$chat = _squadService24.chat) === null || _squadService24$chat === void 0 ? void 0 : _squadService24$chat.chat.sendEvent(groupIdOfLeaveRequest, memberQuit.userId, \"3\", undefined);\n          setChats(chats.filter(cht => cht.groupId !== groupIdOfLeaveRequest));\n          setGroups(groups.filter(grp => grp.groupId !== groupIdOfLeaveRequest));\n\n          if (activeChat.groupId === groupIdOfLeaveRequest) {\n            setShowChat(false);\n          }\n        }\n\n        setGroupJid(undefined);\n        setMemberQuit(undefined);\n        setGroupIdOfLeaveRequest(\"\");\n      });\n    }\n  };\n\n  const showNotification = name => {\n    if (Notification.permission === \"granted\") {\n      new Notification(\"Nova mensagem\", {\n        body: name,\n        icon: require(\"../assets/images/logo.png\"),\n        silent: true\n      });\n    } else {\n      Notification.requestPermission();\n    }\n  };\n\n  const onFavoriteMessage = () => {\n    if (favoriteMessagePayload) {\n      var _squadService25;\n\n      (_squadService25 = squadService) === null || _squadService25 === void 0 ? void 0 : _squadService25.messages.save(favoriteMessagePayload, success => {\n        if (success) {\n          setFavoriteMessagePayload(undefined);\n          setFlagToLoadFavoriteMessages({\n            contactType: favoriteMessagePayload.contactType\n          });\n        }\n      });\n    }\n  };\n\n  const onAddingMembers = () => {\n    let asynchronousFlag = 0;\n\n    if (checkedMembers && groupToInsertMember) {\n      let copiaCheckedMembers = [...checkedMembers],\n          copiaGroupToInsertMember = { ...groupToInsertMember\n      };\n      copiaCheckedMembers.forEach(ctt => {\n        var _squadService26;\n\n        (_squadService26 = squadService) === null || _squadService26 === void 0 ? void 0 : _squadService26.groups.addMember(copiaGroupToInsertMember, ctt, success => {\n          if (success) {\n            var _squadService27, _squadService27$chat;\n\n            (_squadService27 = squadService) === null || _squadService27 === void 0 ? void 0 : (_squadService27$chat = _squadService27.chat) === null || _squadService27$chat === void 0 ? void 0 : _squadService27$chat.chat.sendEvent(copiaGroupToInsertMember.jid, ctt.id, \"2\");\n            asynchronousFlag++;\n\n            if (copiaCheckedMembers.length === asynchronousFlag) {\n              var _squadService28;\n\n              (_squadService28 = squadService) === null || _squadService28 === void 0 ? void 0 : _squadService28.groups.list(grps => {\n                setGroups(grps);\n                setChats(chats.map(cht => {\n                  if (cht.groupId === copiaGroupToInsertMember.groupId) {\n                    let foundedGroup = grps.find(grp => grp.groupId === cht.groupId);\n                    cht.members = foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.members;\n\n                    if (activeChat.groupId === cht.groupId) {\n                      activeChat.members = foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.members;\n                      setActiveChat(activeChat);\n                    }\n                  }\n\n                  return cht;\n                }));\n              });\n            }\n          }\n        });\n      });\n      setCheckedMembers([]);\n      setToggleAddingContacts(false);\n      setGroupToInsertMember(undefined);\n    }\n  };\n\n  const onAddingContacts = () => {\n    let asynchronousFlag = 0;\n\n    if (checkedContacts && toggleAddingContacts) {\n      checkedContacts.forEach(ctt => {\n        if (!ctt.added) {\n          var _squadService29;\n\n          (_squadService29 = squadService) === null || _squadService29 === void 0 ? void 0 : _squadService29.contacts.addContacts(ctt, success => {\n            if (success) {\n              asynchronousFlag++;\n\n              if (checkedContacts.length === asynchronousFlag) {\n                var _squadService30;\n\n                (_squadService30 = squadService) === null || _squadService30 === void 0 ? void 0 : _squadService30.contacts.list(contacts => {\n                  setContacts(contacts);\n                  setCheckedContacts([]);\n                  setToggleAddingContacts(false);\n                });\n              }\n            }\n          });\n        }\n      });\n    }\n  };\n\n  const onAddingContactOnGroupList = () => {\n    if (clickedContact) {\n      if (!clickedContact.added) {\n        var _squadService31;\n\n        (_squadService31 = squadService) === null || _squadService31 === void 0 ? void 0 : _squadService31.contacts.addContacts(clickedContact, success => {\n          if (success) {\n            var _squadService32;\n\n            (_squadService32 = squadService) === null || _squadService32 === void 0 ? void 0 : _squadService32.contacts.list(contacts => {\n              setContacts(contacts);\n              setClickedContact(undefined);\n            });\n          }\n        });\n      }\n    }\n  };\n\n  const onToggleMemberRole = () => {\n    if (toggleMemberRole) {\n      var _squadService33;\n\n      (_squadService33 = squadService) === null || _squadService33 === void 0 ? void 0 : _squadService33.groups.list(grps => {\n        grps.forEach(gp => {\n          if (gp.groupId === toggleMemberRole.gpId) {\n            gp.members.forEach(mb => {\n              if (mb.userId === toggleMemberRole.mbId) {\n                var _squadService34;\n\n                (_squadService34 = squadService) === null || _squadService34 === void 0 ? void 0 : _squadService34.contacts.toggleMemberRole(toggleMemberRole.mbId, toggleMemberRole.gpId, toggleMemberRole.mbRole, success => {\n                  if (success) {\n                    const newRole = toggleMemberRole.mbRole === UserType.USER ? UserType.ADMIN : UserType.USER;\n                    setToggleMemberRole(undefined);\n                    setChats(chats.map(cht => {\n                      if (cht.groupId === toggleMemberRole.gpId) {\n                        var _cht$members2;\n\n                        cht.members = (_cht$members2 = cht.members) === null || _cht$members2 === void 0 ? void 0 : _cht$members2.map(mb => {\n                          if (mb.userId === toggleMemberRole.mbId) {\n                            mb.role = newRole;\n\n                            if (cht.groupId) {\n                              if (mb.role === UserType.ADMIN) {\n                                var _squadService35, _squadService35$chat;\n\n                                (_squadService35 = squadService) === null || _squadService35 === void 0 ? void 0 : (_squadService35$chat = _squadService35.chat) === null || _squadService35$chat === void 0 ? void 0 : _squadService35$chat.chat.sendEvent(cht.groupId, mb.userId, \"8\");\n                              } else {\n                                var _squadService36, _squadService36$chat;\n\n                                (_squadService36 = squadService) === null || _squadService36 === void 0 ? void 0 : (_squadService36$chat = _squadService36.chat) === null || _squadService36$chat === void 0 ? void 0 : _squadService36$chat.chat.sendEvent(cht.groupId, mb.userId, \"9\");\n                              }\n                            }\n                          }\n\n                          return mb;\n                        });\n                        if (activeChat.groupId === cht.groupId) setActiveChat(cht);\n                      }\n\n                      return cht;\n                    }));\n                    setGroups(groups.map(grp => {\n                      if (grp.groupId === toggleMemberRole.gpId) {\n                        grp.members = grp.members.map(member => {\n                          if (member.userId === toggleMemberRole.mbId) member.role = newRole;\n                          return member;\n                        });\n                      }\n\n                      return grp;\n                    }));\n                  }\n                });\n              }\n            });\n          }\n        });\n      });\n    }\n  };\n\n  const onChangeGroupData = () => {\n    if (changeGroupData) {\n      var _squadService37;\n\n      (_squadService37 = squadService) === null || _squadService37 === void 0 ? void 0 : _squadService37.groups.editGroupInfo({\n        groupId: changeGroupData.groupId,\n        groupName: changeGroupData.groupName,\n        members: changeGroupData.members,\n        description: changeGroupData.description\n      }, success => {\n        if (success) {\n          var _squadService38;\n\n          (_squadService38 = squadService) === null || _squadService38 === void 0 ? void 0 : _squadService38.groups.list(grps => {\n            var _squadService39, _squadService39$chat;\n\n            let foundedGroup = grps.find(grp => grp.groupId === changeGroupData.groupId);\n            setGroups(grps);\n            setChats(chats.map(cht => {\n              if (cht.groupId === changeGroupData.groupId) {\n                if (foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.name) {\n                  cht.name = foundedGroup.name;\n                }\n\n                if (activeChat.groupId === cht.groupId) {\n                  if (foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.name) {\n                    cht.name = foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.name;\n                  }\n\n                  setActiveChat(cht);\n                }\n              }\n\n              return cht;\n            }));\n            (_squadService39 = squadService) === null || _squadService39 === void 0 ? void 0 : (_squadService39$chat = _squadService39.chat) === null || _squadService39$chat === void 0 ? void 0 : _squadService39$chat.chat.sendEvent(foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.jid, undefined, \"10\", undefined);\n            setChangeGroupData(undefined);\n          });\n        }\n      });\n    }\n  };\n\n  const createGroup = () => {\n    var _squadService40;\n\n    (_squadService40 = squadService) === null || _squadService40 === void 0 ? void 0 : _squadService40.groups.create(groupToCreate, parsedGroup => {\n      if (parsedGroup) {\n        var _squadService41, _squadService41$chat, _squadService42, _squadService43, _squadService43$chat;\n\n        (_squadService41 = squadService) === null || _squadService41 === void 0 ? void 0 : (_squadService41$chat = _squadService41.chat) === null || _squadService41$chat === void 0 ? void 0 : _squadService41$chat.chat.sendEvent(parsedGroup.jid, parsedGroup.jid, \"1\");\n        (_squadService42 = squadService) === null || _squadService42 === void 0 ? void 0 : _squadService42.groups.list(groups => {\n          setGroups(groups);\n          setGroupToCreate(undefined);\n        });\n        (_squadService43 = squadService) === null || _squadService43 === void 0 ? void 0 : (_squadService43$chat = _squadService43.chat) === null || _squadService43$chat === void 0 ? void 0 : _squadService43$chat.chat.sendEvent(parsedGroup.jid, undefined, \"1\", undefined);\n      }\n    });\n  };\n\n  const onListRooms = () => {\n    if (listRooms) {\n      var _squadService44;\n\n      (_squadService44 = squadService) === null || _squadService44 === void 0 ? void 0 : _squadService44.conferences.list(conferences => {\n        var _squadService45, _squadService45$chat;\n\n        setConferenceList(conferences);\n        (_squadService45 = squadService) === null || _squadService45 === void 0 ? void 0 : (_squadService45$chat = _squadService45.chat) === null || _squadService45$chat === void 0 ? void 0 : _squadService45$chat.joinGroups(conferences.map(conf => conf.jid));\n      });\n      setListRooms(false);\n    }\n  };\n\n  const onCreateRoom = () => {\n    if (createConference) {\n      var _squadService46;\n\n      const momentStartDate = moment(`${createConference.startDate} ${createConference.startTime}:00`);\n      const momentFinalDate = moment(momentStartDate).add(createConference.duration.split(\":\")[0], \"hours\").add(createConference.duration.split(\":\")[1], \"minutes\");\n      const parsedConference = {\n        name: createConference.name,\n        waitMod: createConference.mdCheck,\n        startDatetime: `${momentStartDate.format(\"DD-MM-YYYY hh:mm:ss\")}`,\n        stopDatetime: `${momentFinalDate.format(\"DD-MM-YYYY hh:mm:ss\")}`\n      };\n      (_squadService46 = squadService) === null || _squadService46 === void 0 ? void 0 : _squadService46.conferences.create(parsedConference, createdConference => {\n        const participantList = [];\n\n        if (createdConference === null || createdConference === void 0 ? void 0 : createdConference.id) {\n          var _createConference$sel, _createConference$ema, _squadService47;\n\n          (_createConference$sel = createConference.selectedContact) === null || _createConference$sel === void 0 ? void 0 : _createConference$sel.forEach(ctc => {\n            participantList.push({\n              userUuid: ctc.id,\n              description: \"\",\n              email: ctc.email,\n              name: ctc.name,\n              type: ConferenceRoomParticipantType.PARTICIPANT,\n              userModerator: false\n            });\n          });\n          (_createConference$ema = createConference.emailList) === null || _createConference$ema === void 0 ? void 0 : _createConference$ema.forEach(participant => {\n            participantList.push({\n              userUuid: null,\n              description: \"\",\n              email: participant.email,\n              name: participant.name,\n              type: ConferenceRoomParticipantType.PARTICIPANT_EXTERNAL,\n              userModerator: false\n            });\n          });\n          (_squadService47 = squadService) === null || _squadService47 === void 0 ? void 0 : _squadService47.conferences.addParticipants(createdConference.id, participantList, s => {\n            if (s) {\n              setCreateConference(undefined);\n              setListRooms(true);\n            }\n          });\n        }\n      });\n    }\n  };\n\n  useEffect(onChatsChange, [chats]);\n  useEffect(onNewFavorite, [newFavorite]);\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\n  useEffect(onActiveChatChange, [activeChat]);\n  useEffect(onUserDataChange, [changedUserData]);\n  useEffect(onUserPasswordChange, [changedUserPassword]);\n  useEffect(onChangeStatus, [user.status]);\n  useEffect(forwardMessage, [forwardMessageList]);\n  useEffect(onSearchContacts, [contactsSearch]);\n  useEffect(onSearchContactsOutsideUserContacts, [showModalAddContact]);\n  useEffect(onAddingContacts, [toggleAddingContacts]);\n  useEffect(onRemovingMember, [removedMember, groupToRemoveContact]);\n  useEffect(onLeavingGroup, [memberQuit, groupIdOfLeaveRequest, groupJid]);\n  useEffect(onRemovingContact, [removedContact]);\n  useEffect(onAddingMembers, [groupToInsertMember, checkedMembers]);\n  useEffect(onToggleMemberRole, [toggleMemberRole]);\n  useEffect(onChangeGroupData, [changeGroupData]);\n  useEffect(onAddingContactOnGroupList, [clickedContact]);\n  useEffect(createGroup, [groupToCreate]);\n  useEffect(onToggleSidebarMenu, [showChatProfileSidebar]);\n  useEffect(onListRooms, [listRooms]);\n  useEffect(onCreateRoom, [createConference]);\n  useEffect(onFavoriteMessage, [favoriteMessagePayload]);\n  useEffect(onListFavoriteMessages, [flagToLoadFavoriteMessages]);\n  useEffect(onRemoveFavoriteMessage, [deleteFavoriteMessage]);\n\n  function onRemoveFavoriteMessage() {\n    var _squadService48;\n\n    (_squadService48 = squadService) === null || _squadService48 === void 0 ? void 0 : _squadService48.messages.deleteFavorite({\n      messageId: deleteFavoriteMessage === null || deleteFavoriteMessage === void 0 ? void 0 : deleteFavoriteMessage.messageId\n    }, success => {\n      if (success) {\n        setFlagToLoadFavoriteMessages({\n          contactType: deleteFavoriteMessage === null || deleteFavoriteMessage === void 0 ? void 0 : deleteFavoriteMessage.contactType\n        });\n        setDeleteFavoriteMessage(undefined);\n      }\n    });\n  }\n\n  function onListFavoriteMessages() {\n    if (flagToLoadFavoriteMessages) {\n      var _squadService49;\n\n      (_squadService49 = squadService) === null || _squadService49 === void 0 ? void 0 : _squadService49.messages.listFavorites({\n        contactTo: \"\",\n        contactType: flagToLoadFavoriteMessages.contactType,\n        content: \"\",\n        contentType: \"\",\n        messageDate: \"\",\n        messageId: \"\",\n        message: \"\"\n      }, success => {\n        if (success) {\n          try {\n            console.log('O callback é um array: ', success);\n            console.log('Object.values(success).filter', Object.values(success)[1]);\n            setFavoriteMessages(Object.values(success));\n          } catch (err) {\n            console.log(\"err\", err);\n          }\n\n          console.log(\"Variável de contexto global (setando o callback) :\", favoriteMessages);\n          setFlagToLoadFavoriteMessages(undefined);\n        }\n      });\n    }\n  }\n\n  function onRemovingContact() {\n    if (removedContact) {\n      contacts.forEach(ctc => {\n        if (ctc.id === removedContact.id) {\n          var _squadService50;\n\n          if (ctc.added) (_squadService50 = squadService) === null || _squadService50 === void 0 ? void 0 : _squadService50.contacts.remove(ctc, success => {\n            if (success) {\n              var _squadService51;\n\n              (_squadService51 = squadService) === null || _squadService51 === void 0 ? void 0 : _squadService51.contacts.list(ctcs => {\n                setContacts(ctcs);\n                setRemovedContact(undefined);\n              });\n            }\n          });\n        }\n      });\n    }\n  }\n\n  function onUserPasswordChange() {\n    if (changedUserPassword) {\n      var _squadService52;\n\n      (_squadService52 = squadService) === null || _squadService52 === void 0 ? void 0 : _squadService52.user.changePassword(changedUserPassword, password => {\n        if (password) {\n          setChangedUserPassword({\n            oldPassword: \"\",\n            newPassword: \"\"\n          });\n        }\n      });\n    }\n  }\n\n  function onUserDataChange() {\n    if (changedUserData) {\n      var _squadService53;\n\n      (_squadService53 = squadService) === null || _squadService53 === void 0 ? void 0 : _squadService53.user.changeUserData(changedUserData, chgd => {\n        if (chgd) {\n          setUser({ ...user,\n            email: changedUserData.email,\n            name: changedUserData.name\n          });\n        }\n      });\n    }\n  }\n\n  function onNewFavorite() {\n    if (newFavorite) {\n      var _squadService54;\n\n      const newFavoriteLoad = { ...newFavorite\n      };\n      (_squadService54 = squadService) === null || _squadService54 === void 0 ? void 0 : _squadService54.contacts.setFavorite(newFavorite, favorite => {\n        if (favorite) {\n          setChats(chats.map(cht => {\n            if (cht.jid === newFavoriteLoad.jid) {\n              cht.favorite = !newFavoriteLoad.favorite;\n            }\n\n            return cht;\n          }));\n          setGroups(groups.map(grp => {\n            if (grp.jid === newFavoriteLoad.jid) {\n              return { ...grp,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return grp;\n          }));\n          setContacts(contacts.map(ctt => {\n            if (ctt.jid === newFavoriteLoad.jid) {\n              return { ...ctt,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return ctt;\n          }));\n        }\n      });\n      setNewFavorite(undefined);\n    }\n  }\n\n  function chatCommunicatorSubscribe(evt, data) {\n    var _squadService55;\n\n    switch (evt) {\n      case Events.RECONNECTED:\n        setDisconnected(false);\n      // eslint-disable-next-line\n\n      case Events.ONLINE:\n        (_squadService55 = squadService) === null || _squadService55 === void 0 ? void 0 : _squadService55.chats.list(receivedChats => {\n          var _squadService56, _squadService58;\n\n          const chats = [];\n          receivedChats.forEach(cht => {\n            if (!chats.find(chat => chat.id === cht.id)) {\n              chats.push(cht);\n            }\n          });\n          setChats(chats); //populating groups\n\n          (_squadService56 = squadService) === null || _squadService56 === void 0 ? void 0 : _squadService56.groups.list(groups => {\n            var _squadService57, _squadService57$chat;\n\n            setGroups(groups); //Joining Groups Rooms in XMPP\n\n            (_squadService57 = squadService) === null || _squadService57 === void 0 ? void 0 : (_squadService57$chat = _squadService57.chat) === null || _squadService57$chat === void 0 ? void 0 : _squadService57$chat.joinGroups(groups.map(group => group.jid));\n          }); //populating contacts\n\n          (_squadService58 = squadService) === null || _squadService58 === void 0 ? void 0 : _squadService58.contacts.list(contacts => {\n            setContacts(contacts);\n          }); //populating conferences\n\n          setListRooms(true); //populating chat's with messages\n          // receivedChats.forEach((chat) => {\n          //   squadService?.messages.list(chat, (messages) => {\n          //     const chatWithMessages = { ...chat };\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\n          //       messages\n          //     );\n          //     setChats([\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\n          //       chatWithMessages,\n          //     ]);\n          //   });\n          // });\n        });\n        break;\n\n      case Events.ERROR:\n      case Events.OFFLINE:\n        if (localStorage.getItem(\"logout\") !== \"true\") {\n          var _squadService59, _squadService59$chat;\n\n          (_squadService59 = squadService) === null || _squadService59 === void 0 ? void 0 : (_squadService59$chat = _squadService59.chat) === null || _squadService59$chat === void 0 ? void 0 : _squadService59$chat.makeChat(chatCommunicatorSubscribe);\n        }\n\n        localStorage.removeItem(\"logout\");\n        console.log(evt);\n        break;\n\n      case Events.RECONNECTING:\n        // setShowChat(false);\n        // setActiveChat(actChtData);\n        // setChats([]);\n        // setGroups([]);\n        // setContacts([]);\n        // setConferenceList([]);\n        console.log(\"Reconnecting\");\n        setDisconnected(true);\n        break;\n\n      case Events.MESSAGE:\n        if (data.fromUser === user.jid) break;\n        let find = false;\n        let newChats = [];\n        chats.forEach(chat => {\n          if (data.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || data.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\n            find = true;\n            if (!chat.messages.filter(msg => msg.id === data.id)[0]) chat.messages.push(data);\n\n            if (chat.id === activeChat.id) {\n              let chatTemporary = { ...chat\n              };\n              setActiveChat(chatTemporary);\n            } else {\n              chat.unRead++;\n              showNotification(chat.name);\n            }\n\n            newChats.unshift(chat);\n          } else {\n            newChats.push(chat);\n          }\n        });\n\n        if (!find) {\n          var _squadService60;\n\n          let newChat = {};\n          (_squadService60 = squadService) === null || _squadService60 === void 0 ? void 0 : _squadService60.contacts.list(listContacts => {\n            listContacts.forEach(c => {\n              if (data.fromUser.split(\"@\")[0] === c.jid.split(\"@\")[0] || data.toUser.split(\"@\")[0] === c.jid.split(\"@\")[0]) {\n                if (c.jid === data.fromUser) {\n                  find = true;\n                  newChat = {\n                    id: c.id,\n                    jid: c.jid,\n                    name: c.name,\n                    profilePicture: c.profilePicture,\n                    status: c.status,\n                    unRead: 1,\n                    chatType: ChatType.USER,\n                    inputMessage: \"\",\n                    isTyping: false,\n                    messages: [],\n                    favorite: c.favorite,\n                    added: c.added\n                  };\n                  newChat.messages.push(data);\n                  newChats.unshift(newChat);\n                }\n              }\n            });\n          });\n        }\n\n        if (!find) {\n          var _squadService61;\n\n          let newChat = {};\n          (_squadService61 = squadService) === null || _squadService61 === void 0 ? void 0 : _squadService61.groups.list(listGroups => {\n            listGroups.forEach(g => {\n              if (data.fromUser.split(\"@\")[0] === g.jid.split(\"@\")[0] || data.toUser.split(\"@\")[0] === g.jid.split(\"@\")[0]) {\n                if (g.jid === data.fromUser) {\n                  find = true;\n                  newChat = {\n                    id: g.groupId,\n                    jid: g.jid,\n                    name: g.name,\n                    profilePicture: g.profilePicture,\n                    attachedFileList: undefined,\n                    conferenceRoomParticipants: undefined,\n                    department: undefined,\n                    email: undefined,\n                    groupId: g.groupId,\n                    members: g.members,\n                    messageLoaded: undefined,\n                    userDescription: undefined,\n                    status: undefined,\n                    unRead: 1,\n                    chatType: ChatType.GROUP,\n                    inputMessage: \"\",\n                    isTyping: false,\n                    messages: [],\n                    favorite: g.favorite,\n                    added: g.added\n                  };\n                  newChat.messages.push(data);\n                  newChats.unshift(newChat);\n                }\n              }\n            });\n          });\n        }\n\n        setChats(newChats);\n        break;\n\n      case Events.RECEIVED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.deliverStatus = DeliverStatus.DELIVERED;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.DISPLAYED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.readStatus = ReadStatus.READ;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.COMPOSING:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = true;\n            if (activeChat.jid === data) setActiveChat(chat);\n            deleteTypingTimeout(chat.jid);\n            setTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.ACTIVE:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = false;\n\n            if (activeChat.jid === data) {\n              let chatUpdate = { ...chat\n              };\n              setActiveChat(chatUpdate);\n            }\n\n            deleteTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.PRESENCE:\n        setChats(chats.map(cht => {\n          if (cht.jid && data.from) {\n            if (cht.jid === data.from.split(\"/\")[0] && !cht.jid.includes(\"@conference.\")) {\n              cht.status = data.status;\n            }\n          }\n\n          return cht;\n        }));\n        setContacts(contacts.map(ctc => {\n          if (ctc.jid && data.from) {\n            if (ctc.jid === data.from.split(\"/\")[0] && !ctc.jid.includes(\"@conference.\")) {\n              ctc.status = data.status;\n            }\n          }\n\n          return ctc;\n        }));\n        break;\n\n      case Events.SEND_EVENT:\n        const event = data;\n        let finded;\n        let newChat = [];\n        chats.forEach(chat => {\n          if (event.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || event.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\n            finded = true;\n            if (!chat.messages.filter(msg => msg.id === event.id)[0]) chat.messages.push(event);\n\n            if (chat.id === activeChat.id) {\n              let chatTemporary = { ...chat\n              };\n              setActiveChat(chatTemporary);\n            } else {\n              chat.unRead++;\n              showNotification(chat.name);\n            }\n\n            newChat.unshift(chat);\n          } else {\n            newChat.push(chat);\n          }\n        });\n\n        if (!finded) {\n          groups.forEach(grp => {\n            if (event.fromUser.split(\"@\")[0] === grp.jid.split(\"@\")[0] || event.toUser.split(\"@\")[0] === grp.jid.split(\"@\")[0]) {\n              finded = true;\n              let groupToBeInserted = {\n                added: grp.added,\n                chatType: ChatType.GROUP,\n                favorite: grp.favorite,\n                id: grp.groupId,\n                inputMessage: \"\",\n                isTyping: false,\n                jid: grp.jid,\n                messages: [event],\n                name: grp.name,\n                unRead: 0,\n                attachedFileList: undefined,\n                department: undefined,\n                email: undefined,\n                groupId: grp.groupId,\n                members: grp.members,\n                messageLoaded: undefined,\n                profilePicture: grp.profilePicture,\n                status: undefined,\n                userDescription: grp.description\n              };\n              newChat.unshift(groupToBeInserted);\n              setActiveChat(groupToBeInserted);\n            }\n          });\n        }\n\n        if (!finded) {\n          var _squadService62;\n\n          (_squadService62 = squadService) === null || _squadService62 === void 0 ? void 0 : _squadService62.groups.list(grps => {\n            setGroups(grps);\n            grps.forEach(grp => {\n              if (event.fromUser.split(\"@\")[0] === grp.jid.split(\"@\")[0] || event.toUser.split(\"@\")[0] === grp.jid.split(\"@\")[0]) {\n                finded = true;\n                let groupToBeInserted = {\n                  added: grp.added,\n                  chatType: ChatType.GROUP,\n                  favorite: grp.favorite,\n                  id: grp.groupId,\n                  inputMessage: \"\",\n                  isTyping: false,\n                  jid: grp.jid,\n                  messages: [event],\n                  name: grp.name,\n                  unRead: 1,\n                  attachedFileList: undefined,\n                  department: undefined,\n                  email: undefined,\n                  groupId: grp.groupId,\n                  members: grp.members,\n                  messageLoaded: undefined,\n                  profilePicture: grp.profilePicture,\n                  status: undefined,\n                  userDescription: grp.description\n                };\n                newChat.unshift(groupToBeInserted);\n              }\n            });\n          });\n        }\n\n        setChats(newChat);\n\n        if (event.eventId === 6 || event.eventId === 2) {\n          refreshMembers(event);\n        }\n\n        break;\n\n      default:\n        console.log(evt);\n        break;\n    }\n  }\n\n  const refreshMembers = event => {\n    var _squadService63;\n\n    (_squadService63 = squadService) === null || _squadService63 === void 0 ? void 0 : _squadService63.groups.list(grps => {\n      setGroups(grps);\n      setChats(chats.map(chat => {\n        if (event.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || event.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\n          var _grps$find;\n\n          chat.members = (_grps$find = grps.find(grp => grp.groupId === chat.id)) === null || _grps$find === void 0 ? void 0 : _grps$find.members;\n\n          if (chat.id === activeChat.id) {\n            setActiveChat(chat);\n          }\n        }\n\n        return chat;\n      }));\n    });\n  };\n\n  const deleteTypingTimeout = jid => {\n    var _typingTimeout$get;\n\n    clearTimeout(((_typingTimeout$get = typingTimeout.get(jid)) === null || _typingTimeout$get === void 0 ? void 0 : _typingTimeout$get.timeout) || setTimeout(() => {}, 1));\n    typingTimeout.delete(jid);\n  };\n\n  const setTypingTimeout = jid => {\n    const timeoutData = {\n      msgStr: \"\",\n      timeout: setTimeout(() => {\n        setChats(chats.map(cht => {\n          if (cht.jid === jid) {\n            cht.isTyping = false;\n            if (activeChat.jid === jid) setActiveChat(cht);\n          }\n\n          return cht;\n        }));\n      }, 20000)\n    };\n    typingTimeout.set(jid, timeoutData);\n  };\n\n  (_squadService64 = squadService) === null || _squadService64 === void 0 ? void 0 : _squadService64.updateChatSubscribeFuncition(chatCommunicatorSubscribe); // Comentado para evitar warnings no console enquanto não é usado\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\n  //     squadService?.groups.list((groups) => {\n  //       setGroups(groups);\n  //       callback(true);\n  //     });\n  //   });\n  // }\n\n  function sendMessage(chat, message, callback) {\n    var _squadService65, _squadService65$chat;\n\n    (_squadService65 = squadService) === null || _squadService65 === void 0 ? void 0 : (_squadService65$chat = _squadService65.chat) === null || _squadService65$chat === void 0 ? void 0 : _squadService65$chat.chat.sendMessage(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message, callback);\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","DeliverStatus","XMPPChatType","getFileName","getUrlBooleans","isUrl","ReadStatus","useGroup","useContact","useModal","UserType","useConference","moment","ConferenceRoomParticipantType","PresenceStatus","DateTime","useLoading","squadService","typingTimeout","Map","chats","setChats","activeChat","replyMsg","setReplyMsg","setActiveChat","forwardMessageList","setForwardMessageList","setShowChat","showChatProfileSidebar","setFavoriteMessagePayload","favoriteMessagePayload","flagToLoadFavoriteMessages","setFlagToLoadFavoriteMessages","setFavoriteMessages","favoriteMessages","deleteFavoriteMessage","setDeleteFavoriteMessage","contactsSearch","setContactsSearched","newFavorite","setNewFavorite","contacts","setContacts","setContactsOutsideUserContacts","toggleAddingContacts","setToggleAddingContacts","checkedContacts","setCheckedContacts","removedContact","setRemovedContact","checkedMembers","setCheckedMembers","groupToInsertMember","setGroupToInsertMember","clickedContact","setClickedContact","user","setUser","changedUserData","changedUserPassword","setChangedUserPassword","showModalForwardMessageTo","setShowModalForwardMessageTo","showModalAddContact","setDisconnected","setGroups","groups","memberQuit","groupIdOfLeaveRequest","setGroupIdOfLeaveRequest","setMemberQuit","groupToRemoveContact","setGroupToRemoveContact","removedMember","setRemovedMember","toggleMemberRole","setToggleMemberRole","changeGroupData","setChangeGroupData","groupToCreate","setGroupToCreate","groupJid","setGroupJid","listRooms","setListRooms","setConferenceList","setCreateConference","createConference","init","getInstance","chatCommunicatorSubscribe","get","Notification","requestPermission","clearSendFile","chatId","messageId","map","chat","id","messages","message","deliverStatus","QUEUED","sendFile","undefined","onChatsChange","onActiveChatChange","checkSendMessage","checkAttachedFiles","checkNewContact","cht","added","add","success","jid","list","ctcs","attachedFileList","attachments","length","checkSearchMessages","messageLoaded","forEach","msg","find","m","unshift","getFileExtension","url","split","SENDING","files","sendFiles","data","updateMessageFiles","console","log","saveData","createdAt","local","toISO","join","slice","src","dst","fileExtension","fileName","fileUrl","kind","chatType","isForwardMessage","sendMessage","msgId","updateMessage","replyMsgCopy","newChat","booleans","time","Date","toISOString","isFileMessage","isImageMessage","isVideoMessage","isAudioMessage","filter","newChats","push","replyedMsg","isReplyMessage","replyedMessage","replyedMessageId","replyedMessageTo","getContacts","fromUser","name","forwardMessage","chatsFinded","oldChats","ctc","i","userName","toUser","ctcsNotInChat","profilePicture","status","unRead","includes","GROUP","USER","inputMessage","isTyping","email","favorite","newMessage","onChangeStatus","client","changeStatus","onSearchContacts","search","searchList","onSearchContactsOutsideUserContacts","getContactsOutsideUserLists","onToggleSidebarMenu","onRemovingMember","group","grp","groupId","removeMember","members","mb","userId","sendEvent","onLeavingGroup","leftingGroup","memberId","sendPresence","UNAVAILABLE","showNotification","permission","body","icon","require","silent","onFavoriteMessage","save","contactType","onAddingMembers","asynchronousFlag","copiaCheckedMembers","copiaGroupToInsertMember","ctt","addMember","grps","foundedGroup","onAddingContacts","addContacts","onAddingContactOnGroupList","onToggleMemberRole","gp","gpId","mbId","mbRole","newRole","ADMIN","role","member","onChangeGroupData","editGroupInfo","groupName","description","createGroup","create","parsedGroup","onListRooms","conferences","joinGroups","conf","onCreateRoom","momentStartDate","startDate","startTime","momentFinalDate","duration","parsedConference","waitMod","mdCheck","startDatetime","format","stopDatetime","createdConference","participantList","selectedContact","userUuid","type","PARTICIPANT","userModerator","emailList","participant","PARTICIPANT_EXTERNAL","addParticipants","s","onNewFavorite","onUserDataChange","onUserPasswordChange","onRemovingContact","onListFavoriteMessages","onRemoveFavoriteMessage","deleteFavorite","listFavorites","contactTo","content","contentType","messageDate","Object","values","err","remove","changePassword","password","oldPassword","newPassword","changeUserData","chgd","newFavoriteLoad","setFavorite","evt","RECONNECTED","ONLINE","receivedChats","ERROR","OFFLINE","localStorage","getItem","makeChat","removeItem","RECONNECTING","MESSAGE","chatTemporary","listContacts","c","listGroups","g","conferenceRoomParticipants","department","userDescription","RECEIVED","DELIVERED","DISPLAYED","readStatus","READ","COMPOSING","deleteTypingTimeout","setTypingTimeout","ACTIVE","chatUpdate","PRESENCE","from","SEND_EVENT","event","finded","groupToBeInserted","eventId","refreshMembers","clearTimeout","timeout","setTimeout","delete","timeoutData","msgStr","set","updateChatSubscribeFuncition","callback","GROUPCHAT","CHAT"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\nimport { Events, SendImageCallbackReturn } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\r\nimport { SendMessageCallback } from \"./types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport { useModal } from \"../contexts/ModalContext\";\r\nimport IContact from \"../alias/IContact\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport UserType from \"../enuns/UserType\";\r\nimport { useConference } from \"../contexts/ConferenceContext\";\r\nimport moment from \"moment\";\r\nimport { ConferenceRoomParticipantType } from \"./business/Conferences\";\r\nimport { ConferenceRoomParticipant } from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport PresenceStatus from \"../enuns/PresenceStatus\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useLoading } from \"../contexts/LoadingContext\";\r\n// import { activeChat as actChtData } from \"../data/chat\";\r\n//import { callbackify } from \"util\";\r\n\r\n// import IContact from \"../alias/IContact\";\r\n//Comentar para Evitar Warnings no console\r\ninterface CreateGroupCallback {\r\n  (success: boolean): void;\r\n}\r\ninterface TypingTimeoutData {\r\n  timeout: NodeJS.Timeout;\r\n  msgStr: string;\r\n}\r\nlet squadService: SquadService | undefined;\r\nlet typingTimeout: Map<string, TypingTimeoutData> = new Map<\r\n  string,\r\n  TypingTimeoutData\r\n>();\r\n\r\nconst SquadCommunicator: React.FC = () => {\r\n  const {\r\n    chats,\r\n    setChats,\r\n    activeChat,\r\n    replyMsg,\r\n    setReplyMsg,\r\n    setActiveChat,\r\n    forwardMessageList,\r\n    setForwardMessageList,\r\n    setShowChat,\r\n    showChatProfileSidebar,\r\n    setFavoriteMessagePayload,\r\n    favoriteMessagePayload,\r\n    flagToLoadFavoriteMessages,\r\n    setFlagToLoadFavoriteMessages,\r\n    setFavoriteMessages,\r\n    favoriteMessages,\r\n    deleteFavoriteMessage,\r\n    setDeleteFavoriteMessage,\r\n  } = useChat();\r\n  const {\r\n    contactsSearch,\r\n    setContactsSearched,\r\n    newFavorite,\r\n    setNewFavorite,\r\n    contacts,\r\n    setContacts,\r\n    setContactsOutsideUserContacts,\r\n    toggleAddingContacts,\r\n    setToggleAddingContacts,\r\n    checkedContacts,\r\n    setCheckedContacts,\r\n    removedContact,\r\n    setRemovedContact,\r\n    checkedMembers,\r\n    setCheckedMembers,\r\n    groupToInsertMember,\r\n    setGroupToInsertMember,\r\n    clickedContact,\r\n    setClickedContact,\r\n  } = useContact();\r\n  const {\r\n    user,\r\n    setUser,\r\n    changedUserData,\r\n    changedUserPassword,\r\n    setChangedUserPassword,\r\n  } = useAuth();\r\n  const {\r\n    showModalForwardMessageTo,\r\n    setShowModalForwardMessageTo,\r\n    showModalAddContact,\r\n  } = useModal();\r\n  const { setDisconnected } = useLoading();\r\n\r\n  const {\r\n    setGroups,\r\n    groups,\r\n    memberQuit,\r\n    groupIdOfLeaveRequest,\r\n    setGroupIdOfLeaveRequest,\r\n    setMemberQuit,\r\n    groupToRemoveContact,\r\n    setGroupToRemoveContact,\r\n    removedMember,\r\n    setRemovedMember,\r\n    toggleMemberRole,\r\n    setToggleMemberRole,\r\n    changeGroupData,\r\n    setChangeGroupData,\r\n    groupToCreate,\r\n    setGroupToCreate,\r\n    groupJid,\r\n    setGroupJid,\r\n  } = useGroup();\r\n  const {\r\n    listRooms,\r\n    setListRooms,\r\n    setConferenceList,\r\n    setCreateConference,\r\n    createConference,\r\n  } = useConference();\r\n  const init = () => {\r\n    // localStorage.setItem(\r\n    //   \"authorization\",\r\n    //   JSON.stringify({\r\n    //     access_token: \"71e1503a96d94e1e231444bc5c0399ca\",\r\n    //     user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n    //     user_name: \"ZZ Romero 2\",\r\n    //     expires_in: 2592000,\r\n    //     email: \"romero2@digivox.com.br\",\r\n    //     baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n    //   })\r\n    // );\r\n    squadService = SquadService.getInstance({\r\n      chatCommunicatorSubscribe: chatCommunicatorSubscribe,\r\n    });\r\n    squadService?.user.get((user: IUser) => {\r\n      setUser(user);\r\n      //Ao iniciar o website\r\n      Notification.requestPermission();\r\n    });\r\n  };\r\n\r\n  const clearSendFile = (chatId: string, messageId: string) => {\r\n    setChats(\r\n      chats.map((chat) => {\r\n        if (chat.id === chatId) {\r\n          chat.messages = chat.messages.map((message) => {\r\n            if (message.id === messageId) {\r\n              message.deliverStatus = DeliverStatus.QUEUED;\r\n              message.sendFile = undefined;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return chat;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onChatsChange = () => {\r\n    // chats.forEach((chat) => {\r\n    // });\r\n  };\r\n  const onActiveChatChange = () => {\r\n    checkSendMessage(activeChat);\r\n    checkAttachedFiles(activeChat);\r\n    checkNewContact(activeChat);\r\n    // checkTyping(activeChat)\r\n  };\r\n  // const checkTyping = (chat: IChat) => {\r\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\r\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\r\n  //     if (oldTimeoutData)\r\n  //       clearTimeout(oldTimeoutData.timeout)\r\n  //     else\r\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\r\n  //     const timeoutData = {\r\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\r\n  //       msgStr: `${chat.inputMessage}`\r\n  //     }\r\n  //     typingTimeout.set(chat.jid, timeoutData)\r\n  //   }\r\n  // }\r\n  const checkNewContact = (cht: IChat) => {\r\n    if (!cht.added) {\r\n      squadService?.contacts.add(cht, (success: boolean) => {\r\n        if (success) {\r\n          setChats(\r\n            chats.map((chat) => {\r\n              if (chat.jid === cht.jid) {\r\n                chat.added = true;\r\n              }\r\n              if (activeChat.jid === chat.jid) setActiveChat(chat);\r\n              return chat;\r\n            })\r\n          );\r\n          squadService?.contacts.list((ctcs) => {\r\n            setContacts(ctcs);\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkAttachedFiles = (cht: IChat) => {\r\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\r\n      squadService?.attachments.list(cht, (attachments) => {\r\n        if (attachments.length > 0) {\r\n          setActiveChat({ ...cht, attachedFileList: attachments });\r\n        } else setActiveChat({ ...cht, attachedFileList: null });\r\n      });\r\n    }\r\n  };\r\n\r\n  /* getMessageUserProfilePicture = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.profilePicture;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])\r\n        ?.profilePicture;\r\n    }\r\n  }; */\r\n\r\n  const checkSearchMessages = () => {\r\n    if (activeChat.messageLoaded) {\r\n      squadService?.messages.list(activeChat, (messages) => {\r\n        if (messages.length) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.id === activeChat.id) {\r\n                messages.forEach((msg) => {\r\n                  if (!activeChat.messages.find((m) => m.id === msg.id))\r\n                    cht.messages.unshift(msg);\r\n                });\r\n                cht.messageLoaded = false;\r\n                setActiveChat(cht);\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n        } else {\r\n          const chat = { ...activeChat, messageLoaded: false };\r\n          setActiveChat(chat);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const getFileExtension = (url: string) => {\r\n    return url.split(\".\")[1];\r\n  };\r\n\r\n  const checkSendMessage = (chat: IChat) => {\r\n    chat.messages.forEach((msg) => {\r\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\r\n        if (msg.sendFile && !replyMsg) {\r\n          const files = [msg.sendFile];\r\n          clearSendFile(chat.id, msg.id);\r\n          squadService?.chat?.sendFiles(\r\n            chat,\r\n            files,\r\n            (data: SendImageCallbackReturn) => {\r\n              updateMessageFiles(data, chat, msg);\r\n              console.log(\r\n                \"jidFromUser:\",\r\n                squadService?.user.user?.jid as string\r\n              );\r\n              squadService?.attachments.saveData(\r\n                {\r\n                  createdAt: DateTime.local()\r\n                    .toISO()\r\n                    .split(\"T\")\r\n                    .join(\" \")\r\n                    .slice(0, 18),\r\n                  src: squadService.user.user?.jid as string,\r\n                  dst: chat.jid,\r\n                  fileExtension: getFileExtension(getFileName(data.url)),\r\n                  fileName: getFileName(data.url),\r\n                  fileUrl: data.url,\r\n                  kind: chat.chatType,\r\n                },\r\n                () => true\r\n              );\r\n            }\r\n          );\r\n        } else {\r\n          if (!msg.isForwardMessage && !replyMsg) {\r\n            sendMessage(chat, msg.message, (msgId) =>\r\n              updateMessage(msgId, chat, msg)\r\n            );\r\n          } else if (replyMsg) {\r\n            const replyMsgCopy = { ...replyMsg };\r\n            setReplyMsg(undefined);\r\n            squadService?.chat?.replyMsg(chat, msg, replyMsgCopy, (msgId) => {\r\n              updateMessage(msgId, chat, msg, replyMsgCopy);\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const updateMessageFiles = (\r\n    data: SendImageCallbackReturn,\r\n    chat: IChat,\r\n    msg: IMessage\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        const booleans = getUrlBooleans(data.url);\r\n        message.id = data.msgId;\r\n        message.fileUrl = data.url;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        message.message = getFileName(data.url);\r\n        message.isFileMessage = booleans.isFileMessage;\r\n        message.isImageMessage = booleans.isImageMessage;\r\n        message.isVideoMessage = booleans.isVideoMessage;\r\n        message.isAudioMessage = booleans.isAudioMessage;\r\n      }\r\n      return message;\r\n    });\r\n    setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      const newChats: IChat[] = [];\r\n      chats.forEach((cht) => {\r\n        if (cht.id === chat.id) {\r\n          cht.messages = newChat.messages;\r\n          newChats.unshift(cht);\r\n        } else {\r\n          newChats.push(cht);\r\n        }\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const updateMessage = (\r\n    msgId: string,\r\n    chat: IChat,\r\n    msg: IMessage,\r\n    replyedMsg: IMessage | undefined = undefined\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        message.id = msgId;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        if (replyedMsg) {\r\n          message.isReplyMessage = true;\r\n          message.replyedMessage = replyedMsg.message || replyedMsg.fileUrl;\r\n          message.replyedMessageId = replyedMsg.id;\r\n          message.replyedMessageTo =\r\n            squadService?.contacts\r\n              .getContacts()\r\n              .get(replyedMsg.fromUser.split(\"@\")[0])?.name ||\r\n            squadService?.user?.user?.id === replyedMsg.fromUser.split(\"@\")[0]\r\n              ? squadService?.user?.user?.name\r\n              : \"Participant\";\r\n        }\r\n        if (isUrl(message.message)) {\r\n          const booleans = getUrlBooleans(message.message);\r\n          message.isFileMessage = booleans.isFileMessage;\r\n          message.isImageMessage = booleans.isImageMessage;\r\n          message.isAudioMessage = booleans.isAudioMessage;\r\n          message.isVideoMessage = booleans.isVideoMessage;\r\n          message.fileUrl = message.message;\r\n        }\r\n      }\r\n      return message;\r\n    });\r\n    if (activeChat.jid === newChat.jid) setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      const newChats: IChat[] = [];\r\n      chats.forEach((cht) => {\r\n        if (cht.id === chat.id) {\r\n          cht.messages = newChat.messages;\r\n          newChats.unshift(cht);\r\n        } else {\r\n          newChats.push(cht);\r\n        }\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const forwardMessage = () => {\r\n    if (forwardMessageList && showModalForwardMessageTo) {\r\n      const ctcs = [...forwardMessageList];\r\n      const message = { ...showModalForwardMessageTo };\r\n      setForwardMessageList(undefined);\r\n      setShowModalForwardMessageTo(undefined);\r\n      const chatsFinded: IChat[] = [];\r\n      const oldChats = [\r\n        ...chats.map((chat) => {\r\n          return { ...chat };\r\n        }),\r\n      ];\r\n      ctcs?.forEach((ctc, i) => {\r\n        const cht = oldChats.find((cht) => cht.jid === ctc.jid);\r\n        if (cht) {\r\n          const msg = {\r\n            ...message,\r\n            id: `${cht.messages.length + 1}`,\r\n            userName: user.name,\r\n            fromUser: user.id,\r\n            toUser: ctc.jid.split(\"@\")[0],\r\n            message: message.fileUrl || message.message,\r\n            deliverStatus: DeliverStatus.QUEUED,\r\n            isForwardMessage: true,\r\n          };\r\n          squadService?.chat?.forwardMessage(cht, msg, (msgId) => {\r\n            msg.id = msgId;\r\n            cht.messages.push(msg);\r\n            chatsFinded.push(cht);\r\n          });\r\n        }\r\n      });\r\n      const newChats = oldChats.map(\r\n        (chat) => chatsFinded.find((cht) => cht.id === chat.id) || chat\r\n      );\r\n      const ctcsNotInChat: (IContact | IGroup)[] = ctcs.filter(\r\n        (ctc) => !newChats.find((cht) => ctc.jid === cht.jid)\r\n      );\r\n      ctcsNotInChat.forEach((ctc, i) => {\r\n        const chat = {\r\n          id: ctc.jid.split(\"@\")[0],\r\n          jid: ctc.jid,\r\n          name: ctc.name,\r\n          profilePicture: ctc.profilePicture,\r\n          status: (ctc as IContact).status || undefined,\r\n          unRead: 0,\r\n          chatType: ctc.jid.includes(\"@conference.\")\r\n            ? ChatType.GROUP\r\n            : ChatType.USER,\r\n          inputMessage: \"\",\r\n          messageLoaded: false,\r\n          isTyping: false,\r\n          messages: [] as IMessage[],\r\n          email: (ctc as IContact).email || undefined,\r\n          favorite: ctc.favorite,\r\n          added: ctc.added,\r\n        };\r\n        const newMessage: IMessage = {\r\n          ...message,\r\n          id: `${1}`,\r\n          userName: user.name,\r\n          fromUser: user.id,\r\n          toUser: ctc.jid.split(\"@\")[0],\r\n          deliverStatus: DeliverStatus.QUEUED,\r\n          isForwardMessage: true,\r\n        };\r\n        squadService?.chat?.forwardMessage(chat, newMessage, (msgId) => {\r\n          newMessage.id = msgId;\r\n          chat.messages.push(newMessage);\r\n          newChats.unshift(chat);\r\n        });\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const onChangeStatus = () => {\r\n    if (squadService?.chat?.chat?.client?.status === \"online\") {\r\n      squadService?.chat?.changeStatus(user.status);\r\n    }\r\n  };\r\n  const onSearchContacts = () => {\r\n    if (contactsSearch.length > 2) {\r\n      squadService?.contacts.search(contactsSearch, (searchList) => {\r\n        setContactsSearched(searchList);\r\n      });\r\n    } else {\r\n      setContactsSearched(undefined);\r\n    }\r\n  };\r\n\r\n  const onSearchContactsOutsideUserContacts = () => {\r\n    squadService?.contacts.getContactsOutsideUserLists((contacts) => {\r\n      if (contacts) {\r\n        setContactsOutsideUserContacts(contacts);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onToggleSidebarMenu = () => {\r\n    squadService?.contacts.getContactsOutsideUserLists((contacts) => {\r\n      if (contacts) {\r\n        setContactsOutsideUserContacts(contacts);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onRemovingMember = () => {\r\n    if (removedMember && groupToRemoveContact) {\r\n      let group = groups.find((grp) => grp.groupId === groupToRemoveContact);\r\n      if (group)\r\n        squadService?.groups.removeMember(\r\n          group.groupId,\r\n          removedMember,\r\n          (success: boolean) => {\r\n            if (success) {\r\n              setGroups(\r\n                groups.map((grp) => {\r\n                  if (grp.groupId === group?.groupId)\r\n                    grp.members = grp.members.filter(\r\n                      (mb) => mb.userId !== removedMember.userId\r\n                    );\r\n                  return grp;\r\n                })\r\n              );\r\n              setChats(\r\n                chats.map((cht) => {\r\n                  if (cht.groupId === group?.groupId) {\r\n                    cht.members = cht.members?.filter(\r\n                      (mb) => mb.userId !== removedMember.userId\r\n                    );\r\n                    if (cht.groupId === activeChat.groupId) setActiveChat(cht);\r\n                  }\r\n                  return cht;\r\n                })\r\n              );\r\n              if (group) {\r\n                squadService?.chat?.chat.sendEvent(\r\n                  group?.jid,\r\n                  removedMember.userId,\r\n                  \"6\"\r\n                );\r\n              }\r\n              setRemovedMember(undefined);\r\n              setGroupToRemoveContact(undefined);\r\n            }\r\n          }\r\n        );\r\n    }\r\n  };\r\n\r\n  const onLeavingGroup = () => {\r\n    if (memberQuit && groupIdOfLeaveRequest && groupJid) {\r\n      squadService?.groups.leftingGroup(\r\n        { groupId: groupIdOfLeaveRequest, memberId: memberQuit.userId },\r\n        (success: boolean) => {\r\n          if (success) {\r\n            squadService?.chat?.chat.sendPresence(\r\n              PresenceStatus.UNAVAILABLE,\r\n              `${groupJid}/${memberQuit.userId}`\r\n            );\r\n            squadService?.chat?.chat.sendEvent(\r\n              groupIdOfLeaveRequest,\r\n              memberQuit.userId,\r\n              \"3\",\r\n              undefined\r\n            );\r\n            setChats(\r\n              chats.filter((cht) => cht.groupId !== groupIdOfLeaveRequest)\r\n            );\r\n            setGroups(\r\n              groups.filter((grp) => grp.groupId !== groupIdOfLeaveRequest)\r\n            );\r\n            if (activeChat.groupId === groupIdOfLeaveRequest) {\r\n              setShowChat(false);\r\n            }\r\n          }\r\n          setGroupJid(undefined);\r\n          setMemberQuit(undefined);\r\n          setGroupIdOfLeaveRequest(\"\");\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const showNotification = (name: string) => {\r\n    if (Notification.permission === \"granted\") {\r\n      new Notification(\"Nova mensagem\", {\r\n        body: name,\r\n        icon: require(\"../assets/images/logo.png\"),\r\n        silent: true,\r\n      });\r\n    } else {\r\n      Notification.requestPermission();\r\n    }\r\n  };\r\n\r\n  const onFavoriteMessage = () => {\r\n    if (favoriteMessagePayload) {\r\n      squadService?.messages.save(favoriteMessagePayload, (success) => {\r\n        if (success) {\r\n          setFavoriteMessagePayload(undefined);\r\n          setFlagToLoadFavoriteMessages({\r\n            contactType: favoriteMessagePayload.contactType as string,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const onAddingMembers = () => {\r\n    let asynchronousFlag = 0;\r\n    if (checkedMembers && groupToInsertMember) {\r\n      let copiaCheckedMembers = [...checkedMembers],\r\n        copiaGroupToInsertMember = { ...groupToInsertMember };\r\n      copiaCheckedMembers.forEach((ctt) => {\r\n        squadService?.groups.addMember(\r\n          copiaGroupToInsertMember,\r\n          ctt,\r\n          (success: boolean) => {\r\n            if (success) {\r\n              squadService?.chat?.chat.sendEvent(\r\n                copiaGroupToInsertMember.jid,\r\n                ctt.id,\r\n                \"2\"\r\n              );\r\n              asynchronousFlag++;\r\n\r\n              if (copiaCheckedMembers.length === asynchronousFlag) {\r\n                squadService?.groups.list((grps) => {\r\n                  setGroups(grps);\r\n                  setChats(\r\n                    chats.map((cht) => {\r\n                      if (cht.groupId === copiaGroupToInsertMember.groupId) {\r\n                        let foundedGroup = grps.find(\r\n                          (grp) => grp.groupId === cht.groupId\r\n                        );\r\n                        cht.members = foundedGroup?.members;\r\n                        if (activeChat.groupId === cht.groupId) {\r\n                          activeChat.members = foundedGroup?.members;\r\n                          setActiveChat(activeChat);\r\n                        }\r\n                      }\r\n                      return cht;\r\n                    })\r\n                  );\r\n                });\r\n              }\r\n            }\r\n          }\r\n        );\r\n      });\r\n      setCheckedMembers([]);\r\n      setToggleAddingContacts(false);\r\n      setGroupToInsertMember(undefined);\r\n    }\r\n  };\r\n\r\n  const onAddingContacts = () => {\r\n    let asynchronousFlag = 0;\r\n    if (checkedContacts && toggleAddingContacts) {\r\n      checkedContacts.forEach((ctt) => {\r\n        if (!ctt.added) {\r\n          squadService?.contacts.addContacts(ctt, (success: boolean) => {\r\n            if (success) {\r\n              asynchronousFlag++;\r\n              if (checkedContacts.length === asynchronousFlag) {\r\n                squadService?.contacts.list((contacts) => {\r\n                  setContacts(contacts);\r\n                  setCheckedContacts([]);\r\n                  setToggleAddingContacts(false);\r\n                });\r\n              }\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const onAddingContactOnGroupList = () => {\r\n    if (clickedContact) {\r\n      if (!clickedContact.added) {\r\n        squadService?.contacts.addContacts(\r\n          clickedContact,\r\n          (success: boolean) => {\r\n            if (success) {\r\n              squadService?.contacts.list((contacts) => {\r\n                setContacts(contacts);\r\n                setClickedContact(undefined);\r\n              });\r\n            }\r\n          }\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const onToggleMemberRole = () => {\r\n    if (toggleMemberRole) {\r\n      squadService?.groups.list((grps) => {\r\n        grps.forEach((gp) => {\r\n          if (gp.groupId === toggleMemberRole.gpId) {\r\n            gp.members.forEach((mb) => {\r\n              if (mb.userId === toggleMemberRole.mbId) {\r\n                squadService?.contacts.toggleMemberRole(\r\n                  toggleMemberRole.mbId,\r\n                  toggleMemberRole.gpId,\r\n                  toggleMemberRole.mbRole,\r\n                  (success: boolean) => {\r\n                    if (success) {\r\n                      const newRole =\r\n                        toggleMemberRole.mbRole === UserType.USER\r\n                          ? UserType.ADMIN\r\n                          : UserType.USER;\r\n                      setToggleMemberRole(undefined);\r\n                      setChats(\r\n                        chats.map((cht) => {\r\n                          if (cht.groupId === toggleMemberRole.gpId) {\r\n                            cht.members = cht.members?.map((mb) => {\r\n                              if (mb.userId === toggleMemberRole.mbId) {\r\n                                mb.role = newRole;\r\n                                if (cht.groupId) {\r\n                                  if (mb.role === UserType.ADMIN) {\r\n                                    squadService?.chat?.chat.sendEvent(\r\n                                      cht.groupId,\r\n                                      mb.userId,\r\n                                      \"8\"\r\n                                    );\r\n                                  } else {\r\n                                    squadService?.chat?.chat.sendEvent(\r\n                                      cht.groupId,\r\n                                      mb.userId,\r\n                                      \"9\"\r\n                                    );\r\n                                  }\r\n                                }\r\n                              }\r\n                              return mb;\r\n                            });\r\n                            if (activeChat.groupId === cht.groupId)\r\n                              setActiveChat(cht);\r\n                          }\r\n                          return cht;\r\n                        })\r\n                      );\r\n                      setGroups(\r\n                        groups.map((grp) => {\r\n                          if (grp.groupId === toggleMemberRole.gpId) {\r\n                            grp.members = grp.members.map((member) => {\r\n                              if (member.userId === toggleMemberRole.mbId)\r\n                                member.role = newRole;\r\n                              return member;\r\n                            });\r\n                          }\r\n                          return grp;\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                );\r\n              }\r\n            });\r\n          }\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const onChangeGroupData = () => {\r\n    if (changeGroupData) {\r\n      squadService?.groups.editGroupInfo(\r\n        {\r\n          groupId: changeGroupData.groupId as string,\r\n          groupName: changeGroupData.groupName,\r\n          members: changeGroupData.members,\r\n          description: changeGroupData.description,\r\n        },\r\n        (success: boolean) => {\r\n          if (success) {\r\n            squadService?.groups.list((grps) => {\r\n              let foundedGroup = grps.find(\r\n                (grp) => grp.groupId === changeGroupData.groupId\r\n              );\r\n              setGroups(grps);\r\n              setChats(\r\n                chats.map((cht) => {\r\n                  if (cht.groupId === changeGroupData.groupId) {\r\n                    if (foundedGroup?.name) {\r\n                      cht.name = foundedGroup.name;\r\n                    }\r\n                    if (activeChat.groupId === cht.groupId) {\r\n                      if (foundedGroup?.name) {\r\n                        cht.name = foundedGroup?.name;\r\n                      }\r\n                      setActiveChat(cht);\r\n                    }\r\n                  }\r\n                  return cht;\r\n                })\r\n              );\r\n              squadService?.chat?.chat.sendEvent(\r\n                foundedGroup?.jid as string,\r\n                undefined,\r\n                \"10\",\r\n                undefined\r\n              );\r\n              setChangeGroupData(undefined);\r\n            });\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const createGroup = () => {\r\n    squadService?.groups.create(groupToCreate, (parsedGroup) => {\r\n      if (parsedGroup) {\r\n        squadService?.chat?.chat.sendEvent(\r\n          parsedGroup.jid,\r\n          parsedGroup.jid,\r\n          \"1\"\r\n        );\r\n        squadService?.groups.list((groups) => {\r\n          setGroups(groups);\r\n          setGroupToCreate(undefined);\r\n        });\r\n        squadService?.chat?.chat.sendEvent(\r\n          parsedGroup.jid,\r\n          undefined,\r\n          \"1\",\r\n          undefined\r\n        );\r\n      }\r\n    });\r\n  };\r\n  const onListRooms = () => {\r\n    if (listRooms) {\r\n      squadService?.conferences.list((conferences) => {\r\n        setConferenceList(conferences);\r\n        squadService?.chat?.joinGroups(conferences.map((conf) => conf.jid));\r\n      });\r\n      setListRooms(false);\r\n    }\r\n  };\r\n  const onCreateRoom = () => {\r\n    if (createConference) {\r\n      const momentStartDate = moment(\r\n        `${createConference.startDate} ${createConference.startTime}:00`\r\n      );\r\n      const momentFinalDate = moment(momentStartDate)\r\n        .add(createConference.duration.split(\":\")[0], \"hours\")\r\n        .add(createConference.duration.split(\":\")[1], \"minutes\");\r\n      const parsedConference = {\r\n        name: createConference.name,\r\n        waitMod: createConference.mdCheck,\r\n        startDatetime: `${momentStartDate.format(\"DD-MM-YYYY hh:mm:ss\")}`,\r\n        stopDatetime: `${momentFinalDate.format(\"DD-MM-YYYY hh:mm:ss\")}`,\r\n      };\r\n      squadService?.conferences.create(\r\n        parsedConference,\r\n        (createdConference) => {\r\n          const participantList: ConferenceRoomParticipant[] = [];\r\n          if (createdConference?.id) {\r\n            createConference.selectedContact?.forEach((ctc) => {\r\n              participantList.push({\r\n                userUuid: ctc.id,\r\n                description: \"\",\r\n                email: ctc.email,\r\n                name: ctc.name,\r\n                type: ConferenceRoomParticipantType.PARTICIPANT,\r\n                userModerator: false,\r\n              });\r\n            });\r\n            createConference.emailList?.forEach((participant) => {\r\n              participantList.push({\r\n                userUuid: null,\r\n                description: \"\",\r\n                email: participant.email,\r\n                name: participant.name,\r\n                type: ConferenceRoomParticipantType.PARTICIPANT_EXTERNAL,\r\n                userModerator: false,\r\n              });\r\n            });\r\n            squadService?.conferences.addParticipants(\r\n              createdConference.id,\r\n              participantList,\r\n              (s) => {\r\n                if (s) {\r\n                  setCreateConference(undefined);\r\n                  setListRooms(true);\r\n                }\r\n              }\r\n            );\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(onChatsChange, [chats]);\r\n  useEffect(onNewFavorite, [newFavorite]);\r\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\r\n  useEffect(onActiveChatChange, [activeChat]);\r\n  useEffect(onUserDataChange, [changedUserData]);\r\n  useEffect(onUserPasswordChange, [changedUserPassword]);\r\n  useEffect(onChangeStatus, [user.status]);\r\n  useEffect(forwardMessage, [forwardMessageList]);\r\n  useEffect(onSearchContacts, [contactsSearch]);\r\n  useEffect(onSearchContactsOutsideUserContacts, [showModalAddContact]);\r\n  useEffect(onAddingContacts, [toggleAddingContacts]);\r\n  useEffect(onRemovingMember, [removedMember, groupToRemoveContact]);\r\n  useEffect(onLeavingGroup, [memberQuit, groupIdOfLeaveRequest, groupJid]);\r\n  useEffect(onRemovingContact, [removedContact]);\r\n  useEffect(onAddingMembers, [groupToInsertMember, checkedMembers]);\r\n  useEffect(onToggleMemberRole, [toggleMemberRole]);\r\n  useEffect(onChangeGroupData, [changeGroupData]);\r\n  useEffect(onAddingContactOnGroupList, [clickedContact]);\r\n  useEffect(createGroup, [groupToCreate]);\r\n  useEffect(onToggleSidebarMenu, [showChatProfileSidebar]);\r\n  useEffect(onListRooms, [listRooms]);\r\n  useEffect(onCreateRoom, [createConference]);\r\n  useEffect(onFavoriteMessage, [favoriteMessagePayload]);\r\n  useEffect(onListFavoriteMessages, [flagToLoadFavoriteMessages]);\r\n  useEffect(onRemoveFavoriteMessage, [deleteFavoriteMessage]);\r\n\r\n  function onRemoveFavoriteMessage() {\r\n    squadService?.messages.deleteFavorite(\r\n      { messageId: deleteFavoriteMessage?.messageId as string },\r\n      (success) => {\r\n        if (success) {\r\n          setFlagToLoadFavoriteMessages({\r\n            contactType: deleteFavoriteMessage?.contactType as string,\r\n          });\r\n          setDeleteFavoriteMessage(undefined);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  function onListFavoriteMessages() {\r\n    if (flagToLoadFavoriteMessages) {\r\n      squadService?.messages.listFavorites(\r\n        {\r\n          contactTo: \"\",\r\n          contactType: flagToLoadFavoriteMessages.contactType,\r\n          content: \"\",\r\n          contentType: \"\",\r\n          messageDate: \"\",\r\n          messageId: \"\",\r\n          message: \"\",\r\n        },\r\n        (success) => {\r\n          if (success) {\r\n            try {\r\n              console.log('O callback é um array: ', success)\r\n              console.log('Object.values(success).filter', (Object.values(success)[1]))\r\n              setFavoriteMessages((Object.values(success)));\r\n            } catch (err) {\r\n              console.log(\"err\", err);\r\n            }\r\n            console.log(\r\n              \"Variável de contexto global (setando o callback) :\",\r\n              favoriteMessages\r\n            );\r\n            setFlagToLoadFavoriteMessages(undefined);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  function onRemovingContact() {\r\n    if (removedContact) {\r\n      contacts.forEach((ctc) => {\r\n        if (ctc.id === removedContact.id) {\r\n          if (ctc.added)\r\n            squadService?.contacts.remove(ctc, (success: boolean) => {\r\n              if (success) {\r\n                squadService?.contacts.list((ctcs) => {\r\n                  setContacts(ctcs);\r\n                  setRemovedContact(undefined);\r\n                });\r\n              }\r\n            });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onUserPasswordChange() {\r\n    if (changedUserPassword) {\r\n      squadService?.user.changePassword(changedUserPassword, (password) => {\r\n        if (password) {\r\n          setChangedUserPassword({ oldPassword: \"\", newPassword: \"\" });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onUserDataChange() {\r\n    if (changedUserData) {\r\n      squadService?.user.changeUserData(changedUserData, (chgd) => {\r\n        if (chgd) {\r\n          setUser({\r\n            ...user,\r\n            email: changedUserData.email,\r\n            name: changedUserData.name,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onNewFavorite() {\r\n    if (newFavorite) {\r\n      const newFavoriteLoad = { ...newFavorite };\r\n      squadService?.contacts.setFavorite(newFavorite, (favorite) => {\r\n        if (favorite) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.jid === newFavoriteLoad.jid) {\r\n                cht.favorite = !newFavoriteLoad.favorite;\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n          setGroups(\r\n            groups.map((grp) => {\r\n              if (grp.jid === newFavoriteLoad.jid) {\r\n                return {\r\n                  ...grp,\r\n                  favorite: !newFavoriteLoad.favorite,\r\n                };\r\n              }\r\n              return grp;\r\n            })\r\n          );\r\n          setContacts(\r\n            contacts.map((ctt) => {\r\n              if (ctt.jid === newFavoriteLoad.jid) {\r\n                return {\r\n                  ...ctt,\r\n                  favorite: !newFavoriteLoad.favorite,\r\n                };\r\n              }\r\n              return ctt;\r\n            })\r\n          );\r\n        }\r\n      });\r\n      setNewFavorite(undefined);\r\n    }\r\n  }\r\n  function chatCommunicatorSubscribe(evt: string, data: any) {\r\n    switch (evt) {\r\n      case Events.RECONNECTED:\r\n        setDisconnected(false);\r\n      // eslint-disable-next-line\r\n      case Events.ONLINE:\r\n        squadService?.chats.list((receivedChats) => {\r\n          const chats: IChat[] = [];\r\n          receivedChats.forEach((cht) => {\r\n            if (!chats.find((chat) => chat.id === cht.id)) {\r\n              chats.push(cht);\r\n            }\r\n          });\r\n          setChats(chats);\r\n          //populating groups\r\n          squadService?.groups.list((groups) => {\r\n            setGroups(groups);\r\n            //Joining Groups Rooms in XMPP\r\n            squadService?.chat?.joinGroups(groups.map((group) => group.jid));\r\n          });\r\n          //populating contacts\r\n          squadService?.contacts.list((contacts) => {\r\n            setContacts(contacts);\r\n          });\r\n\r\n          //populating conferences\r\n          setListRooms(true);\r\n          //populating chat's with messages\r\n\r\n          // receivedChats.forEach((chat) => {\r\n          //   squadService?.messages.list(chat, (messages) => {\r\n          //     const chatWithMessages = { ...chat };\r\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\r\n          //       messages\r\n          //     );\r\n          //     setChats([\r\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n          //       chatWithMessages,\r\n          //     ]);\r\n          //   });\r\n          // });\r\n        });\r\n        break;\r\n      case Events.ERROR:\r\n      case Events.OFFLINE:\r\n        if (localStorage.getItem(\"logout\") !== \"true\") {\r\n          squadService?.chat?.makeChat(chatCommunicatorSubscribe);\r\n        }\r\n        localStorage.removeItem(\"logout\");\r\n        console.log(evt);\r\n        break;\r\n      case Events.RECONNECTING:\r\n        // setShowChat(false);\r\n        // setActiveChat(actChtData);\r\n        // setChats([]);\r\n        // setGroups([]);\r\n        // setContacts([]);\r\n        // setConferenceList([]);\r\n        console.log(\"Reconnecting\");\r\n        setDisconnected(true);\r\n        break;\r\n      case Events.MESSAGE:\r\n        if (data.fromUser === user.jid) break;\r\n        let find = false;\r\n\r\n        let newChats: IChat[] = [];\r\n        chats.forEach((chat) => {\r\n          if (\r\n            data.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] ||\r\n            data.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]\r\n          ) {\r\n            find = true;\r\n            if (!chat.messages.filter((msg) => msg.id === data.id)[0])\r\n              chat.messages.push(data);\r\n            if (chat.id === activeChat.id) {\r\n              let chatTemporary = { ...chat };\r\n              setActiveChat(chatTemporary);\r\n            } else {\r\n              chat.unRead++;\r\n              showNotification(chat.name);\r\n            }\r\n            newChats.unshift(chat);\r\n          } else {\r\n            newChats.push(chat);\r\n          }\r\n        });\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n          squadService?.contacts.list((listContacts) => {\r\n            listContacts.forEach((c) => {\r\n              if (\r\n                data.fromUser.split(\"@\")[0] === c.jid.split(\"@\")[0] ||\r\n                data.toUser.split(\"@\")[0] === c.jid.split(\"@\")[0]\r\n              ) {\r\n                if (c.jid === data.fromUser) {\r\n                  find = true;\r\n                  newChat = {\r\n                    id: c.id,\r\n                    jid: c.jid,\r\n                    name: c.name,\r\n                    profilePicture: c.profilePicture,\r\n                    status: c.status,\r\n                    unRead: 1,\r\n                    chatType: ChatType.USER,\r\n                    inputMessage: \"\",\r\n                    isTyping: false,\r\n                    messages: [],\r\n                    favorite: c.favorite,\r\n                    added: c.added,\r\n                  };\r\n                  newChat.messages.push(data);\r\n                  newChats.unshift(newChat);\r\n                }\r\n              }\r\n            });\r\n          });\r\n        }\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.groups.list((listGroups) => {\r\n            listGroups.forEach((g) => {\r\n              if (\r\n                data.fromUser.split(\"@\")[0] === g.jid.split(\"@\")[0] ||\r\n                data.toUser.split(\"@\")[0] === g.jid.split(\"@\")[0]\r\n              ) {\r\n                if (g.jid === data.fromUser) {\r\n                  find = true;\r\n                  newChat = {\r\n                    id: g.groupId,\r\n                    jid: g.jid,\r\n                    name: g.name,\r\n                    profilePicture: g.profilePicture,\r\n                    attachedFileList: undefined,\r\n                    conferenceRoomParticipants: undefined,\r\n                    department: undefined,\r\n                    email: undefined,\r\n                    groupId: g.groupId,\r\n                    members: g.members,\r\n                    messageLoaded: undefined,\r\n                    userDescription: undefined,\r\n                    status: undefined,\r\n                    unRead: 1,\r\n                    chatType: ChatType.GROUP,\r\n                    inputMessage: \"\",\r\n                    isTyping: false,\r\n                    messages: [],\r\n                    favorite: g.favorite,\r\n                    added: g.added,\r\n                  };\r\n                  newChat.messages.push(data);\r\n                  newChats.unshift(newChat);\r\n                }\r\n              }\r\n            });\r\n          });\r\n        }\r\n\r\n        setChats(newChats);\r\n\r\n        break;\r\n      case Events.RECEIVED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.messages.find((msg) => msg.id === data.id))\r\n              chat.messages = chat.messages.map((message) => {\r\n                message.deliverStatus = DeliverStatus.DELIVERED;\r\n                return message;\r\n              });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.DISPLAYED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.messages.find((msg) => msg.id === data.id))\r\n              chat.messages = chat.messages.map((message) => {\r\n                message.readStatus = ReadStatus.READ;\r\n                return message;\r\n              });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.COMPOSING:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = true;\r\n              if (activeChat.jid === data) setActiveChat(chat);\r\n              deleteTypingTimeout(chat.jid);\r\n              setTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.ACTIVE:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = false;\r\n              if (activeChat.jid === data) {\r\n                let chatUpdate = { ...chat };\r\n                setActiveChat(chatUpdate);\r\n              }\r\n              deleteTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.PRESENCE:\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.jid && data.from) {\r\n              if (\r\n                cht.jid === data.from.split(\"/\")[0] &&\r\n                !cht.jid.includes(\"@conference.\")\r\n              ) {\r\n                cht.status = data.status;\r\n              }\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n        setContacts(\r\n          contacts.map((ctc) => {\r\n            if (ctc.jid && data.from) {\r\n              if (\r\n                ctc.jid === data.from.split(\"/\")[0] &&\r\n                !ctc.jid.includes(\"@conference.\")\r\n              ) {\r\n                ctc.status = data.status;\r\n              }\r\n            }\r\n            return ctc;\r\n          })\r\n        );\r\n        break;\r\n\r\n      case Events.SEND_EVENT:\r\n        const event = data as IMessage;\r\n        let finded;\r\n        let newChat: IChat[] = [];\r\n        chats.forEach((chat) => {\r\n          if (\r\n            event.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] ||\r\n            event.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]\r\n          ) {\r\n            finded = true;\r\n            if (!chat.messages.filter((msg) => msg.id === event.id)[0])\r\n              chat.messages.push(event);\r\n            if (chat.id === activeChat.id) {\r\n              let chatTemporary = { ...chat };\r\n              setActiveChat(chatTemporary);\r\n            } else {\r\n              chat.unRead++;\r\n              showNotification(chat.name);\r\n            }\r\n            newChat.unshift(chat);\r\n          } else {\r\n            newChat.push(chat);\r\n          }\r\n        });\r\n        if (!finded) {\r\n          groups.forEach((grp) => {\r\n            if (\r\n              event.fromUser.split(\"@\")[0] === grp.jid.split(\"@\")[0] ||\r\n              event.toUser.split(\"@\")[0] === grp.jid.split(\"@\")[0]\r\n            ) {\r\n              finded = true;\r\n              let groupToBeInserted: IChat = {\r\n                added: grp.added,\r\n                chatType: ChatType.GROUP,\r\n                favorite: grp.favorite,\r\n                id: grp.groupId,\r\n                inputMessage: \"\",\r\n                isTyping: false,\r\n                jid: grp.jid,\r\n                messages: [event],\r\n                name: grp.name,\r\n                unRead: 0,\r\n                attachedFileList: undefined,\r\n                department: undefined,\r\n                email: undefined,\r\n                groupId: grp.groupId,\r\n                members: grp.members,\r\n                messageLoaded: undefined,\r\n                profilePicture: grp.profilePicture,\r\n                status: undefined,\r\n                userDescription: grp.description,\r\n              };\r\n              newChat.unshift(groupToBeInserted);\r\n              setActiveChat(groupToBeInserted);\r\n            }\r\n          });\r\n        }\r\n        if (!finded) {\r\n          squadService?.groups.list((grps) => {\r\n            setGroups(grps);\r\n            grps.forEach((grp) => {\r\n              if (\r\n                event.fromUser.split(\"@\")[0] === grp.jid.split(\"@\")[0] ||\r\n                event.toUser.split(\"@\")[0] === grp.jid.split(\"@\")[0]\r\n              ) {\r\n                finded = true;\r\n                let groupToBeInserted: IChat = {\r\n                  added: grp.added,\r\n                  chatType: ChatType.GROUP,\r\n                  favorite: grp.favorite,\r\n                  id: grp.groupId,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  jid: grp.jid,\r\n                  messages: [event],\r\n                  name: grp.name,\r\n                  unRead: 1,\r\n                  attachedFileList: undefined,\r\n                  department: undefined,\r\n                  email: undefined,\r\n                  groupId: grp.groupId,\r\n                  members: grp.members,\r\n                  messageLoaded: undefined,\r\n                  profilePicture: grp.profilePicture,\r\n                  status: undefined,\r\n                  userDescription: grp.description,\r\n                };\r\n                newChat.unshift(groupToBeInserted);\r\n              }\r\n            });\r\n          });\r\n        }\r\n        setChats(newChat);\r\n        if (event.eventId === 6 || event.eventId === 2) {\r\n          refreshMembers(event);\r\n        }\r\n        break;\r\n      default:\r\n        console.log(evt);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const refreshMembers = (event: IMessage) => {\r\n    squadService?.groups.list((grps) => {\r\n      setGroups(grps);\r\n      setChats(\r\n        chats.map((chat) => {\r\n          if (\r\n            event.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] ||\r\n            event.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]\r\n          ) {\r\n            chat.members = grps.find((grp) => grp.groupId === chat.id)?.members;\r\n            if (chat.id === activeChat.id) {\r\n              setActiveChat(chat);\r\n            }\r\n          }\r\n          return chat;\r\n        })\r\n      );\r\n    });\r\n  };\r\n\r\n  const deleteTypingTimeout = (jid: string) => {\r\n    clearTimeout(typingTimeout.get(jid)?.timeout || setTimeout(() => {}, 1));\r\n    typingTimeout.delete(jid);\r\n  };\r\n  const setTypingTimeout = (jid: string) => {\r\n    const timeoutData: TypingTimeoutData = {\r\n      msgStr: \"\",\r\n      timeout: setTimeout(() => {\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.jid === jid) {\r\n              cht.isTyping = false;\r\n              if (activeChat.jid === jid) setActiveChat(cht);\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n      }, 20000),\r\n    };\r\n    typingTimeout.set(jid, timeoutData);\r\n  };\r\n\r\n  squadService?.updateChatSubscribeFuncition(chatCommunicatorSubscribe);\r\n  // Comentado para evitar warnings no console enquanto não é usado\r\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\r\n  //     squadService?.groups.list((groups) => {\r\n  //       setGroups(groups);\r\n  //       callback(true);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  function sendMessage(\r\n    chat: IChat,\r\n    message: string,\r\n    callback: SendMessageCallback\r\n  ) {\r\n    squadService?.chat?.chat.sendMessage(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message,\r\n      callback\r\n    );\r\n  }\r\n\r\n  useEffect(init, []);\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}