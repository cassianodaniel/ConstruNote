{"ast":null,"code":"import PresenceStatus from \"../../enuns/PresenceStatus\";\nimport UserType from \"../../enuns/UserType\";\nimport { getContactName // getUserProfilePicture\n} from \"./formatUtils\";\nexport function getAttachmentType(extension) {\n  const booleans = {\n    isImageMessage: /jpe?g|png|gif|ico$/i.test(extension),\n    isAudioMessage: /ogg|mp3|wav|m4a|webm$/i.test(extension),\n    isVideoMessage: /mp4|avi$/i.test(extension),\n    isFileMessage: true\n  };\n  booleans.isFileMessage = !booleans.isAudioMessage && !booleans.isImageMessage && !booleans.isVideoMessage;\n  return booleans;\n} //Groups\n\nexport const parseGroup = apiGroup => {\n  return {\n    groupId: apiGroup.id,\n    name: apiGroup.name,\n    description: apiGroup.description,\n    jid: `${apiGroup.id}@conference.${apiGroup.domainName}`,\n    profilePicture: apiGroup.imageUrl,\n    favorite: apiGroup.favorite,\n    members: apiGroup.members.map(member => {\n      return {\n        userId: member.id,\n        name: member.name,\n        profilePicture: member.imageUrl,\n        role: member.admin ? UserType.ADMIN : UserType.USER,\n        status: PresenceStatus.ONLINE\n      };\n    })\n  };\n}; //Contacts\n\nexport const parseContact = apiContact => {\n  return {\n    id: apiContact.id,\n    jid: apiContact.imId,\n    name: apiContact.name,\n    department: apiContact.department,\n    domain: apiContact.domainName,\n    number: apiContact.extension,\n    profilePicture: undefined,\n    email: apiContact.email,\n    blocked: apiContact.blocked,\n    added: apiContact.added,\n    status: PresenceStatus.ONLINE,\n    favorite: apiContact.favorite\n  };\n}; //Chats\n\nexport const parseChats = (chats, groups, contacts, user) => {\n  const parsedChats = [];\n  chats.forEach(chat => {\n    const parsedChat = parseChat(chat, groups, contacts, user);\n    if (parsedChat) parsedChats.push(parsedChat);\n  });\n  return parsedChats;\n};\nexport const parseChat = (chat, groups, contacts, user) => {\n  const chatUser = groups.get(chat.id) || contacts.get(chat.id);\n\n  if (chatUser) {\n    var _contacts$get, _contacts$get2;\n\n    const chatMessage = chat.messages[0];\n    const iChat = {\n      id: chat.id,\n      jid: chatUser.jid,\n      name: chat.name,\n      email: (_contacts$get = contacts.get(chat.id)) === null || _contacts$get === void 0 ? void 0 : _contacts$get.email,\n      department: (_contacts$get2 = contacts.get(chat.id)) === null || _contacts$get2 === void 0 ? void 0 : _contacts$get2.department,\n      profilePicture: undefined,\n      status: \"status\" in chatUser ? chatUser.status : undefined,\n      unRead: chat.unreadMessages,\n      chatType: chat.chatType,\n      inputMessage: \"\",\n      isTyping: false,\n      messages: [parseMessage(chatMessage, contacts, groups, user)],\n      favorite: chat.favorite\n    };\n    return iChat;\n  }\n}; //Messages\n\nexport const parseMessage = (chatMessage, contacts, groups, user) => {\n  let booleans = {\n    isImageMessage: chatMessage.isImage,\n    isFileMessage: chatMessage.isFile && !chatMessage.isImage && !chatMessage.isVideo && !chatMessage.isAudio,\n    isVideoMessage: chatMessage.isVideo,\n    isAudioMessage: chatMessage.isAudio\n  };\n\n  if (isUrl(chatMessage.message)) {\n    booleans = getUrlBooleans(chatMessage.message);\n  }\n\n  const msg = {\n    id: chatMessage.idXmpp,\n    userName: getContactName(chatMessage, contacts, groups, user),\n    // userProfilePicture: getUserProfilePicture(\n    //   chatMessage,\n    //   contacts,\n    //   groups,\n    //   user\n    // ),\n    message: chatMessage.message,\n    time: new Date(chatMessage.sentAt).toISOString(),\n    fileUrl: chatMessage.message,\n    toUser: chatMessage.to,\n    fromUser: chatMessage.from,\n    deliverStatus: chatMessage.deliveryStatus,\n    readStatus: chatMessage.readStatus,\n    deliverTimestamp: chatMessage.deliveryTimestamp || \"\",\n    readTimestamp: chatMessage.readTimestamp || \"\",\n    content: chatMessage.content,\n    contentType: chatMessage.contentType,\n    ...booleans\n  };\n  return msg;\n};\nexport function isUrl(str) {\n  var expression = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;\n  var regex = new RegExp(expression);\n  return !!str.match(regex);\n}\nexport function getUrlBooleans(msg) {\n  const splittedMsg = msg.split(\"/\");\n  const booleans = {\n    isImageMessage: /\\.(jpe?g|png|gif|ico)$/i.test(msg),\n    isVideoMessage: /\\.(mp4|avi)$/i.test(msg),\n    isAudioMessage: /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg),\n    isFileMessage: splittedMsg[splittedMsg.length - 1].includes(\".\") && splittedMsg.length > 1\n  };\n  booleans.isFileMessage = booleans.isFileMessage && !booleans.isImageMessage && !booleans.isVideoMessage && !booleans.isAudioMessage;\n  return booleans;\n}\nexport function getFileName(msg) {\n  const splittedMsg = msg.split(\"/\");\n  return splittedMsg[splittedMsg.length - 1];\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/utils/parseUtils.ts"],"names":["PresenceStatus","UserType","getContactName","getAttachmentType","extension","booleans","isImageMessage","test","isAudioMessage","isVideoMessage","isFileMessage","parseGroup","apiGroup","groupId","id","name","description","jid","domainName","profilePicture","imageUrl","favorite","members","map","member","userId","role","admin","ADMIN","USER","status","ONLINE","parseContact","apiContact","imId","department","domain","number","undefined","email","blocked","added","parseChats","chats","groups","contacts","user","parsedChats","forEach","chat","parsedChat","parseChat","push","chatUser","get","chatMessage","messages","iChat","unRead","unreadMessages","chatType","inputMessage","isTyping","parseMessage","isImage","isFile","isVideo","isAudio","isUrl","message","getUrlBooleans","msg","idXmpp","userName","time","Date","sentAt","toISOString","fileUrl","toUser","to","fromUser","from","deliverStatus","deliveryStatus","readStatus","deliverTimestamp","deliveryTimestamp","readTimestamp","content","contentType","str","expression","regex","RegExp","match","splittedMsg","split","length","includes","getFileName"],"mappings":"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","sourcesContent":["import { Message } from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport IChat from \"../../alias/IChat\";\r\nimport IContact from \"../../alias/IContact\";\r\nimport IGroup from \"../../alias/IGroup\";\r\nimport IMessage from \"../../alias/IMessage\";\r\nimport IUser from \"../../alias/IUser\";\r\nimport PresenceStatus from \"../../enuns/PresenceStatus\";\r\nimport UserType from \"../../enuns/UserType\";\r\nimport {\r\n  getContactName,\r\n  // getUserProfilePicture\r\n} from \"./formatUtils\";\r\n\r\nexport function getAttachmentType(extension: string) {\r\n  const booleans = {\r\n    isImageMessage: /jpe?g|png|gif|ico$/i.test(extension),\r\n    isAudioMessage: /ogg|mp3|wav|m4a|webm$/i.test(extension),\r\n    isVideoMessage: /mp4|avi$/i.test(extension),\r\n    isFileMessage: true,\r\n  };\r\n  booleans.isFileMessage =\r\n    !booleans.isAudioMessage &&\r\n    !booleans.isImageMessage &&\r\n    !booleans.isVideoMessage;\r\n  return booleans;\r\n}\r\n//Groups\r\nexport const parseGroup = (apiGroup: any) => {\r\n  return {\r\n    groupId: apiGroup.id,\r\n    name: apiGroup.name,\r\n    description: apiGroup.description,\r\n    jid: `${apiGroup.id}@conference.${apiGroup.domainName}`,\r\n    profilePicture: apiGroup.imageUrl,\r\n    favorite: apiGroup.favorite,\r\n    members: apiGroup.members.map((member: any) => {\r\n      return {\r\n        userId: member.id,\r\n        name: member.name,\r\n        profilePicture: member.imageUrl,\r\n        role: member.admin ? UserType.ADMIN : UserType.USER,\r\n        status: PresenceStatus.ONLINE,\r\n      };\r\n    }),\r\n  };\r\n};\r\n//Contacts\r\nexport const parseContact = (apiContact: any) => {\r\n  return {\r\n    id: apiContact.id,\r\n    jid: apiContact.imId,\r\n    name: apiContact.name,\r\n    department: apiContact.department,\r\n    domain: apiContact.domainName,\r\n    number: apiContact.extension,\r\n    profilePicture: undefined,\r\n    email: apiContact.email,\r\n    blocked: apiContact.blocked,\r\n    added: apiContact.added,\r\n    status: PresenceStatus.ONLINE,\r\n    favorite: apiContact.favorite,\r\n  };\r\n};\r\n//Chats\r\nexport const parseChats = (\r\n  chats: any[],\r\n  groups: Map<string, IGroup>,\r\n  contacts: Map<string, IContact>,\r\n  user: IUser\r\n): IChat[] => {\r\n  const parsedChats: IChat[] = [];\r\n  chats.forEach((chat) => {\r\n    const parsedChat = parseChat(chat, groups, contacts, user);\r\n    if (parsedChat) parsedChats.push(parsedChat);\r\n  });\r\n  return parsedChats;\r\n};\r\nexport const parseChat = (\r\n  chat: any,\r\n  groups: Map<string, IGroup>,\r\n  contacts: Map<string, IContact>,\r\n  user: IUser\r\n) => {\r\n  const chatUser = groups.get(chat.id) || contacts.get(chat.id);\r\n  if (chatUser) {\r\n    const chatMessage = chat.messages[0];\r\n    const iChat: IChat = {\r\n      id: chat.id,\r\n      jid: chatUser.jid,\r\n      name: chat.name,\r\n      email: contacts.get(chat.id)?.email,\r\n      department: contacts.get(chat.id)?.department,\r\n      profilePicture: undefined,\r\n      status: \"status\" in chatUser ? (chatUser as IContact).status : undefined,\r\n      unRead: chat.unreadMessages,\r\n      chatType: chat.chatType,\r\n      inputMessage: \"\",\r\n      isTyping: false,\r\n      messages: [parseMessage(chatMessage, contacts, groups, user)],\r\n      favorite: chat.favorite\r\n    };\r\n    return iChat;\r\n  }\r\n};\r\n//Messages\r\nexport const parseMessage = (\r\n  chatMessage: Message,\r\n  contacts: Map<string, IContact>,\r\n  groups: Map<string, IGroup>,\r\n  user: IUser\r\n) => {\r\n  let booleans = {\r\n    isImageMessage: chatMessage.isImage,\r\n    isFileMessage:\r\n      chatMessage.isFile &&\r\n      !chatMessage.isImage &&\r\n      !chatMessage.isVideo &&\r\n      !chatMessage.isAudio,\r\n    isVideoMessage: chatMessage.isVideo,\r\n    isAudioMessage: chatMessage.isAudio,\r\n  };\r\n  if (isUrl(chatMessage.message)) {\r\n    booleans = getUrlBooleans(chatMessage.message);\r\n  }\r\n  const msg: IMessage = {\r\n    id: chatMessage.idXmpp,\r\n    userName: getContactName(chatMessage, contacts, groups, user),\r\n    // userProfilePicture: getUserProfilePicture(\r\n    //   chatMessage,\r\n    //   contacts,\r\n    //   groups,\r\n    //   user\r\n    // ),\r\n    message: chatMessage.message,\r\n    time: new Date(chatMessage.sentAt).toISOString(),\r\n    fileUrl: chatMessage.message,\r\n    toUser: chatMessage.to,\r\n    fromUser: chatMessage.from,\r\n    deliverStatus: chatMessage.deliveryStatus,\r\n    readStatus: chatMessage.readStatus,\r\n    deliverTimestamp: chatMessage.deliveryTimestamp || \"\",\r\n    readTimestamp: chatMessage.readTimestamp || \"\",\r\n    content: chatMessage.content,\r\n    contentType: chatMessage.contentType,\r\n    ...booleans,\r\n  };\r\n  return msg;\r\n};\r\nexport function isUrl(str: string) {\r\n  var expression = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;\r\n  var regex = new RegExp(expression);\r\n  return !!str.match(regex);\r\n}\r\nexport function getUrlBooleans(msg: string) {\r\n  const splittedMsg = msg.split(\"/\");\r\n  const booleans = {\r\n    isImageMessage: /\\.(jpe?g|png|gif|ico)$/i.test(msg),\r\n    isVideoMessage: /\\.(mp4|avi)$/i.test(msg),\r\n    isAudioMessage: /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg),\r\n    isFileMessage:\r\n      splittedMsg[splittedMsg.length - 1].includes(\".\") &&\r\n      splittedMsg.length > 1,\r\n  };\r\n  booleans.isFileMessage =\r\n    booleans.isFileMessage &&\r\n    !booleans.isImageMessage &&\r\n    !booleans.isVideoMessage &&\r\n    !booleans.isAudioMessage;\r\n  return booleans;\r\n}\r\nexport function getFileName(msg: string) {\r\n  const splittedMsg = msg.split(\"/\");\r\n  return splittedMsg[splittedMsg.length - 1];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}