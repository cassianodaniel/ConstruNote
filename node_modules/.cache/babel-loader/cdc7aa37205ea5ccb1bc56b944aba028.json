{"ast":null,"code":"const sortContactAndGroup = data => {\n  let list = []; // cria os grupos das letras\n\n  data.forEach(item => {\n    let letter = item.name.substring(0, 1).toUpperCase();\n    let foundLetter = false;\n    list.forEach(li => {\n      if (li.group === letter && !foundLetter) {\n        foundLetter = true;\n      }\n    });\n\n    if (!foundLetter) {\n      list.push({\n        group: letter,\n        children: []\n      });\n    }\n  }); // adiciona os contatos nas suas respectivas letras\n\n  data.forEach(item => {\n    let letter = item.name.substring(0, 1).toUpperCase();\n    list = list.map(li => {\n      if (li.group === letter) {\n        li.children.push(item);\n      }\n\n      return li;\n    });\n  });\n  return list.sort(function (a, b) {\n    var nameA = a.group.toUpperCase(); // ignore upper and lowercase\n\n    var nameB = b.group.toUpperCase(); // ignore upper and lowercase\n\n    if (nameA < nameB) {\n      return -1;\n    }\n\n    if (nameA > nameB) {\n      return 1;\n    }\n\n    return 0;\n  });\n};\n\nexport default sortContactAndGroup;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/helpers/SortContactAndGroup.ts"],"names":["sortContactAndGroup","data","list","forEach","item","letter","name","substring","toUpperCase","foundLetter","li","group","push","children","map","sort","a","b","nameA","nameB"],"mappings":"AAIA,MAAMA,mBAAmB,GAAIC,IAAD,IAAiC;AAC3D,MAAIC,IAA4B,GAAG,EAAnC,CAD2D,CAG3D;;AACAD,EAAAA,IAAI,CAACE,OAAL,CAAcC,IAAD,IAAU;AACrB,QAAIC,MAAM,GAAGD,IAAI,CAACE,IAAL,CAAUC,SAAV,CAAoB,CAApB,EAAuB,CAAvB,EAA0BC,WAA1B,EAAb;AACA,QAAIC,WAAW,GAAG,KAAlB;AAEAP,IAAAA,IAAI,CAACC,OAAL,CAAcO,EAAD,IAAQ;AACnB,UAAIA,EAAE,CAACC,KAAH,KAAaN,MAAb,IAAuB,CAACI,WAA5B,EAAyC;AACvCA,QAAAA,WAAW,GAAG,IAAd;AACD;AACF,KAJD;;AAMA,QAAI,CAACA,WAAL,EAAkB;AAChBP,MAAAA,IAAI,CAACU,IAAL,CAAU;AAAED,QAAAA,KAAK,EAAEN,MAAT;AAAiBQ,QAAAA,QAAQ,EAAE;AAA3B,OAAV;AACD;AACF,GAbD,EAJ2D,CAmB3D;;AACAZ,EAAAA,IAAI,CAACE,OAAL,CAAcC,IAAD,IAAU;AACrB,QAAIC,MAAM,GAAGD,IAAI,CAACE,IAAL,CAAUC,SAAV,CAAoB,CAApB,EAAuB,CAAvB,EAA0BC,WAA1B,EAAb;AAEAN,IAAAA,IAAI,GAAGA,IAAI,CAACY,GAAL,CAAUJ,EAAD,IAAQ;AACtB,UAAIA,EAAE,CAACC,KAAH,KAAaN,MAAjB,EAAyB;AACvBK,QAAAA,EAAE,CAACG,QAAH,CAAYD,IAAZ,CAAiBR,IAAjB;AACD;;AACD,aAAOM,EAAP;AACD,KALM,CAAP;AAMD,GATD;AAWA,SAAOR,IAAI,CAACa,IAAL,CAAU,UAAUC,CAAV,EAAmCC,CAAnC,EAA4D;AAC3E,QAAIC,KAAK,GAAGF,CAAC,CAACL,KAAF,CAAQH,WAAR,EAAZ,CAD2E,CACxC;;AACnC,QAAIW,KAAK,GAAGF,CAAC,CAACN,KAAF,CAAQH,WAAR,EAAZ,CAF2E,CAExC;;AACnC,QAAIU,KAAK,GAAGC,KAAZ,EAAmB;AACjB,aAAO,CAAC,CAAR;AACD;;AACD,QAAID,KAAK,GAAGC,KAAZ,EAAmB;AACjB,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GAVM,CAAP;AAWD,CA1CD;;AA4CA,eAAenB,mBAAf","sourcesContent":["import IContact from \"../alias/IContact\";\r\nimport IContactAndGroupList from \"../alias/IContactAndGroupList\";\r\nimport IGroup from \"../alias/IGroup\";\r\n\r\nconst sortContactAndGroup = (data: (IContact | IGroup)[]) => {\r\n  let list: IContactAndGroupList[] = [];\r\n\r\n  // cria os grupos das letras\r\n  data.forEach((item) => {\r\n    let letter = item.name.substring(0, 1).toUpperCase();\r\n    let foundLetter = false;\r\n\r\n    list.forEach((li) => {\r\n      if (li.group === letter && !foundLetter) {\r\n        foundLetter = true;\r\n      }\r\n    });\r\n\r\n    if (!foundLetter) {\r\n      list.push({ group: letter, children: [] });\r\n    }\r\n  });\r\n\r\n  // adiciona os contatos nas suas respectivas letras\r\n  data.forEach((item) => {\r\n    let letter = item.name.substring(0, 1).toUpperCase();\r\n\r\n    list = list.map((li) => {\r\n      if (li.group === letter) {\r\n        li.children.push(item);\r\n      }\r\n      return li;\r\n    });\r\n  });\r\n\r\n  return list.sort(function (a: IContactAndGroupList, b: IContactAndGroupList) {\r\n    var nameA = a.group.toUpperCase(); // ignore upper and lowercase\r\n    var nameB = b.group.toUpperCase(); // ignore upper and lowercase\r\n    if (nameA < nameB) {\r\n      return -1;\r\n    }\r\n    if (nameA > nameB) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n};\r\n\r\nexport default sortContactAndGroup;\r\n"]},"metadata":{},"sourceType":"module"}