{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ChatList.tsx\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\"; //simplebar\n\nimport SimpleBar from \"simplebar-react\"; //context\n\nimport { useChat } from \"./../contexts/ChatContext\";\nimport { useContact } from \"./../contexts/ContactContext\"; //alias\n\nimport { useGroup } from \"../contexts/GroupContext\";\nimport IndividualChat from \"./IndividualChat\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ChatList = ({\n  recentChatList\n}) => {\n  const {\n    activeChat,\n    chats,\n    setChats,\n    openChat,\n    setShowChat\n  } = useChat();\n  const {\n    contacts,\n    setContacts\n  } = useContact();\n  const {\n    groups,\n    setGroups\n  } = useGroup();\n  const {\n    t\n  } = useTranslation();\n  const {\n    setNewFavorite\n  } = useContact();\n  const [menc, setMenc] = useState(false);\n\n  const openChatAction = chat => {\n    openChat(chat);\n    setShowChat(true);\n  };\n\n  return /*#__PURE__*/React.createElement(SimpleBar, {\n    style: {\n      maxHeight: \"100%\"\n    },\n    className: \"chat-message-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list-unstyled chat-list chat-user-list\",\n    id: \"chat-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, recentChatList.map((chat, key) => chat.favorite && /*#__PURE__*/React.createElement(\"li\", {\n    key: key,\n    id: \"conversation\" + key,\n    className: `${chat.isTyping ? \"typing\" : \"\"} ${chat.id === activeChat.id ? \"active\" : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"#\",\n    onClick: () => openChatAction(chat),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(IndividualChat, {\n    chat: chat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 19\n    }\n  })))), /*#__PURE__*/React.createElement(\"hr\", {\n    className: \"mx-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }), recentChatList.map((chat, key) => chat.favorite === false && /*#__PURE__*/React.createElement(\"li\", {\n    key: key,\n    id: \"conversation\" + key,\n    className: `${chat.isTyping ? \"typing\" : \"\"} ${chat.id === activeChat.id ? \"active\" : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"#\",\n    onClick: () => openChatAction(chat),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(IndividualChat, {\n    chat: chat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 19\n    }\n  }))))));\n};\n\nexport default ChatList;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ChatList.tsx"],"names":["React","useState","Link","SimpleBar","useChat","useContact","useGroup","IndividualChat","useTranslation","ChatList","recentChatList","activeChat","chats","setChats","openChat","setShowChat","contacts","setContacts","groups","setGroups","t","setNewFavorite","menc","setMenc","openChatAction","chat","maxHeight","map","key","favorite","isTyping","id"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Media } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//simplebar\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\n//context\r\nimport { useChat } from \"./../contexts/ChatContext\";\r\nimport { useContact } from \"./../contexts/ContactContext\";\r\n\r\n//alias\r\nimport IChat from \"../alias/IChat\";\r\n\r\nimport goldenstar from \"./../assets/images/ic-star-fill.svg\";\r\nimport star from \"./../assets/images/ic-star.svg\";\r\nimport ReactImageFallback from \"react-image-fallback\";\r\nimport defaultAvatar from \"../assets/images/default.png\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { onImgError } from \"../helpers/ImageUtils\";\r\nimport IndividualChat from \"./IndividualChat\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport ChatListDates from \"./ChatListDates\";\r\nimport { TextMessageTagParseNotClickable } from \"../helpers/TextMessageTagParseNotClickable\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\n\r\ninterface IProps {\r\n  recentChatList: IChat[];\r\n}\r\n\r\nconst ChatList: React.FC<IProps> = ({ recentChatList }) => {\r\n  const { activeChat, chats, setChats, openChat, setShowChat } = useChat();\r\n  const { contacts, setContacts } = useContact();\r\n  const { groups, setGroups } = useGroup();\r\n  const { t } = useTranslation();\r\n  const { setNewFavorite } = useContact();\r\n  const [menc, setMenc] = useState(false);\r\n\r\n  const openChatAction = (chat: IChat) => {\r\n    openChat(chat);\r\n    setShowChat(true);\r\n  };\r\n\r\n  return (\r\n    <SimpleBar style={{ maxHeight: \"100%\" }} className=\"chat-message-list\">\r\n      <ul className=\"list-unstyled chat-list chat-user-list\" id=\"chat-list\">\r\n        {recentChatList.map(\r\n          (chat, key) =>\r\n            chat.favorite && (\r\n              <li\r\n                key={key}\r\n                id={\"conversation\" + key}\r\n                className={`${chat.isTyping ? \"typing\" : \"\"} ${\r\n                  chat.id === activeChat.id ? \"active\" : \"\"\r\n                }`}\r\n              >\r\n                <Link to=\"#\" onClick={() => openChatAction(chat)}>\r\n                  <IndividualChat chat={chat}/>\r\n                </Link>\r\n              </li>\r\n            )\r\n        )}\r\n\r\n        <hr className=\"mx-3\" />\r\n\r\n        {recentChatList.map(\r\n          (chat, key) =>\r\n            chat.favorite === false && (\r\n              <li\r\n                key={key}\r\n                id={\"conversation\" + key}\r\n                className={`${chat.isTyping ? \"typing\" : \"\"} ${\r\n                  chat.id === activeChat.id ? \"active\" : \"\"\r\n                }`}\r\n              >\r\n                <Link to=\"#\" onClick={() => openChatAction(chat)}>\r\n                  <IndividualChat chat={chat}/>\r\n                </Link>\r\n              </li>\r\n            )\r\n        )}\r\n      </ul>\r\n    </SimpleBar>\r\n  );\r\n};\r\n\r\nexport default ChatList;\r\n"]},"metadata":{},"sourceType":"module"}