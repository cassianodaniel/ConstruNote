{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ConfigDevices.tsx\";\nimport React, { useEffect, useState } from \"react\"; // import Webcam from \"react-user-media\";\n\nimport { useTranslation } from \"react-i18next\";\nimport { useModal } from \"../contexts/ModalContext\";\nimport { Video } from \"./Video\";\nimport { Button, Input, InputGroupText, InputGroup, InputGroupAddon, Modal, Progress } from \"reactstrap\";\nimport { useCall } from \"../contexts/CallContext\";\n\nconst ConfigDevices = () => {\n  const [selectedVideo, setSelectedVideo] = useState();\n  const [selectedAudio, setSelectedAudio] = useState();\n  const [selectedSpeaker, setSelectedSpeaker] = useState();\n  const [videoDevices, setVideoDevices] = useState([]);\n  const [audioDevices, setAudioDevices] = useState([]);\n  const [speakerDevices, setSpeakerDevices] = useState([]);\n  const [speakerVolume, setSpeakerVolume] = useState();\n  const [speaking, setSpeaking] = useState();\n  const [stream, setStream] = useState();\n  const {\n    setUpdateConstraints\n  } = useCall();\n  const {\n    showModalDevicesConfig,\n    setShowModalDevicesConfig\n  } = useModal();\n  const {\n    t\n  } = useTranslation();\n\n  const init = () => {\n    navigator.mediaDevices.enumerateDevices().then(devices => {\n      const vidDevices = [];\n      const audDevices = [];\n      const spkDevices = [];\n      devices.forEach(device => {\n        switch (device.kind) {\n          case \"audioinput\":\n            audDevices.push(device);\n            break;\n\n          case \"videoinput\":\n            vidDevices.push(device);\n            break;\n\n          case \"audiooutput\":\n            spkDevices.push(device);\n            break;\n        }\n      });\n      setAudioDevices(audDevices);\n      setVideoDevices(vidDevices);\n      setSpeakerDevices(spkDevices);\n    });\n  };\n\n  const handleChangeVideo = ev => {\n    const idVideo = ev.target.value;\n    const video = videoDevices.filter(v => v.deviceId === idVideo)[0];\n    setSelectedVideo(video);\n  };\n\n  const handleChangeAudio = ev => {\n    const idAudio = ev.target.value;\n    const audio = audioDevices.filter(v => v.deviceId === idAudio)[0];\n    setSelectedAudio(audio);\n  };\n\n  const handleChangeSpeaker = ev => {\n    const idSpeaker = ev.target.value;\n    const speaker = speakerDevices.filter(v => v.deviceId === idSpeaker)[0];\n    setSelectedSpeaker(speaker);\n  };\n\n  const parseAndSetSpeakerVolumn = volume => {\n    setSpeakerVolume(Math.round(Math.abs(volume < -100 ? -100 : volume)));\n  };\n\n  const changeSpeaking = spk => {\n    setSpeaking(spk);\n  };\n\n  const onPreferencesSubmit = () => {\n    setUpdateConstraints({\n      videoId: selectedVideo === null || selectedVideo === void 0 ? void 0 : selectedVideo.deviceId,\n      audioId: selectedAudio === null || selectedAudio === void 0 ? void 0 : selectedAudio.deviceId,\n      speakerId: selectedSpeaker === null || selectedSpeaker === void 0 ? void 0 : selectedSpeaker.deviceId\n    });\n    setShowModalDevicesConfig(false);\n  };\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(Modal, {\n    closable: false,\n    centered: true,\n    isOpen: showModalDevicesConfig,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ct-live-video-view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Video, {\n    audioId: selectedAudio ? selectedAudio.deviceId : undefined,\n    videoId: selectedVideo ? selectedVideo.deviceId : undefined,\n    speakerId: selectedSpeaker ? selectedSpeaker.deviceId : undefined,\n    stream: stream,\n    setStream: setStream,\n    speakerVolume: speakerVolume,\n    speaking: speaking,\n    modalOpen: showModalDevicesConfig,\n    setSpeakerVolume: parseAndSetSpeakerVolumn,\n    setSpeaking: changeSpeaking,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ct-video-controller\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputGroupAddon, {\n    addonType: \"prepend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputGroupText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"ri-vidicon-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Input, {\n    type: \"select\",\n    defaultValue: selectedVideo && selectedVideo.deviceId ? selectedVideo.deviceId : \"default\",\n    onChange: handleChangeVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, videoDevices.map((video, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: video.deviceId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, video.label)))), /*#__PURE__*/React.createElement(InputGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputGroupAddon, {\n    addonType: \"prepend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputGroupText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"ri-mic-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Input, {\n    type: \"select\",\n    defaultValue: selectedAudio && selectedAudio.deviceId ? selectedAudio.deviceId : \"default\",\n    onChange: handleChangeAudio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }, audioDevices.map((audio, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: audio.deviceId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }, audio.label)))), /*#__PURE__*/React.createElement(InputGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputGroupAddon, {\n    addonType: \"prepend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputGroupText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"ri-speaker-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Input, {\n    type: \"select\",\n    defaultValue: selectedSpeaker && selectedSpeaker.deviceId ? selectedSpeaker.deviceId : \"default\",\n    onChange: handleChangeSpeaker,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, speakerDevices.map((speaker, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: speaker.deviceId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 15\n    }\n  }, speaker.label)))), /*#__PURE__*/React.createElement(Progress, {\n    color: \"info\",\n    value: speaking ? speakerVolume : 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ct-mp-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    onClick: onPreferencesSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  }, t(\"Salvar\")), /*#__PURE__*/React.createElement(Button, {\n    onClick: () => setShowModalDevicesConfig(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, \" \", t(\"Cancel\"))));\n};\n\nexport default ConfigDevices;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ConfigDevices.tsx"],"names":["React","useEffect","useState","useTranslation","useModal","Video","Button","Input","InputGroupText","InputGroup","InputGroupAddon","Modal","Progress","useCall","ConfigDevices","selectedVideo","setSelectedVideo","selectedAudio","setSelectedAudio","selectedSpeaker","setSelectedSpeaker","videoDevices","setVideoDevices","audioDevices","setAudioDevices","speakerDevices","setSpeakerDevices","speakerVolume","setSpeakerVolume","speaking","setSpeaking","stream","setStream","setUpdateConstraints","showModalDevicesConfig","setShowModalDevicesConfig","t","init","navigator","mediaDevices","enumerateDevices","then","devices","vidDevices","audDevices","spkDevices","forEach","device","kind","push","handleChangeVideo","ev","idVideo","target","value","video","filter","v","deviceId","handleChangeAudio","idAudio","audio","handleChangeSpeaker","idSpeaker","speaker","parseAndSetSpeakerVolumn","volume","Math","round","abs","changeSpeaking","spk","onPreferencesSubmit","videoId","audioId","speakerId","undefined","map","index","label"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n// import Webcam from \"react-user-media\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useModal } from \"../contexts/ModalContext\";\r\nimport { Video } from \"./Video\";\r\nimport {\r\n  Button,\r\n  Input,\r\n  InputGroupText,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Modal,\r\n  Progress,\r\n} from \"reactstrap\";\r\nimport { useCall } from \"../contexts/CallContext\";\r\n\r\nconst ConfigDevices: React.FC = () => {\r\n  const [selectedVideo, setSelectedVideo] = useState<MediaDeviceInfo>();\r\n  const [selectedAudio, setSelectedAudio] = useState<MediaDeviceInfo>();\r\n  const [selectedSpeaker, setSelectedSpeaker] = useState<MediaDeviceInfo>();\r\n  const [videoDevices, setVideoDevices] = useState<MediaDeviceInfo[]>([]);\r\n  const [audioDevices, setAudioDevices] = useState<MediaDeviceInfo[]>([]);\r\n  const [speakerDevices, setSpeakerDevices] = useState<MediaDeviceInfo[]>([]);\r\n  const [speakerVolume, setSpeakerVolume] = useState<number>();\r\n  const [speaking, setSpeaking] = useState<boolean>();\r\n  const [stream, setStream] = useState<MediaStream | undefined>();\r\n  const { setUpdateConstraints } = useCall();\r\n  const { showModalDevicesConfig, setShowModalDevicesConfig } = useModal();\r\n  const { t } = useTranslation();\r\n  const init = () => {\r\n    navigator.mediaDevices.enumerateDevices().then((devices) => {\r\n      const vidDevices: MediaDeviceInfo[] = [];\r\n      const audDevices: MediaDeviceInfo[] = [];\r\n      const spkDevices: MediaDeviceInfo[] = [];\r\n      devices.forEach((device) => {\r\n        switch (device.kind) {\r\n          case \"audioinput\":\r\n            audDevices.push(device);\r\n            break;\r\n          case \"videoinput\":\r\n            vidDevices.push(device);\r\n            break;\r\n          case \"audiooutput\":\r\n            spkDevices.push(device);\r\n            break;\r\n        }\r\n      });\r\n      setAudioDevices(audDevices);\r\n      setVideoDevices(vidDevices);\r\n      setSpeakerDevices(spkDevices);\r\n    });\r\n  };\r\n\r\n  const handleChangeVideo = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n    const idVideo = ev.target.value;\r\n    const video = videoDevices.filter((v) => v.deviceId === idVideo)[0];\r\n    setSelectedVideo(video);\r\n  };\r\n  const handleChangeAudio = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n    const idAudio = ev.target.value;\r\n    const audio = audioDevices.filter((v) => v.deviceId === idAudio)[0];\r\n    setSelectedAudio(audio);\r\n  };\r\n  const handleChangeSpeaker = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n    const idSpeaker = ev.target.value;\r\n    const speaker = speakerDevices.filter((v) => v.deviceId === idSpeaker)[0];\r\n    setSelectedSpeaker(speaker);\r\n  };\r\n  const parseAndSetSpeakerVolumn = (volume: number) => {\r\n    setSpeakerVolume(Math.round(Math.abs(volume < -100 ? -100 : volume)));\r\n  };\r\n  const changeSpeaking = (spk: boolean) => {\r\n    setSpeaking(spk);\r\n  };\r\n  const onPreferencesSubmit = () => {\r\n    setUpdateConstraints({\r\n      videoId: selectedVideo?.deviceId,\r\n      audioId: selectedAudio?.deviceId,\r\n      speakerId: selectedSpeaker?.deviceId,\r\n    });\r\n    setShowModalDevicesConfig(false);\r\n  };\r\n  useEffect(init, []);\r\n  return (\r\n    <Modal closable={false} centered isOpen={showModalDevicesConfig}>\r\n      <div className=\"ct-live-video-view\">\r\n        <Video\r\n          audioId={selectedAudio ? selectedAudio.deviceId : undefined}\r\n          videoId={selectedVideo ? selectedVideo.deviceId : undefined}\r\n          speakerId={selectedSpeaker ? selectedSpeaker.deviceId : undefined}\r\n          stream={stream}\r\n          setStream={setStream}\r\n          speakerVolume={speakerVolume}\r\n          speaking={speaking}\r\n          modalOpen={showModalDevicesConfig}\r\n          setSpeakerVolume={parseAndSetSpeakerVolumn}\r\n          setSpeaking={changeSpeaking}\r\n        />\r\n        {/* <Webcam ref={(ref) => this.webcam = ref} \r\n\t\t\t\t\t \tvideo={{deviceId: {exact: selectedVideo ? selectedVideo.id : undefined}}}\r\n\t\t\t\t\t\taudio={{deviceId: {exact: selectedAudio ? selectedAudio.id : undefined}}}\r\n\t\t\t\t\t\t/>  */}\r\n      </div>\r\n      <div className=\"ct-video-controller\">\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>\r\n              <i className=\"ri-vidicon-line\" />\r\n            </InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input\r\n            type=\"select\"\r\n            defaultValue={\r\n              selectedVideo && selectedVideo.deviceId\r\n                ? selectedVideo.deviceId\r\n                : \"default\"\r\n            }\r\n            onChange={handleChangeVideo}\r\n          >\r\n            {videoDevices.map((video, index) => (\r\n              <option key={index} value={video.deviceId}>\r\n                {video.label}\r\n              </option>\r\n            ))}\r\n          </Input>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>\r\n              <i className=\"ri-mic-line\" />\r\n            </InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input\r\n            type=\"select\"\r\n            defaultValue={\r\n              selectedAudio && selectedAudio.deviceId\r\n                ? selectedAudio.deviceId\r\n                : \"default\"\r\n            }\r\n            onChange={handleChangeAudio}\r\n          >\r\n            {audioDevices.map((audio, index) => (\r\n              <option key={index} value={audio.deviceId}>\r\n                {audio.label}\r\n              </option>\r\n            ))}\r\n          </Input>\r\n        </InputGroup>\r\n        <InputGroup>\r\n          <InputGroupAddon addonType=\"prepend\">\r\n            <InputGroupText>\r\n              <i className=\"ri-speaker-line\" />\r\n            </InputGroupText>\r\n          </InputGroupAddon>\r\n          <Input\r\n            type=\"select\"\r\n            defaultValue={\r\n              selectedSpeaker && selectedSpeaker.deviceId\r\n                ? selectedSpeaker.deviceId\r\n                : \"default\"\r\n            }\r\n            onChange={handleChangeSpeaker}\r\n          >\r\n            {speakerDevices.map((speaker, index) => (\r\n              <option key={index} value={speaker.deviceId}>\r\n                {speaker.label}\r\n              </option>\r\n            ))}\r\n          </Input>\r\n        </InputGroup>\r\n        <Progress color=\"info\" value={speaking ? speakerVolume : 0} />\r\n      </div>\r\n      <div className=\"ct-mp-2\">\r\n        <Button type=\"button\" onClick={onPreferencesSubmit}>\r\n          {t(\"Salvar\")}\r\n        </Button>\r\n        <Button onClick={() => setShowModalDevicesConfig(false)}>\r\n          {\" \"}\r\n          {t(\"Cancel\")}\r\n        </Button>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\nexport default ConfigDevices;\r\n"]},"metadata":{},"sourceType":"module"}