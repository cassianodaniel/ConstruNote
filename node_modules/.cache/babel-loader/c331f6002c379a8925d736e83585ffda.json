{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\DathApp\\\\ConstruNote\\\\src\\\\contexts\\\\CallContext.tsx\";\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nexport const CallContext = createContext({});\nexport const CallProvider = ({\n  children\n}) => {\n  const [show, setShow] = useState(false);\n  const [currentCalls, setCurrentCalls] = useState(new Map());\n  const [callNumber, setCallNumber] = useState();\n  const [updateConstraints, setUpdateConstraints] = useState();\n  const [blindTransfer, setBlindTransfer] = useState();\n  const [assistedTransfer, setAssistedTransfer] = useState();\n  const [conferenceCommand, setConferenceCommand] = useState();\n  const [ramalFacilities, setRamalFacilities] = useState();\n\n  const time = () => {// const callWhitoutTime = Array.from(currentCalls.values()).find(\n    //   (c) => !c.interval\n    // );\n    // if (callWhitoutTime) {\n    //   if (callWhitoutTime.callStatus === CallStatus.ON_GOING) {\n    //     let cc = { ...callWhitoutTime };\n    //     if (cc.interval) clearInterval(cc.interval);\n    //     cc.interval = setInterval(() => {\n    //       const currentCallsCopy = new Map<string, ICall>(currentCalls);\n    //       cc.seconds = cc.seconds ? cc.seconds + 1 : 1;\n    //       currentCallsCopy.set(cc.callId, cc);\n    //       setCurrentCalls(currentCallsCopy);\n    //     }, 1000);\n    //   }\n    // }\n  };\n\n  useEffect(time, [currentCalls]);\n  return /*#__PURE__*/React.createElement(CallContext.Provider, {\n    value: {\n      show,\n      setShow,\n      currentCalls,\n      setCurrentCalls,\n      callNumber,\n      setCallNumber,\n      updateConstraints,\n      setUpdateConstraints,\n      blindTransfer,\n      setBlindTransfer,\n      assistedTransfer,\n      setAssistedTransfer,\n      conferenceCommand,\n      setConferenceCommand,\n      ramalFacilities,\n      setRamalFacilities\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport function useCall() {\n  return useContext(CallContext);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/DathApp/ConstruNote/src/contexts/CallContext.tsx"],"names":["React","createContext","useContext","useState","useEffect","CallContext","CallProvider","children","show","setShow","currentCalls","setCurrentCalls","Map","callNumber","setCallNumber","updateConstraints","setUpdateConstraints","blindTransfer","setBlindTransfer","assistedTransfer","setAssistedTransfer","conferenceCommand","setConferenceCommand","ramalFacilities","setRamalFacilities","time","useCall"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,EAAqDC,SAArD,QAAsE,OAAtE;AA+DA,OAAO,MAAMC,WAAW,GAAGJ,aAAa,CACtC,EADsC,CAAjC;AAIP,OAAO,MAAMK,YAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAC9C,IAAIS,GAAJ,EAD8C,CAAhD;AAGA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,EAA5C;AACA,QAAM,CACJY,iBADI,EAEJC,oBAFI,IAGFb,QAAQ,EAHZ;AAIA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,EAAlD;AAGA,QAAM,CAACgB,gBAAD,EAAmBC,mBAAnB,IAA0CjB,QAAQ,EAAxD;AAGA,QAAM,CAACkB,iBAAD,EAAoBC,oBAApB,IAA4CnB,QAAQ,EAA1D;AAGA,QAAM,CAACoB,eAAD,EAAkBC,kBAAlB,IAAwCrB,QAAQ,EAAtD;;AAGA,QAAMsB,IAAI,GAAG,MAAM,CACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAhBD;;AAkBArB,EAAAA,SAAS,CAACqB,IAAD,EAAO,CAACf,YAAD,CAAP,CAAT;AAEA,sBACE,oBAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,IADK;AAELC,MAAAA,OAFK;AAGLC,MAAAA,YAHK;AAILC,MAAAA,eAJK;AAKLE,MAAAA,UALK;AAMLC,MAAAA,aANK;AAOLC,MAAAA,iBAPK;AAQLC,MAAAA,oBARK;AASLC,MAAAA,aATK;AAULC,MAAAA,gBAVK;AAWLC,MAAAA,gBAXK;AAYLC,MAAAA,mBAZK;AAaLC,MAAAA,iBAbK;AAcLC,MAAAA,oBAdK;AAeLC,MAAAA,eAfK;AAgBLC,MAAAA;AAhBK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAoBGjB,QApBH,CADF;AAwBD,CAlEM;AAoEP,OAAO,SAASmB,OAAT,GAAmB;AACxB,SAAOxB,UAAU,CAACG,WAAD,CAAjB;AACD","sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport ICall from \"../alias/ICall\";\r\nimport { UpdateConstraintsParams } from \"../services/SquadVoiceCommunicator\";\r\nimport { Commands } from \"../services/SquadEventsCommunicator\";\r\n//alias\r\ninterface MakeCall {\r\n  number: string;\r\n  useVideo: boolean;\r\n  useAudio: boolean;\r\n}\r\ninterface BlindTransfer {\r\n  number: string;\r\n  callId: string;\r\n}\r\ninterface AssistedTransfer {\r\n  firstCallId: string;\r\n  secondCallId: string;\r\n}\r\ninterface ConferenceCommand {\r\n  command: Commands;\r\n  conferenceId: string;\r\n  extraParam: string;\r\n}\r\nexport interface RamalFacilities {\r\n  domainId: string;\r\n  domainName: string;\r\n  extensionId: string;\r\n  extension: string;\r\n  followMeCount: number;\r\n  description: string;\r\n  followMeId: string;\r\n  forwardAllDestinationEnabled: boolean;\r\n  forwardAllDestination: string;\r\n  forwardBusyDestinationEnabled: boolean;\r\n  forwardBusyDestination: string;\r\n  forwardNoAnswerDestinationEnabled: boolean;\r\n  forwardNoAnswerDestination: string;\r\n  forwardUserNotRegisteredDestinationEnabled: boolean;\r\n  forwardUserNotRegisteredDestination: string;\r\n  update: boolean;\r\n  doNotDisturb: boolean;\r\n  enabled: boolean;\r\n  destinations: any[];\r\n}\r\ninterface ICallContextData {\r\n  show: boolean;\r\n  setShow(value: boolean): void;\r\n  currentCalls: Map<string, ICall>;\r\n  setCurrentCalls(value: Map<string, ICall>): void;\r\n  callNumber: MakeCall | undefined;\r\n  setCallNumber(value: MakeCall | undefined): void;\r\n  updateConstraints: UpdateConstraintsParams | undefined;\r\n  setUpdateConstraints(val: UpdateConstraintsParams | undefined): void;\r\n  blindTransfer: BlindTransfer | undefined;\r\n  setBlindTransfer(val: BlindTransfer | undefined): void;\r\n  assistedTransfer: AssistedTransfer | undefined;\r\n  setAssistedTransfer(val: AssistedTransfer | undefined): void;\r\n  conferenceCommand: ConferenceCommand | undefined;\r\n  setConferenceCommand(val: ConferenceCommand | undefined): void;\r\n  ramalFacilities: RamalFacilities | undefined;\r\n  setRamalFacilities(v: RamalFacilities | undefined): void;\r\n}\r\n\r\nexport const CallContext = createContext<ICallContextData>(\r\n  {} as ICallContextData\r\n);\r\n\r\nexport const CallProvider: React.FC = ({ children }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [currentCalls, setCurrentCalls] = useState<Map<string, ICall>>(\r\n    new Map<string, ICall>()\r\n  );\r\n  const [callNumber, setCallNumber] = useState<MakeCall | undefined>();\r\n  const [\r\n    updateConstraints,\r\n    setUpdateConstraints,\r\n  ] = useState<UpdateConstraintsParams>();\r\n  const [blindTransfer, setBlindTransfer] = useState<\r\n    BlindTransfer | undefined\r\n  >();\r\n  const [assistedTransfer, setAssistedTransfer] = useState<\r\n    AssistedTransfer | undefined\r\n  >();\r\n  const [conferenceCommand, setConferenceCommand] = useState<\r\n    ConferenceCommand | undefined\r\n  >();\r\n  const [ramalFacilities, setRamalFacilities] = useState<\r\n    RamalFacilities | undefined\r\n  >();\r\n  const time = () => {\r\n    // const callWhitoutTime = Array.from(currentCalls.values()).find(\r\n    //   (c) => !c.interval\r\n    // );\r\n    // if (callWhitoutTime) {\r\n    //   if (callWhitoutTime.callStatus === CallStatus.ON_GOING) {\r\n    //     let cc = { ...callWhitoutTime };\r\n    //     if (cc.interval) clearInterval(cc.interval);\r\n    //     cc.interval = setInterval(() => {\r\n    //       const currentCallsCopy = new Map<string, ICall>(currentCalls);\r\n    //       cc.seconds = cc.seconds ? cc.seconds + 1 : 1;\r\n    //       currentCallsCopy.set(cc.callId, cc);\r\n    //       setCurrentCalls(currentCallsCopy);\r\n    //     }, 1000);\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  useEffect(time, [currentCalls]);\r\n\r\n  return (\r\n    <CallContext.Provider\r\n      value={{\r\n        show,\r\n        setShow,\r\n        currentCalls,\r\n        setCurrentCalls,\r\n        callNumber,\r\n        setCallNumber,\r\n        updateConstraints,\r\n        setUpdateConstraints,\r\n        blindTransfer,\r\n        setBlindTransfer,\r\n        assistedTransfer,\r\n        setAssistedTransfer,\r\n        conferenceCommand,\r\n        setConferenceCommand,\r\n        ramalFacilities,\r\n        setRamalFacilities,\r\n      }}\r\n    >\r\n      {children}\r\n    </CallContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useCall() {\r\n  return useContext(CallContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}