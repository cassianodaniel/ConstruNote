{"ast":null,"code":"import { RegistererState, SessionState } from \"sip.js\";\nimport { Events } from \"./voice/types\";\nimport SIP from \"./voice/voicecommunicator\";\nexport default class SquadVoiceCommunicator {\n  constructor(settings, cb, constraints = {}) {\n    this.settings = settings;\n    this.constraints = constraints;\n\n    this.onMakeCall = (state, inviter) => {\n      console.log(`Session state changed to ${state}`);\n\n      switch (state) {\n        case SessionState.Initial:\n          this.notify(Events.MAKE_CALL, inviter);\n          break;\n\n        case SessionState.Establishing:\n          break;\n\n        case SessionState.Established:\n          this.notify(Events.CALL_ON_GOING, inviter);\n          this.sip.setupRemoteMedia(inviter);\n          break;\n\n        case SessionState.Terminating: // fall through\n\n        case SessionState.Terminated:\n          this.notify(Events.CALL_HANGUP, inviter);\n          this.sip.cleanupMedia();\n          break;\n\n        default:\n          throw new Error(\"Unknown session state.\");\n      }\n    };\n\n    this.onReceiveCall = (state, invitation) => {\n      console.log(`Session state changed to ${state}`);\n\n      switch (state) {\n        case SessionState.Initial:\n          this.notify(Events.RECEIVED_CALL, invitation);\n          break;\n\n        case SessionState.Establishing:\n          break;\n\n        case SessionState.Established:\n          this.notify(Events.CALL_ON_GOING, invitation);\n          this.sip.setupRemoteMedia(invitation);\n          break;\n\n        case SessionState.Terminating: // fall through\n\n        case SessionState.Terminated:\n          this.notify(Events.CALL_HANGUP, invitation);\n          this.sip.cleanupMedia();\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.nextSubscriptionId = 0;\n    this.subscriptions = new Map();\n    this.makeSIP();\n  }\n\n  makeSIP() {\n    this.settings.get(settings => {\n      this.sip = new SIP({\n        user: settings.sipUser,\n        password: settings.sipPw,\n        domain: settings.sipDomain,\n        wsURL: \"\",\n        connectionCB: this.connectionListener.bind(this),\n        onMakeCall: this.onMakeCall.bind(this),\n        onReceiveCall: this.onReceiveCall.bind(this)\n      });\n    });\n  }\n\n  getConstraints() {\n    const newConstraints = {\n      video: this.constraints.useVideo && this.constraints.videoId ? {\n        deviceId: this.constraints.videoId\n      } : this.constraints.useVideo || false,\n      audio: this.constraints.audioId ? {\n        deviceId: this.constraints.audioId\n      } : true\n    };\n\n    if (this.constraints.speakerId) {\n      const mediaElement = document.getElementById(\"remote-stream\");\n      mediaElement.setSinkId(this.constraints.speakerId);\n    }\n\n    return newConstraints;\n  }\n\n  updateConstraintsParams(params) {\n    this.constraints = { ...this.constraints,\n      ...params\n    };\n  }\n\n  connectionListener(data) {\n    switch (data) {\n      case RegistererState.Initial:\n        break;\n\n      case RegistererState.Registered:\n        this.notify(Events.CONNECTED);\n        break;\n\n      case RegistererState.Terminated:\n        this.notify(Events.DISCONNECTED);\n        break;\n\n      case RegistererState.Unregistered:\n        this.notify(Events.UNREGISTERED);\n        break;\n    }\n  }\n\n  makeCall(number, constraints = this.constraints) {\n    this.updateConstraintsParams(constraints);\n    this.sip.invite(number, this.getConstraints());\n  }\n\n  // < -- Observer Pattern https://refactoring.guru/pt-br/design-patterns/observer\n  subscribe(subscribeCallback) {\n    var _this$subscriptions;\n\n    (_this$subscriptions = this.subscriptions) === null || _this$subscriptions === void 0 ? void 0 : _this$subscriptions.set(this.nextSubscriptionId || 0, subscribeCallback);\n    if (this.nextSubscriptionId) this.nextSubscriptionId += 1;\n  }\n\n  removeSubscription(id) {\n    var _this$subscriptions2;\n\n    (_this$subscriptions2 = this.subscriptions) === null || _this$subscriptions2 === void 0 ? void 0 : _this$subscriptions2.delete(id);\n  }\n\n  removeAllSubscription() {\n    this.subscriptions = new Map();\n  }\n\n  notify(event, data = null) {\n    if (this.subscriptions) {\n      this.subscriptions.forEach(subscribeCallback => {\n        if (subscribeCallback) subscribeCallback(event, data);\n      });\n    }\n  } // -- >\n\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadVoiceCommunicator.ts"],"names":["RegistererState","SessionState","Events","SIP","SquadVoiceCommunicator","constructor","settings","cb","constraints","onMakeCall","state","inviter","console","log","Initial","notify","MAKE_CALL","Establishing","Established","CALL_ON_GOING","sip","setupRemoteMedia","Terminating","Terminated","CALL_HANGUP","cleanupMedia","Error","onReceiveCall","invitation","RECEIVED_CALL","nextSubscriptionId","subscriptions","Map","makeSIP","get","user","sipUser","password","sipPw","domain","sipDomain","wsURL","connectionCB","connectionListener","bind","getConstraints","newConstraints","video","useVideo","videoId","deviceId","audio","audioId","speakerId","mediaElement","document","getElementById","setSinkId","updateConstraintsParams","params","data","Registered","CONNECTED","DISCONNECTED","Unregistered","UNREGISTERED","makeCall","number","invite","subscribe","subscribeCallback","set","removeSubscription","id","delete","removeAllSubscription","event","forEach"],"mappings":"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","sourcesContent":["import { Invitation, Inviter, RegistererState, SessionState } from \"sip.js\";\r\nimport SettingsBusiness from \"./business/Settings\";\r\nimport { Events, SubscriptionCallBack } from \"./voice/types\";\r\nimport SIP from \"./voice/voicecommunicator\";\r\ninterface UpdateConstraintsParams {\r\n  useVideo?: boolean;\r\n  videoId?: string;\r\n  audioId?: string;\r\n  speakerId?: string;\r\n}\r\nexport default interface SquadVoiceCommunicator {\r\n  sip: SIP;\r\n  nextSubscriptionId?: number;\r\n  subscriptions?: Map<number, SubscriptionCallBack>;\r\n}\r\nexport default class SquadVoiceCommunicator {\r\n  constructor(\r\n    private settings: SettingsBusiness,\r\n    cb: SubscriptionCallBack,\r\n    private constraints: UpdateConstraintsParams = {}\r\n  ) {\r\n    this.nextSubscriptionId = 0;\r\n    this.subscriptions = new Map<number, SubscriptionCallBack>();\r\n    this.makeSIP();\r\n  }\r\n  makeSIP() {\r\n    this.settings.get((settings) => {\r\n      this.sip = new SIP({\r\n        user: settings.sipUser,\r\n        password: settings.sipPw,\r\n        domain: settings.sipDomain,\r\n        wsURL: \"\",\r\n        connectionCB: this.connectionListener.bind(this),\r\n        onMakeCall: this.onMakeCall.bind(this),\r\n        onReceiveCall: this.onReceiveCall.bind(this),\r\n      });\r\n    });\r\n  }\r\n  getConstraints() {\r\n    const newConstraints: MediaStreamConstraints = {\r\n      video:\r\n        this.constraints.useVideo && this.constraints.videoId\r\n          ? {\r\n              deviceId: this.constraints.videoId,\r\n            }\r\n          : this.constraints.useVideo || false,\r\n      audio: this.constraints.audioId\r\n        ? {\r\n            deviceId: this.constraints.audioId,\r\n          }\r\n        : true,\r\n    };\r\n    if (this.constraints.speakerId) {\r\n      const mediaElement: any = document.getElementById(\r\n        \"remote-stream\"\r\n      ) as HTMLVideoElement;\r\n      mediaElement.setSinkId(this.constraints.speakerId);\r\n    }\r\n    return newConstraints;\r\n  }\r\n  updateConstraintsParams(params: UpdateConstraintsParams) {\r\n    this.constraints = { ...this.constraints, ...params };\r\n  }\r\n  connectionListener(data: RegistererState) {\r\n    switch (data) {\r\n      case RegistererState.Initial:\r\n        break;\r\n      case RegistererState.Registered:\r\n        this.notify(Events.CONNECTED);\r\n        break;\r\n      case RegistererState.Terminated:\r\n        this.notify(Events.DISCONNECTED);\r\n        break;\r\n      case RegistererState.Unregistered:\r\n        this.notify(Events.UNREGISTERED);\r\n        break;\r\n    }\r\n  }\r\n  makeCall(\r\n    number: string,\r\n    constraints: UpdateConstraintsParams = this.constraints\r\n  ) {\r\n    this.updateConstraintsParams(constraints);\r\n    this.sip.invite(number, this.getConstraints());\r\n  }\r\n  onMakeCall = (state: SessionState, inviter: Inviter) => {\r\n    console.log(`Session state changed to ${state}`);\r\n    switch (state) {\r\n      case SessionState.Initial:\r\n        this.notify(Events.MAKE_CALL, inviter);\r\n        break;\r\n      case SessionState.Establishing:\r\n        break;\r\n      case SessionState.Established:\r\n        this.notify(Events.CALL_ON_GOING, inviter);\r\n        this.sip.setupRemoteMedia(inviter);\r\n        break;\r\n      case SessionState.Terminating:\r\n      // fall through\r\n      case SessionState.Terminated:\r\n        this.notify(Events.CALL_HANGUP, inviter);\r\n        this.sip.cleanupMedia();\r\n        break;\r\n      default:\r\n        throw new Error(\"Unknown session state.\");\r\n    }\r\n  };\r\n  onReceiveCall = (state: SessionState, invitation: Invitation) => {\r\n    console.log(`Session state changed to ${state}`);\r\n    switch (state) {\r\n      case SessionState.Initial:\r\n        this.notify(Events.RECEIVED_CALL, invitation);\r\n        break;\r\n      case SessionState.Establishing:\r\n        break;\r\n      case SessionState.Established:\r\n        this.notify(Events.CALL_ON_GOING, invitation);\r\n        this.sip.setupRemoteMedia(invitation);\r\n        break;\r\n      case SessionState.Terminating:\r\n      // fall through\r\n      case SessionState.Terminated:\r\n        this.notify(Events.CALL_HANGUP, invitation);\r\n        this.sip.cleanupMedia();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n  // < -- Observer Pattern https://refactoring.guru/pt-br/design-patterns/observer\r\n  subscribe(subscribeCallback: SubscriptionCallBack) {\r\n    this.subscriptions?.set(this.nextSubscriptionId || 0, subscribeCallback);\r\n    if (this.nextSubscriptionId) this.nextSubscriptionId += 1;\r\n  }\r\n  removeSubscription(id: number) {\r\n    this.subscriptions?.delete(id);\r\n  }\r\n  removeAllSubscription() {\r\n    this.subscriptions = new Map<number, SubscriptionCallBack>();\r\n  }\r\n  notify(event: Events, data: any = null) {\r\n    if (this.subscriptions) {\r\n      this.subscriptions.forEach((subscribeCallback) => {\r\n        if (subscribeCallback) subscribeCallback(event, data);\r\n      });\r\n    }\r\n  }\r\n  // -- >\r\n}\r\n"]},"metadata":{},"sourceType":"module"}