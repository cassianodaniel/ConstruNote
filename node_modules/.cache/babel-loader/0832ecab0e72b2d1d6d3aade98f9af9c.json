{"ast":null,"code":"const sortContactGroup = contacts => {\n  let list = []; // cria os grupos das letras\n\n  contacts.forEach(contact => {\n    let letter = contact.name.substring(0, 1).toUpperCase();\n    let foundLetter = false;\n    list.forEach(li => {\n      if (li.group === letter && !foundLetter) {\n        foundLetter = true;\n      }\n    });\n\n    if (!foundLetter) {\n      list.push({\n        group: letter,\n        children: []\n      });\n    }\n  }); // adiciona os contatos nas suas respectivas letras\n\n  contacts.forEach(contact => {\n    let letter = contact.name.substring(0, 1).toUpperCase();\n    list = list.map(li => {\n      if (li.group === letter) {\n        li.children.push(contact);\n      }\n\n      return li;\n    });\n  });\n  return list.sort(function (a, b) {\n    var nameA = a.group.toUpperCase(); // ignore upper and lowercase\n\n    var nameB = b.group.toUpperCase(); // ignore upper and lowercase\n\n    if (nameA < nameB) {\n      return -1;\n    }\n\n    if (nameA > nameB) {\n      return 1;\n    }\n\n    return 0;\n  });\n};\n\nexport default sortContactGroup;","map":{"version":3,"sources":["C:/Users/Digivox/dev/DathApp/ConstruNote/src/helpers/SortContactGroup.ts"],"names":["sortContactGroup","contacts","list","forEach","contact","letter","name","substring","toUpperCase","foundLetter","li","group","push","children","map","sort","a","b","nameA","nameB"],"mappings":"AAGA,MAAMA,gBAAgB,GAAIC,QAAD,IAA0B;AACjD,MAAIC,IAAoB,GAAG,EAA3B,CADiD,CAGjD;;AACAD,EAAAA,QAAQ,CAACE,OAAT,CAAkBC,OAAD,IAAa;AAC5B,QAAIC,MAAM,GAAGD,OAAO,CAACE,IAAR,CAAaC,SAAb,CAAuB,CAAvB,EAA0B,CAA1B,EAA6BC,WAA7B,EAAb;AACA,QAAIC,WAAW,GAAG,KAAlB;AAEAP,IAAAA,IAAI,CAACC,OAAL,CAAcO,EAAD,IAAQ;AACnB,UAAIA,EAAE,CAACC,KAAH,KAAaN,MAAb,IAAuB,CAACI,WAA5B,EAAyC;AACvCA,QAAAA,WAAW,GAAG,IAAd;AACD;AACF,KAJD;;AAMA,QAAI,CAACA,WAAL,EAAkB;AAChBP,MAAAA,IAAI,CAACU,IAAL,CAAU;AAAED,QAAAA,KAAK,EAAEN,MAAT;AAAiBQ,QAAAA,QAAQ,EAAE;AAA3B,OAAV;AACD;AACF,GAbD,EAJiD,CAmBjD;;AACAZ,EAAAA,QAAQ,CAACE,OAAT,CAAkBC,OAAD,IAAa;AAC5B,QAAIC,MAAM,GAAGD,OAAO,CAACE,IAAR,CAAaC,SAAb,CAAuB,CAAvB,EAA0B,CAA1B,EAA6BC,WAA7B,EAAb;AAEAN,IAAAA,IAAI,GAAGA,IAAI,CAACY,GAAL,CAAUJ,EAAD,IAAQ;AACtB,UAAIA,EAAE,CAACC,KAAH,KAAaN,MAAjB,EAAyB;AACvBK,QAAAA,EAAE,CAACG,QAAH,CAAYD,IAAZ,CAAiBR,OAAjB;AACD;;AACD,aAAOM,EAAP;AACD,KALM,CAAP;AAMD,GATD;AAWA,SAAOR,IAAI,CAACa,IAAL,CAAU,UAAUC,CAAV,EAA2BC,CAA3B,EAA4C;AAC3D,QAAIC,KAAK,GAAGF,CAAC,CAACL,KAAF,CAAQH,WAAR,EAAZ,CAD2D,CACxB;;AACnC,QAAIW,KAAK,GAAGF,CAAC,CAACN,KAAF,CAAQH,WAAR,EAAZ,CAF2D,CAExB;;AACnC,QAAIU,KAAK,GAAGC,KAAZ,EAAmB;AACjB,aAAO,CAAC,CAAR;AACD;;AACD,QAAID,KAAK,GAAGC,KAAZ,EAAmB;AACjB,aAAO,CAAP;AACD;;AACD,WAAO,CAAP;AACD,GAVM,CAAP;AAWD,CA1CD;;AA4CA,eAAenB,gBAAf","sourcesContent":["import IContact from \"../alias/IContact\";\r\nimport IContactList from \"../alias/IContactList\";\r\n\r\nconst sortContactGroup = (contacts: IContact[]) => {\r\n  let list: IContactList[] = [];\r\n\r\n  // cria os grupos das letras\r\n  contacts.forEach((contact) => {\r\n    let letter = contact.name.substring(0, 1).toUpperCase();\r\n    let foundLetter = false;\r\n\r\n    list.forEach((li) => {\r\n      if (li.group === letter && !foundLetter) {\r\n        foundLetter = true;\r\n      }\r\n    });\r\n\r\n    if (!foundLetter) {\r\n      list.push({ group: letter, children: [] });\r\n    }\r\n  });\r\n\r\n  // adiciona os contatos nas suas respectivas letras\r\n  contacts.forEach((contact) => {\r\n    let letter = contact.name.substring(0, 1).toUpperCase();\r\n\r\n    list = list.map((li) => {\r\n      if (li.group === letter) {\r\n        li.children.push(contact);\r\n      }\r\n      return li;\r\n    });\r\n  });\r\n\r\n  return list.sort(function (a: IContactList, b: IContactList) {\r\n    var nameA = a.group.toUpperCase(); // ignore upper and lowercase\r\n    var nameB = b.group.toUpperCase(); // ignore upper and lowercase\r\n    if (nameA < nameB) {\r\n      return -1;\r\n    }\r\n    if (nameA > nameB) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n};\r\n\r\nexport default sortContactGroup;\r\n"]},"metadata":{},"sourceType":"module"}