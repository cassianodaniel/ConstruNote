{"ast":null,"code":"import Chat from \"./chat/chatcommunicator\";\nimport { Events } from \"./chat/types/types\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nimport ChatType from \"../enuns/ChatType\";\nimport { ChatType as XMPPChatType } from \"./types\";\nimport short from \"short-uuid\";\nimport { isUrl } from \"./utils/parseUtils\";\nimport { getFileUrlStr } from \"./utils/formatUtils\";\nexport default class SquadChatCommunicator {\n  constructor(settings, contacts, groups, subscribeFunction) {\n    this.settings = settings;\n    this.contacts = contacts;\n    this.groups = groups;\n\n    this.onMessage = msg => {\n      const fileParams = {\n        isFile: \"fileUrl\" in msg ? true : false,\n        isImage: false,\n        isVideo: false,\n        isAudio: false\n      };\n\n      if (fileParams.isFile) {\n        fileParams.isImage = /\\.(jpe?g|png|gif|ico)$/i.test(msg.fileUrl);\n        fileParams.isVideo = /\\.(mp4|avi)$/i.test(msg.fileUrl);\n        fileParams.isAudio = /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg.fileUrl);\n      }\n\n      if (isUrl(msg.message)) {\n        const splittedMsg = msg.message.split(\"/\");\n        const extension = splittedMsg[splittedMsg.length - 1];\n\n        if (extension.includes(\".\")) {\n          fileParams.isFile = true;\n          fileParams.isImage = /\\.(jpe?g|png|gif|ico)$/i.test(msg.message);\n          fileParams.isVideo = /\\.(mp4|avi)$/i.test(msg.message);\n          fileParams.isAudio = /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg.message);\n        }\n      }\n\n      const message = {\n        id: msg.id,\n        userName: this.getMessageUserName(msg) || \"\",\n        message: msg.message,\n        time: msg.sent_at,\n        isImageMessage: fileParams.isImage,\n        isFileMessage: fileParams.isFile,\n        isVideoMessage: fileParams.isVideo,\n        isAudioMessage: fileParams.isAudio,\n        fileUrl: getFileUrlStr(fileParams, msg),\n        toUser: msg.to,\n        fromUser: msg.from,\n        deliverStatus: DeliverStatus.DELIVERED,\n        readStatus: ReadStatus.UNREAD,\n        deliverTimestamp: new Date().toISOString(),\n        readTimestamp: \"\",\n        content: JSON.stringify({\n          reply_msg: msg.reply_msg,\n          reply_msg_id: msg.reply_msg_id,\n          reply_to: msg.reply_to\n        }),\n        contentType: \"text\"\n      };\n      this.notify(Events.MESSAGE, message);\n    };\n\n    this.onPresence = presence => {\n      this.notify(Events.PRESENCE, presence);\n    };\n\n    this.getMessageUserName = msg => {\n      if (msg.to.includes(\"@conference.\")) {\n        const groups = this.groups.getGroups();\n        const group = groups.get(msg.to.split(\"@\")[0]);\n        const member = group === null || group === void 0 ? void 0 : group.members.filter(member => member.userId === msg.from.split(\"@\")[0])[0];\n        return member === null || member === void 0 ? void 0 : member.name;\n      } else {\n        var _this$contacts$getCon;\n\n        return (_this$contacts$getCon = this.contacts.getContacts().get(msg.from.split(\"@\")[0])) === null || _this$contacts$getCon === void 0 ? void 0 : _this$contacts$getCon.name;\n      }\n    };\n\n    this.nextSubscriptionId = 0;\n    this.subscriptions = new Map();\n    this.makeChat(subscribeFunction);\n  }\n\n  makeChat(subscribeFunction) {\n    this.subscribe(subscribeFunction);\n    this.settings.get(settings => {\n      const options = {\n        service: `wss://${settings.xmppDomain}:5280/websocket`,\n        domain: settings.xmppDomain,\n        username: settings.xmppUser,\n        password: settings.xmppPw,\n        resource: `squad.web_${settings.xmppUser}_${short().generate()}`\n      };\n      const chat = new Chat(options);\n      this.chat = chat;\n      this.subscribeChatEvents(chat);\n      chat.client.start();\n    });\n  }\n\n  subscribeChatEvents(chat) {\n    chat.on(Events.MESSAGE, this.onMessage);\n    chat.on(Events.PRESENCE, this.onPresence);\n    chat.on(Events.ONLINE, () => this.notify(Events.ONLINE, null));\n    chat.on(Events.OFFLINE, () => this.notify(Events.OFFLINE, null));\n    chat.on(Events.ERROR, this.onError);\n    chat.on(Events.STANZA, this.onStanza);\n  }\n\n  onStanza(stanza) {}\n\n  onError(error) {}\n\n  sendMessage(chat, text) {\n    this.chat.sendMessage(chat.jid, chat.chatType === ChatType.USER ? XMPPChatType.CHAT : XMPPChatType.GROUPCHAT, text);\n  }\n\n  sendFiles(chat, files, cb) {\n    files.forEach(file => {\n      this.chat.sendFile(chat.jid, chat.chatType === ChatType.USER ? XMPPChatType.CHAT : XMPPChatType.GROUPCHAT, file, cb);\n    });\n  }\n\n  joinGroup(to) {\n    this.chat.joinRoom(to);\n  }\n\n  joinGroups(groups) {\n    groups.forEach(jid => this.joinGroup(jid));\n  }\n\n  subscribe(subscribeCallback) {\n    this.subscriptions.set(this.nextSubscriptionId, subscribeCallback);\n    this.nextSubscriptionId += 1;\n  }\n\n  removeSubscription(id) {\n    this.subscriptions.delete(id);\n  }\n\n  removeAllSubscription() {\n    this.subscriptions = new Map();\n  }\n\n  notify(event, data) {\n    if (this.subscriptions) {\n      this.subscriptions.forEach(subscribeCallback => {\n        if (subscribeCallback) subscribeCallback(event, data);\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadChatCommunicator.ts"],"names":["Chat","Events","DeliverStatus","ReadStatus","ChatType","XMPPChatType","short","isUrl","getFileUrlStr","SquadChatCommunicator","constructor","settings","contacts","groups","subscribeFunction","onMessage","msg","fileParams","isFile","isImage","isVideo","isAudio","test","fileUrl","message","splittedMsg","split","extension","length","includes","id","userName","getMessageUserName","time","sent_at","isImageMessage","isFileMessage","isVideoMessage","isAudioMessage","toUser","to","fromUser","from","deliverStatus","DELIVERED","readStatus","UNREAD","deliverTimestamp","Date","toISOString","readTimestamp","content","JSON","stringify","reply_msg","reply_msg_id","reply_to","contentType","notify","MESSAGE","onPresence","presence","PRESENCE","getGroups","group","get","member","members","filter","userId","name","getContacts","nextSubscriptionId","subscriptions","Map","makeChat","subscribe","options","service","xmppDomain","domain","username","xmppUser","password","xmppPw","resource","generate","chat","subscribeChatEvents","client","start","on","ONLINE","OFFLINE","ERROR","onError","STANZA","onStanza","stanza","error","sendMessage","text","jid","chatType","USER","CHAT","GROUPCHAT","sendFiles","files","cb","forEach","file","sendFile","joinGroup","joinRoom","joinGroups","subscribeCallback","set","removeSubscription","delete","removeAllSubscription","event","data"],"mappings":"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","sourcesContent":["import Chat from \"./chat/chatcommunicator\";\r\nimport { Events, FileMessage, Message, Presence } from \"./chat/types/types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport { SubscriptionCallBack } from \"./types\";\r\nimport IChat from \"../alias/IChat\";\r\nimport ChatType from \"../enuns/ChatType\";\r\nimport { ChatType as XMPPChatType } from \"./types\";\r\nimport SettingsBusiness from \"./business/Settings\";\r\nimport short from \"short-uuid\";\r\nimport ContactsBusiness from \"./business/Contacts\";\r\nimport GroupsBusiness from \"./business/Groups\";\r\nimport { isUrl } from \"./utils/parseUtils\";\r\nimport { getFileUrlStr } from \"./utils/formatUtils\";\r\n\r\nexport default interface SquadChatCommunicator {\r\n  chat: Chat;\r\n  nextSubscriptionId: number;\r\n  subscriptions: Map<number, SubscriptionCallBack>;\r\n}\r\nexport default class SquadChatCommunicator {\r\n  constructor(\r\n    private settings: SettingsBusiness,\r\n    private contacts: ContactsBusiness,\r\n    private groups: GroupsBusiness,\r\n    subscribeFunction: SubscriptionCallBack\r\n  ) {\r\n    this.nextSubscriptionId = 0;\r\n    this.subscriptions = new Map<number, SubscriptionCallBack>();\r\n    this.makeChat(subscribeFunction);\r\n  }\r\n  makeChat(subscribeFunction: SubscriptionCallBack) {\r\n    this.subscribe(subscribeFunction);\r\n    this.settings.get((settings) => {\r\n      const options = {\r\n        service: `wss://${settings.xmppDomain}:5280/websocket`,\r\n        domain: settings.xmppDomain,\r\n        username: settings.xmppUser,\r\n        password: settings.xmppPw,\r\n        resource: `squad.web_${settings.xmppUser}_${short().generate()}`,\r\n      };\r\n      const chat = new Chat(options);\r\n      this.chat = chat;\r\n      this.subscribeChatEvents(chat);\r\n      chat.client.start();\r\n    });\r\n  }\r\n  subscribeChatEvents(chat: Chat) {\r\n    chat.on(Events.MESSAGE, this.onMessage);\r\n    chat.on(Events.PRESENCE, this.onPresence);\r\n    chat.on(Events.ONLINE, () => this.notify(Events.ONLINE, null));\r\n    chat.on(Events.OFFLINE, () => this.notify(Events.OFFLINE, null));\r\n    chat.on(Events.ERROR, this.onError);\r\n    chat.on(Events.STANZA, this.onStanza);\r\n  }\r\n  onMessage = (msg: Message | FileMessage) => {\r\n    const fileParams = {\r\n      isFile: \"fileUrl\" in msg ? true : false,\r\n      isImage: false,\r\n      isVideo: false,\r\n      isAudio: false,\r\n    };\r\n    if (fileParams.isFile) {\r\n      fileParams.isImage = /\\.(jpe?g|png|gif|ico)$/i.test(\r\n        (msg as FileMessage).fileUrl\r\n      );\r\n      fileParams.isVideo = /\\.(mp4|avi)$/i.test((msg as FileMessage).fileUrl);\r\n      fileParams.isAudio = /\\.(ogg|mp3|wav|m4a|webm)$/i.test(\r\n        (msg as FileMessage).fileUrl\r\n      );\r\n    }\r\n    if (isUrl(msg.message)) {\r\n      const splittedMsg = msg.message.split(\"/\");\r\n      const extension = splittedMsg[splittedMsg.length - 1];\r\n      if (extension.includes(\".\")) {\r\n        fileParams.isFile = true;\r\n        fileParams.isImage = /\\.(jpe?g|png|gif|ico)$/i.test(msg.message);\r\n        fileParams.isVideo = /\\.(mp4|avi)$/i.test(msg.message);\r\n        fileParams.isAudio = /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg.message);\r\n      }\r\n    }\r\n\r\n    const message: IMessage = {\r\n      id: msg.id,\r\n      userName: this.getMessageUserName(msg) || \"\",\r\n      message: msg.message,\r\n      time: msg.sent_at,\r\n      isImageMessage: fileParams.isImage,\r\n      isFileMessage: fileParams.isFile,\r\n      isVideoMessage: fileParams.isVideo,\r\n      isAudioMessage: fileParams.isAudio,\r\n      fileUrl: getFileUrlStr(fileParams, msg),\r\n      toUser: msg.to,\r\n      fromUser: msg.from,\r\n      deliverStatus: DeliverStatus.DELIVERED,\r\n      readStatus: ReadStatus.UNREAD,\r\n      deliverTimestamp: new Date().toISOString(),\r\n      readTimestamp: \"\",\r\n      content: JSON.stringify({\r\n        reply_msg: msg.reply_msg,\r\n        reply_msg_id: msg.reply_msg_id,\r\n        reply_to: msg.reply_to,\r\n      }),\r\n      contentType: \"text\",\r\n    };\r\n    this.notify(Events.MESSAGE, message);\r\n  };\r\n  onPresence = (presence: Presence) => {\r\n    this.notify(Events.PRESENCE, presence);\r\n  };\r\n  onStanza(stanza: any) {}\r\n  onError(error: any) {}\r\n  sendMessage(chat: IChat, text: string) {\r\n    this.chat.sendMessage(\r\n      chat.jid,\r\n      chat.chatType === ChatType.USER\r\n        ? XMPPChatType.CHAT\r\n        : XMPPChatType.GROUPCHAT,\r\n      text\r\n    );\r\n  }\r\n  sendFiles(chat: IChat, files: File[], cb: any) {\r\n    files.forEach((file) => {\r\n      this.chat.sendFile(\r\n        chat.jid,\r\n        chat.chatType === ChatType.USER\r\n          ? XMPPChatType.CHAT\r\n          : XMPPChatType.GROUPCHAT,\r\n        file,\r\n        cb\r\n      );\r\n    });\r\n  }\r\n  joinGroup(to: string) {\r\n    this.chat.joinRoom(to);\r\n  }\r\n  joinGroups(groups: string[]) {\r\n    groups.forEach((jid) => this.joinGroup(jid));\r\n  }\r\n  getMessageUserName = (msg: Message | FileMessage) => {\r\n    if (msg.to.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.to.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"@\")[0]\r\n      )[0];\r\n      return member?.name;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])?.name;\r\n    }\r\n  };\r\n  subscribe(subscribeCallback: SubscriptionCallBack) {\r\n    this.subscriptions.set(this.nextSubscriptionId, subscribeCallback);\r\n    this.nextSubscriptionId += 1;\r\n  }\r\n  removeSubscription(id: number) {\r\n    this.subscriptions.delete(id);\r\n  }\r\n  removeAllSubscription() {\r\n    this.subscriptions = new Map<number, SubscriptionCallBack>();\r\n  }\r\n  notify(event: string, data: any) {\r\n    if (this.subscriptions) {\r\n      this.subscriptions.forEach((subscribeCallback) => {\r\n        if (subscribeCallback) subscribeCallback(event, data);\r\n      });\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}