{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{createContext,useContext,useState}from\"react\";import{activeChat as activeChatData}from\"./../data/chat\";//alias\nexport var ChatContext=createContext({});export var ChatProvider=function ChatProvider(_ref){var children=_ref.children;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),showChat=_useState2[0],setShowChat=_useState2[1];var _useState3=useState(activeChatData),_useState4=_slicedToArray(_useState3,2),activeChat=_useState4[0],setActiveChat=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),chats=_useState6[0],setChats=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),showChatProfileSidebar=_useState8[0],setShowChatProfileSidebar=_useState8[1];var _useState9=useState(),_useState10=_slicedToArray(_useState9,2),forwardMessageList=_useState10[0],setForwardMessageList=_useState10[1];var _useState11=useState(),_useState12=_slicedToArray(_useState11,2),replyMsg=_useState12[0],setReplyMsg=_useState12[1];var openChat=function openChat(obj){if((activeChat===null||activeChat===void 0?void 0:activeChat.jid)===obj.jid)return;setShowChat(true);setChats(chats.map(function(item){if(item.jid===obj.jid){item.unRead=0;item.messageLoaded=item.messages.length>=20?false:true;setActiveChat(item);}return item;}));};return/*#__PURE__*/React.createElement(ChatContext.Provider,{value:{showChat:showChat,setShowChat:setShowChat,activeChat:activeChat,setActiveChat:setActiveChat,openChat:openChat,chats:chats,setChats:setChats,forwardMessageList:forwardMessageList,setForwardMessageList:setForwardMessageList,replyMsg:replyMsg,setReplyMsg:setReplyMsg,showChatProfileSidebar:showChatProfileSidebar,setShowChatProfileSidebar:setShowChatProfileSidebar}},children);};export function useChat(){return useContext(ChatContext);}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/contexts/ChatContext.tsx"],"names":["React","createContext","useContext","useState","activeChat","activeChatData","ChatContext","ChatProvider","children","showChat","setShowChat","setActiveChat","chats","setChats","showChatProfileSidebar","setShowChatProfileSidebar","forwardMessageList","setForwardMessageList","replyMsg","setReplyMsg","openChat","obj","jid","map","item","unRead","messageLoaded","messages","length","useChat"],"mappings":"gLAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,UAA/B,CAA2CC,QAA3C,KAA2D,OAA3D,CACA,OAASC,UAAU,GAAIC,CAAAA,cAAvB,KAA6C,gBAA7C,CAEA;AAsBA,MAAO,IAAMC,CAAAA,WAAW,CAAGL,aAAa,CACtC,EADsC,CAAjC,CAIP,MAAO,IAAMM,CAAAA,YAAsB,CAAG,QAAzBA,CAAAA,YAAyB,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,eACtBL,QAAQ,CAAC,KAAD,CADc,wCAC/CM,QAD+C,eACrCC,WADqC,8BAElBP,QAAQ,CAACE,cAAD,CAFU,yCAE/CD,UAF+C,eAEnCO,aAFmC,8BAG5BR,QAAQ,CAAU,EAAV,CAHoB,yCAG/CS,KAH+C,eAGxCC,QAHwC,8BAIMV,QAAQ,CAAC,KAAD,CAJd,yCAI/CW,sBAJ+C,eAIvBC,yBAJuB,8BAKFZ,QAAQ,EALN,0CAK/Ca,kBAL+C,gBAK3BC,qBAL2B,gCAQtBd,QAAQ,EARc,2CAQ/Ce,QAR+C,gBAQrCC,WARqC,gBAUtD,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,GAAD,CAAgB,CAC/B,GAAI,CAAAjB,UAAU,OAAV,EAAAA,UAAU,SAAV,QAAAA,UAAU,CAAEkB,GAAZ,IAAoBD,GAAG,CAACC,GAA5B,CAAiC,OACjCZ,WAAW,CAAC,IAAD,CAAX,CACAG,QAAQ,CACND,KAAK,CAACW,GAAN,CAAU,SAACC,IAAD,CAAU,CAClB,GAAIA,IAAI,CAACF,GAAL,GAAaD,GAAG,CAACC,GAArB,CAA0B,CACxBE,IAAI,CAACC,MAAL,CAAc,CAAd,CACAD,IAAI,CAACE,aAAL,CAAqBF,IAAI,CAACG,QAAL,CAAcC,MAAd,EAAwB,EAAxB,CAA6B,KAA7B,CAAqC,IAA1D,CACAjB,aAAa,CAACa,IAAD,CAAb,CACD,CACD,MAAOA,CAAAA,IAAP,CACD,CAPD,CADM,CAAR,CAUD,CAbD,CAeA,mBACE,oBAAC,WAAD,CAAa,QAAb,EACE,KAAK,CAAE,CACLf,QAAQ,CAARA,QADK,CAELC,WAAW,CAAXA,WAFK,CAGLN,UAAU,CAAVA,UAHK,CAILO,aAAa,CAAbA,aAJK,CAKLS,QAAQ,CAARA,QALK,CAMLR,KAAK,CAALA,KANK,CAOLC,QAAQ,CAARA,QAPK,CAQLG,kBAAkB,CAAlBA,kBARK,CASLC,qBAAqB,CAArBA,qBATK,CAULC,QAAQ,CAARA,QAVK,CAWLC,WAAW,CAAXA,WAXK,CAYLL,sBAAsB,CAAtBA,sBAZK,CAaLC,yBAAyB,CAAzBA,yBAbK,CADT,EAiBGP,QAjBH,CADF,CAqBD,CA9CM,CAgDP,MAAO,SAASqB,CAAAA,OAAT,EAAmB,CACxB,MAAO3B,CAAAA,UAAU,CAACI,WAAD,CAAjB,CACD","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport { activeChat as activeChatData } from \"./../data/chat\";\r\n\r\n//alias\r\nimport IChat from \"../alias/IChat\";\r\nimport IContact from \"../alias/IContact\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport IMessage from \"../alias/IMessage\";\r\n\r\ninterface IChatContextData {\r\n  showChat: boolean;\r\n  setShowChat(value: boolean): void;\r\n  activeChat: IChat;\r\n  setActiveChat(value: IChat): void;\r\n  openChat(obj: IChat): void;\r\n  chats: IChat[];\r\n  setChats(value: IChat[]): void;\r\n  forwardMessageList: (IContact | IGroup)[] | undefined;\r\n  setForwardMessageList(value: (IContact | IGroup)[] | undefined): void;\r\n  replyMsg: IMessage | undefined;\r\n  setReplyMsg(msg: IMessage | undefined): void;\r\n  showChatProfileSidebar: boolean;\r\n  setShowChatProfileSidebar(value: boolean) : void;\r\n}\r\n\r\nexport const ChatContext = createContext<IChatContextData>(\r\n  {} as IChatContextData\r\n);\r\n\r\nexport const ChatProvider: React.FC = ({ children }) => {\r\n  const [showChat, setShowChat] = useState(false);\r\n  const [activeChat, setActiveChat] = useState(activeChatData);\r\n  const [chats, setChats] = useState<IChat[]>([]);\r\n  const [showChatProfileSidebar, setShowChatProfileSidebar] = useState(false);\r\n  const [forwardMessageList, setForwardMessageList] = useState<\r\n    (IContact | IGroup)[] | undefined\r\n  >();\r\n  const [replyMsg, setReplyMsg] = useState<IMessage | undefined>();\r\n\r\n  const openChat = (obj: IChat) => {\r\n    if (activeChat?.jid === obj.jid) return;\r\n    setShowChat(true);\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.jid === obj.jid) {\r\n          item.unRead = 0;\r\n          item.messageLoaded = item.messages.length >= 20 ? false : true;\r\n          setActiveChat(item);\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        showChat,\r\n        setShowChat,\r\n        activeChat,\r\n        setActiveChat,\r\n        openChat,\r\n        chats,\r\n        setChats,\r\n        forwardMessageList,\r\n        setForwardMessageList,\r\n        replyMsg,\r\n        setReplyMsg,\r\n        showChatProfileSidebar, \r\n        setShowChatProfileSidebar\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useChat() {\r\n  return useContext(ChatContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}