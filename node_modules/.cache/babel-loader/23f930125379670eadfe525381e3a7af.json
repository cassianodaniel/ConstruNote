{"ast":null,"code":"'use strict';\n\nvar escapeXMLTable = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  '\\'': '&apos;'\n};\n\nfunction escapeXMLReplace(match) {\n  return escapeXMLTable[match];\n}\n\nvar unescapeXMLTable = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&apos;': \"'\"\n};\n\nfunction unescapeXMLReplace(match) {\n  if (match[1] === '#') {\n    var num;\n\n    if (match[2] === 'x') {\n      num = parseInt(match.slice(3), 16);\n    } else {\n      num = parseInt(match.slice(2), 10);\n    } // https://www.w3.org/TR/xml/#NT-Char defines legal XML characters:\n    // #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n\n\n    if (num === 0x9 || num === 0xA || num === 0xD || num >= 0x20 && num <= 0xD7FF || num >= 0xE000 && num <= 0xFFFD || num >= 0x10000 && num <= 0x10FFFF) {\n      return String.fromCodePoint(num);\n    }\n\n    throw new Error('Illegal XML character 0x' + num.toString(16));\n  }\n\n  if (unescapeXMLTable[match]) {\n    return unescapeXMLTable[match] || match;\n  }\n\n  throw new Error('Illegal XML entity ' + match);\n}\n\nexports.escapeXML = function escapeXML(s) {\n  return s.replace(/&|<|>|\"|'/g, escapeXMLReplace);\n};\n\nexports.unescapeXML = function unescapeXML(s) {\n  var result = '';\n  var start = -1;\n  var end = -1;\n  var previous = 0;\n\n  while ((start = s.indexOf('&', previous)) !== -1 && (end = s.indexOf(';', start + 1)) !== -1) {\n    result = result + s.substring(previous, start) + unescapeXMLReplace(s.substring(start, end + 1));\n    previous = end + 1;\n  } // shortcut if loop never entered:\n  // return the original string without creating new objects\n\n\n  if (previous === 0) return s; // push the remaining characters\n\n  result = result + s.substring(previous);\n  return result;\n};\n\nexports.escapeXMLText = function escapeXMLText(s) {\n  return s.replace(/&|<|>/g, escapeXMLReplace);\n};\n\nexports.unescapeXMLText = function unescapeXMLText(s) {\n  return s.replace(/&(amp|#38|lt|#60|gt|#62);/g, unescapeXMLReplace);\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/ltx/lib/escape.js"],"names":["escapeXMLTable","escapeXMLReplace","match","unescapeXMLTable","unescapeXMLReplace","num","parseInt","slice","String","fromCodePoint","Error","toString","exports","escapeXML","s","replace","unescapeXML","result","start","end","previous","indexOf","substring","escapeXMLText","unescapeXMLText"],"mappings":"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","sourcesContent":["'use strict'\n\nvar escapeXMLTable = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  '\\'': '&apos;'\n}\n\nfunction escapeXMLReplace (match) {\n  return escapeXMLTable[match]\n}\n\nvar unescapeXMLTable = {\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&apos;': \"'\"\n}\n\nfunction unescapeXMLReplace (match) {\n  if (match[1] === '#') {\n    var num\n    if (match[2] === 'x') {\n      num = parseInt(match.slice(3), 16)\n    } else {\n      num = parseInt(match.slice(2), 10)\n    }\n    // https://www.w3.org/TR/xml/#NT-Char defines legal XML characters:\n    // #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]\n    if (num === 0x9 || num === 0xA || num === 0xD ||\n        (num >= 0x20 && num <= 0xD7FF) ||\n        (num >= 0xE000 && num <= 0xFFFD) ||\n        (num >= 0x10000 && num <= 0x10FFFF)) {\n      return String.fromCodePoint(num)\n    }\n    throw new Error('Illegal XML character 0x' + num.toString(16))\n  }\n  if (unescapeXMLTable[match]) {\n    return unescapeXMLTable[match] || match\n  }\n  throw new Error('Illegal XML entity ' + match)\n}\n\nexports.escapeXML = function escapeXML (s) {\n  return s.replace(/&|<|>|\"|'/g, escapeXMLReplace)\n}\n\nexports.unescapeXML = function unescapeXML (s) {\n  var result = ''\n  var start = -1\n  var end = -1\n  var previous = 0\n  while ((start = s.indexOf('&', previous)) !== -1 && (end = s.indexOf(';', start + 1)) !== -1) {\n    result = result +\n      s.substring(previous, start) +\n      unescapeXMLReplace(s.substring(start, end + 1))\n    previous = end + 1\n  }\n\n  // shortcut if loop never entered:\n  // return the original string without creating new objects\n  if (previous === 0) return s\n\n  // push the remaining characters\n  result = result + s.substring(previous)\n\n  return result\n}\n\nexports.escapeXMLText = function escapeXMLText (s) {\n  return s.replace(/&|<|>/g, escapeXMLReplace)\n}\n\nexports.unescapeXMLText = function unescapeXMLText (s) {\n  return s.replace(/&(amp|#38|lt|#60|gt|#62);/g, unescapeXMLReplace)\n}\n"]},"metadata":{},"sourceType":"script"}