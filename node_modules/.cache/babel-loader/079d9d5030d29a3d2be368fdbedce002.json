{"ast":null,"code":"'use strict';\n\nconst xid = require('@xmpp/id');\n\nconst StanzaError = require('@xmpp/middleware/lib/StanzaError');\n\nconst {\n  Deferred\n} = require('@xmpp/events');\n\nconst timeoutPromise = require('@xmpp/events').timeout;\n\nconst xml = require('@xmpp/xml');\n\nfunction isReply({\n  name,\n  type\n}) {\n  if (name !== 'iq') return false;\n  if (type !== 'error' && type !== 'result') return false;\n  return true;\n}\n\nclass IQCaller {\n  constructor({\n    entity,\n    middleware\n  }) {\n    this.handlers = new Map();\n    this.entity = entity;\n    this.middleware = middleware;\n  }\n\n  start() {\n    this.middleware.use(this._route.bind(this));\n  }\n\n  _route({\n    type,\n    name,\n    id,\n    stanza\n  }, next) {\n    if (!isReply({\n      name,\n      type\n    })) return next();\n    const deferred = this.handlers.get(id);\n\n    if (!deferred) {\n      return next();\n    }\n\n    if (type === 'error') {\n      deferred.reject(StanzaError.fromElement(stanza.getChild('error')));\n    } else {\n      deferred.resolve(stanza);\n    }\n\n    this.handlers.delete(id);\n  }\n\n  async request(stanza, timeout = 30 * 1000) {\n    if (!stanza.attrs.id) {\n      stanza.attrs.id = xid();\n    }\n\n    const deferred = new Deferred();\n    this.handlers.set(stanza.attrs.id, deferred);\n\n    try {\n      await this.entity.send(stanza);\n      await timeoutPromise(deferred.promise, timeout);\n    } catch (err) {\n      this.handlers.delete(stanza.attrs.id);\n      throw err;\n    }\n\n    return deferred.promise;\n  }\n\n  _childRequest(type, element, to, ...args) {\n    const {\n      name\n    } = element;\n    const {\n      xmlns\n    } = element.attrs;\n    return this.request(xml('iq', {\n      type,\n      to\n    }, element), ...args).then(stanza => stanza.getChild(name, xmlns));\n  }\n\n  async get(...args) {\n    return this._childRequest('get', ...args);\n  }\n\n  async set(...args) {\n    return this._childRequest('set', ...args);\n  }\n\n}\n\nmodule.exports = function iqCaller(...args) {\n  const iqCaller = new IQCaller(...args);\n  iqCaller.start();\n  return iqCaller;\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/iq/caller.js"],"names":["xid","require","StanzaError","Deferred","timeoutPromise","timeout","xml","isReply","name","type","IQCaller","constructor","entity","middleware","handlers","Map","start","use","_route","bind","id","stanza","next","deferred","get","reject","fromElement","getChild","resolve","delete","request","attrs","set","send","promise","err","_childRequest","element","to","args","xmlns","then","module","exports","iqCaller"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,UAAD,CAAnB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,kCAAD,CAA3B;;AACA,MAAM;AAACE,EAAAA;AAAD,IAAaF,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,cAAD,CAAP,CAAwBI,OAA/C;;AACA,MAAMC,GAAG,GAAGL,OAAO,CAAC,WAAD,CAAnB;;AAEA,SAASM,OAAT,CAAiB;AAACC,EAAAA,IAAD;AAAOC,EAAAA;AAAP,CAAjB,EAA+B;AAC7B,MAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,MAAIC,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,QAAjC,EAA2C,OAAO,KAAP;AAC3C,SAAO,IAAP;AACD;;AAED,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,CAAC;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,GAAD,EAAuB;AAChC,SAAKC,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;AACA,SAAKH,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACD;;AAEDG,EAAAA,KAAK,GAAG;AACN,SAAKH,UAAL,CAAgBI,GAAhB,CAAoB,KAAKC,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAApB;AACD;;AAEDD,EAAAA,MAAM,CAAC;AAACT,IAAAA,IAAD;AAAOD,IAAAA,IAAP;AAAaY,IAAAA,EAAb;AAAiBC,IAAAA;AAAjB,GAAD,EAA2BC,IAA3B,EAAiC;AACrC,QAAI,CAACf,OAAO,CAAC;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAD,CAAZ,EAA4B,OAAOa,IAAI,EAAX;AAE5B,UAAMC,QAAQ,GAAG,KAAKT,QAAL,CAAcU,GAAd,CAAkBJ,EAAlB,CAAjB;;AAEA,QAAI,CAACG,QAAL,EAAe;AACb,aAAOD,IAAI,EAAX;AACD;;AAED,QAAIb,IAAI,KAAK,OAAb,EAAsB;AACpBc,MAAAA,QAAQ,CAACE,MAAT,CAAgBvB,WAAW,CAACwB,WAAZ,CAAwBL,MAAM,CAACM,QAAP,CAAgB,OAAhB,CAAxB,CAAhB;AACD,KAFD,MAEO;AACLJ,MAAAA,QAAQ,CAACK,OAAT,CAAiBP,MAAjB;AACD;;AAED,SAAKP,QAAL,CAAce,MAAd,CAAqBT,EAArB;AACD;;AAED,QAAMU,OAAN,CAAcT,MAAd,EAAsBhB,OAAO,GAAG,KAAK,IAArC,EAA2C;AACzC,QAAI,CAACgB,MAAM,CAACU,KAAP,CAAaX,EAAlB,EAAsB;AACpBC,MAAAA,MAAM,CAACU,KAAP,CAAaX,EAAb,GAAkBpB,GAAG,EAArB;AACD;;AAED,UAAMuB,QAAQ,GAAG,IAAIpB,QAAJ,EAAjB;AACA,SAAKW,QAAL,CAAckB,GAAd,CAAkBX,MAAM,CAACU,KAAP,CAAaX,EAA/B,EAAmCG,QAAnC;;AAEA,QAAI;AACF,YAAM,KAAKX,MAAL,CAAYqB,IAAZ,CAAiBZ,MAAjB,CAAN;AACA,YAAMjB,cAAc,CAACmB,QAAQ,CAACW,OAAV,EAAmB7B,OAAnB,CAApB;AACD,KAHD,CAGE,OAAO8B,GAAP,EAAY;AACZ,WAAKrB,QAAL,CAAce,MAAd,CAAqBR,MAAM,CAACU,KAAP,CAAaX,EAAlC;AACA,YAAMe,GAAN;AACD;;AAED,WAAOZ,QAAQ,CAACW,OAAhB;AACD;;AAEDE,EAAAA,aAAa,CAAC3B,IAAD,EAAO4B,OAAP,EAAgBC,EAAhB,EAAoB,GAAGC,IAAvB,EAA6B;AACxC,UAAM;AAAC/B,MAAAA;AAAD,QAAS6B,OAAf;AACA,UAAM;AAACG,MAAAA;AAAD,QAAUH,OAAO,CAACN,KAAxB;AACA,WAAO,KAAKD,OAAL,CAAaxB,GAAG,CAAC,IAAD,EAAO;AAACG,MAAAA,IAAD;AAAO6B,MAAAA;AAAP,KAAP,EAAmBD,OAAnB,CAAhB,EAA6C,GAAGE,IAAhD,EAAsDE,IAAtD,CAA2DpB,MAAM,IACtEA,MAAM,CAACM,QAAP,CAAgBnB,IAAhB,EAAsBgC,KAAtB,CADK,CAAP;AAGD;;AAED,QAAMhB,GAAN,CAAU,GAAGe,IAAb,EAAmB;AACjB,WAAO,KAAKH,aAAL,CAAmB,KAAnB,EAA0B,GAAGG,IAA7B,CAAP;AACD;;AAED,QAAMP,GAAN,CAAU,GAAGO,IAAb,EAAmB;AACjB,WAAO,KAAKH,aAAL,CAAmB,KAAnB,EAA0B,GAAGG,IAA7B,CAAP;AACD;;AA9DY;;AAiEfG,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkB,GAAGL,IAArB,EAA2B;AAC1C,QAAMK,QAAQ,GAAG,IAAIlC,QAAJ,CAAa,GAAG6B,IAAhB,CAAjB;AACAK,EAAAA,QAAQ,CAAC5B,KAAT;AACA,SAAO4B,QAAP;AACD,CAJD","sourcesContent":["'use strict'\n\nconst xid = require('@xmpp/id')\nconst StanzaError = require('@xmpp/middleware/lib/StanzaError')\nconst {Deferred} = require('@xmpp/events')\nconst timeoutPromise = require('@xmpp/events').timeout\nconst xml = require('@xmpp/xml')\n\nfunction isReply({name, type}) {\n  if (name !== 'iq') return false\n  if (type !== 'error' && type !== 'result') return false\n  return true\n}\n\nclass IQCaller {\n  constructor({entity, middleware}) {\n    this.handlers = new Map()\n    this.entity = entity\n    this.middleware = middleware\n  }\n\n  start() {\n    this.middleware.use(this._route.bind(this))\n  }\n\n  _route({type, name, id, stanza}, next) {\n    if (!isReply({name, type})) return next()\n\n    const deferred = this.handlers.get(id)\n\n    if (!deferred) {\n      return next()\n    }\n\n    if (type === 'error') {\n      deferred.reject(StanzaError.fromElement(stanza.getChild('error')))\n    } else {\n      deferred.resolve(stanza)\n    }\n\n    this.handlers.delete(id)\n  }\n\n  async request(stanza, timeout = 30 * 1000) {\n    if (!stanza.attrs.id) {\n      stanza.attrs.id = xid()\n    }\n\n    const deferred = new Deferred()\n    this.handlers.set(stanza.attrs.id, deferred)\n\n    try {\n      await this.entity.send(stanza)\n      await timeoutPromise(deferred.promise, timeout)\n    } catch (err) {\n      this.handlers.delete(stanza.attrs.id)\n      throw err\n    }\n\n    return deferred.promise\n  }\n\n  _childRequest(type, element, to, ...args) {\n    const {name} = element\n    const {xmlns} = element.attrs\n    return this.request(xml('iq', {type, to}, element), ...args).then(stanza =>\n      stanza.getChild(name, xmlns)\n    )\n  }\n\n  async get(...args) {\n    return this._childRequest('get', ...args)\n  }\n\n  async set(...args) {\n    return this._childRequest('set', ...args)\n  }\n}\n\nmodule.exports = function iqCaller(...args) {\n  const iqCaller = new IQCaller(...args)\n  iqCaller.start()\n  return iqCaller\n}\n"]},"metadata":{},"sourceType":"script"}