{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar _require = require('@xmpp/events'),\n    EventEmitter = _require.EventEmitter;\n\nvar Reconnect = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Reconnect, _EventEmitter);\n\n  var _super = _createSuper(Reconnect);\n\n  function Reconnect(entity) {\n    var _this;\n\n    _classCallCheck(this, Reconnect);\n\n    _this = _super.call(this);\n    _this.delay = 1000;\n    _this.entity = entity;\n    _this._timeout = null;\n    return _this;\n  }\n\n  _createClass(Reconnect, [{\n    key: \"scheduleReconnect\",\n    value: function scheduleReconnect() {\n      var _this2 = this;\n\n      var entity = this.entity,\n          delay = this.delay,\n          _timeout = this._timeout;\n      clearTimeout(_timeout);\n      this._timeout = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(entity.status !== 'disconnect')) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                _context.prev = 2;\n                _context.next = 5;\n                return _this2.reconnect();\n\n              case 5:\n                _context.next = 9;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](2);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[2, 7]]);\n      })), delay);\n    }\n  }, {\n    key: \"reconnect\",\n    value: function () {\n      var _reconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var entity, _entity$options, service, domain, lang;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                entity = this.entity;\n                this.emit('reconnecting');\n                _entity$options = entity.options, service = _entity$options.service, domain = _entity$options.domain, lang = _entity$options.lang;\n                _context2.next = 5;\n                return entity.connect(service);\n\n              case 5:\n                _context2.next = 7;\n                return entity.open({\n                  domain: domain,\n                  lang: lang\n                });\n\n              case 7:\n                this.emit('reconnected');\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function reconnect() {\n        return _reconnect.apply(this, arguments);\n      }\n\n      return reconnect;\n    }()\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this3 = this;\n\n      var entity = this.entity;\n      var listeners = {};\n\n      listeners.disconnect = function () {\n        _this3.scheduleReconnect();\n      };\n\n      this.listeners = listeners;\n      entity.on('disconnect', listeners.disconnect);\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      var entity = this.entity,\n          listeners = this.listeners,\n          _timeout = this._timeout;\n      entity.removeListener('disconnect', listeners.disconnect);\n      clearTimeout(_timeout);\n    }\n  }]);\n\n  return Reconnect;\n}(EventEmitter);\n\nmodule.exports = function reconnect(_ref2) {\n  var entity = _ref2.entity;\n  var r = new Reconnect(entity);\n  r.start();\n  return r;\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/reconnect/index.js"],"names":["require","EventEmitter","Reconnect","entity","delay","_timeout","clearTimeout","setTimeout","status","reconnect","emit","options","service","domain","lang","connect","open","listeners","disconnect","scheduleReconnect","on","removeListener","module","exports","r","start"],"mappings":"AAAA;;;;;;;;;;;;;;eAEuBA,OAAO,CAAC,cAAD,C;IAAvBC,Y,YAAAA,Y;;IAEDC,S;;;;;AACJ,qBAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAClB;AAEA,UAAKC,KAAL,GAAa,IAAb;AACA,UAAKD,MAAL,GAAcA,MAAd;AACA,UAAKE,QAAL,GAAgB,IAAhB;AALkB;AAMnB;;;;wCAEmB;AAAA;;AAAA,UACXF,MADW,GACgB,IADhB,CACXA,MADW;AAAA,UACHC,KADG,GACgB,IADhB,CACHA,KADG;AAAA,UACIC,QADJ,GACgB,IADhB,CACIA,QADJ;AAElBC,MAAAA,YAAY,CAACD,QAAD,CAAZ;AACA,WAAKA,QAAL,GAAgBE,UAAU,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA,sBACrBJ,MAAM,CAACK,MAAP,KAAkB,YADG;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,uBAMjB,MAAI,CAACC,SAAL,EANiB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD,IAWvBL,KAXuB,CAA1B;AAYD;;;;;;;;;;;AAGQD,gBAAAA,M,GAAU,I,CAAVA,M;AACP,qBAAKO,IAAL,CAAU,cAAV;kCAEgCP,MAAM,CAACQ,O,EAAhCC,O,mBAAAA,O,EAASC,M,mBAAAA,M,EAAQC,I,mBAAAA,I;;uBAClBX,MAAM,CAACY,OAAP,CAAeH,OAAf,C;;;;uBACAT,MAAM,CAACa,IAAP,CAAY;AAACH,kBAAAA,MAAM,EAANA,MAAD;AAASC,kBAAAA,IAAI,EAAJA;AAAT,iBAAZ,C;;;AAEN,qBAAKJ,IAAL,CAAU,aAAV;;;;;;;;;;;;;;;;;;4BAGM;AAAA;;AAAA,UACCP,MADD,GACW,IADX,CACCA,MADD;AAEN,UAAMc,SAAS,GAAG,EAAlB;;AACAA,MAAAA,SAAS,CAACC,UAAV,GAAuB,YAAM;AAC3B,QAAA,MAAI,CAACC,iBAAL;AACD,OAFD;;AAIA,WAAKF,SAAL,GAAiBA,SAAjB;AACAd,MAAAA,MAAM,CAACiB,EAAP,CAAU,YAAV,EAAwBH,SAAS,CAACC,UAAlC;AACD;;;2BAEM;AAAA,UACEf,MADF,GACiC,IADjC,CACEA,MADF;AAAA,UACUc,SADV,GACiC,IADjC,CACUA,SADV;AAAA,UACqBZ,QADrB,GACiC,IADjC,CACqBA,QADrB;AAELF,MAAAA,MAAM,CAACkB,cAAP,CAAsB,YAAtB,EAAoCJ,SAAS,CAACC,UAA9C;AACAZ,MAAAA,YAAY,CAACD,QAAD,CAAZ;AACD;;;;EApDqBJ,Y;;AAuDxBqB,MAAM,CAACC,OAAP,GAAiB,SAASd,SAAT,QAA6B;AAAA,MAATN,MAAS,SAATA,MAAS;AAC5C,MAAMqB,CAAC,GAAG,IAAItB,SAAJ,CAAcC,MAAd,CAAV;AACAqB,EAAAA,CAAC,CAACC,KAAF;AACA,SAAOD,CAAP;AACD,CAJD","sourcesContent":["'use strict'\n\nconst {EventEmitter} = require('@xmpp/events')\n\nclass Reconnect extends EventEmitter {\n  constructor(entity) {\n    super()\n\n    this.delay = 1000\n    this.entity = entity\n    this._timeout = null\n  }\n\n  scheduleReconnect() {\n    const {entity, delay, _timeout} = this\n    clearTimeout(_timeout)\n    this._timeout = setTimeout(async () => {\n      if (entity.status !== 'disconnect') {\n        return\n      }\n\n      try {\n        await this.reconnect()\n        // eslint-disable-next-line no-unused-vars\n      } catch (err) {\n        // Ignoring the rejection is safe because the error is emitted on entity by #start\n      }\n    }, delay)\n  }\n\n  async reconnect() {\n    const {entity} = this\n    this.emit('reconnecting')\n\n    const {service, domain, lang} = entity.options\n    await entity.connect(service)\n    await entity.open({domain, lang})\n\n    this.emit('reconnected')\n  }\n\n  start() {\n    const {entity} = this\n    const listeners = {}\n    listeners.disconnect = () => {\n      this.scheduleReconnect()\n    }\n\n    this.listeners = listeners\n    entity.on('disconnect', listeners.disconnect)\n  }\n\n  stop() {\n    const {entity, listeners, _timeout} = this\n    entity.removeListener('disconnect', listeners.disconnect)\n    clearTimeout(_timeout)\n  }\n}\n\nmodule.exports = function reconnect({entity}) {\n  const r = new Reconnect(entity)\n  r.start()\n  return r\n}\n"]},"metadata":{},"sourceType":"script"}