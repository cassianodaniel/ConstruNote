{"ast":null,"code":"import { parseMessage } from \"../utils/parseUtils\";\nexport default class MessagesBusiness {\n  constructor(api, contacts, groups, user) {\n    this.api = api;\n    this.contacts = contacts;\n    this.groups = groups;\n    this.user = user;\n\n    this.list = (chat, callback) => {\n      var _chat$messages$;\n\n      if (!this.api) return;\n      const lastMessageId = (_chat$messages$ = chat.messages[0]) === null || _chat$messages$ === void 0 ? void 0 : _chat$messages$.id;\n      this.api.getMessages(chat.id, chat.jid.includes(\"@conference.\") ? \"groupchat\" : \"chat\", {\n        paramsUrl: {\n          startingByMessageId: lastMessageId\n        }\n      }, data => {\n        if (data) this.user.get(user => {\n          this.contacts.listAllUsers(ctcs => {\n            callback(data.messages.map(msg => parseMessage(msg, ctcs, this.groups.getGroups(), user)));\n          });\n        });else return;\n      });\n    };\n\n    this.save = (payload, callback) => {\n      if (!this.api) return;\n      this.api.favoriteMessage(payload, callback);\n    };\n\n    this.listFavorites = (payload, callback) => {\n      if (!this.api) return;\n      this.api.listFavoriteMessages({\n        paramsUrl: {\n          contactType: payload.contactType\n        }\n      }, callback);\n    };\n\n    this.deleteFavorite = (payload, callback) => {\n      if (!this.api) return;\n      this.api.deleteMessage({\n        messageId: payload.messageId\n      }, callback);\n    };\n\n    this.read = (payload, callback) => {\n      if (!this.api) return;\n      this.api.readMessage({\n        paramsUrl: {\n          authUser: payload.authUser,\n          between: payload.between,\n          id: payload.id,\n          chatType: payload.chatType\n        }\n      }, callback);\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Messages.ts"],"names":["parseMessage","MessagesBusiness","constructor","api","contacts","groups","user","list","chat","callback","lastMessageId","messages","id","getMessages","jid","includes","paramsUrl","startingByMessageId","data","get","listAllUsers","ctcs","map","msg","getGroups","save","payload","favoriteMessage","listFavorites","listFavoriteMessages","contactType","deleteFavorite","deleteMessage","messageId","read","readMessage","authUser","between","chatType"],"mappings":"AAIA,SAASA,YAAT,QAA6B,qBAA7B;AAgBA,eAAe,MAAMC,gBAAN,CAAuB;AACpCC,EAAAA,WAAW,CACDC,GADC,EAEDC,QAFC,EAGDC,MAHC,EAIDC,IAJC,EAKT;AAAA,SAJQH,GAIR,GAJQA,GAIR;AAAA,SAHQC,QAGR,GAHQA,QAGR;AAAA,SAFQC,MAER,GAFQA,MAER;AAAA,SADQC,IACR,GADQA,IACR;;AAAA,SACFC,IADE,GACK,CAACC,IAAD,EAAcC,QAAd,KAAgD;AAAA;;AACrD,UAAI,CAAC,KAAKN,GAAV,EAAe;AACf,YAAMO,aAAa,sBAAGF,IAAI,CAACG,QAAL,CAAc,CAAd,CAAH,oDAAG,gBAAkBC,EAAxC;AACA,WAAKT,GAAL,CAASU,WAAT,CACEL,IAAI,CAACI,EADP,EAEEJ,IAAI,CAACM,GAAL,CAASC,QAAT,CAAkB,cAAlB,IAAoC,WAApC,GAAkD,MAFpD,EAGE;AAAEC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,mBAAmB,EAAEP;AAAvB;AAAb,OAHF,EAIGQ,IAAD,IAAU;AACR,YAAIA,IAAJ,EACE,KAAKZ,IAAL,CAAUa,GAAV,CAAeb,IAAD,IAAU;AACtB,eAAKF,QAAL,CAAcgB,YAAd,CAA4BC,IAAD,IAAU;AACnCZ,YAAAA,QAAQ,CACNS,IAAI,CAACP,QAAL,CAAcW,GAAd,CAAmBC,GAAD,IAChBvB,YAAY,CAACuB,GAAD,EAAMF,IAAN,EAAY,KAAKhB,MAAL,CAAYmB,SAAZ,EAAZ,EAAqClB,IAArC,CADd,CADM,CAAR;AAKD,WAND;AAOD,SARD,EADF,KAUK;AACN,OAhBH;AAkBD,KAtBC;;AAAA,SAuBFmB,IAvBE,GAuBK,CACLC,OADK,EAELjB,QAFK,KAGF;AACH,UAAI,CAAC,KAAKN,GAAV,EAAe;AACf,WAAKA,GAAL,CAASwB,eAAT,CAAyBD,OAAzB,EAAkCjB,QAAlC;AACD,KA7BC;;AAAA,SA8BFmB,aA9BE,GA8Bc,CAACF,OAAD,EAAkCjB,QAAlC,KAA6E;AAC3F,UAAG,CAAC,KAAKN,GAAT,EAAc;AACd,WAAKA,GAAL,CAAS0B,oBAAT,CAA8B;AAACb,QAAAA,SAAS,EAAE;AAACc,UAAAA,WAAW,EAAEJ,OAAO,CAACI;AAAtB;AAAZ,OAA9B,EAA+ErB,QAA/E;AACD,KAjCC;;AAAA,SAkCFsB,cAlCE,GAkCe,CAACL,OAAD,EAAgCjB,QAAhC,KAAoE;AACnF,UAAG,CAAC,KAAKN,GAAT,EAAc;AACd,WAAKA,GAAL,CAAS6B,aAAT,CAAuB;AAACC,QAAAA,SAAS,EAAEP,OAAO,CAACO;AAApB,OAAvB,EAAuDxB,QAAvD;AACD,KArCC;;AAAA,SAsCFyB,IAtCE,GAsCK,CAACR,OAAD,EAA+BjB,QAA/B,KAAiE;AACtE,UAAG,CAAC,KAAKN,GAAT,EAAc;AACd,WAAKA,GAAL,CAASgC,WAAT,CAAqB;AACnBnB,QAAAA,SAAS,EAAE;AACToB,UAAAA,QAAQ,EAAEV,OAAO,CAACU,QADT;AAETC,UAAAA,OAAO,EAAEX,OAAO,CAACW,OAFR;AAGTzB,UAAAA,EAAE,EAAEc,OAAO,CAACd,EAHH;AAIT0B,UAAAA,QAAQ,EAAEZ,OAAO,CAACY;AAJT;AADQ,OAArB,EAMI7B,QANJ;AAOD,KA/CC;AAAE;;AANgC","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport { DeleteMessageCallback, DeleteMessagePayload, FavoriteMessageCallback, FavoriteMessagePayload, ListFavoriteMessagesCallback, ReadMessageCallback } from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport IChat from \"../../alias/IChat\";\r\nimport IMessage from \"../../alias/IMessage\";\r\nimport { parseMessage } from \"../utils/parseUtils\";\r\nimport ContactsBusiness from \"./Contacts\";\r\nimport GroupsBusiness from \"./Groups\";\r\nimport UserBusiness from \"./User\";\r\n\r\ninterface IReadMessagePayload{\r\n  authUser: string;\r\n  between: string;\r\n  id: string;\r\n  chatType: string;\r\n}\r\n\r\ninterface GetMessagesCallback {\r\n  (messages: IMessage[]): void;\r\n}\r\n\r\nexport default class MessagesBusiness {\r\n  constructor(\r\n    private api: API,\r\n    private contacts: ContactsBusiness,\r\n    private groups: GroupsBusiness,\r\n    private user: UserBusiness\r\n  ) {}\r\n  list = (chat: IChat, callback: GetMessagesCallback) => {\r\n    if (!this.api) return;\r\n    const lastMessageId = chat.messages[0]?.id;\r\n    this.api.getMessages(\r\n      chat.id,\r\n      chat.jid.includes(\"@conference.\") ? \"groupchat\" : \"chat\",\r\n      { paramsUrl: { startingByMessageId: lastMessageId } },\r\n      (data) => {\r\n        if (data)\r\n          this.user.get((user) => {\r\n            this.contacts.listAllUsers((ctcs) => {\r\n              callback(\r\n                data.messages.map((msg) =>\r\n                  parseMessage(msg, ctcs, this.groups.getGroups(), user)\r\n                )\r\n              );\r\n            });\r\n          });\r\n        else return;\r\n      }\r\n    );\r\n  };\r\n  save = (\r\n    payload: FavoriteMessagePayload,\r\n    callback: FavoriteMessageCallback\r\n  ) => {\r\n    if (!this.api) return;\r\n    this.api.favoriteMessage(payload, callback);\r\n  }\r\n  listFavorites = (payload: FavoriteMessagePayload, callback: ListFavoriteMessagesCallback) => {\r\n    if(!this.api) return;\r\n    this.api.listFavoriteMessages({paramsUrl: {contactType: payload.contactType}}, callback);\r\n  }\r\n  deleteFavorite = (payload: DeleteMessagePayload, callback: DeleteMessageCallback) => {\r\n    if(!this.api) return;\r\n    this.api.deleteMessage({messageId: payload.messageId}, callback);\r\n  }\r\n  read = (payload: IReadMessagePayload, callback: ReadMessageCallback) => {\r\n    if(!this.api) return;\r\n    this.api.readMessage({\r\n      paramsUrl: {\r\n        authUser: payload.authUser,\r\n        between: payload.between,\r\n        id: payload.id,\r\n        chatType: payload.chatType\r\n    }}, callback);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}