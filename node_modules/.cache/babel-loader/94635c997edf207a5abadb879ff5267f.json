{"ast":null,"code":"import API from \"@digivox/apicommunicator\";\nimport PresenceStatus from \"../enuns/PresenceStatus\";\nimport UserType from \"../enuns/UserType\";\nexport class SquadCommunicator {\n  constructor() {\n    this.getMessages = (chat, callback) => {\n      if (!this.api) return;\n      const lastMessageId = chat.messages[0].id;\n      this.api.getMessages(chat.id, chat.chatType, {\n        paramsUrl: {\n          startingByMessageId: lastMessageId\n        }\n      }, data => {\n        if (data) callback(data.messages.map(msg => this.parseMessage(msg)));else return;\n      });\n    };\n\n    this.parseToIChat = (chat, arr) => {\n      const chatUser = this.groups.get(chat.id) || this.contacts.get(chat.id);\n\n      if (chatUser) {\n        const chatMessage = chat.messages[0];\n        const iChat = {\n          id: chat.id,\n          jid: chatUser.jid,\n          name: chat.name,\n          profilePicture: chatUser.profilePicture,\n          status: \"status\" in chatUser ? chatUser.status : undefined,\n          unRead: chat.unreadMessages,\n          chatType: chat.chatType,\n          isTyping: false,\n          messages: [this.parseMessage(chatMessage)]\n        };\n        arr.push(iChat);\n      }\n    };\n\n    this.parseGroup = apiGroup => {\n      return {\n        groupId: apiGroup.id,\n        name: apiGroup.name,\n        description: apiGroup.description,\n        jid: `${apiGroup.id}@${apiGroup.domainName}`,\n        profilePicture: apiGroup.imageUrl,\n        members: apiGroup.members.map(member => {\n          return {\n            userId: member.id,\n            name: member.name,\n            profilePicture: member.imageUrl,\n            role: member.admin ? UserType.ADMIN : UserType.USER,\n            status: PresenceStatus.ONLINE\n          };\n        })\n      };\n    };\n\n    this.parseContact = apiContact => {\n      return {\n        id: apiContact.id,\n        jid: apiContact.imId,\n        name: apiContact.name,\n        domain: apiContact.domainName,\n        number: apiContact.extension,\n        profilePicture: apiContact.imageUrl,\n        email: apiContact.email,\n        blocked: apiContact.blocked,\n        added: apiContact.added,\n        status: PresenceStatus.ONLINE,\n        favorite: apiContact.favorite\n      };\n    };\n\n    this.createGroup = (group, callback) => {\n      if (!this.api) return;\n      const contactsId = group.contacts.map(contact => contact.id);\n      const body = {\n        name: group.name,\n        description: group.description,\n        members: contactsId,\n        domain: this.settings.sipDomain\n      };\n      this.api.createGroup({\n        body\n      }, (returnGroup, err) => {\n        if (err) return;\n        if (!this.api) return;\n        if (!returnGroup) return;\n        this.api.getGroup(returnGroup.id, {\n          paramsUrl: {\n            members: true\n          }\n        }, groupWithMember => {\n          const parsedGroup = this.parseGroup(groupWithMember);\n          this.groups.set(parsedGroup.groupId, parsedGroup);\n          callback(parsedGroup);\n        });\n      });\n    };\n\n    this.api = this.makeAPI();\n    this.chat = this.makeChat();\n    this.contacts = new Map();\n    this.groups = new Map();\n  }\n\n  static getInstance() {\n    if (!this.instance) {\n      this.instance = new SquadCommunicator();\n      return this.instance;\n    }\n  }\n\n  makeAPI() {\n    const authorization = this.getAuthorization();\n    if (authorization) return this.api = new API({\n      token: authorization.access_token,\n      apiUrl: authorization.baseUrl\n    });\n  }\n\n  makeChat() {\n    return undefined;\n  }\n\n  getAuthorization() {\n    const Auth = localStorage.getItem(\"authorization\");\n    if (Auth) return JSON.parse(Auth);\n  }\n\n  getUser(callback) {\n    if (!this.api) return;\n    const Auth = this.getAuthorization();\n    this.api.getSettings({}, (settings, error) => {\n      if (error) return;\n      if (settings) callback({\n        id: settings.xmppUser,\n        jid: `${settings.xmppUser}@${settings.xmppDomain}`,\n        name: Auth.user_name,\n        email: Auth.email,\n        profilePicture: settings.imageUrl,\n        number: settings.sipUser.replace(\"w-\", \"\").replace(\"s-\", \"\")\n      });\n    });\n  }\n\n  getContacts(callback) {\n    callback(Array.from(this.contacts.values()));\n  }\n\n  getFavorites(callback) {\n    const contacts = Array.from(this.contacts.values()).filter(contact => contact.favorite);\n    callback(contacts);\n  }\n\n  getGroups(callback) {\n    callback(Array.from(this.groups.values()));\n  }\n\n  getChats(callback) {\n    if (!this.api) return;\n    this.api.getSettings({}, (settings, error) => {\n      if (settings) this.settings = settings;\n      if (this.api) this.api.getContacts({\n        paramsUrl: {\n          added: true,\n          limit: 5000\n        }\n      }, (apiContacts, err) => {\n        // Populando o Map de contatos\n        if (!err) {\n          if (!this.api) return;\n          this.populateContacts(apiContacts);\n          this.api.getGroups({\n            paramsUrl: {\n              members: true\n            }\n          }, (apiGroups, err) => {\n            // Populando o Map de grupos\n            if (!err) {\n              if (!this.api) return;\n              this.api.getChats({\n                paramsUrl: {\n                  limit: 5000,\n                  contactType: \"contact\"\n                }\n              }, apiChats => {\n                //Retornando os Chats\n                if (!this.api) {\n                  return;\n                }\n\n                this.populateGroups(apiGroups);\n                const returnChats = [];\n                apiChats.chats.forEach(chat => {\n                  this.parseToIChat(chat, returnChats);\n                });\n                callback(returnChats);\n              });\n            }\n          });\n        }\n      });\n    });\n  }\n\n  parseMessage(chatMessage) {\n    const msg = {\n      id: chatMessage.idXmpp,\n      userName: chatMessage.fromName,\n      message: chatMessage.message,\n      time: chatMessage.sentAt,\n      isImageMessage: chatMessage.isImage,\n      isFileMessage: chatMessage.isFile,\n      isVideoMessage: chatMessage.isVideo,\n      isAudioMessage: chatMessage.isAudio,\n      fileUrl: chatMessage.message,\n      toUser: chatMessage.to,\n      fromUser: chatMessage.from,\n      deliverStatus: chatMessage.deliveryStatus,\n      readStatus: chatMessage.readStatus,\n      deliverTimestamp: chatMessage.deliveryTimestamp || \"\",\n      readTimestamp: chatMessage.readTimestamp || \"\",\n      content: chatMessage.content,\n      contentType: chatMessage.contentType\n    };\n    return msg;\n  }\n\n  populateGroups(apiGroups) {\n    apiGroups.groups.forEach(group => {\n      this.groups.set(group.id, this.parseGroup(group));\n    });\n  }\n\n  populateContacts(apiContacts) {\n    apiContacts.contacts.forEach(contact => {\n      this.contacts.set(contact.id, this.parseContact(contact));\n    });\n  }\n\n}\nSquadCommunicator.instance = void 0;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicatorService.ts"],"names":["API","PresenceStatus","UserType","SquadCommunicator","constructor","getMessages","chat","callback","api","lastMessageId","messages","id","chatType","paramsUrl","startingByMessageId","data","map","msg","parseMessage","parseToIChat","arr","chatUser","groups","get","contacts","chatMessage","iChat","jid","name","profilePicture","status","undefined","unRead","unreadMessages","isTyping","push","parseGroup","apiGroup","groupId","description","domainName","imageUrl","members","member","userId","role","admin","ADMIN","USER","ONLINE","parseContact","apiContact","imId","domain","number","extension","email","blocked","added","favorite","createGroup","group","contactsId","contact","body","settings","sipDomain","returnGroup","err","getGroup","groupWithMember","parsedGroup","set","makeAPI","makeChat","Map","getInstance","instance","authorization","getAuthorization","token","access_token","apiUrl","baseUrl","Auth","localStorage","getItem","JSON","parse","getUser","getSettings","error","xmppUser","xmppDomain","user_name","sipUser","replace","getContacts","Array","from","values","getFavorites","filter","getGroups","getChats","limit","apiContacts","populateContacts","apiGroups","contactType","apiChats","populateGroups","returnChats","chats","forEach","idXmpp","userName","fromName","message","time","sentAt","isImageMessage","isImage","isFileMessage","isFile","isVideoMessage","isVideo","isAudioMessage","isAudio","fileUrl","toUser","to","fromUser","deliverStatus","deliveryStatus","readStatus","deliverTimestamp","deliveryTimestamp","readTimestamp","content","contentType"],"mappings":"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","sourcesContent":["import Chat from \"@digivox/chatcommunicator\";\r\nimport API from \"@digivox/apicommunicator\";\r\nimport IChat from \"../alias/IChat\";\r\nimport IContact from \"../alias/IContact\";\r\nimport PresenceStatus from \"../enuns/PresenceStatus\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport UserType from \"../enuns/UserType\";\r\nimport IUser from \"../alias/IUser\";\r\nimport INewGroup from \"../alias/INewGroup\";\r\nimport {\r\n  Message,\r\n  Settings,\r\n} from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport IMessage from \"../alias/IMessage\";\r\ninterface NewGroupCallback {\r\n  (group: IGroup): void;\r\n}\r\ninterface GetUserCallBack {\r\n  (user: IUser): void;\r\n}\r\ninterface ContactsCallBack {\r\n  (contacts: IContact[]): void;\r\n}\r\ninterface FavoritesCallBack {\r\n  (favorites: IContact[]): void;\r\n}\r\ninterface GroupsCallBack {\r\n  (groups: IGroup[]): void;\r\n}\r\n\r\ninterface ChatsCallBack {\r\n  (chats: IChat[]): void;\r\n}\r\ninterface GetMessagesCallback {\r\n  (messages: IMessage[]): void;\r\n}\r\n\r\ninterface AuthReturn {\r\n  access_token: string;\r\n  user_id: string;\r\n  user_name: string;\r\n  expires_in: number;\r\n  baseUrl: string;\r\n}\r\nexport interface SquadCommunicator {\r\n  instance: SquadCommunicator | undefined;\r\n  getInstance(): SquadCommunicator;\r\n  api: API | undefined;\r\n  chat: Chat | undefined;\r\n  getChats(callback: ChatsCallBack): void;\r\n  getAuthorization(): AuthReturn;\r\n  contacts: Map<string, IContact>;\r\n  groups: Map<string, IGroup>;\r\n  settings: Settings;\r\n}\r\nexport class SquadCommunicator {\r\n  static instance: SquadCommunicator;\r\n  constructor() {\r\n    this.api = this.makeAPI();\r\n    this.chat = this.makeChat();\r\n    this.contacts = new Map<string, IContact>();\r\n    this.groups = new Map<string, IGroup>();\r\n  }\r\n  static getInstance() {\r\n    if (!this.instance) {\r\n      this.instance = new SquadCommunicator();\r\n\r\n      return this.instance;\r\n    }\r\n  }\r\n  makeAPI() {\r\n    const authorization = this.getAuthorization();\r\n    if (authorization)\r\n      return (this.api = new API({\r\n        token: authorization.access_token,\r\n        apiUrl: authorization.baseUrl,\r\n      }));\r\n  }\r\n  makeChat() {\r\n    return undefined;\r\n  }\r\n  getAuthorization() {\r\n    const Auth = localStorage.getItem(\"authorization\");\r\n    if (Auth) return JSON.parse(Auth);\r\n  }\r\n  getUser(callback: GetUserCallBack) {\r\n    if (!this.api) return;\r\n    const Auth = this.getAuthorization();\r\n\r\n    this.api.getSettings({}, (settings, error) => {\r\n      if (error) return;\r\n      if (settings)\r\n        callback({\r\n          id: settings.xmppUser,\r\n          jid: `${settings.xmppUser}@${settings.xmppDomain}`,\r\n          name: Auth.user_name,\r\n          email: Auth.email,\r\n          profilePicture: settings.imageUrl,\r\n          number: settings.sipUser.replace(\"w-\", \"\").replace(\"s-\", \"\"),\r\n        });\r\n    });\r\n  }\r\n  getContacts(callback: ContactsCallBack) {\r\n    callback(Array.from(this.contacts.values()));\r\n  }\r\n  getFavorites(callback: FavoritesCallBack) {\r\n    const contacts = Array.from(this.contacts.values()).filter(\r\n      (contact) => contact.favorite\r\n    );\r\n    callback(contacts);\r\n  }\r\n  getGroups(callback: GroupsCallBack) {\r\n    callback(Array.from(this.groups.values()));\r\n  }\r\n  getChats(callback: ChatsCallBack) {\r\n    if (!this.api) return;\r\n    this.api.getSettings({}, (settings, error) => {\r\n      if (settings) this.settings = settings;\r\n      if (this.api)\r\n        this.api.getContacts(\r\n          { paramsUrl: { added: true, limit: 5000 } },\r\n          (apiContacts: any, err: any) => {\r\n            // Populando o Map de contatos\r\n            if (!err) {\r\n              if (!this.api) return;\r\n              this.populateContacts(apiContacts);\r\n              this.api.getGroups(\r\n                { paramsUrl: { members: true } },\r\n                (apiGroups: any, err) => {\r\n                  // Populando o Map de grupos\r\n                  if (!err) {\r\n                    if (!this.api) return;\r\n                    this.api.getChats(\r\n                      { paramsUrl: { limit: 5000, contactType: \"contact\" } },\r\n                      (apiChats: any) => {\r\n                        //Retornando os Chats\r\n                        if (!this.api) {\r\n                          return;\r\n                        }\r\n                        this.populateGroups(apiGroups);\r\n                        const returnChats: IChat[] = [];\r\n                        apiChats.chats.forEach((chat: any) => {\r\n                          this.parseToIChat(chat, returnChats);\r\n                        });\r\n                        callback(returnChats);\r\n                      }\r\n                    );\r\n                  }\r\n                }\r\n              );\r\n            }\r\n          }\r\n        );\r\n    });\r\n  }\r\n  getMessages = (chat: IChat, callback: GetMessagesCallback) => {\r\n    if (!this.api) return;\r\n    const lastMessageId = chat.messages[0].id;\r\n    this.api.getMessages(\r\n      chat.id,\r\n      chat.chatType,\r\n      { paramsUrl: { startingByMessageId: lastMessageId } },\r\n      (data) => {\r\n        if (data) callback(data.messages.map((msg) => this.parseMessage(msg)));\r\n        else return;\r\n      }\r\n    );\r\n  };\r\n  parseToIChat = (chat: any, arr: IChat[]) => {\r\n    const chatUser = this.groups.get(chat.id) || this.contacts.get(chat.id);\r\n    if (chatUser) {\r\n      const chatMessage = chat.messages[0];\r\n      const iChat: IChat = {\r\n        id: chat.id,\r\n        jid: chatUser.jid,\r\n        name: chat.name,\r\n        profilePicture: chatUser.profilePicture,\r\n        status:\r\n          \"status\" in chatUser ? (chatUser as IContact).status : undefined,\r\n        unRead: chat.unreadMessages,\r\n        chatType: chat.chatType,\r\n        isTyping: false,\r\n        messages: [this.parseMessage(chatMessage)],\r\n      };\r\n      arr.push(iChat);\r\n    }\r\n  };\r\n  parseMessage(chatMessage: Message) {\r\n    const msg: IMessage = {\r\n      id: chatMessage.idXmpp,\r\n      userName: chatMessage.fromName,\r\n      message: chatMessage.message,\r\n      time: chatMessage.sentAt,\r\n      isImageMessage: chatMessage.isImage,\r\n      isFileMessage: chatMessage.isFile,\r\n      isVideoMessage: chatMessage.isVideo,\r\n      isAudioMessage: chatMessage.isAudio,\r\n      fileUrl: chatMessage.message,\r\n      toUser: chatMessage.to,\r\n      fromUser: chatMessage.from,\r\n      deliverStatus: chatMessage.deliveryStatus,\r\n      readStatus: chatMessage.readStatus,\r\n      deliverTimestamp: chatMessage.deliveryTimestamp || \"\",\r\n      readTimestamp: chatMessage.readTimestamp || \"\",\r\n      content: chatMessage.content,\r\n      contentType: chatMessage.contentType,\r\n    };\r\n    return msg;\r\n  }\r\n  populateGroups(apiGroups: any) {\r\n    apiGroups.groups.forEach((group: any) => {\r\n      this.groups.set(group.id, this.parseGroup(group));\r\n    });\r\n  }\r\n  populateContacts(apiContacts: any) {\r\n    apiContacts.contacts.forEach((contact: any) => {\r\n      this.contacts.set(contact.id, this.parseContact(contact));\r\n    });\r\n  }\r\n  parseGroup = (apiGroup: any) => {\r\n    return {\r\n      groupId: apiGroup.id,\r\n      name: apiGroup.name,\r\n      description: apiGroup.description,\r\n      jid: `${apiGroup.id}@${apiGroup.domainName}`,\r\n      profilePicture: apiGroup.imageUrl,\r\n      members: apiGroup.members.map((member: any) => {\r\n        return {\r\n          userId: member.id,\r\n          name: member.name,\r\n          profilePicture: member.imageUrl,\r\n          role: member.admin ? UserType.ADMIN : UserType.USER,\r\n          status: PresenceStatus.ONLINE,\r\n        };\r\n      }),\r\n    };\r\n  };\r\n  parseContact = (apiContact: any) => {\r\n    return {\r\n      id: apiContact.id,\r\n      jid: apiContact.imId,\r\n      name: apiContact.name,\r\n      domain: apiContact.domainName,\r\n      number: apiContact.extension,\r\n      profilePicture: apiContact.imageUrl,\r\n      email: apiContact.email,\r\n      blocked: apiContact.blocked,\r\n      added: apiContact.added,\r\n      status: PresenceStatus.ONLINE,\r\n      favorite: apiContact.favorite,\r\n    };\r\n  };\r\n  createGroup = (group: INewGroup, callback: NewGroupCallback) => {\r\n    if (!this.api) return;\r\n    const contactsId = group.contacts.map((contact) => contact.id);\r\n    const body = {\r\n      name: group.name,\r\n      description: group.description,\r\n      members: contactsId,\r\n      domain: this.settings.sipDomain,\r\n    };\r\n    this.api.createGroup({ body }, (returnGroup, err) => {\r\n      if (err) return;\r\n      if (!this.api) return;\r\n      if (!returnGroup) return;\r\n      this.api.getGroup(\r\n        returnGroup.id,\r\n        { paramsUrl: { members: true } },\r\n        (groupWithMember) => {\r\n          const parsedGroup = this.parseGroup(groupWithMember);\r\n          this.groups.set(parsedGroup.groupId, parsedGroup);\r\n          callback(parsedGroup);\r\n        }\r\n      );\r\n    });\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}