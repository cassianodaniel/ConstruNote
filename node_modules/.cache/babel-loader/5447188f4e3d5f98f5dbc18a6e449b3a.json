{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant } from '../utils';\nimport { DATE_TIME_PROPS, additionPenalty, removalPenalty, longMorePenalty, shortMorePenalty, shortLessPenalty, longLessPenalty } from './utils';\n/**\n * https://tc39.es/ecma402/#sec-basicformatmatcher\n * @param options\n * @param formats\n */\n\nexport function BasicFormatMatcher(options, formats) {\n  var bestScore = -Infinity;\n  var bestFormat = formats[0];\n  invariant(Array.isArray(formats), 'formats should be a list of things');\n\n  for (var _i = 0, formats_1 = formats; _i < formats_1.length; _i++) {\n    var format = formats_1[_i];\n    var score = 0;\n\n    for (var _a = 0, DATE_TIME_PROPS_1 = DATE_TIME_PROPS; _a < DATE_TIME_PROPS_1.length; _a++) {\n      var prop = DATE_TIME_PROPS_1[_a];\n      var optionsProp = options[prop];\n      var formatProp = format[prop];\n\n      if (optionsProp === undefined && formatProp !== undefined) {\n        score -= additionPenalty;\n      } else if (optionsProp !== undefined && formatProp === undefined) {\n        score -= removalPenalty;\n      } else if (optionsProp !== formatProp) {\n        var values = ['2-digit', 'numeric', 'narrow', 'short', 'long'];\n        var optionsPropIndex = values.indexOf(optionsProp);\n        var formatPropIndex = values.indexOf(formatProp);\n        var delta = Math.max(-2, Math.min(formatPropIndex - optionsPropIndex, 2));\n\n        if (delta === 2) {\n          score -= longMorePenalty;\n        } else if (delta === 1) {\n          score -= shortMorePenalty;\n        } else if (delta === -1) {\n          score -= shortLessPenalty;\n        } else if (delta === -2) {\n          score -= longLessPenalty;\n        }\n      }\n    }\n\n    if (score > bestScore) {\n      bestScore = score;\n      bestFormat = format;\n    }\n  }\n\n  return __assign({}, bestFormat);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@formatjs/ecma402-abstract/lib/src/DateTimeFormat/BasicFormatMatcher.js"],"names":["__assign","invariant","DATE_TIME_PROPS","additionPenalty","removalPenalty","longMorePenalty","shortMorePenalty","shortLessPenalty","longLessPenalty","BasicFormatMatcher","options","formats","bestScore","Infinity","bestFormat","Array","isArray","_i","formats_1","length","format","score","_a","DATE_TIME_PROPS_1","prop","optionsProp","formatProp","undefined","values","optionsPropIndex","indexOf","formatPropIndex","delta","Math","max","min"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,SAASC,eAAT,EAA0BC,eAA1B,EAA2CC,cAA3C,EAA2DC,eAA3D,EAA4EC,gBAA5E,EAA8FC,gBAA9F,EAAgHC,eAAhH,QAAwI,SAAxI;AACA;;;;;;AAKA,OAAO,SAASC,kBAAT,CAA4BC,OAA5B,EAAqCC,OAArC,EAA8C;AACjD,MAAIC,SAAS,GAAG,CAACC,QAAjB;AACA,MAAIC,UAAU,GAAGH,OAAO,CAAC,CAAD,CAAxB;AACAV,EAAAA,SAAS,CAACc,KAAK,CAACC,OAAN,CAAcL,OAAd,CAAD,EAAyB,oCAAzB,CAAT;;AACA,OAAK,IAAIM,EAAE,GAAG,CAAT,EAAYC,SAAS,GAAGP,OAA7B,EAAsCM,EAAE,GAAGC,SAAS,CAACC,MAArD,EAA6DF,EAAE,EAA/D,EAAmE;AAC/D,QAAIG,MAAM,GAAGF,SAAS,CAACD,EAAD,CAAtB;AACA,QAAII,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,iBAAiB,GAAGrB,eAArC,EAAsDoB,EAAE,GAAGC,iBAAiB,CAACJ,MAA7E,EAAqFG,EAAE,EAAvF,EAA2F;AACvF,UAAIE,IAAI,GAAGD,iBAAiB,CAACD,EAAD,CAA5B;AACA,UAAIG,WAAW,GAAGf,OAAO,CAACc,IAAD,CAAzB;AACA,UAAIE,UAAU,GAAGN,MAAM,CAACI,IAAD,CAAvB;;AACA,UAAIC,WAAW,KAAKE,SAAhB,IAA6BD,UAAU,KAAKC,SAAhD,EAA2D;AACvDN,QAAAA,KAAK,IAAIlB,eAAT;AACH,OAFD,MAGK,IAAIsB,WAAW,KAAKE,SAAhB,IAA6BD,UAAU,KAAKC,SAAhD,EAA2D;AAC5DN,QAAAA,KAAK,IAAIjB,cAAT;AACH,OAFI,MAGA,IAAIqB,WAAW,KAAKC,UAApB,EAAgC;AACjC,YAAIE,MAAM,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,QAAvB,EAAiC,OAAjC,EAA0C,MAA1C,CAAb;AACA,YAAIC,gBAAgB,GAAGD,MAAM,CAACE,OAAP,CAAeL,WAAf,CAAvB;AACA,YAAIM,eAAe,GAAGH,MAAM,CAACE,OAAP,CAAeJ,UAAf,CAAtB;AACA,YAAIM,KAAK,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAC,CAAV,EAAaD,IAAI,CAACE,GAAL,CAASJ,eAAe,GAAGF,gBAA3B,EAA6C,CAA7C,CAAb,CAAZ;;AACA,YAAIG,KAAK,KAAK,CAAd,EAAiB;AACbX,UAAAA,KAAK,IAAIhB,eAAT;AACH,SAFD,MAGK,IAAI2B,KAAK,KAAK,CAAd,EAAiB;AAClBX,UAAAA,KAAK,IAAIf,gBAAT;AACH,SAFI,MAGA,IAAI0B,KAAK,KAAK,CAAC,CAAf,EAAkB;AACnBX,UAAAA,KAAK,IAAId,gBAAT;AACH,SAFI,MAGA,IAAIyB,KAAK,KAAK,CAAC,CAAf,EAAkB;AACnBX,UAAAA,KAAK,IAAIb,eAAT;AACH;AACJ;AACJ;;AACD,QAAIa,KAAK,GAAGT,SAAZ,EAAuB;AACnBA,MAAAA,SAAS,GAAGS,KAAZ;AACAP,MAAAA,UAAU,GAAGM,MAAb;AACH;AACJ;;AACD,SAAOpB,QAAQ,CAAC,EAAD,EAAKc,UAAL,CAAf;AACH","sourcesContent":["import { __assign } from \"tslib\";\nimport { invariant } from '../utils';\nimport { DATE_TIME_PROPS, additionPenalty, removalPenalty, longMorePenalty, shortMorePenalty, shortLessPenalty, longLessPenalty, } from './utils';\n/**\n * https://tc39.es/ecma402/#sec-basicformatmatcher\n * @param options\n * @param formats\n */\nexport function BasicFormatMatcher(options, formats) {\n    var bestScore = -Infinity;\n    var bestFormat = formats[0];\n    invariant(Array.isArray(formats), 'formats should be a list of things');\n    for (var _i = 0, formats_1 = formats; _i < formats_1.length; _i++) {\n        var format = formats_1[_i];\n        var score = 0;\n        for (var _a = 0, DATE_TIME_PROPS_1 = DATE_TIME_PROPS; _a < DATE_TIME_PROPS_1.length; _a++) {\n            var prop = DATE_TIME_PROPS_1[_a];\n            var optionsProp = options[prop];\n            var formatProp = format[prop];\n            if (optionsProp === undefined && formatProp !== undefined) {\n                score -= additionPenalty;\n            }\n            else if (optionsProp !== undefined && formatProp === undefined) {\n                score -= removalPenalty;\n            }\n            else if (optionsProp !== formatProp) {\n                var values = ['2-digit', 'numeric', 'narrow', 'short', 'long'];\n                var optionsPropIndex = values.indexOf(optionsProp);\n                var formatPropIndex = values.indexOf(formatProp);\n                var delta = Math.max(-2, Math.min(formatPropIndex - optionsPropIndex, 2));\n                if (delta === 2) {\n                    score -= longMorePenalty;\n                }\n                else if (delta === 1) {\n                    score -= shortMorePenalty;\n                }\n                else if (delta === -1) {\n                    score -= shortLessPenalty;\n                }\n                else if (delta === -2) {\n                    score -= longLessPenalty;\n                }\n            }\n        }\n        if (score > bestScore) {\n            bestScore = score;\n            bestFormat = format;\n        }\n    }\n    return __assign({}, bestFormat);\n}\n"]},"metadata":{},"sourceType":"module"}