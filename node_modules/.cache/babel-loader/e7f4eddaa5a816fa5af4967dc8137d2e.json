{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Parameters } from \"./parameters\";\n/**\n * URI.\n * @public\n */\n\nexport class URI extends Parameters {\n  /**\n   * Constructor\n   * @param scheme -\n   * @param user -\n   * @param host -\n   * @param port -\n   * @param parameters -\n   * @param headers -\n   */\n  constructor(scheme, user, host, port, parameters, headers) {\n    super(parameters);\n    this.headers = {}; // Checks\n\n    if (!host) {\n      throw new TypeError('missing or invalid \"host\" parameter');\n    } // Initialize parameters\n\n\n    scheme = scheme || \"sip\";\n\n    for (const header in headers) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (headers.hasOwnProperty(header)) {\n        this.setHeader(header, headers[header]);\n      }\n    } // Raw URI\n\n\n    this.raw = {\n      scheme,\n      user,\n      host,\n      port\n    }; // Normalized URI\n\n    this.normal = {\n      scheme: scheme.toLowerCase(),\n      user,\n      host: host.toLowerCase(),\n      port\n    };\n  }\n\n  get scheme() {\n    return this.normal.scheme;\n  }\n\n  set scheme(value) {\n    this.raw.scheme = value;\n    this.normal.scheme = value.toLowerCase();\n  }\n\n  get user() {\n    return this.normal.user;\n  }\n\n  set user(value) {\n    this.normal.user = this.raw.user = value;\n  }\n\n  get host() {\n    return this.normal.host;\n  }\n\n  set host(value) {\n    this.raw.host = value;\n    this.normal.host = value.toLowerCase();\n  }\n\n  get aor() {\n    return this.normal.user + \"@\" + this.normal.host;\n  }\n\n  get port() {\n    return this.normal.port;\n  }\n\n  set port(value) {\n    this.normal.port = this.raw.port = value === 0 ? value : value;\n  }\n\n  setHeader(name, value) {\n    this.headers[this.headerize(name)] = value instanceof Array ? value : [value];\n  }\n\n  getHeader(name) {\n    if (name) {\n      return this.headers[this.headerize(name)];\n    }\n  }\n\n  hasHeader(name) {\n    // eslint-disable-next-line no-prototype-builtins\n    return !!name && !!this.headers.hasOwnProperty(this.headerize(name));\n  }\n\n  deleteHeader(header) {\n    header = this.headerize(header); // eslint-disable-next-line no-prototype-builtins\n\n    if (this.headers.hasOwnProperty(header)) {\n      const value = this.headers[header];\n      delete this.headers[header];\n      return value;\n    }\n  }\n\n  clearHeaders() {\n    this.headers = {};\n  }\n\n  clone() {\n    return new URI(this._raw.scheme, this._raw.user || \"\", this._raw.host, this._raw.port, JSON.parse(JSON.stringify(this.parameters)), JSON.parse(JSON.stringify(this.headers)));\n  }\n\n  toRaw() {\n    return this._toString(this._raw);\n  }\n\n  toString() {\n    return this._toString(this._normal);\n  }\n\n  get _normal() {\n    return this.normal;\n  }\n\n  get _raw() {\n    return this.raw;\n  }\n\n  _toString(uri) {\n    let uriString = uri.scheme + \":\"; // add slashes if it's not a sip(s) URI\n\n    if (!uri.scheme.toLowerCase().match(\"^sips?$\")) {\n      uriString += \"//\";\n    }\n\n    if (uri.user) {\n      uriString += this.escapeUser(uri.user) + \"@\";\n    }\n\n    uriString += uri.host;\n\n    if (uri.port || uri.port === 0) {\n      uriString += \":\" + uri.port;\n    }\n\n    for (const parameter in this.parameters) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.parameters.hasOwnProperty(parameter)) {\n        uriString += \";\" + parameter;\n\n        if (this.parameters[parameter] !== null) {\n          uriString += \"=\" + this.parameters[parameter];\n        }\n      }\n    }\n\n    const headers = [];\n\n    for (const header in this.headers) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (this.headers.hasOwnProperty(header)) {\n        for (const idx in this.headers[header]) {\n          // eslint-disable-next-line no-prototype-builtins\n          if (this.headers[header].hasOwnProperty(idx)) {\n            headers.push(header + \"=\" + this.headers[header][idx]);\n          }\n        }\n      }\n    }\n\n    if (headers.length > 0) {\n      uriString += \"?\" + headers.join(\"&\");\n    }\n\n    return uriString;\n  }\n  /*\n   * Hex-escape a SIP URI user.\n   * @private\n   * @param {String} user\n   */\n\n\n  escapeUser(user) {\n    let decodedUser; // FIXME: This is called by toString above which should never throw, but\n    // decodeURIComponent can throw and I've seen one case in production where\n    // it did throw resulting in a cascading failure. This class should be\n    // fixed so that decodeURIComponent is not called at this point (in toString).\n    // The user should be decoded when the URI is constructor or some other\n    // place where we can catch the error before the URI is created or somesuch.\n    // eslint-disable-next-line no-useless-catch\n\n    try {\n      decodedUser = decodeURIComponent(user);\n    } catch (error) {\n      throw error;\n    } // Don't hex-escape ':' (%3A), '+' (%2B), '?' (%3F\"), '/' (%2F).\n\n\n    return encodeURIComponent(decodedUser).replace(/%3A/ig, \":\").replace(/%2B/ig, \"+\").replace(/%3F/ig, \"?\").replace(/%2F/ig, \"/\");\n  }\n\n  headerize(str) {\n    const exceptions = {\n      \"Call-Id\": \"Call-ID\",\n      \"Cseq\": \"CSeq\",\n      \"Min-Se\": \"Min-SE\",\n      \"Rack\": \"RAck\",\n      \"Rseq\": \"RSeq\",\n      \"Www-Authenticate\": \"WWW-Authenticate\"\n    };\n    const name = str.toLowerCase().replace(/_/g, \"-\").split(\"-\");\n    const parts = name.length;\n    let hname = \"\";\n\n    for (let part = 0; part < parts; part++) {\n      if (part !== 0) {\n        hname += \"-\";\n      }\n\n      hname += name[part].charAt(0).toUpperCase() + name[part].substring(1);\n    }\n\n    if (exceptions[hname]) {\n      hname = exceptions[hname];\n    }\n\n    return hname;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/grammar/uri.js"],"names":["Parameters","URI","constructor","scheme","user","host","port","parameters","headers","TypeError","header","hasOwnProperty","setHeader","raw","normal","toLowerCase","value","aor","name","headerize","Array","getHeader","hasHeader","deleteHeader","clearHeaders","clone","_raw","JSON","parse","stringify","toRaw","_toString","toString","_normal","uri","uriString","match","escapeUser","parameter","idx","push","length","join","decodedUser","decodeURIComponent","error","encodeURIComponent","replace","str","exceptions","split","parts","hname","part","charAt","toUpperCase","substring"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Parameters } from \"./parameters\";\n/**\n * URI.\n * @public\n */\nexport class URI extends Parameters {\n    /**\n     * Constructor\n     * @param scheme -\n     * @param user -\n     * @param host -\n     * @param port -\n     * @param parameters -\n     * @param headers -\n     */\n    constructor(scheme, user, host, port, parameters, headers) {\n        super(parameters);\n        this.headers = {};\n        // Checks\n        if (!host) {\n            throw new TypeError('missing or invalid \"host\" parameter');\n        }\n        // Initialize parameters\n        scheme = scheme || \"sip\";\n        for (const header in headers) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (headers.hasOwnProperty(header)) {\n                this.setHeader(header, headers[header]);\n            }\n        }\n        // Raw URI\n        this.raw = {\n            scheme,\n            user,\n            host,\n            port\n        };\n        // Normalized URI\n        this.normal = {\n            scheme: scheme.toLowerCase(),\n            user,\n            host: host.toLowerCase(),\n            port\n        };\n    }\n    get scheme() { return this.normal.scheme; }\n    set scheme(value) {\n        this.raw.scheme = value;\n        this.normal.scheme = value.toLowerCase();\n    }\n    get user() { return this.normal.user; }\n    set user(value) {\n        this.normal.user = this.raw.user = value;\n    }\n    get host() { return this.normal.host; }\n    set host(value) {\n        this.raw.host = value;\n        this.normal.host = value.toLowerCase();\n    }\n    get aor() { return this.normal.user + \"@\" + this.normal.host; }\n    get port() { return this.normal.port; }\n    set port(value) {\n        this.normal.port = this.raw.port = value === 0 ? value : value;\n    }\n    setHeader(name, value) {\n        this.headers[this.headerize(name)] = (value instanceof Array) ? value : [value];\n    }\n    getHeader(name) {\n        if (name) {\n            return this.headers[this.headerize(name)];\n        }\n    }\n    hasHeader(name) {\n        // eslint-disable-next-line no-prototype-builtins\n        return !!name && !!this.headers.hasOwnProperty(this.headerize(name));\n    }\n    deleteHeader(header) {\n        header = this.headerize(header);\n        // eslint-disable-next-line no-prototype-builtins\n        if (this.headers.hasOwnProperty(header)) {\n            const value = this.headers[header];\n            delete this.headers[header];\n            return value;\n        }\n    }\n    clearHeaders() {\n        this.headers = {};\n    }\n    clone() {\n        return new URI(this._raw.scheme, this._raw.user || \"\", this._raw.host, this._raw.port, JSON.parse(JSON.stringify(this.parameters)), JSON.parse(JSON.stringify(this.headers)));\n    }\n    toRaw() {\n        return this._toString(this._raw);\n    }\n    toString() {\n        return this._toString(this._normal);\n    }\n    get _normal() { return this.normal; }\n    get _raw() { return this.raw; }\n    _toString(uri) {\n        let uriString = uri.scheme + \":\";\n        // add slashes if it's not a sip(s) URI\n        if (!uri.scheme.toLowerCase().match(\"^sips?$\")) {\n            uriString += \"//\";\n        }\n        if (uri.user) {\n            uriString += this.escapeUser(uri.user) + \"@\";\n        }\n        uriString += uri.host;\n        if (uri.port || uri.port === 0) {\n            uriString += \":\" + uri.port;\n        }\n        for (const parameter in this.parameters) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.parameters.hasOwnProperty(parameter)) {\n                uriString += \";\" + parameter;\n                if (this.parameters[parameter] !== null) {\n                    uriString += \"=\" + this.parameters[parameter];\n                }\n            }\n        }\n        const headers = [];\n        for (const header in this.headers) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.headers.hasOwnProperty(header)) {\n                for (const idx in this.headers[header]) {\n                    // eslint-disable-next-line no-prototype-builtins\n                    if (this.headers[header].hasOwnProperty(idx)) {\n                        headers.push(header + \"=\" + this.headers[header][idx]);\n                    }\n                }\n            }\n        }\n        if (headers.length > 0) {\n            uriString += \"?\" + headers.join(\"&\");\n        }\n        return uriString;\n    }\n    /*\n     * Hex-escape a SIP URI user.\n     * @private\n     * @param {String} user\n     */\n    escapeUser(user) {\n        let decodedUser;\n        // FIXME: This is called by toString above which should never throw, but\n        // decodeURIComponent can throw and I've seen one case in production where\n        // it did throw resulting in a cascading failure. This class should be\n        // fixed so that decodeURIComponent is not called at this point (in toString).\n        // The user should be decoded when the URI is constructor or some other\n        // place where we can catch the error before the URI is created or somesuch.\n        // eslint-disable-next-line no-useless-catch\n        try {\n            decodedUser = decodeURIComponent(user);\n        }\n        catch (error) {\n            throw error;\n        }\n        // Don't hex-escape ':' (%3A), '+' (%2B), '?' (%3F\"), '/' (%2F).\n        return encodeURIComponent(decodedUser)\n            .replace(/%3A/ig, \":\")\n            .replace(/%2B/ig, \"+\")\n            .replace(/%3F/ig, \"?\")\n            .replace(/%2F/ig, \"/\");\n    }\n    headerize(str) {\n        const exceptions = {\n            \"Call-Id\": \"Call-ID\",\n            \"Cseq\": \"CSeq\",\n            \"Min-Se\": \"Min-SE\",\n            \"Rack\": \"RAck\",\n            \"Rseq\": \"RSeq\",\n            \"Www-Authenticate\": \"WWW-Authenticate\",\n        };\n        const name = str.toLowerCase().replace(/_/g, \"-\").split(\"-\");\n        const parts = name.length;\n        let hname = \"\";\n        for (let part = 0; part < parts; part++) {\n            if (part !== 0) {\n                hname += \"-\";\n            }\n            hname += name[part].charAt(0).toUpperCase() + name[part].substring(1);\n        }\n        if (exceptions[hname]) {\n            hname = exceptions[hname];\n        }\n        return hname;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}