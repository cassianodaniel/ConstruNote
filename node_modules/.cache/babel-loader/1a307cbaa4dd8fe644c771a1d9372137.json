{"ast":null,"code":"import React from \"react\";\nexport function TextMessageTagParseNotClickable(value) {\n  let newValue = value.split(\"<squadtag>\");\n  const [newComp, setNewComp] = React.useState(\"\");\n  newValue.forEach(element => {\n    let msgTest = element.split(\"<squadtag/>\");\n\n    if (msgTest.length > 1) {\n      msgTest.forEach((msg, i) => {\n        if (i === 0) {\n          let obj = JSON.parse(msg);\n          setNewComp(`@${obj.name}`);\n        } else {\n          setNewComp(msg);\n        }\n      });\n    } else {\n      setNewComp(msgTest.join());\n    }\n  });\n  return newComp;\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/helpers/TextMessageTagParseNotClickable.tsx"],"names":["React","TextMessageTagParseNotClickable","value","newValue","split","newComp","setNewComp","useState","forEach","element","msgTest","length","msg","i","obj","JSON","parse","name","join"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,+BAAT,CACLC,KADK,EAEL;AACA,MAAIC,QAAQ,GAAGD,KAAK,CAACE,KAAN,CAAY,YAAZ,CAAf;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,KAAK,CAACO,QAAN,CAAe,EAAf,CAA9B;AACAJ,EAAAA,QAAQ,CAACK,OAAT,CAAkBC,OAAD,IAAa;AAC5B,QAAIC,OAAO,GAAGD,OAAO,CAACL,KAAR,CAAc,aAAd,CAAd;;AACA,QAAIM,OAAO,CAACC,MAAR,GAAiB,CAArB,EAAwB;AACtBD,MAAAA,OAAO,CAACF,OAAR,CAAgB,CAACI,GAAD,EAAMC,CAAN,KAAY;AAC1B,YAAIA,CAAC,KAAK,CAAV,EAAa;AACX,cAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWJ,GAAX,CAAV;AACAN,UAAAA,UAAU,CACP,IAAGQ,GAAG,CAACG,IAAK,EADL,CAAV;AAGD,SALD,MAKO;AACLX,UAAAA,UAAU,CAACM,GAAD,CAAV;AACD;AACF,OATD;AAUD,KAXD,MAWO;AACLN,MAAAA,UAAU,CAACI,OAAO,CAACQ,IAAR,EAAD,CAAV;AACD;AACF,GAhBD;AAkBA,SAAOb,OAAP;AACD","sourcesContent":["import React from \"react\";\r\n\r\nexport function TextMessageTagParseNotClickable(\r\n  value: string,\r\n) {\r\n  let newValue = value.split(\"<squadtag>\");\r\n  const [newComp, setNewComp] = React.useState(\"\");\r\n  newValue.forEach((element) => {\r\n    let msgTest = element.split(\"<squadtag/>\");\r\n    if (msgTest.length > 1) {\r\n      msgTest.forEach((msg, i) => {\r\n        if (i === 0) {\r\n          let obj = JSON.parse(msg);\r\n          setNewComp(\r\n            `@${obj.name}`\r\n          );\r\n        } else {\r\n          setNewComp(msg);\r\n        }\r\n      });\r\n    } else {\r\n      setNewComp(msgTest.join());\r\n    }\r\n  });\r\n\r\n  return newComp;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}