{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar xml = require('@xmpp/xml'); // https://xmpp.org/extensions/xep-0198.html\n\n\nvar NS = 'urn:xmpp:sm:3';\n\nfunction enable(_x, _x2, _x3) {\n  return _enable.apply(this, arguments);\n}\n\nfunction _enable() {\n  _enable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(entity, resume, max) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            entity.send(xml('enable', {\n              xmlns: NS,\n              max: max,\n              resume: resume ? 'true' : undefined\n            }));\n            return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n              function listener(nonza) {\n                if (nonza.is('enabled', NS)) {\n                  resolve(nonza);\n                } else if (nonza.is('failed', NS)) {\n                  reject(nonza);\n                } else {\n                  return;\n                }\n\n                entity.removeListener('nonza', listener);\n              }\n\n              entity.on('nonza', listener);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _enable.apply(this, arguments);\n}\n\nfunction resume(_x4, _x5, _x6) {\n  return _resume.apply(this, arguments);\n}\n\nfunction _resume() {\n  _resume = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(entity, h, previd) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return entity.sendReceive(xml('resume', {\n              xmlns: NS,\n              h: h,\n              previd: previd\n            }));\n\n          case 2:\n            response = _context3.sent;\n\n            if (response.is('resumed', NS)) {\n              _context3.next = 5;\n              break;\n            }\n\n            throw response;\n\n          case 5:\n            return _context3.abrupt(\"return\", response);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _resume.apply(this, arguments);\n}\n\nmodule.exports = function (_ref) {\n  var streamFeatures = _ref.streamFeatures,\n      entity = _ref.entity,\n      middleware = _ref.middleware;\n  var address = null;\n  var sm = {\n    allowResume: true,\n    preferredMaximum: null,\n    enabled: false,\n    id: '',\n    outbound: 0,\n    inbound: 0,\n    max: null\n  };\n  entity.on('online', function (jid) {\n    address = jid;\n    sm.outbound = 0;\n    sm.inbound = 0;\n  });\n  entity.on('offline', function () {\n    sm.outbound = 0;\n    sm.inbound = 0;\n    sm.enabled = false;\n    sm.id = '';\n  });\n  middleware.use(function (context, next) {\n    var stanza = context.stanza;\n\n    if (['presence', 'message', 'iq'].includes(stanza.name)) {\n      sm.inbound += 1;\n    } else if (stanza.is('r', NS)) {\n      // > When an <r/> element (\"request\") is received, the recipient MUST acknowledge it by sending an <a/> element to the sender containing a value of 'h' that is equal to the number of stanzas handled by the recipient of the <r/> element.\n      entity.send(xml('a', {\n        xmlns: NS,\n        h: sm.inbound\n      })).catch(function () {});\n    } else if (stanza.is('a', NS)) {\n      // > When a party receives an <a/> element, it SHOULD keep a record of the 'h' value returned as the sequence number of the last handled outbound stanza for the current stream (and discard the previous value).\n      sm.outbound = stanza.attrs.h;\n    }\n\n    return next();\n  }); // https://xmpp.org/extensions/xep-0198.html#enable\n  // For client-to-server connections, the client MUST NOT attempt to enable stream management until after it has completed Resource Binding unless it is resuming a previous session\n\n  streamFeatures.use('sm', NS, /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context, next) {\n      var promiseEnable, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!sm.id) {\n                _context.next = 15;\n                break;\n              }\n\n              _context.prev = 1;\n              _context.next = 4;\n              return resume(entity, sm.inbound, sm.id);\n\n            case 4:\n              sm.enabled = true;\n              entity.jid = address;\n              entity.status = 'online';\n              return _context.abrupt(\"return\", true);\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](1);\n              sm.id = '';\n              sm.enabled = false;\n              sm.outbound = 0;\n\n            case 15:\n              _context.next = 17;\n              return next();\n\n            case 17:\n              promiseEnable = enable(entity, sm.allowResume, sm.preferredMaximum); // > The counter for an entity's own sent stanzas is set to zero and started after sending either <enable/> or <enabled/>.\n\n              sm.outbound = 0;\n              _context.prev = 19;\n              _context.next = 22;\n              return promiseEnable;\n\n            case 22:\n              response = _context.sent;\n              sm.enabled = true;\n              sm.id = response.attrs.id;\n              sm.max = response.attrs.max; // eslint-disable-next-line no-unused-vars\n\n              _context.next = 31;\n              break;\n\n            case 28:\n              _context.prev = 28;\n              _context.t1 = _context[\"catch\"](19);\n              sm.enabled = false;\n\n            case 31:\n              sm.inbound = 0;\n\n            case 32:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 10], [19, 28]]);\n    }));\n\n    return function (_x7, _x8) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n  return sm;\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/stream-management/index.js"],"names":["xml","require","NS","enable","entity","resume","max","send","xmlns","undefined","Promise","resolve","reject","listener","nonza","is","removeListener","on","h","previd","sendReceive","response","module","exports","streamFeatures","middleware","address","sm","allowResume","preferredMaximum","enabled","id","outbound","inbound","jid","use","context","next","stanza","includes","name","catch","attrs","status","promiseEnable"],"mappings":"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","sourcesContent":["'use strict'\n\nconst xml = require('@xmpp/xml')\n\n// https://xmpp.org/extensions/xep-0198.html\n\nconst NS = 'urn:xmpp:sm:3'\n\nasync function enable(entity, resume, max) {\n  entity.send(\n    xml('enable', {xmlns: NS, max, resume: resume ? 'true' : undefined})\n  )\n\n  return new Promise((resolve, reject) => {\n    function listener(nonza) {\n      if (nonza.is('enabled', NS)) {\n        resolve(nonza)\n      } else if (nonza.is('failed', NS)) {\n        reject(nonza)\n      } else {\n        return\n      }\n\n      entity.removeListener('nonza', listener)\n    }\n\n    entity.on('nonza', listener)\n  })\n}\n\nasync function resume(entity, h, previd) {\n  const response = await entity.sendReceive(\n    xml('resume', {xmlns: NS, h, previd})\n  )\n\n  if (!response.is('resumed', NS)) {\n    throw response\n  }\n\n  return response\n}\n\nmodule.exports = function({streamFeatures, entity, middleware}) {\n  let address = null\n\n  const sm = {\n    allowResume: true,\n    preferredMaximum: null,\n    enabled: false,\n    id: '',\n    outbound: 0,\n    inbound: 0,\n    max: null,\n  }\n\n  entity.on('online', jid => {\n    address = jid\n    sm.outbound = 0\n    sm.inbound = 0\n  })\n\n  entity.on('offline', () => {\n    sm.outbound = 0\n    sm.inbound = 0\n    sm.enabled = false\n    sm.id = ''\n  })\n\n  middleware.use((context, next) => {\n    const {stanza} = context\n    if (['presence', 'message', 'iq'].includes(stanza.name)) {\n      sm.inbound += 1\n    } else if (stanza.is('r', NS)) {\n      // > When an <r/> element (\"request\") is received, the recipient MUST acknowledge it by sending an <a/> element to the sender containing a value of 'h' that is equal to the number of stanzas handled by the recipient of the <r/> element.\n      entity.send(xml('a', {xmlns: NS, h: sm.inbound})).catch(() => {})\n    } else if (stanza.is('a', NS)) {\n      // > When a party receives an <a/> element, it SHOULD keep a record of the 'h' value returned as the sequence number of the last handled outbound stanza for the current stream (and discard the previous value).\n      sm.outbound = stanza.attrs.h\n    }\n\n    return next()\n  })\n\n  // https://xmpp.org/extensions/xep-0198.html#enable\n  // For client-to-server connections, the client MUST NOT attempt to enable stream management until after it has completed Resource Binding unless it is resuming a previous session\n\n  streamFeatures.use('sm', NS, async (context, next) => {\n    // Resuming\n    if (sm.id) {\n      try {\n        await resume(entity, sm.inbound, sm.id)\n        sm.enabled = true\n        entity.jid = address\n        entity.status = 'online'\n        return true\n        // If resumption fails, continue with session establishment\n        // eslint-disable-next-line no-unused-vars\n      } catch (err) {\n        sm.id = ''\n        sm.enabled = false\n        sm.outbound = 0\n      }\n    }\n\n    // Enabling\n\n    // Resource binding first\n    await next()\n\n    const promiseEnable = enable(entity, sm.allowResume, sm.preferredMaximum)\n\n    // > The counter for an entity's own sent stanzas is set to zero and started after sending either <enable/> or <enabled/>.\n    sm.outbound = 0\n\n    try {\n      const response = await promiseEnable\n      sm.enabled = true\n      sm.id = response.attrs.id\n      sm.max = response.attrs.max\n      // eslint-disable-next-line no-unused-vars\n    } catch (err) {\n      sm.enabled = false\n    }\n\n    sm.inbound = 0\n  })\n\n  return sm\n}\n"]},"metadata":{},"sourceType":"script"}