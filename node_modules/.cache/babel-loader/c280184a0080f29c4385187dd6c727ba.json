{"ast":null,"code":"import Chat from \"./chat/chatcommunicator\";\nimport { Events } from \"./chat/types/types\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nimport ChatType from \"../enuns/ChatType\";\nimport { ChatType as XMPPChatType } from \"./types\";\nimport short from \"short-uuid\";\nimport { isUrl } from \"./utils/parseUtils\";\nimport { getFileUrlStr } from \"./utils/formatUtils\";\nexport default class SquadChatCommunicator {\n  constructor(settings, contacts, groups, user, subscribeFunction) {\n    this.settings = settings;\n    this.contacts = contacts;\n    this.groups = groups;\n    this.user = user;\n\n    this.onMessage = msg => {\n      this.settings.get(settings => {\n        var _this$contacts$getCon, _msg$reply_to, _this$user$user, _msg$reply_to2, _this$user$user2;\n\n        const fileParams = {\n          isFile: \"fileUrl\" in msg ? true : false,\n          isImage: false,\n          isVideo: false,\n          isAudio: false\n        };\n\n        if (fileParams.isFile) {\n          fileParams.isImage = /\\.(jpe?g|png|gif|ico)$/i.test(msg.fileUrl);\n          fileParams.isVideo = /\\.(mp4|avi|mov)$/i.test(msg.fileUrl);\n          fileParams.isAudio = /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg.fileUrl);\n        }\n\n        if (isUrl(msg.message)) {\n          const splittedMsg = msg.message.split(\"/\");\n          const extension = splittedMsg[splittedMsg.length - 1];\n\n          if (extension.includes(\".\") && splittedMsg.length > 1) {\n            fileParams.isFile = true;\n            fileParams.isImage = /\\.(jpe?g|png|gif|ico)$/i.test(msg.message);\n            fileParams.isVideo = /\\.(mp4|avi|mov)$/i.test(msg.message);\n            fileParams.isAudio = /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg.message);\n          }\n        }\n\n        const isSentByMe = msg.from.split(\"/\")[1] === settings.xmppUser || msg.from.split(\"@\")[0] === settings.xmppUser;\n        const message = {\n          id: msg.id,\n          userName: this.getMessageUserName(msg) || \"\",\n          userProfilePicture: this.getMessageUserProfilePicture(msg) || undefined,\n          message: msg.message || msg.fileUrl,\n          time: msg.sent_at,\n          isFileMessage: fileParams.isFile && !fileParams.isImage && !fileParams.isVideo && !fileParams.isAudio,\n          isImageMessage: fileParams.isImage,\n          isVideoMessage: fileParams.isVideo,\n          isAudioMessage: fileParams.isAudio,\n          fileUrl: getFileUrlStr(fileParams, msg),\n          toUser: isSentByMe && msg.from.includes(\"@conference.\") ? msg.from.split(\"/\")[0] : msg.to,\n          fromUser: isSentByMe ? settings.xmppUser : msg.from.split(\"/\")[0],\n          deliverStatus: DeliverStatus.DELIVERED,\n          readStatus: ReadStatus.UNREAD,\n          deliverTimestamp: new Date().toISOString(),\n          readTimestamp: \"\",\n          content: JSON.stringify({\n            reply_msg: msg.reply_msg,\n            reply_msg_id: msg.reply_msg_id,\n            reply_to: msg.reply_to\n          }),\n          contentType: msg.fileUrl || \"text\",\n          isSentByMe: isSentByMe,\n          isReplyMessage: !!msg.reply_msg,\n          isForwardMessage: !!msg.reply_to && !msg.reply_msg,\n          replyedMessage: msg.reply_msg,\n          replyedMessageTo: ((_this$contacts$getCon = this.contacts.getContacts().get(((_msg$reply_to = msg.reply_to) === null || _msg$reply_to === void 0 ? void 0 : _msg$reply_to.split(\"@\")[0]) || \"\")) === null || _this$contacts$getCon === void 0 ? void 0 : _this$contacts$getCon.name) || ((_this$user$user = this.user.user) === null || _this$user$user === void 0 ? void 0 : _this$user$user.id) === ((_msg$reply_to2 = msg.reply_to) === null || _msg$reply_to2 === void 0 ? void 0 : _msg$reply_to2.split(\"@\")[0]) ? (_this$user$user2 = this.user.user) === null || _this$user$user2 === void 0 ? void 0 : _this$user$user2.name : \"Participant\",\n          replyedMessageId: msg.reply_msg_id\n        };\n        this.notify(Events.MESSAGE, message);\n      });\n    };\n\n    this.onPresence = presence => {\n      this.notify(Events.PRESENCE, presence);\n    };\n\n    this.forwardMessage = (chat, message, callback) => {\n      this.chat.forwardMsg(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message.fromUser, message.message, message.id, callback);\n    };\n\n    this.replyMsg = (chat, message, replyedMessage, cb) => {\n      this.chat.replyMsg(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message.message, replyedMessage.fromUser, replyedMessage.message, replyedMessage.id, cb);\n    };\n\n    this.sendMessage = (chat, text, callback) => {\n      this.chat.sendMessage(chat.jid, chat.chatType === ChatType.USER ? XMPPChatType.CHAT : XMPPChatType.GROUPCHAT, text, callback);\n    };\n\n    this.sendFiles = (chat, files, cb) => {\n      files.forEach(file => {\n        this.chat.sendFile(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, file, cb);\n      });\n    };\n\n    this.getMessageUserName = msg => {\n      if (msg.from.includes(\"@conference.\")) {\n        const groups = this.groups.getGroups();\n        const group = groups.get(msg.from.split(\"@\")[0]);\n        const member = group === null || group === void 0 ? void 0 : group.members.filter(member => member.userId === msg.from.split(\"/\")[1])[0];\n        return member === null || member === void 0 ? void 0 : member.name;\n      } else {\n        var _this$contacts$getCon2;\n\n        return (_this$contacts$getCon2 = this.contacts.getContacts().get(msg.from.split(\"@\")[0])) === null || _this$contacts$getCon2 === void 0 ? void 0 : _this$contacts$getCon2.name;\n      }\n    };\n\n    this.getMessageUserProfilePicture = msg => {\n      if (msg.from.includes(\"@conference.\")) {\n        const groups = this.groups.getGroups();\n        const group = groups.get(msg.from.split(\"@\")[0]);\n        const member = group === null || group === void 0 ? void 0 : group.members.filter(member => member.userId === msg.from.split(\"/\")[1])[0];\n        return member === null || member === void 0 ? void 0 : member.profilePicture;\n      } else {\n        var _this$contacts$getCon3;\n\n        return (_this$contacts$getCon3 = this.contacts.getContacts().get(msg.from.split(\"@\")[0])) === null || _this$contacts$getCon3 === void 0 ? void 0 : _this$contacts$getCon3.profilePicture;\n      }\n    };\n\n    this.nextSubscriptionId = 0;\n    this.subscriptions = new Map();\n    this.makeChat(subscribeFunction);\n  }\n\n  makeChat(subscribeFunction) {\n    this.subscribe(subscribeFunction);\n    this.settings.get(settings => {\n      const options = {\n        service: `wss://${settings.xmppDomain}:5280/websocket`,\n        domain: settings.xmppDomain,\n        username: settings.xmppUser,\n        password: settings.xmppPw,\n        resource: `squad.web_${settings.xmppUser}_${short().generate()}`\n      };\n      const chat = new Chat(options);\n      this.chat = chat;\n      this.subscribeChatEvents(chat);\n      chat.client.start();\n    });\n  }\n\n  subscribeChatEvents(chat) {\n    chat.on(Events.MESSAGE, this.onMessage);\n    chat.on(Events.PRESENCE, this.onPresence);\n    chat.on(Events.ONLINE, () => this.notify(Events.ONLINE, null));\n    chat.on(Events.OFFLINE, () => this.notify(Events.OFFLINE, null));\n    chat.on(Events.ERROR, this.onError);\n    chat.on(Events.STANZA, this.onStanza);\n    chat.on(Events.RECEIVED, data => this.notify(Events.RECEIVED, data));\n    chat.on(Events.DISPLAYED, data => this.notify(Events.DISPLAYED, data));\n    chat.on(Events.COMPOSING, data => this.notify(Events.COMPOSING, data));\n    chat.on(Events.ACTIVE, data => this.notify(Events.ACTIVE, data));\n  }\n\n  onStanza(stanza) {}\n\n  onError(error) {}\n\n  joinGroup(to) {\n    this.chat.joinRoom(to);\n  }\n\n  joinGroups(groups) {\n    groups.forEach(jid => this.joinGroup(jid));\n  }\n\n  changeStatus(status) {\n    this.chat.sendPresence(status);\n  }\n\n  subscribe(subscribeCallback) {\n    this.subscriptions.set(this.nextSubscriptionId, subscribeCallback);\n    this.nextSubscriptionId += 1;\n  }\n\n  removeSubscription(id) {\n    this.subscriptions.delete(id);\n  }\n\n  removeAllSubscription() {\n    this.subscriptions = new Map();\n  }\n\n  notify(event, data) {\n    if (this.subscriptions) {\n      this.subscriptions.forEach(subscribeCallback => {\n        if (subscribeCallback) subscribeCallback(event, data);\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadChatCommunicator.ts"],"names":["Chat","Events","DeliverStatus","ReadStatus","ChatType","XMPPChatType","short","isUrl","getFileUrlStr","SquadChatCommunicator","constructor","settings","contacts","groups","user","subscribeFunction","onMessage","msg","get","fileParams","isFile","isImage","isVideo","isAudio","test","fileUrl","message","splittedMsg","split","extension","length","includes","isSentByMe","from","xmppUser","id","userName","getMessageUserName","userProfilePicture","getMessageUserProfilePicture","undefined","time","sent_at","isFileMessage","isImageMessage","isVideoMessage","isAudioMessage","toUser","to","fromUser","deliverStatus","DELIVERED","readStatus","UNREAD","deliverTimestamp","Date","toISOString","readTimestamp","content","JSON","stringify","reply_msg","reply_msg_id","reply_to","contentType","isReplyMessage","isForwardMessage","replyedMessage","replyedMessageTo","getContacts","name","replyedMessageId","notify","MESSAGE","onPresence","presence","PRESENCE","forwardMessage","chat","callback","forwardMsg","jid","GROUPCHAT","CHAT","replyMsg","cb","sendMessage","text","chatType","USER","sendFiles","files","forEach","file","sendFile","getGroups","group","member","members","filter","userId","profilePicture","nextSubscriptionId","subscriptions","Map","makeChat","subscribe","options","service","xmppDomain","domain","username","password","xmppPw","resource","generate","subscribeChatEvents","client","start","on","ONLINE","OFFLINE","ERROR","onError","STANZA","onStanza","RECEIVED","data","DISPLAYED","COMPOSING","ACTIVE","stanza","error","joinGroup","joinRoom","joinGroups","changeStatus","status","sendPresence","subscribeCallback","set","removeSubscription","delete","removeAllSubscription","event"],"mappings":"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","sourcesContent":["import Chat from \"./chat/chatcommunicator\";\r\nimport { Events, FileMessage, Message, Presence } from \"./chat/types/types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport { SendMessageCallback, SubscriptionCallBack } from \"./types\";\r\nimport IChat from \"../alias/IChat\";\r\nimport ChatType from \"../enuns/ChatType\";\r\nimport { ChatType as XMPPChatType } from \"./types\";\r\nimport SettingsBusiness from \"./business/Settings\";\r\nimport short from \"short-uuid\";\r\nimport ContactsBusiness from \"./business/Contacts\";\r\nimport GroupsBusiness from \"./business/Groups\";\r\nimport { isUrl } from \"./utils/parseUtils\";\r\nimport { getFileUrlStr } from \"./utils/formatUtils\";\r\nimport UserBusiness from \"./business/User\";\r\n\r\nexport default interface SquadChatCommunicator {\r\n  chat: Chat;\r\n  nextSubscriptionId: number;\r\n  subscriptions: Map<number, SubscriptionCallBack>;\r\n}\r\nexport default class SquadChatCommunicator {\r\n  constructor(\r\n    private settings: SettingsBusiness,\r\n    private contacts: ContactsBusiness,\r\n    private groups: GroupsBusiness,\r\n    private user: UserBusiness,\r\n    subscribeFunction: SubscriptionCallBack\r\n  ) {\r\n    this.nextSubscriptionId = 0;\r\n    this.subscriptions = new Map<number, SubscriptionCallBack>();\r\n    this.makeChat(subscribeFunction);\r\n  }\r\n  makeChat(subscribeFunction: SubscriptionCallBack) {\r\n    this.subscribe(subscribeFunction);\r\n    this.settings.get((settings) => {\r\n      const options = {\r\n        service: `wss://${settings.xmppDomain}:5280/websocket`,\r\n        domain: settings.xmppDomain,\r\n        username: settings.xmppUser,\r\n        password: settings.xmppPw,\r\n        resource: `squad.web_${settings.xmppUser}_${short().generate()}`,\r\n      };\r\n      const chat = new Chat(options);\r\n      this.chat = chat;\r\n      this.subscribeChatEvents(chat);\r\n      chat.client.start();\r\n    });\r\n  }\r\n  subscribeChatEvents(chat: Chat) {\r\n    chat.on(Events.MESSAGE, this.onMessage);\r\n    chat.on(Events.PRESENCE, this.onPresence);\r\n    chat.on(Events.ONLINE, () => this.notify(Events.ONLINE, null));\r\n    chat.on(Events.OFFLINE, () => this.notify(Events.OFFLINE, null));\r\n    chat.on(Events.ERROR, this.onError);\r\n    chat.on(Events.STANZA, this.onStanza);\r\n    chat.on(Events.RECEIVED, (data) => this.notify(Events.RECEIVED, data));\r\n    chat.on(Events.DISPLAYED, (data) => this.notify(Events.DISPLAYED, data));\r\n    chat.on(Events.COMPOSING, (data) => this.notify(Events.COMPOSING, data));\r\n    chat.on(Events.ACTIVE, (data) => this.notify(Events.ACTIVE, data));\r\n  }\r\n  onMessage = (msg: Message | FileMessage) => {\r\n    this.settings.get((settings) => {\r\n      const fileParams = {\r\n        isFile: \"fileUrl\" in msg ? true : false,\r\n        isImage: false,\r\n        isVideo: false,\r\n        isAudio: false,\r\n      };\r\n      if (fileParams.isFile) {\r\n        fileParams.isImage = /\\.(jpe?g|png|gif|ico)$/i.test(\r\n          (msg as FileMessage).fileUrl\r\n        );\r\n        fileParams.isVideo = /\\.(mp4|avi|mov)$/i.test(\r\n          (msg as FileMessage).fileUrl\r\n        );\r\n        fileParams.isAudio = /\\.(ogg|mp3|wav|m4a|webm)$/i.test(\r\n          (msg as FileMessage).fileUrl\r\n        );\r\n      }\r\n      if (isUrl(msg.message)) {\r\n        const splittedMsg = msg.message.split(\"/\");\r\n        const extension = splittedMsg[splittedMsg.length - 1];\r\n        if (extension.includes(\".\") && splittedMsg.length > 1) {\r\n          fileParams.isFile = true;\r\n          fileParams.isImage = /\\.(jpe?g|png|gif|ico)$/i.test(msg.message);\r\n          fileParams.isVideo = /\\.(mp4|avi|mov)$/i.test(msg.message);\r\n          fileParams.isAudio = /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg.message);\r\n        }\r\n      }\r\n      const isSentByMe =\r\n        msg.from.split(\"/\")[1] === settings.xmppUser ||\r\n        msg.from.split(\"@\")[0] === settings.xmppUser;\r\n      const message: IMessage = {\r\n        id: msg.id,\r\n        userName: this.getMessageUserName(msg) || \"\",\r\n        userProfilePicture: this.getMessageUserProfilePicture(msg) || undefined,\r\n        message: msg.message || (msg as FileMessage).fileUrl,\r\n        time: msg.sent_at,\r\n        isFileMessage:\r\n          fileParams.isFile &&\r\n          !fileParams.isImage &&\r\n          !fileParams.isVideo &&\r\n          !fileParams.isAudio,\r\n        isImageMessage: fileParams.isImage,\r\n        isVideoMessage: fileParams.isVideo,\r\n        isAudioMessage: fileParams.isAudio,\r\n        fileUrl: getFileUrlStr(fileParams, msg),\r\n        toUser:\r\n          isSentByMe && msg.from.includes(\"@conference.\")\r\n            ? msg.from.split(\"/\")[0]\r\n            : msg.to,\r\n        fromUser: isSentByMe ? settings.xmppUser : msg.from.split(\"/\")[0],\r\n        deliverStatus: DeliverStatus.DELIVERED,\r\n        readStatus: ReadStatus.UNREAD,\r\n        deliverTimestamp: new Date().toISOString(),\r\n        readTimestamp: \"\",\r\n        content: JSON.stringify({\r\n          reply_msg: msg.reply_msg,\r\n          reply_msg_id: msg.reply_msg_id,\r\n          reply_to: msg.reply_to,\r\n        }),\r\n        contentType: (msg as FileMessage).fileUrl || \"text\",\r\n        isSentByMe: isSentByMe,\r\n        isReplyMessage: !!msg.reply_msg,\r\n        isForwardMessage: !!msg.reply_to && !msg.reply_msg,\r\n        replyedMessage: msg.reply_msg,\r\n        replyedMessageTo:\r\n          this.contacts.getContacts().get(msg.reply_to?.split(\"@\")[0] || \"\")\r\n            ?.name || this.user.user?.id === msg.reply_to?.split(\"@\")[0]\r\n            ? this.user.user?.name\r\n            : \"Participant\",\r\n        replyedMessageId: msg.reply_msg_id,\r\n      };\r\n      this.notify(Events.MESSAGE, message);\r\n    });\r\n  };\r\n  onPresence = (presence: Presence) => {\r\n    this.notify(Events.PRESENCE, presence);\r\n  };\r\n  onStanza(stanza: any) {}\r\n  onError(error: any) {}\r\n  forwardMessage = (\r\n    chat: IChat,\r\n    message: IMessage,\r\n    callback: SendMessageCallback\r\n  ) => {\r\n    this.chat.forwardMsg(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message.fromUser,\r\n      message.message,\r\n      message.id,\r\n      callback\r\n    );\r\n  };\r\n  replyMsg = (\r\n    chat: IChat,\r\n    message: IMessage,\r\n    replyedMessage: IMessage,\r\n    cb: SendMessageCallback\r\n  ) => {\r\n    this.chat.replyMsg(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message.message,\r\n      replyedMessage.fromUser,\r\n      replyedMessage.message,\r\n      replyedMessage.id,\r\n      cb\r\n    );\r\n  };\r\n  sendMessage = (chat: IChat, text: string, callback: SendMessageCallback) => {\r\n    this.chat.sendMessage(\r\n      chat.jid,\r\n      chat.chatType === ChatType.USER\r\n        ? XMPPChatType.CHAT\r\n        : XMPPChatType.GROUPCHAT,\r\n      text,\r\n      callback\r\n    );\r\n  };\r\n  sendFiles = (chat: IChat, files: File[], cb: any) => {\r\n    files.forEach((file) => {\r\n      this.chat.sendFile(\r\n        chat.jid,\r\n        chat.jid.includes(\"@conference.\")\r\n          ? XMPPChatType.GROUPCHAT\r\n          : XMPPChatType.CHAT,\r\n        file,\r\n        cb\r\n      );\r\n    });\r\n  };\r\n  joinGroup(to: string) {\r\n    this.chat.joinRoom(to);\r\n  }\r\n  joinGroups(groups: string[]) {\r\n    groups.forEach((jid) => this.joinGroup(jid));\r\n  }\r\n  changeStatus(status: string) {\r\n    this.chat.sendPresence(status);\r\n  }\r\n  getMessageUserName = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.name;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])?.name;\r\n    }\r\n  };\r\n  getMessageUserProfilePicture = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.profilePicture;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])\r\n        ?.profilePicture;\r\n    }\r\n  };\r\n  subscribe(subscribeCallback: SubscriptionCallBack) {\r\n    this.subscriptions.set(this.nextSubscriptionId, subscribeCallback);\r\n    this.nextSubscriptionId += 1;\r\n  }\r\n  removeSubscription(id: number) {\r\n    this.subscriptions.delete(id);\r\n  }\r\n  removeAllSubscription() {\r\n    this.subscriptions = new Map<number, SubscriptionCallBack>();\r\n  }\r\n  notify(event: string, data: any) {\r\n    if (this.subscriptions) {\r\n      this.subscriptions.forEach((subscribeCallback) => {\r\n        if (subscribeCallback) subscribeCallback(event, data);\r\n      });\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}