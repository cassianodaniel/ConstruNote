{"ast":null,"code":"import { NonInviteServerTransaction } from \"../transactions\";\nimport { UserAgentServer } from \"./user-agent-server\";\n/**\n * PRACK UAS.\n * @public\n */\n\nexport class PrackUserAgentServer extends UserAgentServer {\n  constructor(dialog, message, delegate) {\n    super(NonInviteServerTransaction, dialog.userAgentCore, message, delegate); // Update dialog signaling state with offer/answer in body\n\n    dialog.signalingStateTransition(message);\n    this.dialog = dialog;\n  }\n  /**\n   * Update the dialog signaling state on a 2xx response.\n   * @param options - Options bucket.\n   */\n\n\n  accept(options = {\n    statusCode: 200\n  }) {\n    if (options.body) {\n      // Update dialog signaling state with offer/answer in body\n      this.dialog.signalingStateTransition(options.body);\n    }\n\n    return super.accept(options);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/core/user-agents/prack-user-agent-server.js"],"names":["NonInviteServerTransaction","UserAgentServer","PrackUserAgentServer","constructor","dialog","message","delegate","userAgentCore","signalingStateTransition","accept","options","statusCode","body"],"mappings":"AAAA,SAASA,0BAAT,QAA2C,iBAA3C;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,oBAAN,SAAmCD,eAAnC,CAAmD;AACtDE,EAAAA,WAAW,CAACC,MAAD,EAASC,OAAT,EAAkBC,QAAlB,EAA4B;AACnC,UAAMN,0BAAN,EAAkCI,MAAM,CAACG,aAAzC,EAAwDF,OAAxD,EAAiEC,QAAjE,EADmC,CAEnC;;AACAF,IAAAA,MAAM,CAACI,wBAAP,CAAgCH,OAAhC;AACA,SAAKD,MAAL,GAAcA,MAAd;AACH;AACD;AACJ;AACA;AACA;;;AACIK,EAAAA,MAAM,CAACC,OAAO,GAAG;AAAEC,IAAAA,UAAU,EAAE;AAAd,GAAX,EAAgC;AAClC,QAAID,OAAO,CAACE,IAAZ,EAAkB;AACd;AACA,WAAKR,MAAL,CAAYI,wBAAZ,CAAqCE,OAAO,CAACE,IAA7C;AACH;;AACD,WAAO,MAAMH,MAAN,CAAaC,OAAb,CAAP;AACH;;AAjBqD","sourcesContent":["import { NonInviteServerTransaction } from \"../transactions\";\nimport { UserAgentServer } from \"./user-agent-server\";\n/**\n * PRACK UAS.\n * @public\n */\nexport class PrackUserAgentServer extends UserAgentServer {\n    constructor(dialog, message, delegate) {\n        super(NonInviteServerTransaction, dialog.userAgentCore, message, delegate);\n        // Update dialog signaling state with offer/answer in body\n        dialog.signalingStateTransition(message);\n        this.dialog = dialog;\n    }\n    /**\n     * Update the dialog signaling state on a 2xx response.\n     * @param options - Options bucket.\n     */\n    accept(options = { statusCode: 200 }) {\n        if (options.body) {\n            // Update dialog signaling state with offer/answer in body\n            this.dialog.signalingStateTransition(options.body);\n        }\n        return super.accept(options);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}