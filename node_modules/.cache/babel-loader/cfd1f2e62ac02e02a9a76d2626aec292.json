{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\services\\\\SquadCommunicator.tsx\";\nimport React, { createContext, useContext, useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events, ChatType as XMPPChatType } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\nlet chatTest;\nlet squadService;\nexport const SquadCommunicatorContext = createContext({});\n\nconst SquadCommunicator = ({\n  children\n}) => {\n  const {\n    chats,\n    setChats,\n    setGroups,\n    setContacts\n  } = useChat();\n  const {\n    setUser\n  } = useAuth();\n\n  const init = () => {\n    var _squadService;\n\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"e9e34268a0adb4b4f009b508de092e2c\",\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      user_name: \"ZZ Romero 2\",\n      email: \"romero2@digivox.com.br\",\n      expires_in: 2592000,\n      baseUrl: \"https://app.citrussquad.com/api/v1/\"\n    }));\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\n    (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.getUser(user => {\n      setUser(user);\n    });\n  };\n\n  useEffect(() => {\n    chatTest = chats;\n  }, [chats]);\n\n  function chatCommunicatorSubscribe(event, data) {\n    var _squadService2;\n\n    switch (event) {\n      case Events.ONLINE:\n        (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.getChats(receivedChats => {\n          var _squadService3, _squadService4;\n\n          setChats(receivedChats); //populating groups\n\n          (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.getGroups(groups => setGroups(groups)); //populating contacts\n\n          (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : _squadService4.getContacts(contacts => setContacts(contacts)); //populating chat's with messages\n\n          receivedChats.forEach(chat => {\n            var _squadService5;\n\n            (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.getMessages(chat, messages => {\n              console.log(messages);\n              const chatWithMessages = { ...chat\n              };\n              chatWithMessages.messages = chatWithMessages.messages.concat(messages);\n              setChats([...receivedChats.filter(cht => chat.id !== cht.id), chatWithMessages]);\n            });\n          });\n        });\n        break;\n\n      case Events.MESSAGE:\n        console.log(\"MESSAGE\", data);\n        console.log(chatTest);\n        let find = false;\n        let newChats = chatTest.map(chat => {\n          if (data.fromUser === chat.jid) {\n            chat.messages.push(data);\n            find = true;\n          }\n\n          return chat;\n        });\n\n        if (!find) {\n          var _squadService6;\n\n          let newChat = {};\n          (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : _squadService6.getContacts(listContacts => {\n            console.log(listContacts);\n            listContacts.map(c => {\n              if (c.jid === data.fromUser) {\n                newChat = {\n                  id: c.id,\n                  jid: c.jid,\n                  name: c.name,\n                  profilePicture: c.profilePicture,\n                  status: c.status,\n                  unRead: 1,\n                  chatType: ChatType.USER,\n                  isTyping: false,\n                  messages: []\n                };\n                newChat.messages.push(data);\n                newChats.push(newChat);\n                setChats(newChats);\n              }\n            });\n          });\n        } else {\n          setChats(newChats);\n        }\n\n        break;\n\n      case Events.PRESENCE:\n        console.log(\"PRESENCE\", data);\n        break;\n    }\n  }\n\n  function createGroup(group, callback) {\n    var _squadService7;\n\n    (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : _squadService7.createGroup(group, iGroup => {\n      var _squadService8;\n\n      (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : _squadService8.getGroups(groups => {\n        setGroups(groups);\n        callback(true);\n      });\n    });\n  }\n\n  function sendMessage(chat, message) {\n    var _squadService9, _squadService9$chat, _squadService10;\n\n    (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : (_squadService9$chat = _squadService9.chat) === null || _squadService9$chat === void 0 ? void 0 : _squadService9$chat.chat.sendMessage(chat.jid, chat.chatType === ChatType.USER ? XMPPChatType.CHAT : XMPPChatType.GROUPCHAT, message);\n    (_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : _squadService10.sendMessage(chat, message);\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(SquadCommunicatorContext.Provider, {\n    value: {\n      createGroup,\n      sendFiles,\n      pasteFiles,\n      sendMessage\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport function sendFiles(chat, files) {\n  return;\n}\nexport function pasteFiles(chat, files) {\n  return;\n}\nexport function useSquadCommunicator() {\n  return useContext(SquadCommunicatorContext);\n}\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","createContext","useContext","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","XMPPChatType","chatTest","squadService","SquadCommunicatorContext","children","chats","setChats","setGroups","setContacts","setUser","init","localStorage","setItem","JSON","stringify","access_token","user_id","user_name","email","expires_in","baseUrl","getInstance","chatCommunicatorSubscribe","getUser","user","event","data","ONLINE","getChats","receivedChats","getGroups","groups","getContacts","contacts","forEach","chat","getMessages","messages","console","log","chatWithMessages","concat","filter","cht","id","MESSAGE","find","newChats","map","fromUser","jid","push","newChat","listContacts","c","name","profilePicture","status","unRead","chatType","USER","isTyping","PRESENCE","createGroup","group","callback","iGroup","sendMessage","message","CHAT","GROUPCHAT","sendFiles","pasteFiles","files","useSquadCommunicator"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport INewGroup from \"../alias/INewGroup\";\r\n\r\nimport { Events, ChatType as XMPPChatType } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\nimport IFiles from \"../alias/IFiles\";\r\n\r\ninterface CreateGroupCallback {\r\n  (groupCreated: boolean): void;\r\n}\r\n\r\ninterface SquadCommunicatorContextData {\r\n  createGroup(group: INewGroup, callback: CreateGroupCallback): void;\r\n  sendMessage(chat: IChat, message: string): void;\r\n  sendFiles(chat: IChat, files: IFiles): void;\r\n  pasteFiles(chat: IChat, files: IFiles): void;\r\n}\r\n\r\nlet chatTest: any[];\r\n\r\nlet squadService: SquadService | undefined;\r\n\r\nexport const SquadCommunicatorContext = createContext<\r\n  SquadCommunicatorContextData\r\n>({} as SquadCommunicatorContextData);\r\n\r\nconst SquadCommunicator: React.FC = ({ children }) => {\r\n  const { chats, setChats, setGroups, setContacts } = useChat();\r\n  const { setUser } = useAuth();\r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"e9e34268a0adb4b4f009b508de092e2c\",\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        user_name: \"ZZ Romero 2\",\r\n        email: \"romero2@digivox.com.br\",\r\n        expires_in: 2592000,\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n      })\r\n    );\r\n\r\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\r\n    squadService?.getUser((user: IUser) => {\r\n      setUser(user);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    chatTest = chats;\r\n  }, [chats]);\r\n\r\n  function chatCommunicatorSubscribe(event: string, data: any) {\r\n    switch (event) {\r\n      case Events.ONLINE:\r\n        squadService?.getChats((receivedChats) => {\r\n          setChats(receivedChats);\r\n          //populating groups\r\n          squadService?.getGroups((groups) => setGroups(groups));\r\n          //populating contacts\r\n          squadService?.getContacts((contacts) => setContacts(contacts));\r\n          //populating chat's with messages\r\n\r\n          receivedChats.forEach((chat) => {\r\n            squadService?.getMessages(chat, (messages) => {\r\n              console.log(messages);\r\n              const chatWithMessages = { ...chat };\r\n              chatWithMessages.messages = chatWithMessages.messages.concat(\r\n                messages\r\n              );\r\n              setChats([\r\n                ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n                chatWithMessages,\r\n              ]);\r\n            });\r\n          });\r\n        });\r\n        break;\r\n      case Events.MESSAGE:\r\n        console.log(\"MESSAGE\", data);\r\n        console.log(chatTest);\r\n\r\n        let find = false;\r\n\r\n        let newChats = chatTest.map((chat) => {\r\n          if (data.fromUser === chat.jid) {\r\n            chat.messages.push(data);\r\n            find = true;\r\n          }\r\n          return chat;\r\n        });\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.getContacts((listContacts) => {\r\n            console.log(listContacts);\r\n\r\n            listContacts.map((c) => {\r\n              if (c.jid === data.fromUser) {\r\n                newChat = {\r\n                  id: c.id,\r\n                  jid: c.jid,\r\n                  name: c.name,\r\n                  profilePicture: c.profilePicture,\r\n                  status: c.status,\r\n                  unRead: 1,\r\n                  chatType: ChatType.USER,\r\n                  isTyping: false,\r\n                  messages: [],\r\n                };\r\n                newChat.messages.push(data);\r\n                newChats.push(newChat);\r\n                setChats(newChats);\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          setChats(newChats);\r\n        }\r\n\r\n        break;\r\n      case Events.PRESENCE:\r\n        console.log(\"PRESENCE\", data);\r\n\r\n        break;\r\n    }\r\n  }\r\n\r\n  function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n    squadService?.createGroup(group, (iGroup: IGroup) => {\r\n      squadService?.getGroups((groups) => {\r\n        setGroups(groups);\r\n        callback(true);\r\n      });\r\n    });\r\n  }\r\n\r\n  function sendMessage(chat: IChat, message: string) {\r\n    squadService?.chat?.chat.sendMessage(\r\n      chat.jid,\r\n      chat.chatType === ChatType.USER\r\n        ? XMPPChatType.CHAT\r\n        : XMPPChatType.GROUPCHAT,\r\n      message\r\n    );\r\n    squadService?.sendMessage(chat, message);\r\n  }\r\n\r\n  useEffect(init, []);\r\n\r\n  return (\r\n    <SquadCommunicatorContext.Provider\r\n      value={{ createGroup, sendFiles, pasteFiles, sendMessage }}\r\n    >\r\n      {children}\r\n    </SquadCommunicatorContext.Provider>\r\n  );\r\n};\r\n\r\nexport function sendFiles(chat: IChat, files: IFiles) {\r\n  return;\r\n}\r\n\r\nexport function pasteFiles(chat: IChat, files: IFiles) {\r\n  return;\r\n}\r\n\r\nexport function useSquadCommunicator() {\r\n  return useContext(SquadCommunicatorContext);\r\n}\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}