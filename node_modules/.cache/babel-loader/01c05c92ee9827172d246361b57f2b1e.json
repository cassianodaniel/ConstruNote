{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { filterProps, getNamedFormat } from './utils';\nimport { IntlError } from './error';\nvar DATE_TIME_FORMAT_OPTIONS = ['localeMatcher', 'formatMatcher', 'timeZone', 'hour12', 'weekday', 'era', 'year', 'month', 'day', 'hour', 'minute', 'second', 'timeZoneName', 'hourCycle', 'dateStyle', 'timeStyle', 'fractionalSecondDigits', 'calendar', // 'dayPeriod',\n'numberingSystem'];\nexport function getFormatter(_a, type, getDateTimeFormat, options) {\n  var locale = _a.locale,\n      formats = _a.formats,\n      onError = _a.onError,\n      timeZone = _a.timeZone;\n\n  if (options === void 0) {\n    options = {};\n  }\n\n  var format = options.format;\n\n  var defaults = __assign(__assign({}, timeZone && {\n    timeZone: timeZone\n  }), format && getNamedFormat(formats, type, format, onError));\n\n  var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);\n\n  if (type === 'time' && !filteredOptions.hour && !filteredOptions.minute && !filteredOptions.second) {\n    // Add default formatting options if hour, minute, or second isn't defined.\n    filteredOptions = __assign(__assign({}, filteredOptions), {\n      hour: 'numeric',\n      minute: 'numeric'\n    });\n  }\n\n  return getDateTimeFormat(locale, filteredOptions);\n}\nexport function formatDate(config, getDateTimeFormat, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var date = typeof value === 'string' ? new Date(value || 0) : value;\n\n  try {\n    return getFormatter(config, 'date', getDateTimeFormat, options).format(date);\n  } catch (e) {\n    config.onError(new IntlError(\"FORMAT_ERROR\"\n    /* FORMAT_ERROR */\n    , 'Error formatting date.', e));\n  }\n\n  return String(date);\n}\nexport function formatTime(config, getDateTimeFormat, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var date = typeof value === 'string' ? new Date(value || 0) : value;\n\n  try {\n    return getFormatter(config, 'time', getDateTimeFormat, options).format(date);\n  } catch (e) {\n    config.onError(new IntlError(\"FORMAT_ERROR\"\n    /* FORMAT_ERROR */\n    , 'Error formatting time.', e));\n  }\n\n  return String(date);\n}\nexport function formatDateToParts(config, getDateTimeFormat, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var date = typeof value === 'string' ? new Date(value || 0) : value;\n\n  try {\n    return getFormatter(config, 'date', getDateTimeFormat, options).formatToParts(date);\n  } catch (e) {\n    config.onError(new IntlError(\"FORMAT_ERROR\"\n    /* FORMAT_ERROR */\n    , 'Error formatting date.', e));\n  }\n\n  return [];\n}\nexport function formatTimeToParts(config, getDateTimeFormat, value, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var date = typeof value === 'string' ? new Date(value || 0) : value;\n\n  try {\n    return getFormatter(config, 'time', getDateTimeFormat, options).formatToParts(date);\n  } catch (e) {\n    config.onError(new IntlError(\"FORMAT_ERROR\"\n    /* FORMAT_ERROR */\n    , 'Error formatting time.', e));\n  }\n\n  return [];\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@formatjs/intl/lib/src/dateTime.js"],"names":["__assign","filterProps","getNamedFormat","IntlError","DATE_TIME_FORMAT_OPTIONS","getFormatter","_a","type","getDateTimeFormat","options","locale","formats","onError","timeZone","format","defaults","filteredOptions","hour","minute","second","formatDate","config","value","date","Date","e","String","formatTime","formatDateToParts","formatToParts","formatTimeToParts"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,SAA5C;AACA,SAASC,SAAT,QAA0B,SAA1B;AACA,IAAIC,wBAAwB,GAAG,CAC3B,eAD2B,EAE3B,eAF2B,EAG3B,UAH2B,EAI3B,QAJ2B,EAK3B,SAL2B,EAM3B,KAN2B,EAO3B,MAP2B,EAQ3B,OAR2B,EAS3B,KAT2B,EAU3B,MAV2B,EAW3B,QAX2B,EAY3B,QAZ2B,EAa3B,cAb2B,EAc3B,WAd2B,EAe3B,WAf2B,EAgB3B,WAhB2B,EAiB3B,wBAjB2B,EAkB3B,UAlB2B,EAmB3B;AACA,iBApB2B,CAA/B;AAsBA,OAAO,SAASC,YAAT,CAAsBC,EAAtB,EAA0BC,IAA1B,EAAgCC,iBAAhC,EAAmDC,OAAnD,EAA4D;AAC/D,MAAIC,MAAM,GAAGJ,EAAE,CAACI,MAAhB;AAAA,MAAwBC,OAAO,GAAGL,EAAE,CAACK,OAArC;AAAA,MAA8CC,OAAO,GAAGN,EAAE,CAACM,OAA3D;AAAA,MAAoEC,QAAQ,GAAGP,EAAE,CAACO,QAAlF;;AACA,MAAIJ,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,MAAIK,MAAM,GAAGL,OAAO,CAACK,MAArB;;AACA,MAAIC,QAAQ,GAAGf,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAMa,QAAQ,IAAI;AAAEA,IAAAA,QAAQ,EAAEA;AAAZ,GAAlB,CAAT,EAAsDC,MAAM,IAAIZ,cAAc,CAACS,OAAD,EAAUJ,IAAV,EAAgBO,MAAhB,EAAwBF,OAAxB,CAA9E,CAAvB;;AACA,MAAII,eAAe,GAAGf,WAAW,CAACQ,OAAD,EAAUL,wBAAV,EAAoCW,QAApC,CAAjC;;AACA,MAAIR,IAAI,KAAK,MAAT,IACA,CAACS,eAAe,CAACC,IADjB,IAEA,CAACD,eAAe,CAACE,MAFjB,IAGA,CAACF,eAAe,CAACG,MAHrB,EAG6B;AACzB;AACAH,IAAAA,eAAe,GAAGhB,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKgB,eAAL,CAAT,EAAgC;AAAEC,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,MAAM,EAAE;AAA3B,KAAhC,CAA1B;AACH;;AACD,SAAOV,iBAAiB,CAACE,MAAD,EAASM,eAAT,CAAxB;AACH;AACD,OAAO,SAASI,UAAT,CAAoBC,MAApB,EAA4Bb,iBAA5B,EAA+Cc,KAA/C,EAAsDb,OAAtD,EAA+D;AAClE,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,MAAIc,IAAI,GAAG,OAAOD,KAAP,KAAiB,QAAjB,GAA4B,IAAIE,IAAJ,CAASF,KAAK,IAAI,CAAlB,CAA5B,GAAmDA,KAA9D;;AACA,MAAI;AACA,WAAOjB,YAAY,CAACgB,MAAD,EAAS,MAAT,EAAiBb,iBAAjB,EAAoCC,OAApC,CAAZ,CAAyDK,MAAzD,CAAgES,IAAhE,CAAP;AACH,GAFD,CAGA,OAAOE,CAAP,EAAU;AACNJ,IAAAA,MAAM,CAACT,OAAP,CAAe,IAAIT,SAAJ,CAAc;AAAe;AAA7B,MAAiD,wBAAjD,EAA2EsB,CAA3E,CAAf;AACH;;AACD,SAAOC,MAAM,CAACH,IAAD,CAAb;AACH;AACD,OAAO,SAASI,UAAT,CAAoBN,MAApB,EAA4Bb,iBAA5B,EAA+Cc,KAA/C,EAAsDb,OAAtD,EAA+D;AAClE,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,MAAIc,IAAI,GAAG,OAAOD,KAAP,KAAiB,QAAjB,GAA4B,IAAIE,IAAJ,CAASF,KAAK,IAAI,CAAlB,CAA5B,GAAmDA,KAA9D;;AACA,MAAI;AACA,WAAOjB,YAAY,CAACgB,MAAD,EAAS,MAAT,EAAiBb,iBAAjB,EAAoCC,OAApC,CAAZ,CAAyDK,MAAzD,CAAgES,IAAhE,CAAP;AACH,GAFD,CAGA,OAAOE,CAAP,EAAU;AACNJ,IAAAA,MAAM,CAACT,OAAP,CAAe,IAAIT,SAAJ,CAAc;AAAe;AAA7B,MAAiD,wBAAjD,EAA2EsB,CAA3E,CAAf;AACH;;AACD,SAAOC,MAAM,CAACH,IAAD,CAAb;AACH;AACD,OAAO,SAASK,iBAAT,CAA2BP,MAA3B,EAAmCb,iBAAnC,EAAsDc,KAAtD,EAA6Db,OAA7D,EAAsE;AACzE,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,MAAIc,IAAI,GAAG,OAAOD,KAAP,KAAiB,QAAjB,GAA4B,IAAIE,IAAJ,CAASF,KAAK,IAAI,CAAlB,CAA5B,GAAmDA,KAA9D;;AACA,MAAI;AACA,WAAOjB,YAAY,CAACgB,MAAD,EAAS,MAAT,EAAiBb,iBAAjB,EAAoCC,OAApC,CAAZ,CAAyDoB,aAAzD,CAAuEN,IAAvE,CAAP;AACH,GAFD,CAGA,OAAOE,CAAP,EAAU;AACNJ,IAAAA,MAAM,CAACT,OAAP,CAAe,IAAIT,SAAJ,CAAc;AAAe;AAA7B,MAAiD,wBAAjD,EAA2EsB,CAA3E,CAAf;AACH;;AACD,SAAO,EAAP;AACH;AACD,OAAO,SAASK,iBAAT,CAA2BT,MAA3B,EAAmCb,iBAAnC,EAAsDc,KAAtD,EAA6Db,OAA7D,EAAsE;AACzE,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,MAAIc,IAAI,GAAG,OAAOD,KAAP,KAAiB,QAAjB,GAA4B,IAAIE,IAAJ,CAASF,KAAK,IAAI,CAAlB,CAA5B,GAAmDA,KAA9D;;AACA,MAAI;AACA,WAAOjB,YAAY,CAACgB,MAAD,EAAS,MAAT,EAAiBb,iBAAjB,EAAoCC,OAApC,CAAZ,CAAyDoB,aAAzD,CAAuEN,IAAvE,CAAP;AACH,GAFD,CAGA,OAAOE,CAAP,EAAU;AACNJ,IAAAA,MAAM,CAACT,OAAP,CAAe,IAAIT,SAAJ,CAAc;AAAe;AAA7B,MAAiD,wBAAjD,EAA2EsB,CAA3E,CAAf;AACH;;AACD,SAAO,EAAP;AACH","sourcesContent":["import { __assign } from \"tslib\";\nimport { filterProps, getNamedFormat } from './utils';\nimport { IntlError } from './error';\nvar DATE_TIME_FORMAT_OPTIONS = [\n    'localeMatcher',\n    'formatMatcher',\n    'timeZone',\n    'hour12',\n    'weekday',\n    'era',\n    'year',\n    'month',\n    'day',\n    'hour',\n    'minute',\n    'second',\n    'timeZoneName',\n    'hourCycle',\n    'dateStyle',\n    'timeStyle',\n    'fractionalSecondDigits',\n    'calendar',\n    // 'dayPeriod',\n    'numberingSystem',\n];\nexport function getFormatter(_a, type, getDateTimeFormat, options) {\n    var locale = _a.locale, formats = _a.formats, onError = _a.onError, timeZone = _a.timeZone;\n    if (options === void 0) { options = {}; }\n    var format = options.format;\n    var defaults = __assign(__assign({}, (timeZone && { timeZone: timeZone })), (format && getNamedFormat(formats, type, format, onError)));\n    var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);\n    if (type === 'time' &&\n        !filteredOptions.hour &&\n        !filteredOptions.minute &&\n        !filteredOptions.second) {\n        // Add default formatting options if hour, minute, or second isn't defined.\n        filteredOptions = __assign(__assign({}, filteredOptions), { hour: 'numeric', minute: 'numeric' });\n    }\n    return getDateTimeFormat(locale, filteredOptions);\n}\nexport function formatDate(config, getDateTimeFormat, value, options) {\n    if (options === void 0) { options = {}; }\n    var date = typeof value === 'string' ? new Date(value || 0) : value;\n    try {\n        return getFormatter(config, 'date', getDateTimeFormat, options).format(date);\n    }\n    catch (e) {\n        config.onError(new IntlError(\"FORMAT_ERROR\" /* FORMAT_ERROR */, 'Error formatting date.', e));\n    }\n    return String(date);\n}\nexport function formatTime(config, getDateTimeFormat, value, options) {\n    if (options === void 0) { options = {}; }\n    var date = typeof value === 'string' ? new Date(value || 0) : value;\n    try {\n        return getFormatter(config, 'time', getDateTimeFormat, options).format(date);\n    }\n    catch (e) {\n        config.onError(new IntlError(\"FORMAT_ERROR\" /* FORMAT_ERROR */, 'Error formatting time.', e));\n    }\n    return String(date);\n}\nexport function formatDateToParts(config, getDateTimeFormat, value, options) {\n    if (options === void 0) { options = {}; }\n    var date = typeof value === 'string' ? new Date(value || 0) : value;\n    try {\n        return getFormatter(config, 'date', getDateTimeFormat, options).formatToParts(date);\n    }\n    catch (e) {\n        config.onError(new IntlError(\"FORMAT_ERROR\" /* FORMAT_ERROR */, 'Error formatting date.', e));\n    }\n    return [];\n}\nexport function formatTimeToParts(config, getDateTimeFormat, value, options) {\n    if (options === void 0) { options = {}; }\n    var date = typeof value === 'string' ? new Date(value || 0) : value;\n    try {\n        return getFormatter(config, 'time', getDateTimeFormat, options).formatToParts(date);\n    }\n    catch (e) {\n        config.onError(new IntlError(\"FORMAT_ERROR\" /* FORMAT_ERROR */, 'Error formatting time.', e));\n    }\n    return [];\n}\n"]},"metadata":{},"sourceType":"module"}