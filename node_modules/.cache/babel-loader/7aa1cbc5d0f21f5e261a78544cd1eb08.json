{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import{getAttachmentType}from\"../utils/parseUtils\";var AttachmentsBusiness=/*#__PURE__*/function(){function AttachmentsBusiness(api,settings){var _this=this;_classCallCheck(this,AttachmentsBusiness);this.api=api;this.settings=settings;this.list=function(chat,callback){if(!_this.api)return;_this.settings.get(function(settings){var paramsUrl={kind:chat.jid.includes(\"@conference.\")?\"groupchat\":\"chat\",src:\"\".concat(settings.xmppUser,\"@\").concat(settings.xmppDomain),dst:chat.jid};_this.api.getAttachments({paramsUrl:paramsUrl},function(attachments){if(attachments===null||attachments===void 0?void 0:attachments.attachments){var parsedAttachments=attachments===null||attachments===void 0?void 0:attachments.attachments.map(function(attachment){var booleans=getAttachmentType(attachment.fileExtension);return _objectSpread({name:attachment.fileName,// size: \"any\",\nthumbnail:attachment.fileUrl},booleans);});callback(parsedAttachments);}});});};}_createClass(AttachmentsBusiness,[{key:\"saveData\",value:function saveData(payload,callback){if(!this.api)return;this.api.saveSharedData(payload,callback);}}]);return AttachmentsBusiness;}();export{AttachmentsBusiness as default};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Attachments.ts"],"names":["getAttachmentType","AttachmentsBusiness","api","settings","list","chat","callback","get","paramsUrl","kind","jid","includes","src","xmppUser","xmppDomain","dst","getAttachments","attachments","parsedAttachments","map","attachment","booleans","fileExtension","name","fileName","thumbnail","fileUrl","payload","saveSharedData"],"mappings":"6gBAGA,OAASA,iBAAT,KAAkC,qBAAlC,C,GAOqBC,CAAAA,mB,yBACnB,6BAAoBC,GAApB,CAAsCC,QAAtC,CAAkE,+DAA9CD,GAA8C,CAA9CA,GAA8C,MAA5BC,QAA4B,CAA5BA,QAA4B,MAClEC,IADkE,CAC3D,SAACC,IAAD,CAAcC,QAAd,CAAmD,CACxD,GAAI,CAAC,KAAI,CAACJ,GAAV,CAAe,OACf,KAAI,CAACC,QAAL,CAAcI,GAAd,CAAkB,SAACJ,QAAD,CAAc,CAC9B,GAAMK,CAAAA,SAAS,CAAG,CAChBC,IAAI,CAAEJ,IAAI,CAACK,GAAL,CAASC,QAAT,CAAkB,cAAlB,EAAoC,WAApC,CAAkD,MADxC,CAEhBC,GAAG,WAAKT,QAAQ,CAACU,QAAd,aAA0BV,QAAQ,CAACW,UAAnC,CAFa,CAGhBC,GAAG,CAAEV,IAAI,CAACK,GAHM,CAAlB,CAKA,KAAI,CAACR,GAAL,CAASc,cAAT,CAAwB,CAAER,SAAS,CAATA,SAAF,CAAxB,CAAuC,SAACS,WAAD,CAAiB,CACtD,GAAIA,WAAJ,SAAIA,WAAJ,iBAAIA,WAAW,CAAEA,WAAjB,CAA8B,CAC5B,GAAMC,CAAAA,iBAAmC,CAAGD,WAAH,SAAGA,WAAH,iBAAGA,WAAW,CAAEA,WAAb,CAAyBE,GAAzB,CAC1C,SAACC,UAAD,CAAgB,CACd,GAAMC,CAAAA,QAAQ,CAAGrB,iBAAiB,CAACoB,UAAU,CAACE,aAAZ,CAAlC,CACA,sBACEC,IAAI,CAAEH,UAAU,CAACI,QADnB,CAEE;AACAC,SAAS,CAAEL,UAAU,CAACM,OAHxB,EAIKL,QAJL,EAMD,CATyC,CAA5C,CAWAf,QAAQ,CAACY,iBAAD,CAAR,CACD,CACF,CAfD,EAgBD,CAtBD,EAuBD,CA1BiE,CAAE,C,0EA2B3DS,O,CAAgCrB,Q,CAAiC,CACxE,GAAG,CAAC,KAAKJ,GAAT,CAAc,OACd,KAAKA,GAAL,CAAS0B,cAAT,CAAwBD,OAAxB,CAAiCrB,QAAjC,EACD,C,0CA/BkBL,mB","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport IAttachedFiles from \"../../alias/IAttachedFiles\";\r\nimport IChat from \"../../alias/IChat\";\r\nimport { getAttachmentType } from \"../utils/parseUtils\";\r\nimport SettingsBusiness from \"./Settings\";\r\nimport {SaveSharedDataCallback, SaveSharedDataRequest} from \"@digivox/apicommunicator/dist/types/types/types\";\r\n\r\ninterface GetAttachmentsCallback {\r\n  (attachment: IAttachedFiles[]): void;\r\n}\r\nexport default class AttachmentsBusiness {\r\n  constructor(private api: API, private settings: SettingsBusiness) {}\r\n  list = (chat: IChat, callback: GetAttachmentsCallback) => {\r\n    if (!this.api) return;\r\n    this.settings.get((settings) => {\r\n      const paramsUrl = {\r\n        kind: chat.jid.includes(\"@conference.\") ? \"groupchat\" : \"chat\",\r\n        src: `${settings.xmppUser}@${settings.xmppDomain}`,\r\n        dst: chat.jid,\r\n      };\r\n      this.api.getAttachments({ paramsUrl }, (attachments) => {\r\n        if (attachments?.attachments) {\r\n          const parsedAttachments: IAttachedFiles[] = attachments?.attachments.map(\r\n            (attachment) => {\r\n              const booleans = getAttachmentType(attachment.fileExtension);\r\n              return {\r\n                name: attachment.fileName,\r\n                // size: \"any\",\r\n                thumbnail: attachment.fileUrl,\r\n                ...booleans,\r\n              };\r\n            }\r\n          );\r\n          callback(parsedAttachments);\r\n        }\r\n      });\r\n    });\r\n  };\r\n  saveData(payload: SaveSharedDataRequest, callback: SaveSharedDataCallback){\r\n    if(!this.api) return;\r\n    this.api.saveSharedData(payload, callback);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}