{"ast":null,"code":"import PresenceStatus from \"../../enuns/PresenceStatus\";\nimport UserType from \"../../enuns/UserType\";\nimport { ParseUserTag } from \"../../helpers/TextMessageTagParse\";\nimport { getContactName, getUserProfilePicture } from \"./formatUtils\";\nexport function getAttachmentType(extension) {\n  const booleans = {\n    isImageMessage: /jpe?g|png|gif|ico$/i.test(extension),\n    isAudioMessage: /ogg|mp3|wav|m4a|webm$/i.test(extension),\n    isVideoMessage: /mp4|avi|mov$/i.test(extension),\n    isFileMessage: /txt|doc?x|pdf|ppt?s|sql|css|js|html|xlsx|xml/.test(extension)\n  };\n  booleans.isFileMessage = !booleans.isAudioMessage && !booleans.isImageMessage && !booleans.isVideoMessage && booleans.isFileMessage;\n  return booleans;\n} //Groups\n\nexport const parseGroup = (apiGroup, presenceMap) => {\n  return {\n    groupId: apiGroup.id,\n    name: apiGroup.name,\n    description: apiGroup.description,\n    jid: `${apiGroup.id}@conference.${apiGroup.domainName}`,\n    profilePicture: apiGroup.imageUrl,\n    favorite: apiGroup.favorite,\n    added: apiGroup.added,\n    members: apiGroup.members.map(member => {\n      var _Array$from$find;\n\n      return {\n        userId: member.id,\n        name: member.name,\n        profilePicture: member.imageUrl,\n        role: member.admin ? UserType.ADMIN : UserType.USER,\n        status: presenceMap ? ((_Array$from$find = Array.from(presenceMap.values()).find(pres => pres.from.split(\"@\")[0] === member.id)) === null || _Array$from$find === void 0 ? void 0 : _Array$from$find.status) || PresenceStatus.OFFLINE : PresenceStatus.OFFLINE\n      };\n    })\n  };\n}; //Contacts\n\nexport const parseContact = (apiContact, presenceMap) => {\n  var _Array$from$find2;\n\n  return {\n    id: apiContact.id,\n    jid: apiContact.imId,\n    name: apiContact.name,\n    department: apiContact.department,\n    domain: apiContact.domainName,\n    number: apiContact.extension,\n    profilePicture: apiContact.imageUrl,\n    email: apiContact.email,\n    blocked: apiContact.blocked,\n    added: apiContact.added,\n    status: presenceMap ? ((_Array$from$find2 = Array.from(presenceMap.values()).find(pres => pres.from.split(\"/\")[0] === apiContact.imId)) === null || _Array$from$find2 === void 0 ? void 0 : _Array$from$find2.status) || PresenceStatus.OFFLINE : PresenceStatus.OFFLINE,\n    favorite: apiContact.favorite\n  };\n}; //Chats\n\nexport const parseChats = (chats, groups, contacts, user) => {\n  const parsedChats = [];\n  chats.forEach(chat => {\n    const parsedChat = parseChat(chat, groups, contacts, user);\n    if (parsedChat) parsedChats.push(parsedChat);\n  });\n  return parsedChats;\n};\nexport const parseChat = (chat, groups, contacts, user) => {\n  const chatUser = groups.get(chat.id) || contacts.get(chat.id);\n\n  if (chatUser) {\n    var _ref, _ref2;\n\n    const chatMessage = chat.messages[0];\n    const iChat = {\n      id: chat.id,\n      jid: chatUser.jid,\n      name: chat.name,\n      email: (_ref = chatUser) === null || _ref === void 0 ? void 0 : _ref.email,\n      department: (_ref2 = chatUser) === null || _ref2 === void 0 ? void 0 : _ref2.department,\n      profilePicture: (chatUser === null || chatUser === void 0 ? void 0 : chatUser.profilePicture) || (chatUser === null || chatUser === void 0 ? void 0 : chatUser.profilePicture),\n      status: \"status\" in chatUser ? chatUser.status : undefined,\n      unRead: chat.unreadMessages,\n      chatType: chat.chatType,\n      members: chatUser.members,\n      inputMessage: \"\",\n      isTyping: false,\n      messages: [parseMessage(chatMessage, contacts, groups, user)],\n      favorite: (chatUser === null || chatUser === void 0 ? void 0 : chatUser.favorite) || (chatUser === null || chatUser === void 0 ? void 0 : chatUser.favorite) || false,\n      added: chatUser.added,\n      groupId: chatUser.groupId,\n      mencioned: chat.unreadMessages > 0 ? ParseUserTag(user.id, chatMessage.message) : 0\n    };\n    return iChat;\n  }\n}; //Messages\n\nexport const parseMessage = (chatMessage, contacts, groups, user) => {\n  var _contacts$get, _content$reply_to, _content$reply_to2;\n\n  let booleans = {\n    isImageMessage: chatMessage.isImage,\n    isFileMessage: chatMessage.isFile && !chatMessage.isImage && !chatMessage.isVideo && !chatMessage.isAudio,\n    isVideoMessage: chatMessage.isVideo,\n    isAudioMessage: chatMessage.isAudio\n  };\n\n  if (isUrl(chatMessage.message)) {\n    booleans = getUrlBooleans(chatMessage.message);\n  }\n\n  let content = {};\n\n  if (chatMessage.content) {\n    let newContent = chatMessage.content.replace(/'/g, '\"');\n\n    try {\n      content = JSON.parse(newContent);\n    } catch (e) {\n      content = {};\n    }\n\n    if (typeof content !== \"object\") {\n      content = {};\n    }\n\n    if (content.reply_to) content.reply_to = content.reply_to.split(\"@\")[0];\n  }\n\n  const msg = {\n    id: chatMessage.idXmpp,\n    userName: getContactName(chatMessage, contacts, groups, user),\n    userProfilePicture: getUserProfilePicture(chatMessage, contacts, groups, user),\n    message: chatMessage.message,\n    time: new Date(chatMessage.sentAt).toISOString(),\n    fileUrl: chatMessage.message,\n    toUser: chatMessage.to,\n    fromUser: chatMessage.from,\n    deliverStatus: chatMessage.deliveryStatus,\n    readStatus: chatMessage.readStatus,\n    deliverTimestamp: chatMessage.deliveryTimestamp || \"\",\n    readTimestamp: chatMessage.readTimestamp || \"\",\n    content: chatMessage.content,\n    contentType: chatMessage.contentType,\n    isReplyMessage: !!content.reply_msg,\n    isForwardMessage: !!(!content.reply_msg && content.reply_to && content.reply_msg_id),\n    ...booleans,\n    replyedMessage: content.reply_msg,\n    replyedMessageId: content.reply_msg_id,\n    replyedMessageTo: ((_contacts$get = contacts.get(((_content$reply_to = content.reply_to) === null || _content$reply_to === void 0 ? void 0 : _content$reply_to.split(\"@\")[0]) || \"\")) === null || _contacts$get === void 0 ? void 0 : _contacts$get.name) || user.id === ((_content$reply_to2 = content.reply_to) === null || _content$reply_to2 === void 0 ? void 0 : _content$reply_to2.split(\"@\")[0]) ? user.name : \"Participant\"\n  };\n  return msg;\n};\nexport function isExtensionLine(str) {\n  var expression = /^[0-9*#]*$/;\n  var regex = new RegExp(expression);\n  return !!(str === null || str === void 0 ? void 0 : str.match(regex)) ? str : str.slice(str.length - 1, str.length);\n}\nexport function isUrl(str) {\n  var expression = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;\n  var regex = new RegExp(expression);\n  return !!(str === null || str === void 0 ? void 0 : str.match(regex));\n}\nexport function getUrlBooleans(msg) {\n  const booleans = {\n    isImageMessage: /\\.(jpe?g|png|gif|ico)$/i.test(msg),\n    isVideoMessage: /\\.(mp4|avi)$/i.test(msg),\n    isAudioMessage: /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg),\n    isFileMessage: /\\.(txt|doc?x|pdf|ppt?s|sql|css|js|html|xlsx|xml)$/i.test(msg)\n  };\n  booleans.isFileMessage = booleans.isFileMessage && !booleans.isImageMessage && !booleans.isVideoMessage && !booleans.isAudioMessage;\n  return booleans;\n}\nexport function getFileName(msg) {\n  const splittedMsg = msg.split(\"/\");\n  return splittedMsg[splittedMsg.length - 1];\n}\nexport function parseConferences(conferences, settings) {\n  const parsedConferences = conferences.map(conf => {\n    const parsedParcicipants = [];\n    conf.conferenceRoomParticipantExternals.forEach(part => {\n      parsedParcicipants.push(part);\n    });\n    conf.conferenceRoomParticipants.forEach(part => {\n      if (!parsedParcicipants.find(p => p.userUuid === part.userUuid)) parsedParcicipants.push(part);\n    });\n    conf.conferenceRoomModerators.forEach(part => {\n      if (!parsedParcicipants.find(p => p.userUuid === part.userUuid)) parsedParcicipants.push(part);\n    });\n    return {\n      id: conf.id,\n      jid: `${conf.id}@conference.public-${settings.xmppDomain}`,\n      name: conf.name,\n      number: conf.number,\n      anonymousModeratorUrl: conf.anonymousModeratorUrl,\n      anonymousParticipantUrl: conf.anonymousParticipantUrl,\n      citrusInvationParticipantExternal: conf.citrusInvationParticipantExternal,\n      citrusSendPin: conf.citrusSendPin,\n      conferenceRoomParticipants: parsedParcicipants,\n      createdBy: conf.createdBy,\n      description: conf.description,\n      domainName: conf.domainName,\n      enabledLiveStream: conf.enabledLiveStream,\n      liveStreamUrl: conf.liveStreamUrl,\n      meetingUuid: conf.meetingUuid,\n      moderatorPin: conf.moderatorPin,\n      numberExternal: conf.numberExternal,\n      participantPin: conf.participantPin,\n      record: conf.record,\n      rtmpUrl: conf.rtmpUrl,\n      serverType: conf.serverType,\n      sfuUrl: conf.sfuUrl,\n      startDatetime: conf.startDatetime,\n      startDatetimeStr: conf.startDatetimeStr,\n      stopDatetime: conf.stopDatetime,\n      stopDatetimeStr: conf.stopDatetimeStr,\n      userCreatedName: conf.userCreatedName,\n      waitMod: conf.waitMod\n    };\n  });\n  return parsedConferences;\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/utils/parseUtils.ts"],"names":["PresenceStatus","UserType","ParseUserTag","getContactName","getUserProfilePicture","getAttachmentType","extension","booleans","isImageMessage","test","isAudioMessage","isVideoMessage","isFileMessage","parseGroup","apiGroup","presenceMap","groupId","id","name","description","jid","domainName","profilePicture","imageUrl","favorite","added","members","map","member","userId","role","admin","ADMIN","USER","status","Array","from","values","find","pres","split","OFFLINE","parseContact","apiContact","imId","department","domain","number","email","blocked","parseChats","chats","groups","contacts","user","parsedChats","forEach","chat","parsedChat","parseChat","push","chatUser","get","chatMessage","messages","iChat","undefined","unRead","unreadMessages","chatType","inputMessage","isTyping","parseMessage","mencioned","message","isImage","isFile","isVideo","isAudio","isUrl","getUrlBooleans","content","newContent","replace","JSON","parse","e","reply_to","msg","idXmpp","userName","userProfilePicture","time","Date","sentAt","toISOString","fileUrl","toUser","to","fromUser","deliverStatus","deliveryStatus","readStatus","deliverTimestamp","deliveryTimestamp","readTimestamp","contentType","isReplyMessage","reply_msg","isForwardMessage","reply_msg_id","replyedMessage","replyedMessageId","replyedMessageTo","isExtensionLine","str","expression","regex","RegExp","match","slice","length","getFileName","splittedMsg","parseConferences","conferences","settings","parsedConferences","conf","parsedParcicipants","conferenceRoomParticipantExternals","part","conferenceRoomParticipants","p","userUuid","conferenceRoomModerators","xmppDomain","anonymousModeratorUrl","anonymousParticipantUrl","citrusInvationParticipantExternal","citrusSendPin","createdBy","enabledLiveStream","liveStreamUrl","meetingUuid","moderatorPin","numberExternal","participantPin","record","rtmpUrl","serverType","sfuUrl","startDatetime","startDatetimeStr","stopDatetime","stopDatetimeStr","userCreatedName","waitMod"],"mappings":"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","sourcesContent":["import {\r\n  ConferenceRoom,\r\n  ConferenceRoomParticipant,\r\n  Message,\r\n  Settings,\r\n} from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport IChat from \"../../alias/IChat\";\r\nimport { IConference } from \"../../alias/IConference\";\r\nimport IContact from \"../../alias/IContact\";\r\nimport IGroup from \"../../alias/IGroup\";\r\nimport IMessage from \"../../alias/IMessage\";\r\nimport IUser from \"../../alias/IUser\";\r\nimport PresenceStatus from \"../../enuns/PresenceStatus\";\r\nimport UserType from \"../../enuns/UserType\";\r\nimport { ParseUserTag } from \"../../helpers/TextMessageTagParse\";\r\nimport { Presence } from \"../chat/types/types\";\r\nimport { getContactName, getUserProfilePicture } from \"./formatUtils\";\r\n\r\ninterface MessageContent {\r\n  reply_to?: string;\r\n  reply_msg?: string;\r\n  reply_msg_id?: string;\r\n}\r\n\r\nexport function getAttachmentType(extension: string) {\r\n  const booleans = {\r\n    isImageMessage: /jpe?g|png|gif|ico$/i.test(extension),\r\n    isAudioMessage: /ogg|mp3|wav|m4a|webm$/i.test(extension),\r\n    isVideoMessage: /mp4|avi|mov$/i.test(extension),\r\n    isFileMessage: /txt|doc?x|pdf|ppt?s|sql|css|js|html|xlsx|xml/.test(extension),\r\n  };\r\n  booleans.isFileMessage =\r\n    !booleans.isAudioMessage &&\r\n    !booleans.isImageMessage &&\r\n    !booleans.isVideoMessage &&\r\n    booleans.isFileMessage\r\n  return booleans;\r\n}\r\n//Groups\r\nexport const parseGroup = (\r\n  apiGroup: any,\r\n  presenceMap: Map<string, Presence> | undefined\r\n) => {\r\n  return {\r\n    groupId: apiGroup.id,\r\n    name: apiGroup.name,\r\n    description: apiGroup.description,\r\n    jid: `${apiGroup.id}@conference.${apiGroup.domainName}`,\r\n    profilePicture: apiGroup.imageUrl,\r\n    favorite: apiGroup.favorite,\r\n    added: apiGroup.added,\r\n    members: apiGroup.members.map((member: any) => {\r\n      return {\r\n        userId: member.id,\r\n        name: member.name,\r\n        profilePicture: member.imageUrl,\r\n        role: member.admin ? UserType.ADMIN : UserType.USER,\r\n        status: presenceMap\r\n          ? Array.from(presenceMap.values()).find(\r\n              (pres) => pres.from.split(\"@\")[0] === member.id\r\n            )?.status || PresenceStatus.OFFLINE\r\n          : PresenceStatus.OFFLINE,\r\n      };\r\n    }),\r\n  };\r\n};\r\n//Contacts\r\nexport const parseContact = (\r\n  apiContact: any,\r\n  presenceMap: Map<string, Presence> | undefined\r\n) => {\r\n  return {\r\n    id: apiContact.id,\r\n    jid: apiContact.imId,\r\n    name: apiContact.name,\r\n    department: apiContact.department,\r\n    domain: apiContact.domainName,\r\n    number: apiContact.extension,\r\n    profilePicture: apiContact.imageUrl,\r\n    email: apiContact.email,\r\n    blocked: apiContact.blocked,\r\n    added: apiContact.added,\r\n    status: presenceMap\r\n      ? (Array.from(presenceMap.values()).find(\r\n          (pres) => pres.from.split(\"/\")[0] === apiContact.imId\r\n        )?.status as PresenceStatus) || PresenceStatus.OFFLINE\r\n      : PresenceStatus.OFFLINE,\r\n    favorite: apiContact.favorite,\r\n  };\r\n};\r\n//Chats\r\nexport const parseChats = (\r\n  chats: any[],\r\n  groups: Map<string, IGroup>,\r\n  contacts: Map<string, IContact>,\r\n  user: IUser\r\n): IChat[] => {\r\n  const parsedChats: IChat[] = [];\r\n  chats.forEach((chat) => {\r\n    const parsedChat = parseChat(chat, groups, contacts, user);\r\n    if (parsedChat) parsedChats.push(parsedChat);\r\n  });\r\n  return parsedChats;\r\n};\r\nexport const parseChat = (\r\n  chat: any,\r\n  groups: Map<string, IGroup>,\r\n  contacts: Map<string, IContact>,\r\n  user: IUser\r\n) => {\r\n  const chatUser = groups.get(chat.id) || contacts.get(chat.id);\r\n  if (chatUser) {\r\n    const chatMessage = chat.messages[0];\r\n    const iChat: IChat = {\r\n      id: chat.id,\r\n      jid: chatUser.jid,\r\n      name: chat.name,\r\n      email: (chatUser as IContact)?.email,\r\n      department: (chatUser as IContact)?.department,\r\n      profilePicture: chatUser?.profilePicture || chatUser?.profilePicture,\r\n      status: \"status\" in chatUser ? (chatUser as IContact).status : undefined,\r\n      unRead: chat.unreadMessages,\r\n      chatType: chat.chatType,\r\n      members: (chatUser as IGroup).members,\r\n      inputMessage: \"\",\r\n      isTyping: false,\r\n      messages: [parseMessage(chatMessage, contacts, groups, user)],\r\n      favorite: chatUser?.favorite || chatUser?.favorite || false,\r\n      added: chatUser.added,\r\n      groupId: (chatUser as IGroup).groupId,\r\n      mencioned: chat.unreadMessages > 0 ? ParseUserTag(user.id, chatMessage.message) : 0\r\n    };\r\n    return iChat;\r\n  }\r\n};\r\n//Messages\r\nexport const parseMessage = (\r\n  chatMessage: Message,\r\n  contacts: Map<string, IContact>,\r\n  groups: Map<string, IGroup>,\r\n  user: IUser\r\n) => {\r\n  let booleans = {\r\n    isImageMessage: chatMessage.isImage,\r\n    isFileMessage:\r\n      chatMessage.isFile &&\r\n      !chatMessage.isImage &&\r\n      !chatMessage.isVideo &&\r\n      !chatMessage.isAudio,\r\n    isVideoMessage: chatMessage.isVideo,\r\n    isAudioMessage: chatMessage.isAudio,\r\n  };\r\n  if (isUrl(chatMessage.message)) {\r\n    booleans = getUrlBooleans(chatMessage.message);\r\n  }\r\n  let content: MessageContent = {};\r\n  if (chatMessage.content) {\r\n    let newContent = chatMessage.content.replace(/'/g, '\"');\r\n    try {\r\n      content = JSON.parse(newContent);\r\n    } catch (e) {\r\n      content = {};\r\n    }\r\n    if (typeof content !== \"object\") {\r\n      content = {};\r\n    }\r\n    if (content.reply_to) content.reply_to = content.reply_to.split(\"@\")[0];\r\n  }\r\n  const msg: IMessage = {\r\n    id: chatMessage.idXmpp,\r\n    userName: getContactName(chatMessage, contacts, groups, user),\r\n    userProfilePicture: getUserProfilePicture(\r\n      chatMessage,\r\n      contacts,\r\n      groups,\r\n      user\r\n    ),\r\n    message: chatMessage.message,\r\n    time: new Date(chatMessage.sentAt).toISOString(),\r\n    fileUrl: chatMessage.message,\r\n    toUser: chatMessage.to,\r\n    fromUser: chatMessage.from,\r\n    deliverStatus: chatMessage.deliveryStatus,\r\n    readStatus: chatMessage.readStatus,\r\n    deliverTimestamp: chatMessage.deliveryTimestamp || \"\",\r\n    readTimestamp: chatMessage.readTimestamp || \"\",\r\n    content: chatMessage.content,\r\n    contentType: chatMessage.contentType,\r\n    isReplyMessage: !!content.reply_msg,\r\n    isForwardMessage: !!(\r\n      !content.reply_msg &&\r\n      content.reply_to &&\r\n      content.reply_msg_id\r\n    ),\r\n    ...booleans,\r\n    replyedMessage: content.reply_msg,\r\n    replyedMessageId: content.reply_msg_id,\r\n    replyedMessageTo:\r\n      contacts.get(content.reply_to?.split(\"@\")[0] || \"\")?.name ||\r\n      user.id === content.reply_to?.split(\"@\")[0]\r\n        ? user.name\r\n        : \"Participant\",\r\n  };\r\n  return msg;\r\n};\r\nexport function isExtensionLine(str: string) {\r\n  var expression = /^[0-9*#]*$/;\r\n  var regex = new RegExp(expression);\r\n  return !!str?.match(regex) ? str : str.slice(str.length - 1, str.length);\r\n}\r\nexport function isUrl(str: string) {\r\n  var expression = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;\r\n  var regex = new RegExp(expression);\r\n  return !!str?.match(regex);\r\n}\r\nexport function getUrlBooleans(msg: string) {\r\n  const booleans = {\r\n    isImageMessage: /\\.(jpe?g|png|gif|ico)$/i.test(msg),\r\n    isVideoMessage: /\\.(mp4|avi)$/i.test(msg),\r\n    isAudioMessage: /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg),\r\n    isFileMessage: /\\.(txt|doc?x|pdf|ppt?s|sql|css|js|html|xlsx|xml)$/i.test(msg),\r\n  }\r\n  booleans.isFileMessage =\r\n    booleans.isFileMessage &&\r\n    !booleans.isImageMessage &&\r\n    !booleans.isVideoMessage &&\r\n    !booleans.isAudioMessage;\r\n  return booleans;\r\n}\r\nexport function getFileName(msg: string) {\r\n  const splittedMsg = msg.split(\"/\");\r\n  return splittedMsg[splittedMsg.length - 1];\r\n}\r\nexport function parseConferences(\r\n  conferences: ConferenceRoom[],\r\n  settings: Settings\r\n) {\r\n  const parsedConferences: IConference[] = conferences.map((conf) => {\r\n    const parsedParcicipants: ConferenceRoomParticipant[] = [];\r\n    conf.conferenceRoomParticipantExternals.forEach((part) => {\r\n      parsedParcicipants.push(part);\r\n    });\r\n    conf.conferenceRoomParticipants.forEach((part) => {\r\n      if (!parsedParcicipants.find((p) => p.userUuid === part.userUuid))\r\n        parsedParcicipants.push(part);\r\n    });\r\n    conf.conferenceRoomModerators.forEach((part) => {\r\n      if (!parsedParcicipants.find((p) => p.userUuid === part.userUuid))\r\n        parsedParcicipants.push(part);\r\n    });\r\n    return {\r\n      id: conf.id,\r\n      jid: `${conf.id}@conference.public-${settings.xmppDomain}`,\r\n      name: conf.name,\r\n      number: conf.number,\r\n      anonymousModeratorUrl: conf.anonymousModeratorUrl,\r\n      anonymousParticipantUrl: conf.anonymousParticipantUrl,\r\n      citrusInvationParticipantExternal: conf.citrusInvationParticipantExternal,\r\n      citrusSendPin: conf.citrusSendPin,\r\n      conferenceRoomParticipants: parsedParcicipants,\r\n      createdBy: conf.createdBy,\r\n      description: conf.description,\r\n      domainName: conf.domainName,\r\n      enabledLiveStream: conf.enabledLiveStream,\r\n      liveStreamUrl: conf.liveStreamUrl,\r\n      meetingUuid: conf.meetingUuid,\r\n      moderatorPin: conf.moderatorPin,\r\n      numberExternal: conf.numberExternal,\r\n      participantPin: conf.participantPin,\r\n      record: conf.record,\r\n      rtmpUrl: conf.rtmpUrl,\r\n      serverType: conf.serverType,\r\n      sfuUrl: conf.sfuUrl,\r\n      startDatetime: conf.startDatetime,\r\n      startDatetimeStr: conf.startDatetimeStr,\r\n      stopDatetime: conf.stopDatetime,\r\n      stopDatetimeStr: conf.stopDatetimeStr,\r\n      userCreatedName: conf.userCreatedName,\r\n      waitMod: conf.waitMod,\r\n    };\r\n  });\r\n  return parsedConferences;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}