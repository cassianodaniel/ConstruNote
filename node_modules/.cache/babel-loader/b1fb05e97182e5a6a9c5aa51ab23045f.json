{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import io from\"socket.io-client\";import{getAuthorization}from\"./utils/localStorageUtils\";// COMMANDS\nexport var commands={tmute:function tmute(conferenceId,memberId){return\"conference \".concat(conferenceId,\" tmute \").concat(memberId);},tvmute:function tvmute(conferenceId,memberId){return\"conference \".concat(conferenceId,\" tvmute \").concat(memberId);},kick:function kick(conferenceId,memberId){return\"conference \".concat(conferenceId,\" kick \").concat(memberId);},vidFloor:function vidFloor(conferenceId,memberId){return\"conference \".concat(conferenceId,\" vid-floor \").concat(memberId);},muteNonMod:function muteNonMod(conferenceId){return\"conference \".concat(conferenceId,\" mute non_moderator\");},vmuteNonMod:function vmuteNonMod(conferenceId){return\"conference \".concat(conferenceId,\" vmute non_moderator\");},listLayouts:function listLayouts(conferenceId){return\"conference \".concat(conferenceId,\" vid-layout list\");},setLayout:function setLayout(conferenceId,layoutName){return\"conference \".concat(conferenceId,\" vid-layout \").concat(layoutName);}};export var ConferenceEvents;(function(ConferenceEvents){ConferenceEvents[\"UPDATE\"]=\"UPDATE\";ConferenceEvents[\"REMOVE\"]=\"REMOVE\";})(ConferenceEvents||(ConferenceEvents={}));var SquadEvenstCommunicator=function SquadEvenstCommunicator(settings){var _this=this;_classCallCheck(this,SquadEvenstCommunicator);this.settings=settings;this.currentSocket=void 0;this.eventCallback=void 0;this.connect=function(conferenceId,eventCallback){_this.eventCallback=eventCallback;if(_this.currentSocket)_this.disconnect();var auth=getAuthorization();_this.settings.get(function(s){_this.currentSocket=io(/*s.eventServerUrl*/\"https://app.squad.us/\",{query:{access_token:auth.access_token,api_url:auth.baseUrl}});_this.currentSocket.on(\"connect\",function(){var _this$currentSocket;(_this$currentSocket=_this.currentSocket)===null||_this$currentSocket===void 0?void 0:_this$currentSocket.emit(\"enterRoom\",conferenceId.split(\"@\")[0]);});_this.currentSocket.on(\"update\",function(data){console.log(data);data=typeof data===\"string\"?JSON.parse(data):data;_this.eventCallback&&_this.eventCallback(ConferenceEvents.UPDATE,data);});});};this.updateEventCallback=function(eventCB){_this.eventCallback=eventCB;};this.sendCommand=function(conferenceId,command,extraParam){var _this$currentSocket2;var mountCommand=commands[command];var commandStr;if([\"tmute\",\"tvmute\",\"kick\",\"vidFloor\",\"setLayout\"].includes(command)&&extraParam){commandStr=mountCommand(conferenceId,extraParam);}else{commandStr=mountCommand(conferenceId,null);}(_this$currentSocket2=_this.currentSocket)===null||_this$currentSocket2===void 0?void 0:_this$currentSocket2.emit(\"update\",commandStr);};this.disconnect=function(){var _this$currentSocket3,_this$currentSocket4;(_this$currentSocket3=_this.currentSocket)===null||_this$currentSocket3===void 0?void 0:_this$currentSocket3.removeAllListeners();(_this$currentSocket4=_this.currentSocket)===null||_this$currentSocket4===void 0?void 0:_this$currentSocket4.close();_this.currentSocket=undefined;};};export{SquadEvenstCommunicator as default};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadEventsCommunicator.ts"],"names":["io","getAuthorization","commands","tmute","conferenceId","memberId","tvmute","kick","vidFloor","muteNonMod","vmuteNonMod","listLayouts","setLayout","layoutName","ConferenceEvents","SquadEvenstCommunicator","settings","currentSocket","eventCallback","connect","disconnect","auth","get","s","query","access_token","api_url","baseUrl","on","emit","split","data","console","log","JSON","parse","UPDATE","updateEventCallback","eventCB","sendCommand","command","extraParam","mountCommand","commandStr","includes","removeAllListeners","close","undefined"],"mappings":"kLACA,MAAOA,CAAAA,EAAP,KAAe,kBAAf,CAEA,OAASC,gBAAT,KAAiC,2BAAjC,CACA;AACA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,CACtBC,KAAK,CAAE,eAACC,YAAD,CAAuBC,QAAvB,6BACSD,YADT,mBAC+BC,QAD/B,GADe,CAGtBC,MAAM,CAAE,gBAACF,YAAD,CAAuBC,QAAvB,6BACQD,YADR,oBAC+BC,QAD/B,GAHc,CAKtBE,IAAI,CAAE,cAACH,YAAD,CAAuBC,QAAvB,6BACUD,YADV,kBAC+BC,QAD/B,GALgB,CAOtBG,QAAQ,CAAE,kBAACJ,YAAD,CAAuBC,QAAvB,6BACMD,YADN,uBACgCC,QADhC,GAPY,CAStBI,UAAU,CAAE,oBAACL,YAAD,6BACIA,YADJ,yBATU,CAWtBM,WAAW,CAAE,qBAACN,YAAD,6BACGA,YADH,0BAXS,CAatBO,WAAW,CAAE,qBAACP,YAAD,6BACGA,YADH,sBAbS,CAetBQ,SAAS,CAAE,mBAACR,YAAD,CAAuBS,UAAvB,6BACKT,YADL,wBACgCS,UADhC,GAfW,CAAjB,CA4BP,UAAYC,CAAAA,gBAAZ,C,UAAYA,gB,EAAAA,gB,oBAAAA,gB,uBAAAA,gB,GAAAA,gB,SAyCSC,CAAAA,uB,CAGnB,iCAAoBC,QAApB,CAAgD,mEAA5BA,QAA4B,CAA5BA,QAA4B,MAFxCC,aAEwC,aADxCC,aACwC,aAChDC,OADgD,CACtC,SAACf,YAAD,CAAuBc,aAAvB,CAAwD,CAChE,KAAI,CAACA,aAAL,CAAqBA,aAArB,CACA,GAAI,KAAI,CAACD,aAAT,CAAwB,KAAI,CAACG,UAAL,GACxB,GAAMC,CAAAA,IAAI,CAAGpB,gBAAgB,EAA7B,CACA,KAAI,CAACe,QAAL,CAAcM,GAAd,CAAkB,SAACC,CAAD,CAAO,CACvB,KAAI,CAACN,aAAL,CAAqBjB,EAAE,CAAC,oBAAqB,uBAAtB,CAA+C,CACpEwB,KAAK,CAAE,CACLC,YAAY,CAAEJ,IAAI,CAACI,YADd,CAELC,OAAO,CAAEL,IAAI,CAACM,OAFT,CAD6D,CAA/C,CAAvB,CAMA,KAAI,CAACV,aAAL,CAAmBW,EAAnB,CAAsB,SAAtB,CAAiC,UAAM,yBACrC,qBAAA,KAAI,CAACX,aAAL,kEAAoBY,IAApB,CAAyB,WAAzB,CAAsCzB,YAAY,CAAC0B,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAtC,EACD,CAFD,EAGA,KAAI,CAACb,aAAL,CAAmBW,EAAnB,CAAsB,QAAtB,CAAgC,SAACG,IAAD,CAAoC,CAClEC,OAAO,CAACC,GAAR,CAAYF,IAAZ,EACAA,IAAI,CAAG,MAAOA,CAAAA,IAAP,GAAgB,QAAhB,CAA2BG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAA3B,CAA8CA,IAArD,CACA,KAAI,CAACb,aAAL,EACE,KAAI,CAACA,aAAL,CAAmBJ,gBAAgB,CAACsB,MAApC,CAA4CL,IAA5C,CADF,CAED,CALD,EAMD,CAhBD,EAiBD,CAtB+C,MAuBhDM,mBAvBgD,CAuB1B,SAACC,OAAD,CAA4B,CAChD,KAAI,CAACpB,aAAL,CAAqBoB,OAArB,CACD,CAzB+C,MA0BhDC,WA1BgD,CA0BlC,SACZnC,YADY,CAEZoC,OAFY,CAGZC,UAHY,CAIT,0BACH,GAAMC,CAAAA,YAAY,CAAGxC,QAAQ,CAACsC,OAAD,CAA7B,CACA,GAAIG,CAAAA,UAAJ,CACA,GACE,CAAC,OAAD,CAAU,QAAV,CAAoB,MAApB,CAA4B,UAA5B,CAAwC,WAAxC,EAAqDC,QAArD,CAA8DJ,OAA9D,GACAC,UAFF,CAGE,CACAE,UAAU,CAAGD,YAAY,CAACtC,YAAD,CAAeqC,UAAf,CAAzB,CACD,CALD,IAKO,CACLE,UAAU,CAAGD,YAAY,CAACtC,YAAD,CAAe,IAAf,CAAzB,CACD,CACD,sBAAA,KAAI,CAACa,aAAL,oEAAoBY,IAApB,CAAyB,QAAzB,CAAmCc,UAAnC,EACD,CA1C+C,MA2ChDvB,UA3CgD,CA2CnC,UAAM,+CACjB,sBAAA,KAAI,CAACH,aAAL,oEAAoB4B,kBAApB,GACA,sBAAA,KAAI,CAAC5B,aAAL,oEAAoB6B,KAApB,GACA,KAAI,CAAC7B,aAAL,CAAqB8B,SAArB,CACD,CA/C+C,CAAE,C,QAH/BhC,uB","sourcesContent":["import SettingsBusiness from \"./business/Settings\";\r\nimport io from \"socket.io-client\";\r\nimport { Socket } from \"socket.io-client\";\r\nimport { getAuthorization } from \"./utils/localStorageUtils\";\r\n// COMMANDS\r\nexport const commands = {\r\n  tmute: (conferenceId: string, memberId: number) =>\r\n    `conference ${conferenceId} tmute ${memberId}`,\r\n  tvmute: (conferenceId: string, memberId: number) =>\r\n    `conference ${conferenceId} tvmute ${memberId}`,\r\n  kick: (conferenceId: string, memberId: number) =>\r\n    `conference ${conferenceId} kick ${memberId}`,\r\n  vidFloor: (conferenceId: string, memberId: number) =>\r\n    `conference ${conferenceId} vid-floor ${memberId}`,\r\n  muteNonMod: (conferenceId: string) =>\r\n    `conference ${conferenceId} mute non_moderator`,\r\n  vmuteNonMod: (conferenceId: string) =>\r\n    `conference ${conferenceId} vmute non_moderator`,\r\n  listLayouts: (conferenceId: string) =>\r\n    `conference ${conferenceId} vid-layout list`,\r\n  setLayout: (conferenceId: string, layoutName: string) =>\r\n    `conference ${conferenceId} vid-layout ${layoutName}`,\r\n};\r\nexport type Commands =\r\n  | \"tmute\"\r\n  | \"tvmute\"\r\n  | \"muteNonMod\"\r\n  | \"vmuteNonMod\"\r\n  | \"kick\"\r\n  | \"vidFloor\"\r\n  | \"listLayouts\"\r\n  | \"setLayout\";\r\n\r\nexport enum ConferenceEvents {\r\n  UPDATE = \"UPDATE\",\r\n  REMOVE = \"REMOVE\",\r\n}\r\nexport interface ConferenceEvent {\r\n  sip_server_ip: string;\r\n  Caller_Name: string;\r\n  members: ConferenceEventData[];\r\n}\r\nexport interface ConferenceEventData {\r\n  Caller_Name: string;\r\n  Conference_Name: string;\r\n  Caller_Caller_ID_Name: string;\r\n  Video: boolean;\r\n  Hear: boolean;\r\n  See: boolean;\r\n  Speak: boolean;\r\n  Talking: boolean;\r\n  Floor: boolean;\r\n  \"Mute-Detect\": boolean;\r\n  Hold: boolean;\r\n  \"Member-ID\": number;\r\n  \"Member-Type\": \"moderator\" | \"participant\";\r\n  \"Member-Ghost\": boolean;\r\n  Action:\r\n    | \"add-member\"\r\n    | \"floor-change\"\r\n    | \"video-floor-change\"\r\n    | \"mute-member\"\r\n    | \"unmute-member\"\r\n    | \"vmute-member\"\r\n    | \"unvmute-member\"\r\n    | \"start-talking\"\r\n    | \"stop-talking\"\r\n    | \"del-member\";\r\n}\r\ninterface EventCallback {\r\n  (event: ConferenceEvents, data: ConferenceEvent): void;\r\n}\r\n\r\nexport default interface SquadEventsCommunicator {}\r\nexport default class SquadEvenstCommunicator {\r\n  private currentSocket: typeof Socket | undefined;\r\n  private eventCallback: EventCallback | undefined;\r\n  constructor(private settings: SettingsBusiness) {}\r\n  connect = (conferenceId: string, eventCallback: EventCallback) => {\r\n    this.eventCallback = eventCallback;\r\n    if (this.currentSocket) this.disconnect();\r\n    const auth = getAuthorization();\r\n    this.settings.get((s) => {\r\n      this.currentSocket = io(/*s.eventServerUrl*/ \"https://app.squad.us/\", {\r\n        query: {\r\n          access_token: auth.access_token,\r\n          api_url: auth.baseUrl,\r\n        },\r\n      });\r\n      this.currentSocket.on(\"connect\", () => {\r\n        this.currentSocket?.emit(\"enterRoom\", conferenceId.split(\"@\")[0]);\r\n      });\r\n      this.currentSocket.on(\"update\", (data: string | ConferenceEvent) => {\r\n        console.log(data);\r\n        data = typeof data === \"string\" ? JSON.parse(data) : data;\r\n        this.eventCallback &&\r\n          this.eventCallback(ConferenceEvents.UPDATE, data as ConferenceEvent);\r\n      });\r\n    });\r\n  };\r\n  updateEventCallback = (eventCB: EventCallback) => {\r\n    this.eventCallback = eventCB;\r\n  };\r\n  sendCommand = (\r\n    conferenceId: string,\r\n    command: Commands,\r\n    extraParam?: string\r\n  ) => {\r\n    const mountCommand = commands[command];\r\n    let commandStr;\r\n    if (\r\n      [\"tmute\", \"tvmute\", \"kick\", \"vidFloor\", \"setLayout\"].includes(command) &&\r\n      extraParam\r\n    ) {\r\n      commandStr = mountCommand(conferenceId, extraParam as never);\r\n    } else {\r\n      commandStr = mountCommand(conferenceId, null as never);\r\n    }\r\n    this.currentSocket?.emit(\"update\", commandStr);\r\n  };\r\n  disconnect = () => {\r\n    this.currentSocket?.removeAllListeners();\r\n    this.currentSocket?.close();\r\n    this.currentSocket = undefined;\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}