{"ast":null,"code":"import { invariant } from '../utils';\nimport { Type, YearFromTime, WeekDay, MonthFromTime, DateFromTime, HourFromTime, MinFromTime, SecFromTime } from '../../262';\n\nfunction getApplicableZoneData(t, timeZone, tzData) {\n  var _a;\n\n  var zoneData = tzData[timeZone]; // We don't have data for this so just say it's UTC\n\n  if (!zoneData) {\n    return [0, false];\n  }\n\n  var i = 0;\n  var offset = 0;\n  var dst = false;\n\n  for (; i <= zoneData.length; i++) {\n    if (i === zoneData.length || zoneData[i][0] * 1e3 > t) {\n      _a = zoneData[i - 1], offset = _a[2], dst = _a[3];\n      break;\n    }\n  }\n\n  return [offset * 1e3, dst];\n}\n/**\n * https://tc39.es/ecma402/#sec-tolocaltime\n * @param t\n * @param calendar\n * @param timeZone\n */\n\n\nexport function ToLocalTime(t, calendar, timeZone, _a) {\n  var tzData = _a.tzData;\n  invariant(Type(t) === 'Number', 'invalid time');\n  invariant(calendar === 'gregory', 'We only support Gregory calendar right now');\n\n  var _b = getApplicableZoneData(t, timeZone, tzData),\n      timeZoneOffset = _b[0],\n      inDST = _b[1];\n\n  var tz = t + timeZoneOffset;\n  var year = YearFromTime(tz);\n  return {\n    weekday: WeekDay(tz),\n    era: year < 0 ? 'BC' : 'AD',\n    year: year,\n    relatedYear: undefined,\n    yearName: undefined,\n    month: MonthFromTime(tz),\n    day: DateFromTime(tz),\n    hour: HourFromTime(tz),\n    minute: MinFromTime(tz),\n    second: SecFromTime(tz),\n    inDST: inDST,\n    // IMPORTANT: Not in spec\n    timeZoneOffset: timeZoneOffset\n  };\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@formatjs/ecma402-abstract/lib/src/DateTimeFormat/ToLocalTime.js"],"names":["invariant","Type","YearFromTime","WeekDay","MonthFromTime","DateFromTime","HourFromTime","MinFromTime","SecFromTime","getApplicableZoneData","t","timeZone","tzData","_a","zoneData","i","offset","dst","length","ToLocalTime","calendar","_b","timeZoneOffset","inDST","tz","year","weekday","era","relatedYear","undefined","yearName","month","day","hour","minute","second"],"mappings":"AAAA,SAASA,SAAT,QAA0B,UAA1B;AACA,SAASC,IAAT,EAAeC,YAAf,EAA6BC,OAA7B,EAAsCC,aAAtC,EAAqDC,YAArD,EAAmEC,YAAnE,EAAiFC,WAAjF,EAA8FC,WAA9F,QAAkH,WAAlH;;AACA,SAASC,qBAAT,CAA+BC,CAA/B,EAAkCC,QAAlC,EAA4CC,MAA5C,EAAoD;AAChD,MAAIC,EAAJ;;AACA,MAAIC,QAAQ,GAAGF,MAAM,CAACD,QAAD,CAArB,CAFgD,CAGhD;;AACA,MAAI,CAACG,QAAL,EAAe;AACX,WAAO,CAAC,CAAD,EAAI,KAAJ,CAAP;AACH;;AACD,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,GAAG,GAAG,KAAV;;AACA,SAAOF,CAAC,IAAID,QAAQ,CAACI,MAArB,EAA6BH,CAAC,EAA9B,EAAkC;AAC9B,QAAIA,CAAC,KAAKD,QAAQ,CAACI,MAAf,IAAyBJ,QAAQ,CAACC,CAAD,CAAR,CAAY,CAAZ,IAAiB,GAAjB,GAAuBL,CAApD,EAAuD;AACnDG,MAAAA,EAAE,GAAGC,QAAQ,CAACC,CAAC,GAAG,CAAL,CAAb,EAAsBC,MAAM,GAAGH,EAAE,CAAC,CAAD,CAAjC,EAAsCI,GAAG,GAAGJ,EAAE,CAAC,CAAD,CAA9C;AACA;AACH;AACJ;;AACD,SAAO,CAACG,MAAM,GAAG,GAAV,EAAeC,GAAf,CAAP;AACH;AACD;;;;;;;;AAMA,OAAO,SAASE,WAAT,CAAqBT,CAArB,EAAwBU,QAAxB,EAAkCT,QAAlC,EAA4CE,EAA5C,EAAgD;AACnD,MAAID,MAAM,GAAGC,EAAE,CAACD,MAAhB;AACAZ,EAAAA,SAAS,CAACC,IAAI,CAACS,CAAD,CAAJ,KAAY,QAAb,EAAuB,cAAvB,CAAT;AACAV,EAAAA,SAAS,CAACoB,QAAQ,KAAK,SAAd,EAAyB,4CAAzB,CAAT;;AACA,MAAIC,EAAE,GAAGZ,qBAAqB,CAACC,CAAD,EAAIC,QAAJ,EAAcC,MAAd,CAA9B;AAAA,MAAqDU,cAAc,GAAGD,EAAE,CAAC,CAAD,CAAxE;AAAA,MAA6EE,KAAK,GAAGF,EAAE,CAAC,CAAD,CAAvF;;AACA,MAAIG,EAAE,GAAGd,CAAC,GAAGY,cAAb;AACA,MAAIG,IAAI,GAAGvB,YAAY,CAACsB,EAAD,CAAvB;AACA,SAAO;AACHE,IAAAA,OAAO,EAAEvB,OAAO,CAACqB,EAAD,CADb;AAEHG,IAAAA,GAAG,EAAEF,IAAI,GAAG,CAAP,GAAW,IAAX,GAAkB,IAFpB;AAGHA,IAAAA,IAAI,EAAEA,IAHH;AAIHG,IAAAA,WAAW,EAAEC,SAJV;AAKHC,IAAAA,QAAQ,EAAED,SALP;AAMHE,IAAAA,KAAK,EAAE3B,aAAa,CAACoB,EAAD,CANjB;AAOHQ,IAAAA,GAAG,EAAE3B,YAAY,CAACmB,EAAD,CAPd;AAQHS,IAAAA,IAAI,EAAE3B,YAAY,CAACkB,EAAD,CARf;AASHU,IAAAA,MAAM,EAAE3B,WAAW,CAACiB,EAAD,CAThB;AAUHW,IAAAA,MAAM,EAAE3B,WAAW,CAACgB,EAAD,CAVhB;AAWHD,IAAAA,KAAK,EAAEA,KAXJ;AAYH;AACAD,IAAAA,cAAc,EAAEA;AAbb,GAAP;AAeH","sourcesContent":["import { invariant } from '../utils';\nimport { Type, YearFromTime, WeekDay, MonthFromTime, DateFromTime, HourFromTime, MinFromTime, SecFromTime, } from '../../262';\nfunction getApplicableZoneData(t, timeZone, tzData) {\n    var _a;\n    var zoneData = tzData[timeZone];\n    // We don't have data for this so just say it's UTC\n    if (!zoneData) {\n        return [0, false];\n    }\n    var i = 0;\n    var offset = 0;\n    var dst = false;\n    for (; i <= zoneData.length; i++) {\n        if (i === zoneData.length || zoneData[i][0] * 1e3 > t) {\n            _a = zoneData[i - 1], offset = _a[2], dst = _a[3];\n            break;\n        }\n    }\n    return [offset * 1e3, dst];\n}\n/**\n * https://tc39.es/ecma402/#sec-tolocaltime\n * @param t\n * @param calendar\n * @param timeZone\n */\nexport function ToLocalTime(t, calendar, timeZone, _a) {\n    var tzData = _a.tzData;\n    invariant(Type(t) === 'Number', 'invalid time');\n    invariant(calendar === 'gregory', 'We only support Gregory calendar right now');\n    var _b = getApplicableZoneData(t, timeZone, tzData), timeZoneOffset = _b[0], inDST = _b[1];\n    var tz = t + timeZoneOffset;\n    var year = YearFromTime(tz);\n    return {\n        weekday: WeekDay(tz),\n        era: year < 0 ? 'BC' : 'AD',\n        year: year,\n        relatedYear: undefined,\n        yearName: undefined,\n        month: MonthFromTime(tz),\n        day: DateFromTime(tz),\n        hour: HourFromTime(tz),\n        minute: MinFromTime(tz),\n        second: SecFromTime(tz),\n        inDST: inDST,\n        // IMPORTANT: Not in spec\n        timeZoneOffset: timeZoneOffset,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}