{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-inner-declarations */\nimport * as pegGrammar from \"./pegjs/dist/grammar\";\n/**\n * Grammar.\n * @internal\n */\n\nexport var Grammar;\n\n(function (Grammar) {\n  /**\n   * Parse.\n   * @param input -\n   * @param startRule -\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function parse(input, startRule) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const options = {\n      startRule\n    };\n\n    try {\n      pegGrammar.parse(input, options);\n    } catch (e) {\n      options.data = -1;\n    }\n\n    return options.data;\n  }\n\n  Grammar.parse = parse;\n  /**\n   * Parse the given string and returns a SIP.NameAddrHeader instance or undefined if\n   * it is an invalid NameAddrHeader.\n   * @param name_addr_header -\n   */\n\n  function nameAddrHeaderParse(nameAddrHeader) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const parsedNameAddrHeader = Grammar.parse(nameAddrHeader, \"Name_Addr_Header\");\n    return parsedNameAddrHeader !== -1 ? parsedNameAddrHeader : undefined;\n  }\n\n  Grammar.nameAddrHeaderParse = nameAddrHeaderParse;\n  /**\n   * Parse the given string and returns a SIP.URI instance or undefined if\n   * it is an invalid URI.\n   * @param uri -\n   */\n\n  function URIParse(uri) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const parsedUri = Grammar.parse(uri, \"SIP_URI\");\n    return parsedUri !== -1 ? parsedUri : undefined;\n  }\n\n  Grammar.URIParse = URIParse;\n})(Grammar || (Grammar = {}));","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/grammar/grammar.js"],"names":["pegGrammar","Grammar","parse","input","startRule","options","e","data","nameAddrHeaderParse","nameAddrHeader","parsedNameAddrHeader","undefined","URIParse","uri","parsedUri"],"mappings":"AAAA;;AACA;AACA,OAAO,KAAKA,UAAZ,MAA4B,sBAA5B;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,OAAJ;;AACP,CAAC,UAAUA,OAAV,EAAmB;AAChB;AACJ;AACA;AACA;AACA;AACI;AACA,WAASC,KAAT,CAAeC,KAAf,EAAsBC,SAAtB,EAAiC;AAC7B;AACA,UAAMC,OAAO,GAAG;AAAED,MAAAA;AAAF,KAAhB;;AACA,QAAI;AACAJ,MAAAA,UAAU,CAACE,KAAX,CAAiBC,KAAjB,EAAwBE,OAAxB;AACH,KAFD,CAGA,OAAOC,CAAP,EAAU;AACND,MAAAA,OAAO,CAACE,IAAR,GAAe,CAAC,CAAhB;AACH;;AACD,WAAOF,OAAO,CAACE,IAAf;AACH;;AACDN,EAAAA,OAAO,CAACC,KAAR,GAAgBA,KAAhB;AACA;AACJ;AACA;AACA;AACA;;AACI,WAASM,mBAAT,CAA6BC,cAA7B,EAA6C;AACzC;AACA,UAAMC,oBAAoB,GAAGT,OAAO,CAACC,KAAR,CAAcO,cAAd,EAA8B,kBAA9B,CAA7B;AACA,WAAOC,oBAAoB,KAAK,CAAC,CAA1B,GAA8BA,oBAA9B,GAAqDC,SAA5D;AACH;;AACDV,EAAAA,OAAO,CAACO,mBAAR,GAA8BA,mBAA9B;AACA;AACJ;AACA;AACA;AACA;;AACI,WAASI,QAAT,CAAkBC,GAAlB,EAAuB;AACnB;AACA,UAAMC,SAAS,GAAGb,OAAO,CAACC,KAAR,CAAcW,GAAd,EAAmB,SAAnB,CAAlB;AACA,WAAOC,SAAS,KAAK,CAAC,CAAf,GAAmBA,SAAnB,GAA+BH,SAAtC;AACH;;AACDV,EAAAA,OAAO,CAACW,QAAR,GAAmBA,QAAnB;AACH,CAzCD,EAyCGX,OAAO,KAAKA,OAAO,GAAG,EAAf,CAzCV","sourcesContent":["/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-inner-declarations */\nimport * as pegGrammar from \"./pegjs/dist/grammar\";\n/**\n * Grammar.\n * @internal\n */\nexport var Grammar;\n(function (Grammar) {\n    /**\n     * Parse.\n     * @param input -\n     * @param startRule -\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function parse(input, startRule) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const options = { startRule };\n        try {\n            pegGrammar.parse(input, options);\n        }\n        catch (e) {\n            options.data = -1;\n        }\n        return options.data;\n    }\n    Grammar.parse = parse;\n    /**\n     * Parse the given string and returns a SIP.NameAddrHeader instance or undefined if\n     * it is an invalid NameAddrHeader.\n     * @param name_addr_header -\n     */\n    function nameAddrHeaderParse(nameAddrHeader) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parsedNameAddrHeader = Grammar.parse(nameAddrHeader, \"Name_Addr_Header\");\n        return parsedNameAddrHeader !== -1 ? parsedNameAddrHeader : undefined;\n    }\n    Grammar.nameAddrHeaderParse = nameAddrHeaderParse;\n    /**\n     * Parse the given string and returns a SIP.URI instance or undefined if\n     * it is an invalid URI.\n     * @param uri -\n     */\n    function URIParse(uri) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const parsedUri = Grammar.parse(uri, \"SIP_URI\");\n        return parsedUri !== -1 ? parsedUri : undefined;\n    }\n    Grammar.URIParse = URIParse;\n})(Grammar || (Grammar = {}));\n"]},"metadata":{},"sourceType":"module"}