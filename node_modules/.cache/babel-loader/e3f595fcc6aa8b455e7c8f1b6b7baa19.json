{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\nimport { getFileName, getUrlBooleans } from \"./utils/parseUtils\";\nimport ReadStatus from \"../enuns/ReadStatus\"; // Comentado para Evitar Warnings no console\n// interface CreateGroupCallback {\n//   (groupCreated: boolean): void;\n// }\n\nlet squadService;\nlet typingTimeout = new Map();\n\nconst SquadCommunicator = ({\n  children\n}) => {\n  var _squadService10;\n\n  const {\n    chats,\n    setChats,\n    setGroups,\n    setContacts\n  } = useChat();\n  const {\n    user,\n    setUser\n  } = useAuth();\n\n  const init = () => {\n    var _squadService;\n\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"e9e34268a0adb4b4f009b508de092e2c\",\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      user_name: \"ZZ Romero 2\",\n      email: \"romero2@digivox.com.br\",\n      expires_in: 2592000,\n      baseUrl: \"https://app.citrussquad.com/api/v1/\"\n    }));\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\n    (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.user.get(user => {\n      setUser(user);\n    });\n  };\n\n  const clearSendFile = (chatId, messageId) => {\n    setChats(chats.map(chat => {\n      if (chat.id === chatId) {\n        chat.messages = chat.messages.map(message => {\n          if (message.id === messageId) {\n            message.deliverStatus = DeliverStatus.QUEUED;\n            message.sendFile = undefined;\n          }\n\n          return message;\n        });\n      }\n\n      return chat;\n    }));\n  };\n\n  const onChatsChange = () => {\n    chats.forEach(chat => {\n      checkSendMessage(chat);\n      checkSearchMessages(chat); // checkTyping(chat);\n    });\n  }; // const onActiveChatChange = () => {\n  //   checkTyping(activeChat)\n  // }\n  // const checkTyping = (chat: IChat) => {\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\n  //     if (oldTimeoutData)\n  //       clearTimeout(oldTimeoutData.timeout)\n  //     else\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\n  //     const timeoutData = {\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\n  //       msgStr: `${chat.inputMessage}`\n  //     }\n  //     typingTimeout.set(chat.jid, timeoutData)\n  //   }\n  // }\n\n\n  const checkSearchMessages = chat => {\n    if (chat.messageLoaded) {\n      var _squadService2;\n\n      (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.messages.list(chat, messages => {\n        setChats(chats.map(cht => {\n          if (cht.id === chat.id) {\n            messages.reverse().forEach(msg => {\n              cht.messages.unshift(msg);\n            });\n            cht.messageLoaded = false;\n          }\n\n          return cht;\n        }));\n      });\n    }\n  };\n\n  const checkSendMessage = chat => {\n    chat.messages.forEach(msg => {\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\n        if (msg.sendFile) {\n          var _squadService3, _squadService3$chat;\n\n          const files = [msg.sendFile];\n          clearSendFile(chat.id, msg.id);\n          (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : (_squadService3$chat = _squadService3.chat) === null || _squadService3$chat === void 0 ? void 0 : _squadService3$chat.sendFiles(chat, files, data => {\n            updateMessageFiles(data, chat, msg);\n          });\n        } else {\n          sendMessage(chat, msg.message, msgId => updateMessage(msgId, chat, msg));\n        }\n      }\n    });\n  };\n\n  const updateMessageFiles = (data, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        const booleans = getUrlBooleans(data.url);\n        message.id = data.msgId;\n        message.fileUrl = data.url;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n        message.message = getFileName(data.url);\n        message.isFileMessage = booleans.isFileMessage;\n        message.isImageMessage = booleans.isImageMessage;\n        message.isVideoMessage = booleans.isVideoMessage;\n        message.isAudioMessage = booleans.isAudioMessage;\n      }\n\n      return message;\n    });\n    setChats(chats.map(cht => {\n      if (cht.id === chat.id) {\n        cht.messages = newChat.messages;\n      }\n\n      return cht;\n    }));\n  };\n\n  const updateMessage = (msgId, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        message.id = msgId;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n      }\n\n      return message;\n    });\n    setChats(chats.map(cht => {\n      if (cht.id === chat.id) {\n        cht.messages = newChat.messages;\n      }\n\n      return cht;\n    }));\n  };\n\n  useEffect(onChatsChange, [chats]); // useEffect(onActiveChatChange, [activeChat])\n\n  function chatCommunicatorSubscribe(event, data) {\n    var _squadService4;\n\n    switch (event) {\n      case Events.ONLINE:\n        (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : _squadService4.chats.list(receivedChats => {\n          var _squadService5, _squadService7;\n\n          setChats(receivedChats); //populating groups\n\n          (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.groups.list(groups => {\n            var _squadService6, _squadService6$chat;\n\n            setGroups(groups); //Joining Groups Rooms in XMPP\n\n            (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : (_squadService6$chat = _squadService6.chat) === null || _squadService6$chat === void 0 ? void 0 : _squadService6$chat.joinGroups(groups.map(group => group.jid));\n          }); //populating contacts\n\n          (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : _squadService7.contacts.list(contacts => setContacts(contacts)); //populating chat's with messages\n\n          receivedChats.forEach(chat => {\n            var _squadService8;\n\n            (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : _squadService8.messages.list(chat, messages => {\n              const chatWithMessages = { ...chat\n              };\n              chatWithMessages.messages = chatWithMessages.messages.concat(messages);\n              setChats([...receivedChats.filter(cht => chat.id !== cht.id), chatWithMessages]);\n            });\n          });\n        });\n        break;\n\n      case Events.MESSAGE:\n        if (data.fromUser === user.jid) break;\n        let find = false;\n        let newChats = chats.map(chat => {\n          if (data.fromUser === chat.jid) {\n            find = true;\n            if (!chat.messages.filter(msg => msg.id === data.id)[0]) chat.messages.push(data);\n          }\n\n          return chat;\n        });\n\n        if (!find) {\n          var _squadService9;\n\n          let newChat = {};\n          (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : _squadService9.contacts.list(listContacts => {\n            listContacts.forEach(c => {\n              if (c.jid === data.fromUser) {\n                newChat = {\n                  id: c.id,\n                  jid: c.jid,\n                  name: c.name,\n                  profilePicture: c.profilePicture,\n                  status: c.status,\n                  unRead: 1,\n                  chatType: ChatType.USER,\n                  inputMessage: \"\",\n                  isTyping: false,\n                  messages: []\n                };\n                newChat.messages.push(data);\n                newChats.unshift(newChat);\n                setChats(newChats);\n              }\n            });\n          });\n        } else {\n          setChats(newChats);\n        }\n\n        break;\n\n      case Events.RECEIVED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.deliverStatus = DeliverStatus.DELIVERED;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.DISPLAYED:\n        setChats(chats.map(chat => {\n          chat.messages = chat.messages.map(message => {\n            if (message.id === data.id) {\n              message.readStatus = ReadStatus.READ;\n            }\n\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.COMPOSING:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = true;\n            deleteTypingTimeout(chat.jid);\n            setTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.ACTIVE:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = false;\n            deleteTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.PRESENCE:\n        break;\n    }\n  }\n\n  const deleteTypingTimeout = jid => {\n    var _typingTimeout$get;\n\n    clearTimeout(((_typingTimeout$get = typingTimeout.get(jid)) === null || _typingTimeout$get === void 0 ? void 0 : _typingTimeout$get.timeout) || setTimeout(() => {}, 1));\n    typingTimeout.delete(jid);\n  };\n\n  const setTypingTimeout = jid => {\n    const timeoutData = {\n      msgStr: '',\n      timeout: setTimeout(() => {\n        setChats(chats.map(cht => {\n          if (cht.jid === jid) {\n            cht.isTyping = false;\n          }\n\n          return cht;\n        }));\n      }, 20000)\n    };\n    typingTimeout.set(jid, timeoutData);\n  };\n\n  (_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : _squadService10.updateSubscribeFunction(chatCommunicatorSubscribe); // Comentado para evitar warnings no console enquanto não é usado\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\n  //     squadService?.groups.list((groups) => {\n  //       setGroups(groups);\n  //       callback(true);\n  //     });\n  //   });\n  // }\n\n  function sendMessage(chat, message, callback) {\n    var _squadService11, _squadService11$chat;\n\n    (_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : (_squadService11$chat = _squadService11.chat) === null || _squadService11$chat === void 0 ? void 0 : _squadService11$chat.chat.sendMessage(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message, callback);\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","DeliverStatus","XMPPChatType","getFileName","getUrlBooleans","ReadStatus","squadService","typingTimeout","Map","children","chats","setChats","setGroups","setContacts","user","setUser","init","localStorage","setItem","JSON","stringify","access_token","user_id","user_name","email","expires_in","baseUrl","getInstance","chatCommunicatorSubscribe","get","clearSendFile","chatId","messageId","map","chat","id","messages","message","deliverStatus","QUEUED","sendFile","undefined","onChatsChange","forEach","checkSendMessage","checkSearchMessages","messageLoaded","list","cht","reverse","msg","unshift","SENDING","files","sendFiles","data","updateMessageFiles","sendMessage","msgId","updateMessage","newChat","booleans","url","fileUrl","time","Date","toISOString","isFileMessage","isImageMessage","isVideoMessage","isAudioMessage","event","ONLINE","receivedChats","groups","joinGroups","group","jid","contacts","chatWithMessages","concat","filter","MESSAGE","fromUser","find","newChats","push","listContacts","c","name","profilePicture","status","unRead","chatType","USER","inputMessage","isTyping","RECEIVED","DELIVERED","DISPLAYED","readStatus","READ","COMPOSING","deleteTypingTimeout","setTypingTimeout","ACTIVE","PRESENCE","clearTimeout","timeout","setTimeout","delete","timeoutData","msgStr","set","updateSubscribeFunction","callback","includes","GROUPCHAT","CHAT"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\n\r\nimport { Events, SendImageCallbackReturn } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\r\nimport { SendMessageCallback } from \"./types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport { getFileName, getUrlBooleans } from \"./utils/parseUtils\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\n// Comentado para Evitar Warnings no console\r\n// interface CreateGroupCallback {\r\n//   (groupCreated: boolean): void;\r\n// }\r\ninterface TypingTimeoutData {\r\n  timeout: NodeJS.Timeout\r\n  msgStr: string\r\n}\r\nlet squadService: SquadService | undefined;\r\nlet typingTimeout: Map<string, TypingTimeoutData> = new Map<string, TypingTimeoutData>()\r\n\r\nconst SquadCommunicator: React.FC = ({ children }) => {\r\n  const { chats, setChats, setGroups, setContacts } = useChat();\r\n  const { user, setUser } = useAuth();\r\n\r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"e9e34268a0adb4b4f009b508de092e2c\",\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        user_name: \"ZZ Romero 2\",\r\n        email: \"romero2@digivox.com.br\",\r\n        expires_in: 2592000,\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n      })\r\n    );\r\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\r\n    squadService?.user.get((user: IUser) => {\r\n      setUser(user);\r\n    });\r\n  };\r\n\r\n  const clearSendFile = (chatId: string, messageId: string) => {\r\n    setChats(chats.map(chat => {\r\n      if (chat.id === chatId) {\r\n        chat.messages = chat.messages.map(message => {\r\n          if (message.id === messageId) {\r\n            message.deliverStatus = DeliverStatus.QUEUED\r\n            message.sendFile = undefined\r\n          }\r\n          return message\r\n        })\r\n      }\r\n      return chat\r\n    }))\r\n  }\r\n\r\n  const onChatsChange = () => {\r\n    chats.forEach((chat) => {\r\n      checkSendMessage(chat);\r\n      checkSearchMessages(chat);\r\n      // checkTyping(chat);\r\n    });\r\n  };\r\n  // const onActiveChatChange = () => {\r\n  //   checkTyping(activeChat)\r\n  // }\r\n  // const checkTyping = (chat: IChat) => {\r\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\r\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\r\n  //     if (oldTimeoutData)\r\n  //       clearTimeout(oldTimeoutData.timeout)\r\n  //     else\r\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\r\n  //     const timeoutData = {\r\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\r\n  //       msgStr: `${chat.inputMessage}`\r\n  //     }\r\n  //     typingTimeout.set(chat.jid, timeoutData)\r\n  //   }\r\n  // }\r\n\r\n  const checkSearchMessages = (chat: IChat) => {\r\n    if (chat.messageLoaded) {\r\n      squadService?.messages.list(chat, (messages) => {\r\n        setChats(chats.map(cht => {\r\n          if (cht.id === chat.id) {\r\n            messages.reverse().forEach(msg => {\r\n              cht.messages.unshift(msg)\r\n            })\r\n            cht.messageLoaded = false;\r\n          }\r\n          return cht\r\n        }))\r\n      })\r\n    }\r\n  }\r\n\r\n  const checkSendMessage = (chat: IChat) => {\r\n    chat.messages.forEach((msg) => {\r\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\r\n        if (msg.sendFile) {\r\n          const files = [msg.sendFile];\r\n          clearSendFile(chat.id, msg.id);\r\n          squadService?.chat?.sendFiles(chat, files, (data: SendImageCallbackReturn) => {\r\n            updateMessageFiles(data, chat, msg)\r\n          });\r\n        } else {\r\n          sendMessage(chat, msg.message, (msgId) => updateMessage(msgId, chat, msg));\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const updateMessageFiles = (data: SendImageCallbackReturn, chat: IChat, msg: IMessage) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        const booleans = getUrlBooleans(data.url)\r\n        message.id = data.msgId\r\n        message.fileUrl = data.url\r\n        message.deliverStatus = DeliverStatus.QUEUED\r\n        message.time = new Date().toISOString()\r\n        message.message = getFileName(data.url)\r\n        message.isFileMessage = booleans.isFileMessage\r\n        message.isImageMessage = booleans.isImageMessage\r\n        message.isVideoMessage = booleans.isVideoMessage\r\n        message.isAudioMessage = booleans.isAudioMessage\r\n\r\n      }\r\n      return message\r\n    }\r\n    );\r\n    setChats(chats.map((cht) => {\r\n      if (cht.id === chat.id) {\r\n        cht.messages = newChat.messages\r\n      } return cht\r\n    }));\r\n  }\r\n  const updateMessage = (msgId: string, chat: IChat, msg: IMessage) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        message.id = msgId\r\n        message.deliverStatus = DeliverStatus.QUEUED\r\n        message.time = new Date().toISOString()\r\n      }\r\n      return message\r\n    });\r\n    setChats(chats.map((cht) => {\r\n      if (cht.id === chat.id) {\r\n        cht.messages = newChat.messages\r\n      } return cht\r\n    }));\r\n  }\r\n\r\n  useEffect(onChatsChange, [chats]);\r\n  // useEffect(onActiveChatChange, [activeChat])\r\n  function chatCommunicatorSubscribe(event: string, data: any) {\r\n    switch (event) {\r\n      case Events.ONLINE:\r\n        squadService?.chats.list((receivedChats) => {\r\n          setChats(receivedChats);\r\n          //populating groups\r\n          squadService?.groups.list((groups) => {\r\n            setGroups(groups);\r\n            //Joining Groups Rooms in XMPP\r\n            squadService?.chat?.joinGroups(groups.map((group) => group.jid));\r\n          });\r\n          //populating contacts\r\n          squadService?.contacts.list((contacts) => setContacts(contacts));\r\n          //populating chat's with messages\r\n\r\n          receivedChats.forEach((chat) => {\r\n            squadService?.messages.list(chat, (messages) => {\r\n              const chatWithMessages = { ...chat };\r\n              chatWithMessages.messages = chatWithMessages.messages.concat(\r\n                messages\r\n              );\r\n              setChats([\r\n                ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n                chatWithMessages,\r\n              ]);\r\n            });\r\n          });\r\n        });\r\n        break;\r\n      case Events.MESSAGE:\r\n        if (data.fromUser === user.jid) break;\r\n        let find = false;\r\n\r\n        let newChats = chats.map((chat) => {\r\n          if (data.fromUser === chat.jid) {\r\n            find = true;\r\n            if (!chat.messages.filter(msg => msg.id === data.id)[0])\r\n              chat.messages.push(data);\r\n          }\r\n          return chat;\r\n        });\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.contacts.list((listContacts) => {\r\n\r\n            listContacts.forEach((c) => {\r\n              if (c.jid === data.fromUser) {\r\n                newChat = {\r\n                  id: c.id,\r\n                  jid: c.jid,\r\n                  name: c.name,\r\n                  profilePicture: c.profilePicture,\r\n                  status: c.status,\r\n                  unRead: 1,\r\n                  chatType: ChatType.USER,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  messages: [],\r\n                };\r\n                newChat.messages.push(data);\r\n                newChats.unshift(newChat);\r\n                setChats(newChats);\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          setChats(newChats);\r\n        }\r\n\r\n        break;\r\n      case Events.RECEIVED:\r\n        setChats(chats.map(chat => {\r\n          if (chat.messages.find(msg => msg.id === data.id))\r\n            chat.messages = chat.messages.map(message => {\r\n              message.deliverStatus = DeliverStatus.DELIVERED\r\n              return message\r\n            })\r\n          return chat\r\n        }))\r\n        break;\r\n      case Events.DISPLAYED:\r\n        setChats(chats.map(chat => {\r\n          chat.messages = chat.messages.map(message => {\r\n            if (message.id === data.id) {\r\n              message.readStatus = ReadStatus.READ\r\n            }\r\n            return message\r\n          })\r\n          return chat\r\n        }))\r\n        break;\r\n      case Events.COMPOSING:\r\n        setChats(chats.map((chat) => {\r\n          if (chat.jid === data) {\r\n            chat.isTyping = true\r\n            deleteTypingTimeout(chat.jid);\r\n            setTypingTimeout(chat.jid);\r\n          }\r\n          return chat\r\n        }))\r\n        break;\r\n      case Events.ACTIVE:\r\n        setChats(chats.map((chat) => {\r\n          if (chat.jid === data) {\r\n            chat.isTyping = false\r\n            deleteTypingTimeout(chat.jid);\r\n          }\r\n          return chat\r\n        }))\r\n        break;\r\n      case Events.PRESENCE:\r\n        break;\r\n    }\r\n  }\r\n  const deleteTypingTimeout = (jid: string) => {\r\n    clearTimeout(typingTimeout.get(jid)?.timeout || setTimeout(() => { }, 1))\r\n    typingTimeout.delete(jid)\r\n  }\r\n  const setTypingTimeout = (jid: string) => {\r\n    const timeoutData: TypingTimeoutData = {\r\n      msgStr: '',\r\n      timeout: setTimeout(() => {\r\n        setChats(chats.map((cht) => {\r\n          if (cht.jid === jid) {\r\n            cht.isTyping = false;\r\n          }\r\n          return cht;\r\n        }))\r\n      }, 20000)\r\n    }\r\n    typingTimeout.set(jid, timeoutData)\r\n  }\r\n\r\n  squadService?.updateSubscribeFunction(chatCommunicatorSubscribe);\r\n  // Comentado para evitar warnings no console enquanto não é usado\r\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\r\n  //     squadService?.groups.list((groups) => {\r\n  //       setGroups(groups);\r\n  //       callback(true);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  function sendMessage(\r\n    chat: IChat,\r\n    message: string,\r\n    callback: SendMessageCallback\r\n  ) {\r\n    squadService?.chat?.chat.sendMessage(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message,\r\n      callback\r\n    );\r\n  }\r\n\r\n  useEffect(init, []);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}