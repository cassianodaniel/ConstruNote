{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ModalNewGroup.tsx\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input, Alert } from \"reactstrap\"; //simple bar\n\nimport SimpleBar from \"simplebar-react\"; //components\n\nimport SelectContact from \"./SelectContact\";\nimport { useTranslation } from \"react-i18next\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport Swal from \"sweetalert2\";\nexport const ModalNewGroup = ({\n  show,\n  toggle\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    contacts\n  } = useContact();\n  const [isOpenAlert, setIsOpenAlert] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [groupName, setGroupName] = useState(\"\");\n  const [groupDescription, setGroupDescription] = useState(\"\");\n  const [selectedContact, setSelectedContact] = useState([]);\n  const {\n    setGroupToCreate\n  } = useGroup();\n\n  const handleCreateGroup = () => {\n    console.log(JSON.stringify(selectedContact));\n    setGroupToCreate({\n      contacts: selectedContact,\n      description: groupDescription,\n      name: groupName\n    });\n    setSearch(\"\");\n  };\n\n  const handleCheckContact = (selected, contact) => {\n    if (selected) {\n      let selected = selectedContact;\n      selected.push(contact);\n      setSelectedContact(selected);\n    } else {\n      setSelectedContact(selectedContact.filter(sel => {\n        if (sel.id === contact.id) {\n          return false;\n        }\n\n        return true;\n      }));\n    }\n  };\n\n  const inputGroupName = useRef(null);\n  useEffect(() => {\n    setTimeout(() => {\n      var _inputGroupName$curre;\n\n      return (_inputGroupName$curre = inputGroupName.current) === null || _inputGroupName$curre === void 0 ? void 0 : _inputGroupName$curre.focus();\n    }, 500);\n  }, [show]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: show,\n    centered: true,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    tag: \"h5\",\n    className: \"modal-title font-size-16\",\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, t(\"Create group\")), /*#__PURE__*/React.createElement(ModalBody, {\n    className: \"p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"addgroupname-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, t(\"Group Name\")), /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputGroupName,\n    type: \"text\",\n    className: \"form-control\",\n    id: \"addgroupname-input\",\n    value: groupName,\n    onChange: e => setGroupName(e.target.value),\n    placeholder: t(\"Group Name\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, t(\"Group Members\")), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    className: \"form-control mb-2\",\n    id: \"addgroupname-input\",\n    value: search,\n    onChange: e => setSearch(e.target.value),\n    placeholder: t(\"Search users..\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SimpleBar, {\n    style: {\n      height: \"250px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"addContacts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SelectContact, {\n    contacts: contacts,\n    handleCheckContact: handleCheckContact,\n    search: search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 19\n    }\n  }))))), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"addgroupdescription-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, t(\"Description\")), /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"form-control\",\n    id: \"addgroupdescription-input\",\n    value: groupDescription,\n    onChange: e => setGroupDescription(e.target.value),\n    rows: 3,\n    placeholder: t(\"Description\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Alert, {\n    isOpen: isOpenAlert,\n    color: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, message)), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"link\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, t(\"Close\")), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"primary\",\n    onClick: () => {\n      handleCreateGroup();\n      Swal.fire({\n        position: 'top-end',\n        icon: 'success',\n        title: 'Group has been created!',\n        showConfirmButton: false,\n        timer: 1500\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }\n  }, t(\"Create group\"))));\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ModalNewGroup.tsx"],"names":["React","useEffect","useState","useRef","Button","Modal","ModalHeader","ModalBody","ModalFooter","Form","FormGroup","Label","Input","Alert","SimpleBar","SelectContact","useTranslation","useGroup","useContact","Swal","ModalNewGroup","show","toggle","t","contacts","isOpenAlert","setIsOpenAlert","search","setSearch","message","setMessage","groupName","setGroupName","groupDescription","setGroupDescription","selectedContact","setSelectedContact","setGroupToCreate","handleCreateGroup","console","log","JSON","stringify","description","name","handleCheckContact","selected","contact","push","filter","sel","id","inputGroupName","setTimeout","current","focus","e","target","value","height","fire","position","icon","title","showConfirmButton","timer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Alert,\r\n} from \"reactstrap\";\r\n\r\n//simple bar\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\n//components\r\nimport SelectContact from \"./SelectContact\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\nimport IContact from \"../alias/IContact\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport Swal from \"sweetalert2\";\r\n\r\ninterface IProps {\r\n  show: boolean;\r\n  toggle(): void;\r\n}\r\n\r\nexport const ModalNewGroup: React.FC<IProps> = ({ show, toggle }) => {\r\n  const { t } = useTranslation();\r\n  const { contacts } = useContact();\r\n\r\n  const [isOpenAlert, setIsOpenAlert] = useState(false);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [groupDescription, setGroupDescription] = useState(\"\");\r\n  const [selectedContact, setSelectedContact] = useState<IContact[]>([]);\r\n  const { setGroupToCreate } = useGroup();\r\n\r\n  const handleCreateGroup = () => {\r\n    console.log(JSON.stringify(selectedContact));\r\n    setGroupToCreate({\r\n      contacts: selectedContact,\r\n      description: groupDescription,\r\n      name: groupName,\r\n    });\r\n    setSearch(\"\");\r\n  };\r\n\r\n  const handleCheckContact = (selected: boolean, contact: IContact) => {\r\n    if (selected) {\r\n      let selected = selectedContact;\r\n      selected.push(contact);\r\n      setSelectedContact(selected);\r\n    } else {\r\n      setSelectedContact(\r\n        selectedContact.filter((sel) => {\r\n          if (sel.id === contact.id) {\r\n            return false;\r\n          }\r\n          return true;\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const inputGroupName = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => inputGroupName.current?.focus(), 500);\r\n  }, [show]);\r\n\r\n  return (\r\n    <Modal isOpen={show} centered toggle={toggle}>\r\n      <ModalHeader\r\n        tag=\"h5\"\r\n        className=\"modal-title font-size-16\"\r\n        toggle={toggle}\r\n      >\r\n        {t(\"Create group\")}\r\n      </ModalHeader>\r\n      <ModalBody className=\"p-4\">\r\n        <Form>\r\n          <FormGroup className=\"mb-4\">\r\n            <Label htmlFor=\"addgroupname-input\">{t(\"Group Name\")}</Label>\r\n            <input\r\n              ref={inputGroupName}\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"addgroupname-input\"\r\n              value={groupName}\r\n              onChange={(e) => setGroupName(e.target.value)}\r\n              placeholder={t(\"Group Name\")}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup className=\"mb-4\">\r\n            <Label>{t(\"Group Members\")}</Label>\r\n            <Input\r\n              type=\"text\"\r\n              className=\"form-control mb-2\"\r\n              id=\"addgroupname-input\"\r\n              value={search}\r\n              onChange={(e) => setSearch(e.target.value)}\r\n              placeholder={t(\"Search users..\")}\r\n            />\r\n            <div className=\"border\">\r\n              <SimpleBar style={{ height: \"250px\" }}>\r\n                <div id=\"addContacts\">\r\n                  <SelectContact\r\n                    contacts={contacts}\r\n                    handleCheckContact={handleCheckContact}\r\n                    search={search}\r\n                  />\r\n                </div>\r\n              </SimpleBar>\r\n            </div>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label htmlFor=\"addgroupdescription-input\">\r\n              {t(\"Description\")}\r\n            </Label>\r\n            <textarea\r\n              className=\"form-control\"\r\n              id=\"addgroupdescription-input\"\r\n              value={groupDescription}\r\n              onChange={(e) => setGroupDescription(e.target.value)}\r\n              rows={3}\r\n              placeholder={t(\"Description\")}\r\n            ></textarea>\r\n          </FormGroup>\r\n        </Form>\r\n        <Alert isOpen={isOpenAlert} color=\"danger\">\r\n          {message}\r\n        </Alert>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button type=\"button\" color=\"link\" onClick={toggle}>\r\n          {t(\"Close\")}\r\n        </Button>\r\n        <Button type=\"button\" color=\"primary\" \r\n        onClick={\r\n          () => {\r\n          handleCreateGroup()\r\n          Swal.fire({\r\n          position: 'top-end',\r\n          icon: 'success',\r\n          title: 'Group has been created!',\r\n          showConfirmButton: false,\r\n          timer: 1500\r\n            })\r\n          }\r\n        }>\r\n          {t(\"Create group\")}\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}