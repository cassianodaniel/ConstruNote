{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{createContext,useContext,useState}from\"react\";import ChatType from\"../enuns/ChatType\";import{useChat}from\"./ChatContext\";export var ConferenceContext=createContext({});export var ConferenceProvider=function ConferenceProvider(_ref){var children=_ref.children;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),listRooms=_useState2[0],setListRooms=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),conferenceList=_useState4[0],setConferenceList=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),createConference=_useState6[0],setCreateConference=_useState6[1];var _useChat=useChat(),activeChat=_useChat.activeChat,chats=_useChat.chats,setChats=_useChat.setChats,setActiveChat=_useChat.setActiveChat,setShowChat=_useChat.setShowChat;var openConference=function openConference(obj){if((activeChat===null||activeChat===void 0?void 0:activeChat.jid)===obj.jid)return;var find=false;setChats(chats.map(function(item){if(item.jid===obj.jid){item.unRead=0;item.messageLoaded=item.messages.length>=20?false:true;setShowChat(true);setActiveChat(item);find=true;}return item;}));if(!find){var newChat={id:obj.jid.split(\"@\")[0],jid:obj.jid,name:obj.name,messageLoaded:true,unRead:0,chatType:ChatType.CONFERENCE,inputMessage:\"\",isTyping:false,messages:[],favorite:false,added:true,conferenceRoomParticipants:obj.conferenceRoomParticipants};setShowChat(true);setActiveChat(newChat);}};return/*#__PURE__*/React.createElement(ConferenceContext.Provider,{value:{createConference:createConference,setCreateConference:setCreateConference,conferenceList:conferenceList,setConferenceList:setConferenceList,listRooms:listRooms,setListRooms:setListRooms,openConference:openConference}},children);};export function useConference(){return useContext(ConferenceContext);}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/contexts/ConferenceContext.tsx"],"names":["React","createContext","useContext","useState","ChatType","useChat","ConferenceContext","ConferenceProvider","children","listRooms","setListRooms","conferenceList","setConferenceList","createConference","setCreateConference","activeChat","chats","setChats","setActiveChat","setShowChat","openConference","obj","jid","find","map","item","unRead","messageLoaded","messages","length","newChat","id","split","name","chatType","CONFERENCE","inputMessage","isTyping","favorite","added","conferenceRoomParticipants","useConference"],"mappings":"gLAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,UAA/B,CAA2CC,QAA3C,KAA2D,OAA3D,CAIA,MAAOC,CAAAA,QAAP,KAAqB,mBAArB,CACA,OAASC,OAAT,KAAwB,eAAxB,CAYA,MAAO,IAAMC,CAAAA,iBAAiB,CAAGL,aAAa,CAC5C,EAD4C,CAAvC,CAIP,MAAO,IAAMM,CAAAA,kBAA4B,CAAG,QAA/BA,CAAAA,kBAA+B,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,eAC1BL,QAAQ,CAAU,KAAV,CADkB,wCACrDM,SADqD,eAC1CC,YAD0C,8BAEhBP,QAAQ,CAAgB,EAAhB,CAFQ,yCAErDQ,cAFqD,eAErCC,iBAFqC,8BAGZT,QAAQ,EAHI,yCAGrDU,gBAHqD,eAGnCC,mBAHmC,4BAIQT,OAAO,EAJf,CAIpDU,UAJoD,UAIpDA,UAJoD,CAIxCC,KAJwC,UAIxCA,KAJwC,CAIjCC,QAJiC,UAIjCA,QAJiC,CAIvBC,aAJuB,UAIvBA,aAJuB,CAIRC,WAJQ,UAIRA,WAJQ,CAM5D,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,GAAD,CAAsB,CAC3C,GAAI,CAAAN,UAAU,OAAV,EAAAA,UAAU,SAAV,QAAAA,UAAU,CAAEO,GAAZ,IAAoBD,GAAG,CAACC,GAA5B,CAAiC,OACjC,GAAIC,CAAAA,IAAI,CAAG,KAAX,CAEAN,QAAQ,CACND,KAAK,CAACQ,GAAN,CAAU,SAACC,IAAD,CAAU,CAClB,GAAIA,IAAI,CAACH,GAAL,GAAaD,GAAG,CAACC,GAArB,CAA0B,CACxBG,IAAI,CAACC,MAAL,CAAc,CAAd,CACAD,IAAI,CAACE,aAAL,CAAqBF,IAAI,CAACG,QAAL,CAAcC,MAAd,EAAwB,EAAxB,CAA6B,KAA7B,CAAqC,IAA1D,CACAV,WAAW,CAAC,IAAD,CAAX,CACAD,aAAa,CAACO,IAAD,CAAb,CACAF,IAAI,CAAG,IAAP,CACD,CACD,MAAOE,CAAAA,IAAP,CACD,CATD,CADM,CAAR,CAaA,GAAI,CAACF,IAAL,CAAW,CACT,GAAIO,CAAAA,OAAc,CAAG,CACnBC,EAAE,CAAEV,GAAG,CAACC,GAAJ,CAAQU,KAAR,CAAc,GAAd,EAAmB,CAAnB,CADe,CAEnBV,GAAG,CAAED,GAAG,CAACC,GAFU,CAGnBW,IAAI,CAAEZ,GAAG,CAACY,IAHS,CAInBN,aAAa,CAAE,IAJI,CAKnBD,MAAM,CAAE,CALW,CAMnBQ,QAAQ,CAAE9B,QAAQ,CAAC+B,UANA,CAOnBC,YAAY,CAAE,EAPK,CAQnBC,QAAQ,CAAE,KARS,CASnBT,QAAQ,CAAE,EATS,CAUnBU,QAAQ,CAAE,KAVS,CAWnBC,KAAK,CAAE,IAXY,CAYnBC,0BAA0B,CAAEnB,GAAG,CAACmB,0BAZb,CAArB,CAcArB,WAAW,CAAC,IAAD,CAAX,CACAD,aAAa,CAACY,OAAD,CAAb,CACD,CACF,CAnCD,CAqCA,mBACE,oBAAC,iBAAD,CAAmB,QAAnB,EACE,KAAK,CAAE,CACLjB,gBAAgB,CAAhBA,gBADK,CAELC,mBAAmB,CAAnBA,mBAFK,CAGLH,cAAc,CAAdA,cAHK,CAILC,iBAAiB,CAAjBA,iBAJK,CAKLH,SAAS,CAATA,SALK,CAMLC,YAAY,CAAZA,YANK,CAOLU,cAAc,CAAdA,cAPK,CADT,EAWGZ,QAXH,CADF,CAeD,CA1DM,CA4DP,MAAO,SAASiC,CAAAA,aAAT,EAAyB,CAC9B,MAAOvC,CAAAA,UAAU,CAACI,iBAAD,CAAjB,CACD","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport IChat from \"../alias/IChat\";\r\nimport { IConference } from \"../alias/IConference\";\r\nimport ICreateConference from \"../alias/ICreateConference\";\r\nimport ChatType from \"../enuns/ChatType\";\r\nimport { useChat } from \"./ChatContext\";\r\n\r\ninterface IConferenceContextData {\r\n  createConference: ICreateConference | undefined;\r\n  setCreateConference(value: ICreateConference | undefined): void;\r\n  listRooms: boolean;\r\n  setListRooms(val: boolean): void;\r\n  conferenceList: IConference[];\r\n  setConferenceList(list: IConference[]): void;\r\n  openConference(value: IConference): void;\r\n}\r\n\r\nexport const ConferenceContext = createContext<IConferenceContextData>(\r\n  {} as IConferenceContextData\r\n);\r\n\r\nexport const ConferenceProvider: React.FC = ({ children }) => {\r\n  const [listRooms, setListRooms] = useState<boolean>(false);\r\n  const [conferenceList, setConferenceList] = useState<IConference[]>([]);\r\n  const [createConference, setCreateConference] = useState<ICreateConference>();\r\n  const { activeChat, chats, setChats, setActiveChat, setShowChat } = useChat();\r\n\r\n  const openConference = (obj: IConference) => {\r\n    if (activeChat?.jid === obj.jid) return;\r\n    let find = false;\r\n\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.jid === obj.jid) {\r\n          item.unRead = 0;\r\n          item.messageLoaded = item.messages.length >= 20 ? false : true;\r\n          setShowChat(true);\r\n          setActiveChat(item);\r\n          find = true;\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n\r\n    if (!find) {\r\n      let newChat: IChat = {\r\n        id: obj.jid.split(\"@\")[0],\r\n        jid: obj.jid,\r\n        name: obj.name,\r\n        messageLoaded: true,\r\n        unRead: 0,\r\n        chatType: ChatType.CONFERENCE,\r\n        inputMessage: \"\",\r\n        isTyping: false,\r\n        messages: [],\r\n        favorite: false,\r\n        added: true,\r\n        conferenceRoomParticipants: obj.conferenceRoomParticipants,\r\n      };\r\n      setShowChat(true);\r\n      setActiveChat(newChat);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ConferenceContext.Provider\r\n      value={{\r\n        createConference,\r\n        setCreateConference,\r\n        conferenceList,\r\n        setConferenceList,\r\n        listRooms,\r\n        setListRooms,\r\n        openConference,\r\n      }}\r\n    >\r\n      {children}\r\n    </ConferenceContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useConference() {\r\n  return useContext(ConferenceContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}