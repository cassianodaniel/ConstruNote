{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport { Events as VoiceEvents } from \"./voice/types\";\nimport { useCall } from \"../contexts/CallContext\";\nimport CallStatus from \"../enuns/CallStatus\";\nimport { useConference } from \"../contexts/ConferenceContext\"; //import { callbackify } from \"util\";\n// import IContact from \"../alias/IContact\";\n// Comentado para Evitar Warnings no console\n// interface CreateGroupCallback {\n//   (groupCreated: boolean): void;\n// }\n\nlet squadService;\n\nconst SquadSipCommunicator = () => {\n  const {\n    contacts\n  } = useContact();\n  const {\n    currentCalls,\n    setCurrentCalls,\n    callNumber,\n    setCallNumber,\n    updateConstraints,\n    setUpdateConstraints\n  } = useCall();\n  const {\n    groups\n  } = useGroup();\n  const {\n    conferenceList\n  } = useConference();\n\n  const init = () => {\n    squadService = SquadService.getInstance({\n      voiceCB: voiceCommuncatorSubscribe\n    });\n  };\n\n  const setNewCall = call => {\n    const cc = new Map(currentCalls);\n    cc.set(call.callId, call);\n    setCurrentCalls(cc);\n  };\n\n  const removeCall = call => {\n    if (call.interval) clearTimeout(call.interval);\n    const cc = new Map(currentCalls);\n    cc.delete(call.callId);\n    setCurrentCalls(cc);\n  };\n\n  const onMakeCall = () => {\n    if (callNumber === null || callNumber === void 0 ? void 0 : callNumber.number) {\n      var _squadService, _squadService$sip;\n\n      const constraints = {\n        useAudio: callNumber === null || callNumber === void 0 ? void 0 : callNumber.useAudio,\n        useVideo: callNumber === null || callNumber === void 0 ? void 0 : callNumber.useVideo\n      };\n      (_squadService = squadService) === null || _squadService === void 0 ? void 0 : (_squadService$sip = _squadService.sip) === null || _squadService$sip === void 0 ? void 0 : _squadService$sip.makeCall(callNumber === null || callNumber === void 0 ? void 0 : callNumber.number, constraints);\n      setCallNumber(undefined);\n    }\n  };\n\n  const onUpdateConstraints = () => {\n    if (updateConstraints) {\n      var _squadService2;\n\n      (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.sip.updateConstraintsParams(updateConstraints);\n      setUpdateConstraints(undefined);\n    }\n  };\n\n  function voiceCommuncatorSubscribe(event, data) {\n    var _invitation$remoteIde, _invitation$remoteIde2, _ref, _ref2, _ref3, _inviter$sessionDescr, _inviter$remoteIdenti, _inviter$remoteIdenti2, _ref4, _ref5, _ref6, _data$invitation, _data$inviter;\n\n    let endCall;\n\n    switch (event) {\n      case VoiceEvents.CONNECTED:\n        // squadService?.sip.sip.invite(\"2045\");\n        console.log(\"connected\");\n        break;\n\n      case VoiceEvents.RECEIVED_CALL:\n        const invitation = data;\n        const invitation_caller_id_number = (_invitation$remoteIde = invitation.remoteIdentity.uri.aor) === null || _invitation$remoteIde === void 0 ? void 0 : (_invitation$remoteIde2 = _invitation$remoteIde.split(\"@\")[0]) === null || _invitation$remoteIde2 === void 0 ? void 0 : _invitation$remoteIde2.replace(\"sip:\", \"\").replace(\"citrus-conference-authenticated-\", \"\").replace(\"citrus-conference_\", \"\").split(\"_\")[0];\n        const invitation_ctct_of_number = contacts.find(ctc => ctc.number === invitation_caller_id_number) || groups.find(grp => grp.groupId === invitation_caller_id_number) || conferenceList.find(conf => conf.id === invitation_caller_id_number);\n        let receivedCall;\n\n        const acceptCall = (useVideo = false) => {\n          var _squadService3, _squadService4;\n\n          (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.sip.updateConstraintsParams({\n            useVideo\n          });\n          invitation.accept({\n            sessionDescriptionHandlerOptions: {\n              constraints: (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : _squadService4.sip.getConstraints()\n            }\n          });\n\n          if (receivedCall) {\n            setNewCall({ ...receivedCall,\n              callStatus: CallStatus.CONNECTING,\n              sendingVideo: useVideo\n            });\n          }\n        };\n\n        endCall = () => {\n          var _squadService5;\n\n          (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.sip.sip.endCall(invitation);\n        };\n\n        receivedCall = {\n          callId: invitation.id,\n          callStatus: CallStatus.RINGING,\n          callerNumber: invitation_caller_id_number,\n          callerObject: invitation_ctct_of_number,\n          callerId: ((_ref = invitation_ctct_of_number) === null || _ref === void 0 ? void 0 : _ref.id) || ((_ref2 = invitation_ctct_of_number) === null || _ref2 === void 0 ? void 0 : _ref2.groupId),\n          callerName: invitation_ctct_of_number === null || invitation_ctct_of_number === void 0 ? void 0 : invitation_ctct_of_number.name,\n          callerProfilePicture: invitation_ctct_of_number === null || invitation_ctct_of_number === void 0 ? void 0 : invitation_ctct_of_number.profilePicture,\n          session: invitation,\n          isGroup: !!((_ref3 = invitation_ctct_of_number) === null || _ref3 === void 0 ? void 0 : _ref3.groupId),\n          accept: acceptCall,\n          endCall,\n          micMuted: false,\n          videoMuted: false,\n          hold: false,\n          muteMic: () => {\n            var _squadService6;\n\n            return (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : _squadService6.sip.muteMic(invitation.id);\n          },\n          unMuteMic: () => {\n            var _squadService7;\n\n            return (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : _squadService7.sip.unMuteMic(invitation.id);\n          },\n          disableCam: () => {\n            var _squadService8;\n\n            return (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : _squadService8.sip.disableCam(invitation.id);\n          },\n          enableCam: () => {\n            var _squadService9;\n\n            return (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : _squadService9.sip.enableCam(invitation.id);\n          },\n          holdCall: () => {\n            var _squadService10;\n\n            return (_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : _squadService10.sip.holdCall(invitation.id);\n          },\n          unHoldCall: () => {\n            var _squadService11;\n\n            return (_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : _squadService11.sip.unHoldCall(invitation.id);\n          }\n        };\n        setNewCall(receivedCall);\n        break;\n\n      case VoiceEvents.MAKE_CALL:\n        const inviter = data;\n        const localConstraints = inviter === null || inviter === void 0 ? void 0 : (_inviter$sessionDescr = inviter.sessionDescriptionHandlerOptions) === null || _inviter$sessionDescr === void 0 ? void 0 : _inviter$sessionDescr.constraints;\n        const inviter_caller_id_number = (_inviter$remoteIdenti = inviter.remoteIdentity.uri.aor) === null || _inviter$remoteIdenti === void 0 ? void 0 : (_inviter$remoteIdenti2 = _inviter$remoteIdenti.split(\"@\")[0]) === null || _inviter$remoteIdenti2 === void 0 ? void 0 : _inviter$remoteIdenti2.replace(\"sip:\", \"\").replace(\"citrus-conference-authenticated-\", \"\").replace(\"citrus-conference_\", \"\").split(\"_\")[0];\n        const inviter_ctct_of_number = contacts.find(ctc => ctc.number === inviter_caller_id_number) || groups.find(grp => grp.groupId === inviter_caller_id_number) || conferenceList.find(conf => conf.id === inviter_caller_id_number);\n\n        endCall = () => {\n          var _squadService12;\n\n          (_squadService12 = squadService) === null || _squadService12 === void 0 ? void 0 : _squadService12.sip.sip.endCall(inviter);\n        };\n\n        const sendCall = {\n          callId: inviter.id,\n          callStatus: CallStatus.CALLING,\n          callerNumber: inviter_caller_id_number,\n          callerObject: inviter_ctct_of_number,\n          callerId: ((_ref4 = inviter_ctct_of_number) === null || _ref4 === void 0 ? void 0 : _ref4.id) || ((_ref5 = inviter_ctct_of_number) === null || _ref5 === void 0 ? void 0 : _ref5.groupId),\n          callerName: inviter_ctct_of_number === null || inviter_ctct_of_number === void 0 ? void 0 : inviter_ctct_of_number.name,\n          callerProfilePicture: inviter_ctct_of_number === null || inviter_ctct_of_number === void 0 ? void 0 : inviter_ctct_of_number.profilePicture,\n          session: inviter,\n          isGroup: !!((_ref6 = inviter_ctct_of_number) === null || _ref6 === void 0 ? void 0 : _ref6.groupId),\n          sendingVideo: (localConstraints === null || localConstraints === void 0 ? void 0 : localConstraints.video) !== false,\n          endCall,\n          muteMic: () => {\n            var _squadService13;\n\n            return (_squadService13 = squadService) === null || _squadService13 === void 0 ? void 0 : _squadService13.sip.muteMic(inviter.id);\n          },\n          unMuteMic: () => {\n            var _squadService14;\n\n            return (_squadService14 = squadService) === null || _squadService14 === void 0 ? void 0 : _squadService14.sip.unMuteMic(inviter.id);\n          },\n          disableCam: () => {\n            var _squadService15;\n\n            return (_squadService15 = squadService) === null || _squadService15 === void 0 ? void 0 : _squadService15.sip.disableCam(inviter.id);\n          },\n          enableCam: () => {\n            var _squadService16;\n\n            return (_squadService16 = squadService) === null || _squadService16 === void 0 ? void 0 : _squadService16.sip.enableCam(inviter.id);\n          },\n          holdCall: () => {\n            var _squadService17;\n\n            return (_squadService17 = squadService) === null || _squadService17 === void 0 ? void 0 : _squadService17.sip.holdCall(inviter.id);\n          },\n          unHoldCall: () => {\n            var _squadService18;\n\n            return (_squadService18 = squadService) === null || _squadService18 === void 0 ? void 0 : _squadService18.sip.unHoldCall(inviter.id);\n          }\n        };\n        setNewCall(sendCall);\n        console.log(\"make_call\");\n        break;\n\n      case VoiceEvents.CALL_ON_GOING:\n        const callOnGoing = currentCalls.get(data === null || data === void 0 ? void 0 : (_data$invitation = data.invitation) === null || _data$invitation === void 0 ? void 0 : _data$invitation.id) || currentCalls.get(data === null || data === void 0 ? void 0 : (_data$inviter = data.inviter) === null || _data$inviter === void 0 ? void 0 : _data$inviter.id);\n\n        if (callOnGoing) {\n          const cc = { ...callOnGoing\n          };\n          cc.callStatus = CallStatus.ON_GOING;\n          cc.receivingVideo = data.receivingVideo;\n          cc.tagId = data.tagId;\n          setNewCall(cc);\n        }\n\n        break;\n\n      case VoiceEvents.CALL_HANGUP:\n        const hangupCall = currentCalls.get(data.id);\n\n        if (hangupCall) {\n          removeCall(hangupCall);\n        }\n\n        break;\n\n      case VoiceEvents.MUTE_MIC:\n        const currentCallsCopy = new Map(currentCalls);\n        let cc = currentCallsCopy.get(data.callId);\n\n        if (cc) {\n          cc = { ...cc\n          };\n          cc.micMuted = data.status;\n          currentCallsCopy.set(cc.callId, cc);\n          setCurrentCalls(currentCallsCopy);\n        }\n\n        break;\n\n      case VoiceEvents.MUTE_CAM:\n        const currentCallsCp = new Map(currentCalls);\n        let ccp = currentCallsCp.get(data.callId);\n\n        if (ccp) {\n          ccp = { ...ccp\n          };\n          ccp.videoMuted = data.status;\n          currentCallsCp.set(ccp.callId, ccp);\n          setCurrentCalls(currentCallsCp);\n        }\n\n        break;\n\n      case VoiceEvents.HOLD_CALL:\n        const currentCallsCc = new Map(currentCalls);\n        let cpc = currentCallsCc.get(data.callId);\n\n        if (cpc) {\n          cpc = { ...cpc\n          };\n          cpc.hold = data.status;\n          currentCallsCc.set(cpc.callId, cpc);\n          setCurrentCalls(currentCallsCc);\n        }\n\n        break;\n\n      default:\n        console.log(event);\n        break;\n    }\n  }\n\n  const updateFunction = () => {\n    var _squadService19;\n\n    (_squadService19 = squadService) === null || _squadService19 === void 0 ? void 0 : _squadService19.updateVoiceSubscribeFunction(voiceCommuncatorSubscribe);\n  };\n\n  useEffect(init, []);\n  useEffect(updateFunction, [contacts, groups, currentCalls, callNumber]);\n  useEffect(onMakeCall, [callNumber]);\n  useEffect(onUpdateConstraints, [updateConstraints]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n\nexport default SquadSipCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadSipCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useGroup","useContact","Events","VoiceEvents","useCall","CallStatus","useConference","squadService","SquadSipCommunicator","contacts","currentCalls","setCurrentCalls","callNumber","setCallNumber","updateConstraints","setUpdateConstraints","groups","conferenceList","init","getInstance","voiceCB","voiceCommuncatorSubscribe","setNewCall","call","cc","Map","set","callId","removeCall","interval","clearTimeout","delete","onMakeCall","number","constraints","useAudio","useVideo","sip","makeCall","undefined","onUpdateConstraints","updateConstraintsParams","event","data","endCall","CONNECTED","console","log","RECEIVED_CALL","invitation","invitation_caller_id_number","remoteIdentity","uri","aor","split","replace","invitation_ctct_of_number","find","ctc","grp","groupId","conf","id","receivedCall","acceptCall","accept","sessionDescriptionHandlerOptions","getConstraints","callStatus","CONNECTING","sendingVideo","RINGING","callerNumber","callerObject","callerId","callerName","name","callerProfilePicture","profilePicture","session","isGroup","micMuted","videoMuted","hold","muteMic","unMuteMic","disableCam","enableCam","holdCall","unHoldCall","MAKE_CALL","inviter","localConstraints","inviter_caller_id_number","inviter_ctct_of_number","sendCall","CALLING","video","CALL_ON_GOING","callOnGoing","get","ON_GOING","receivingVideo","tagId","CALL_HANGUP","hangupCall","MUTE_MIC","currentCallsCopy","status","MUTE_CAM","currentCallsCp","ccp","HOLD_CALL","currentCallsCc","cpc","updateFunction","updateVoiceSubscribeFunction"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport IContact from \"../alias/IContact\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport { Events as VoiceEvents } from \"./voice/types\";\r\nimport { useCall } from \"../contexts/CallContext\";\r\nimport ICall from \"../alias/ICall\";\r\nimport { Invitation, Inviter } from \"sip.js\";\r\nimport CallStatus from \"../enuns/CallStatus\";\r\nimport { useConference } from \"../contexts/ConferenceContext\";\r\n//import { callbackify } from \"util\";\r\n\r\n// import IContact from \"../alias/IContact\";\r\n// Comentado para Evitar Warnings no console\r\n// interface CreateGroupCallback {\r\n//   (groupCreated: boolean): void;\r\n// }\r\n\r\nlet squadService: SquadService | undefined;\r\n\r\nconst SquadSipCommunicator: React.FC = () => {\r\n  const { contacts } = useContact();\r\n  const {\r\n    currentCalls,\r\n    setCurrentCalls,\r\n    callNumber,\r\n    setCallNumber,\r\n    updateConstraints,\r\n    setUpdateConstraints,\r\n  } = useCall();\r\n  const { groups } = useGroup();\r\n  const { conferenceList } = useConference();\r\n  const init = () => {\r\n    squadService = SquadService.getInstance({\r\n      voiceCB: voiceCommuncatorSubscribe,\r\n    });\r\n  };\r\n  const setNewCall = (call: ICall) => {\r\n    const cc = new Map<string, ICall>(currentCalls);\r\n    cc.set(call.callId, call);\r\n    setCurrentCalls(cc);\r\n  };\r\n  const removeCall = (call: ICall) => {\r\n    if (call.interval) clearTimeout(call.interval);\r\n    const cc = new Map<string, ICall>(currentCalls);\r\n    cc.delete(call.callId);\r\n    setCurrentCalls(cc);\r\n  };\r\n  const onMakeCall = () => {\r\n    if (callNumber?.number) {\r\n      const constraints = {\r\n        useAudio: callNumber?.useAudio,\r\n        useVideo: callNumber?.useVideo,\r\n      };\r\n      squadService?.sip?.makeCall(callNumber?.number, constraints);\r\n      setCallNumber(undefined);\r\n    }\r\n  };\r\n  const onUpdateConstraints = () => {\r\n    if (updateConstraints) {\r\n      squadService?.sip.updateConstraintsParams(updateConstraints);\r\n      setUpdateConstraints(undefined);\r\n    }\r\n  };\r\n  function voiceCommuncatorSubscribe(event: VoiceEvents, data: any) {\r\n    let endCall;\r\n    switch (event) {\r\n      case VoiceEvents.CONNECTED:\r\n        // squadService?.sip.sip.invite(\"2045\");\r\n        console.log(\"connected\");\r\n        break;\r\n      case VoiceEvents.RECEIVED_CALL:\r\n        const invitation = data as Invitation;\r\n        const invitation_caller_id_number = invitation.remoteIdentity.uri.aor\r\n          ?.split(\"@\")[0]\r\n          ?.replace(\"sip:\", \"\")\r\n          .replace(\"citrus-conference-authenticated-\", \"\")\r\n          .replace(\"citrus-conference_\", \"\")\r\n          .split(\"_\")[0];\r\n        const invitation_ctct_of_number =\r\n          contacts.find((ctc) => ctc.number === invitation_caller_id_number) ||\r\n          groups.find((grp) => grp.groupId === invitation_caller_id_number) ||\r\n          conferenceList.find(\r\n            (conf) => conf.id === invitation_caller_id_number\r\n          );\r\n        let receivedCall: ICall;\r\n        const acceptCall = (useVideo: boolean = false) => {\r\n          squadService?.sip.updateConstraintsParams({ useVideo });\r\n          invitation.accept({\r\n            sessionDescriptionHandlerOptions: {\r\n              constraints: squadService?.sip.getConstraints(),\r\n            },\r\n          });\r\n          if (receivedCall) {\r\n            setNewCall({\r\n              ...receivedCall,\r\n              callStatus: CallStatus.CONNECTING,\r\n              sendingVideo: useVideo,\r\n            });\r\n          }\r\n        };\r\n        endCall = () => {\r\n          squadService?.sip.sip.endCall(invitation);\r\n        };\r\n        receivedCall = {\r\n          callId: invitation.id,\r\n          callStatus: CallStatus.RINGING,\r\n          callerNumber: invitation_caller_id_number,\r\n          callerObject: invitation_ctct_of_number,\r\n          callerId:\r\n            (invitation_ctct_of_number as IContact)?.id ||\r\n            (invitation_ctct_of_number as IGroup)?.groupId,\r\n          callerName: invitation_ctct_of_number?.name,\r\n          callerProfilePicture: invitation_ctct_of_number?.profilePicture,\r\n          session: invitation,\r\n          isGroup: !!(invitation_ctct_of_number as IGroup)?.groupId,\r\n          accept: acceptCall,\r\n          endCall,\r\n          micMuted: false,\r\n          videoMuted: false,\r\n          hold: false,\r\n          muteMic: () => squadService?.sip.muteMic(invitation.id),\r\n          unMuteMic: () => squadService?.sip.unMuteMic(invitation.id),\r\n          disableCam: () => squadService?.sip.disableCam(invitation.id),\r\n          enableCam: () => squadService?.sip.enableCam(invitation.id),\r\n          holdCall: () => squadService?.sip.holdCall(invitation.id),\r\n          unHoldCall: () => squadService?.sip.unHoldCall(invitation.id),\r\n        };\r\n        setNewCall(receivedCall);\r\n        break;\r\n      case VoiceEvents.MAKE_CALL:\r\n        const inviter = data as Inviter;\r\n        const localConstraints = inviter?.sessionDescriptionHandlerOptions\r\n          ?.constraints as MediaStreamConstraints;\r\n        const inviter_caller_id_number = inviter.remoteIdentity.uri.aor\r\n          ?.split(\"@\")[0]\r\n          ?.replace(\"sip:\", \"\")\r\n          .replace(\"citrus-conference-authenticated-\", \"\")\r\n          .replace(\"citrus-conference_\", \"\")\r\n          .split(\"_\")[0];\r\n        const inviter_ctct_of_number =\r\n          contacts.find((ctc) => ctc.number === inviter_caller_id_number) ||\r\n          groups.find((grp) => grp.groupId === inviter_caller_id_number) ||\r\n          conferenceList.find((conf) => conf.id === inviter_caller_id_number);\r\n\r\n        endCall = () => {\r\n          squadService?.sip.sip.endCall(inviter);\r\n        };\r\n        const sendCall: ICall = {\r\n          callId: inviter.id,\r\n          callStatus: CallStatus.CALLING,\r\n          callerNumber: inviter_caller_id_number,\r\n          callerObject: inviter_ctct_of_number,\r\n          callerId:\r\n            (inviter_ctct_of_number as IContact)?.id ||\r\n            (inviter_ctct_of_number as IGroup)?.groupId,\r\n          callerName: inviter_ctct_of_number?.name,\r\n          callerProfilePicture: inviter_ctct_of_number?.profilePicture,\r\n          session: inviter,\r\n          isGroup: !!(inviter_ctct_of_number as IGroup)?.groupId,\r\n          sendingVideo: localConstraints?.video !== false,\r\n          endCall,\r\n          muteMic: () => squadService?.sip.muteMic(inviter.id),\r\n          unMuteMic: () => squadService?.sip.unMuteMic(inviter.id),\r\n          disableCam: () => squadService?.sip.disableCam(inviter.id),\r\n          enableCam: () => squadService?.sip.enableCam(inviter.id),\r\n          holdCall: () => squadService?.sip.holdCall(inviter.id),\r\n          unHoldCall: () => squadService?.sip.unHoldCall(inviter.id),\r\n        };\r\n        setNewCall(sendCall);\r\n        console.log(\"make_call\");\r\n        break;\r\n      case VoiceEvents.CALL_ON_GOING:\r\n        const callOnGoing =\r\n          currentCalls.get(data?.invitation?.id) ||\r\n          currentCalls.get(data?.inviter?.id);\r\n        if (callOnGoing) {\r\n          const cc = { ...callOnGoing };\r\n          cc.callStatus = CallStatus.ON_GOING;\r\n          cc.receivingVideo = data.receivingVideo;\r\n          cc.tagId = data.tagId;\r\n          setNewCall(cc);\r\n        }\r\n        break;\r\n      case VoiceEvents.CALL_HANGUP:\r\n        const hangupCall = currentCalls.get(data.id);\r\n        if (hangupCall) {\r\n          removeCall(hangupCall);\r\n        }\r\n        break;\r\n      case VoiceEvents.MUTE_MIC:\r\n        const currentCallsCopy = new Map(currentCalls);\r\n        let cc = currentCallsCopy.get(data.callId);\r\n        if (cc) {\r\n          cc = { ...cc };\r\n          cc.micMuted = data.status;\r\n          currentCallsCopy.set(cc.callId, cc);\r\n          setCurrentCalls(currentCallsCopy);\r\n        }\r\n        break;\r\n      case VoiceEvents.MUTE_CAM:\r\n        const currentCallsCp = new Map(currentCalls);\r\n        let ccp = currentCallsCp.get(data.callId);\r\n        if (ccp) {\r\n          ccp = { ...ccp };\r\n          ccp.videoMuted = data.status;\r\n          currentCallsCp.set(ccp.callId, ccp);\r\n          setCurrentCalls(currentCallsCp);\r\n        }\r\n        break;\r\n      case VoiceEvents.HOLD_CALL:\r\n        const currentCallsCc = new Map(currentCalls);\r\n        let cpc = currentCallsCc.get(data.callId);\r\n        if (cpc) {\r\n          cpc = { ...cpc };\r\n          cpc.hold = data.status;\r\n          currentCallsCc.set(cpc.callId, cpc);\r\n          setCurrentCalls(currentCallsCc);\r\n        }\r\n        break;\r\n      default:\r\n        console.log(event);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const updateFunction = () => {\r\n    squadService?.updateVoiceSubscribeFunction(voiceCommuncatorSubscribe);\r\n  };\r\n\r\n  useEffect(init, []);\r\n  useEffect(updateFunction, [contacts, groups, currentCalls, callNumber]);\r\n  useEffect(onMakeCall, [callNumber]);\r\n  useEffect(onUpdateConstraints, [updateConstraints]);\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default SquadSipCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}