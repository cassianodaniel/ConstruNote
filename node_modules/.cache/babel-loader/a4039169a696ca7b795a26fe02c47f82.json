{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\contexts\\\\ChatContext.tsx\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport { activeChat as activeChatData, chats as chatsData, groups as groupsData, contacts as contactsData } from \"./../data/chat\"; //alias\n\nimport ChatType from \"../enuns/ChatType\";\nexport const ChatContext = createContext({});\nexport const ChatProvider = ({\n  children\n}) => {\n  const [showChat, setShowChat] = useState(false);\n  const [activeChat, setActiveChat] = useState(activeChatData);\n  const [chats, setChats] = useState(chatsData);\n  const [groups, setGroups] = useState(groupsData);\n  const [contacts, setContacts] = useState(contactsData);\n\n  const openChat = obj => {\n    setChats(chats.map(item => {\n      if (item.jid === obj.jid) {\n        item.unRead = 0;\n        item.messageLoaded = true;\n        setActiveChat(item);\n      }\n\n      return item;\n    }));\n  };\n\n  const openGroup = obj => {\n    let find = false;\n    setChats(chats.map(item => {\n      if (item.jid === obj.jid) {\n        item.unRead = 0;\n        item.messageLoaded = true;\n        setActiveChat(item);\n        find = true;\n      }\n\n      return item;\n    }));\n\n    if (!find) {\n      let newChat = {\n        id: obj.jid.split(\"@\")[0],\n        jid: obj.jid,\n        name: obj.name,\n        profilePicture: obj.profilePicture,\n        messageLoaded: true,\n        unRead: 1,\n        chatType: ChatType.GROUP,\n        inputMessage: \"\",\n        isTyping: false,\n        messages: []\n      };\n      setActiveChat(newChat);\n    }\n  };\n\n  const openContact = obj => {\n    let find = false;\n    setChats(chats.map(item => {\n      if (item.jid === obj.jid) {\n        item.unRead = 0;\n        item.messageLoaded = true;\n        setActiveChat(item);\n        find = true;\n      }\n\n      return item;\n    }));\n\n    if (!find) {\n      let newChat = {\n        id: obj.id,\n        jid: obj.jid,\n        name: obj.name,\n        profilePicture: obj.profilePicture,\n        status: obj.status,\n        messageLoaded: true,\n        unRead: 1,\n        chatType: ChatType.USER,\n        inputMessage: \"\",\n        isTyping: false,\n        messages: []\n      };\n      setActiveChat(newChat);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ChatContext.Provider, {\n    value: {\n      showChat,\n      setShowChat,\n      activeChat,\n      setActiveChat,\n      openChat,\n      openGroup,\n      openContact,\n      chats,\n      setChats,\n      groups,\n      setGroups,\n      contacts,\n      setContacts\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport function useChat() {\n  return useContext(ChatContext);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/contexts/ChatContext.tsx"],"names":["React","createContext","useContext","useState","activeChat","activeChatData","chats","chatsData","groups","groupsData","contacts","contactsData","ChatType","ChatContext","ChatProvider","children","showChat","setShowChat","setActiveChat","setChats","setGroups","setContacts","openChat","obj","map","item","jid","unRead","messageLoaded","openGroup","find","newChat","id","split","name","profilePicture","chatType","GROUP","inputMessage","isTyping","messages","openContact","status","USER","useChat"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport {\r\n  activeChat as activeChatData,\r\n  chats as chatsData,\r\n  groups as groupsData,\r\n  contacts as contactsData,\r\n} from \"./../data/chat\";\r\n\r\n//alias\r\nimport IChat from \"../alias/IChat\";\r\nimport IGroup from \"./../alias/IGroup\";\r\nimport IContact from \"./../alias/IContact\";\r\nimport ChatType from \"../enuns/ChatType\";\r\n\r\ninterface IChatContextData {\r\n  showChat: boolean;\r\n  setShowChat(value: boolean): void;\r\n  activeChat: IChat;\r\n  setActiveChat(value: IChat): void;\r\n  openChat(obj: IChat): void;\r\n  openGroup(obj: IGroup): void;\r\n  openContact(obj: IContact): void;\r\n  chats: IChat[];\r\n  setChats(value: IChat[]): void;\r\n  groups: IGroup[];\r\n  setGroups(value: IGroup[]): void;\r\n  contacts: IContact[];\r\n  setContacts(value: IContact[]): void;\r\n}\r\n\r\nexport const ChatContext = createContext<IChatContextData>(\r\n  {} as IChatContextData\r\n);\r\n\r\nexport const ChatProvider: React.FC = ({ children }) => {\r\n  const [showChat, setShowChat] = useState(false);\r\n  const [activeChat, setActiveChat] = useState(activeChatData);\r\n  const [chats, setChats] = useState<IChat[]>(chatsData);\r\n  const [groups, setGroups] = useState<IGroup[]>(groupsData);\r\n  const [contacts, setContacts] = useState<IContact[]>(contactsData);\r\n\r\n  const openChat = (obj: IChat) => {\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.jid === obj.jid) {\r\n          item.unRead = 0;\r\n          item.messageLoaded = true;\r\n          setActiveChat(item);\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  const openGroup = (obj: IGroup) => {\r\n    let find = false;\r\n\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.jid === obj.jid) {\r\n          item.unRead = 0;\r\n          item.messageLoaded = true;\r\n          setActiveChat(item);\r\n          find = true;\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n\r\n    if (!find) {\r\n      let newChat = {\r\n        id: obj.jid.split(\"@\")[0],\r\n        jid: obj.jid,\r\n        name: obj.name,\r\n        profilePicture: obj.profilePicture,\r\n        messageLoaded: true,\r\n        unRead: 1,\r\n        chatType: ChatType.GROUP,\r\n        inputMessage: \"\",\r\n        isTyping: false,\r\n        messages: [],\r\n      };\r\n      setActiveChat(newChat);\r\n    }\r\n  };\r\n\r\n  const openContact = (obj: IContact) => {\r\n    let find = false;\r\n\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.jid === obj.jid) {\r\n          item.unRead = 0;\r\n          item.messageLoaded = true;\r\n          setActiveChat(item);\r\n          find = true;\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n\r\n    if (!find) {\r\n      let newChat = {\r\n        id: obj.id,\r\n        jid: obj.jid,\r\n        name: obj.name,\r\n        profilePicture: obj.profilePicture,\r\n        status: obj.status,\r\n        messageLoaded: true,\r\n        unRead: 1,\r\n        chatType: ChatType.USER,\r\n        inputMessage: \"\",\r\n        isTyping: false,\r\n        messages: [],\r\n      };\r\n      setActiveChat(newChat);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        showChat,\r\n        setShowChat,\r\n        activeChat,\r\n        setActiveChat,\r\n        openChat,\r\n        openGroup,\r\n        openContact,\r\n        chats,\r\n        setChats,\r\n        groups,\r\n        setGroups,\r\n        contacts,\r\n        setContacts,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useChat() {\r\n  return useContext(ChatContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}