{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _get from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { C } from \"../messages\";\nimport { NonInviteClientTransaction } from \"../transactions\";\nimport { UserAgentClient } from \"./user-agent-client\";\n/**\n * Re-SUBSCRIBE UAC.\n * @public\n */\n\nexport var ReSubscribeUserAgentClient = /*#__PURE__*/function (_UserAgentClient) {\n  _inherits(ReSubscribeUserAgentClient, _UserAgentClient);\n\n  var _super = _createSuper(ReSubscribeUserAgentClient);\n\n  function ReSubscribeUserAgentClient(dialog, delegate, options) {\n    var _this;\n\n    _classCallCheck(this, ReSubscribeUserAgentClient);\n\n    var message = dialog.createOutgoingRequestMessage(C.SUBSCRIBE, options);\n    _this = _super.call(this, NonInviteClientTransaction, dialog.userAgentCore, message, delegate);\n    _this.dialog = dialog;\n    return _this;\n  }\n\n  _createClass(ReSubscribeUserAgentClient, [{\n    key: \"waitNotifyStop\",\n    value: function waitNotifyStop() {\n      // TODO: Placeholder. Not utilized currently.\n      return;\n    }\n    /**\n     * Receive a response from the transaction layer.\n     * @param message - Incoming response message.\n     */\n\n  }, {\n    key: \"receiveResponse\",\n    value: function receiveResponse(message) {\n      if (message.statusCode && message.statusCode >= 200 && message.statusCode < 300) {\n        //  The \"Expires\" header field in a 200-class response to SUBSCRIBE\n        //  request indicates the actual duration for which the subscription will\n        //  remain active (unless refreshed).  The received value might be\n        //  smaller than the value indicated in the SUBSCRIBE request but cannot\n        //  be larger; see Section 4.2.1 for details.\n        // https://tools.ietf.org/html/rfc6665#section-4.1.2.1\n        var expires = message.getHeader(\"Expires\");\n\n        if (!expires) {\n          this.logger.warn(\"Expires header missing in a 200-class response to SUBSCRIBE\");\n        } else {\n          var subscriptionExpiresReceived = Number(expires);\n\n          if (this.dialog.subscriptionExpires > subscriptionExpiresReceived) {\n            this.dialog.subscriptionExpires = subscriptionExpiresReceived;\n          }\n        }\n      }\n\n      if (message.statusCode && message.statusCode >= 400 && message.statusCode < 700) {\n        // If a SUBSCRIBE request to refresh a subscription receives a 404, 405,\n        // 410, 416, 480-485, 489, 501, or 604 response, the subscriber MUST\n        // consider the subscription terminated.  (See [RFC5057] for further\n        // details and notes about the effect of error codes on dialogs and\n        // usages within dialog, such as subscriptions).  If the subscriber\n        // wishes to re-subscribe to the state, he does so by composing an\n        // unrelated initial SUBSCRIBE request with a freshly generated Call-ID\n        // and a new, unique \"From\" tag (see Section 4.1.2.1).\n        // https://tools.ietf.org/html/rfc6665#section-4.1.2.2\n        var errorCodes = [404, 405, 410, 416, 480, 481, 482, 483, 484, 485, 489, 501, 604];\n\n        if (errorCodes.includes(message.statusCode)) {\n          this.dialog.terminate();\n        } // If a SUBSCRIBE request to refresh a subscription fails with any error\n        // code other than those listed above, the original subscription is\n        // still considered valid for the duration of the most recently known\n        // \"Expires\" value as negotiated by the most recent successful SUBSCRIBE\n        // transaction, or as communicated by a NOTIFY request in its\n        // \"Subscription-State\" header field \"expires\" parameter.\n        // https://tools.ietf.org/html/rfc6665#section-4.1.2.2\n\n      }\n\n      _get(_getPrototypeOf(ReSubscribeUserAgentClient.prototype), \"receiveResponse\", this).call(this, message);\n    }\n  }]);\n\n  return ReSubscribeUserAgentClient;\n}(UserAgentClient);","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/core/user-agents/re-subscribe-user-agent-client.js"],"names":["C","NonInviteClientTransaction","UserAgentClient","ReSubscribeUserAgentClient","dialog","delegate","options","message","createOutgoingRequestMessage","SUBSCRIBE","userAgentCore","statusCode","expires","getHeader","logger","warn","subscriptionExpiresReceived","Number","subscriptionExpires","errorCodes","includes","terminate"],"mappings":";;;;;;AAAA,SAASA,CAAT,QAAkB,aAAlB;AACA,SAASC,0BAAT,QAA2C,iBAA3C;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA;AACA;AACA;AACA;;AACA,WAAaC,0BAAb;AAAA;;AAAA;;AACI,sCAAYC,MAAZ,EAAoBC,QAApB,EAA8BC,OAA9B,EAAuC;AAAA;;AAAA;;AACnC,QAAMC,OAAO,GAAGH,MAAM,CAACI,4BAAP,CAAoCR,CAAC,CAACS,SAAtC,EAAiDH,OAAjD,CAAhB;AACA,8BAAML,0BAAN,EAAkCG,MAAM,CAACM,aAAzC,EAAwDH,OAAxD,EAAiEF,QAAjE;AACA,UAAKD,MAAL,GAAcA,MAAd;AAHmC;AAItC;;AALL;AAAA;AAAA,qCAMqB;AACb;AACA;AACH;AACD;AACJ;AACA;AACA;;AAbA;AAAA;AAAA,oCAcoBG,OAdpB,EAc6B;AACrB,UAAIA,OAAO,CAACI,UAAR,IAAsBJ,OAAO,CAACI,UAAR,IAAsB,GAA5C,IAAmDJ,OAAO,CAACI,UAAR,GAAqB,GAA5E,EAAiF;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,YAAMC,OAAO,GAAGL,OAAO,CAACM,SAAR,CAAkB,SAAlB,CAAhB;;AACA,YAAI,CAACD,OAAL,EAAc;AACV,eAAKE,MAAL,CAAYC,IAAZ,CAAiB,6DAAjB;AACH,SAFD,MAGK;AACD,cAAMC,2BAA2B,GAAGC,MAAM,CAACL,OAAD,CAA1C;;AACA,cAAI,KAAKR,MAAL,CAAYc,mBAAZ,GAAkCF,2BAAtC,EAAmE;AAC/D,iBAAKZ,MAAL,CAAYc,mBAAZ,GAAkCF,2BAAlC;AACH;AACJ;AACJ;;AACD,UAAIT,OAAO,CAACI,UAAR,IAAsBJ,OAAO,CAACI,UAAR,IAAsB,GAA5C,IAAmDJ,OAAO,CAACI,UAAR,GAAqB,GAA5E,EAAiF;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAMQ,UAAU,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,CAAnB;;AACA,YAAIA,UAAU,CAACC,QAAX,CAAoBb,OAAO,CAACI,UAA5B,CAAJ,EAA6C;AACzC,eAAKP,MAAL,CAAYiB,SAAZ;AACH,SAb4E,CAc7E;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;;AACD,sGAAsBd,OAAtB;AACH;AAxDL;;AAAA;AAAA,EAAgDL,eAAhD","sourcesContent":["import { C } from \"../messages\";\nimport { NonInviteClientTransaction } from \"../transactions\";\nimport { UserAgentClient } from \"./user-agent-client\";\n/**\n * Re-SUBSCRIBE UAC.\n * @public\n */\nexport class ReSubscribeUserAgentClient extends UserAgentClient {\n    constructor(dialog, delegate, options) {\n        const message = dialog.createOutgoingRequestMessage(C.SUBSCRIBE, options);\n        super(NonInviteClientTransaction, dialog.userAgentCore, message, delegate);\n        this.dialog = dialog;\n    }\n    waitNotifyStop() {\n        // TODO: Placeholder. Not utilized currently.\n        return;\n    }\n    /**\n     * Receive a response from the transaction layer.\n     * @param message - Incoming response message.\n     */\n    receiveResponse(message) {\n        if (message.statusCode && message.statusCode >= 200 && message.statusCode < 300) {\n            //  The \"Expires\" header field in a 200-class response to SUBSCRIBE\n            //  request indicates the actual duration for which the subscription will\n            //  remain active (unless refreshed).  The received value might be\n            //  smaller than the value indicated in the SUBSCRIBE request but cannot\n            //  be larger; see Section 4.2.1 for details.\n            // https://tools.ietf.org/html/rfc6665#section-4.1.2.1\n            const expires = message.getHeader(\"Expires\");\n            if (!expires) {\n                this.logger.warn(\"Expires header missing in a 200-class response to SUBSCRIBE\");\n            }\n            else {\n                const subscriptionExpiresReceived = Number(expires);\n                if (this.dialog.subscriptionExpires > subscriptionExpiresReceived) {\n                    this.dialog.subscriptionExpires = subscriptionExpiresReceived;\n                }\n            }\n        }\n        if (message.statusCode && message.statusCode >= 400 && message.statusCode < 700) {\n            // If a SUBSCRIBE request to refresh a subscription receives a 404, 405,\n            // 410, 416, 480-485, 489, 501, or 604 response, the subscriber MUST\n            // consider the subscription terminated.  (See [RFC5057] for further\n            // details and notes about the effect of error codes on dialogs and\n            // usages within dialog, such as subscriptions).  If the subscriber\n            // wishes to re-subscribe to the state, he does so by composing an\n            // unrelated initial SUBSCRIBE request with a freshly generated Call-ID\n            // and a new, unique \"From\" tag (see Section 4.1.2.1).\n            // https://tools.ietf.org/html/rfc6665#section-4.1.2.2\n            const errorCodes = [404, 405, 410, 416, 480, 481, 482, 483, 484, 485, 489, 501, 604];\n            if (errorCodes.includes(message.statusCode)) {\n                this.dialog.terminate();\n            }\n            // If a SUBSCRIBE request to refresh a subscription fails with any error\n            // code other than those listed above, the original subscription is\n            // still considered valid for the duration of the most recently known\n            // \"Expires\" value as negotiated by the most recent successful SUBSCRIBE\n            // transaction, or as communicated by a NOTIFY request in its\n            // \"Subscription-State\" header field \"expires\" parameter.\n            // https://tools.ietf.org/html/rfc6665#section-4.1.2.2\n        }\n        super.receiveResponse(message);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}