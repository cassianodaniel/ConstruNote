{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport { useModal } from \"../contexts/ModalContext\";\nlet squadService;\nlet typingTimeout = new Map();\n\nconst SquadCommunicator = ({\n  children\n}) => {\n  var _squadService31;\n\n  const {\n    chats,\n    setChats,\n    activeChat,\n    replyMsg,\n    setReplyMsg,\n    setActiveChat,\n    forwardMessageList,\n    setForwardMessageList\n  } = useChat();\n  const {\n    contactsSearch,\n    setContactsSearched,\n    newFavorite,\n    setNewFavorite,\n    contacts,\n    setContacts,\n    setContactsOutsideUserContacts,\n    setToggleAddingContacts,\n    toggleAddingContacts,\n    checkedContacts,\n    setCheckedContacts,\n    removedContact,\n    setRemovedContact\n  } = useContact();\n  const {\n    user,\n    setUser,\n    changedUserData,\n    changedUserPassword,\n    setChangedUserPassword\n  } = useAuth();\n  const {\n    showModalForwardMessageTo,\n    setShowModalForwardMessageTo,\n    showModalAddContact\n  } = useModal();\n  const {\n    setGroups,\n    groups,\n    memberQuit,\n    groupIdOfLeaveRequest\n  } = useGroup();\n\n  const init = () => {\n    var _squadService;\n\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"b4c1fa651399a3eb63aee51777d3d508\",\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      email: \"romero2@digivox.com.br\",\n      user_name: \"ZZ Romero 2\",\n      expires_in: 2592000,\n      baseUrl: \"https://app.citrussquad.com/api/v1/\"\n    }));\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\n    (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.user.get(user => {\n      setUser(user);\n    });\n  };\n\n  const clearSendFile = (chatId, messageId) => {\n    setChats(chats.map(chat => {\n      if (chat.id === chatId) {\n        chat.messages = chat.messages.map(message => {\n          if (message.id === messageId) {\n            message.deliverStatus = DeliverStatus.QUEUED;\n            message.sendFile = undefined;\n          }\n\n          return message;\n        });\n      }\n\n      return chat;\n    }));\n  };\n\n  const onChatsChange = () => {// chats.forEach((chat) => {\n    // });\n  };\n\n  const onActiveChatChange = () => {\n    checkSendMessage(activeChat);\n    checkAttachedFiles(activeChat);\n    checkNewContact(activeChat); // checkTyping(activeChat)\n  }; // const checkTyping = (chat: IChat) => {\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\n  //     if (oldTimeoutData)\n  //       clearTimeout(oldTimeoutData.timeout)\n  //     else\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\n  //     const timeoutData = {\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\n  //       msgStr: `${chat.inputMessage}`\n  //     }\n  //     typingTimeout.set(chat.jid, timeoutData)\n  //   }\n  // }\n\n\n  const checkNewContact = cht => {\n    if (!cht.added) {\n      var _squadService2;\n\n      (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.contacts.add(cht, success => {\n        if (success) {\n          var _squadService3;\n\n          setChats(chats.map(chat => {\n            if (chat.jid === cht.jid) {\n              chat.added = true;\n            }\n\n            if (activeChat.jid === chat.jid) setActiveChat(chat);\n            return chat;\n          }));\n          (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.contacts.list(ctcs => {\n            setContacts(ctcs);\n          });\n        }\n      });\n    }\n  };\n\n  const onAddingContacts = () => {\n    let asynchronousFlag = 0;\n\n    if (checkedContacts && toggleAddingContacts) {\n      checkedContacts.forEach(ctt => {\n        if (!ctt.added) {\n          var _squadService4;\n\n          (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : _squadService4.contacts.addContacts(ctt, success => {\n            if (success) {\n              asynchronousFlag++;\n\n              if (checkedContacts.length === asynchronousFlag) {\n                var _squadService5;\n\n                (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.contacts.list(contacts => {\n                  setContacts(contacts);\n                  setCheckedContacts(undefined);\n                  setToggleAddingContacts(false);\n                });\n              }\n            }\n          });\n        }\n      });\n    }\n  };\n\n  const checkAttachedFiles = cht => {\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\n      var _squadService6;\n\n      (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : _squadService6.attachments.list(cht, attachments => {\n        if (attachments.length > 0) setActiveChat({ ...cht,\n          attachedFileList: attachments\n        });else setActiveChat({ ...cht,\n          attachedFileList: null\n        });\n      });\n    }\n  };\n  /* getMessageUserProfilePicture = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.profilePicture;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])\r\n        ?.profilePicture;\r\n    }\r\n  }; */\n\n\n  const checkSearchMessages = () => {\n    if (activeChat.messageLoaded) {\n      var _squadService7;\n\n      (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : _squadService7.messages.list(activeChat, messages => {\n        if (messages.length) {\n          setChats(chats.map(cht => {\n            if (cht.id === activeChat.id) {\n              messages.forEach(msg => {\n                if (!activeChat.messages.find(m => m.id === msg.id)) cht.messages.unshift(msg);\n              });\n              cht.messageLoaded = false;\n              setActiveChat(cht);\n            }\n\n            return cht;\n          }));\n        } else {\n          const chat = { ...activeChat,\n            messageLoaded: false\n          };\n          setActiveChat(chat);\n        }\n      });\n    }\n  };\n\n  const checkSendMessage = chat => {\n    chat.messages.forEach(msg => {\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\n        if (msg.sendFile && !replyMsg) {\n          var _squadService8, _squadService8$chat;\n\n          const files = [msg.sendFile];\n          clearSendFile(chat.id, msg.id);\n          (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : (_squadService8$chat = _squadService8.chat) === null || _squadService8$chat === void 0 ? void 0 : _squadService8$chat.sendFiles(chat, files, data => {\n            updateMessageFiles(data, chat, msg);\n          });\n        } else {\n          if (!msg.isForwardMessage && !replyMsg) {\n            sendMessage(chat, msg.message, msgId => updateMessage(msgId, chat, msg));\n          } else if (replyMsg) {\n            var _squadService9, _squadService9$chat;\n\n            const replyMsgCopy = { ...replyMsg\n            };\n            setReplyMsg(undefined);\n            (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : (_squadService9$chat = _squadService9.chat) === null || _squadService9$chat === void 0 ? void 0 : _squadService9$chat.replyMsg(chat, msg, replyMsgCopy, msgId => {\n              updateMessage(msgId, chat, msg, replyMsgCopy);\n            });\n          }\n        }\n      }\n    });\n  };\n\n  const updateMessageFiles = (data, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        const booleans = getUrlBooleans(data.url);\n        message.id = data.msgId;\n        message.fileUrl = data.url;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n        message.message = getFileName(data.url);\n        message.isFileMessage = booleans.isFileMessage;\n        message.isImageMessage = booleans.isImageMessage;\n        message.isVideoMessage = booleans.isVideoMessage;\n        message.isAudioMessage = booleans.isAudioMessage;\n      }\n\n      return message;\n    });\n    setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      const newChats = [];\n      chats.forEach(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n          newChats.unshift(cht);\n        } else {\n          newChats.push(cht);\n        }\n      });\n      setChats(newChats);\n    }\n  };\n\n  const updateMessage = (msgId, chat, msg, replyedMsg = undefined) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        message.id = msgId;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n\n        if (replyedMsg) {\n          var _squadService10, _squadService10$conta, _squadService11, _squadService11$user, _squadService11$user$, _squadService12, _squadService12$user, _squadService12$user$;\n\n          message.isReplyMessage = true;\n          message.replyedMessage = replyedMsg.message || replyedMsg.fileUrl;\n          message.replyedMessageId = replyedMsg.id;\n          message.replyedMessageTo = ((_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : (_squadService10$conta = _squadService10.contacts.getContacts().get(replyedMsg.fromUser.split(\"@\")[0])) === null || _squadService10$conta === void 0 ? void 0 : _squadService10$conta.name) || ((_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : (_squadService11$user = _squadService11.user) === null || _squadService11$user === void 0 ? void 0 : (_squadService11$user$ = _squadService11$user.user) === null || _squadService11$user$ === void 0 ? void 0 : _squadService11$user$.id) === replyedMsg.fromUser.split(\"@\")[0] ? (_squadService12 = squadService) === null || _squadService12 === void 0 ? void 0 : (_squadService12$user = _squadService12.user) === null || _squadService12$user === void 0 ? void 0 : (_squadService12$user$ = _squadService12$user.user) === null || _squadService12$user$ === void 0 ? void 0 : _squadService12$user$.name : \"Participant\";\n        }\n\n        if (isUrl(message.message)) {\n          const booleans = getUrlBooleans(message.message);\n          message.isFileMessage = booleans.isFileMessage;\n          message.isImageMessage = booleans.isImageMessage;\n          message.isAudioMessage = booleans.isAudioMessage;\n          message.isVideoMessage = booleans.isVideoMessage;\n          message.fileUrl = message.message;\n        }\n      }\n\n      return message;\n    });\n    if (activeChat.jid === newChat.jid) setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      const newChats = [];\n      chats.forEach(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n          newChats.unshift(cht);\n        } else {\n          newChats.push(cht);\n        }\n      });\n      setChats(newChats);\n    }\n  };\n\n  const forwardMessage = () => {\n    if (forwardMessageList && showModalForwardMessageTo) {\n      const ctcs = [...forwardMessageList];\n      const message = { ...showModalForwardMessageTo\n      };\n      setForwardMessageList(undefined);\n      setShowModalForwardMessageTo(undefined);\n      const chatsFinded = [];\n      const oldChats = [...chats.map(chat => {\n        return { ...chat\n        };\n      })];\n      ctcs === null || ctcs === void 0 ? void 0 : ctcs.forEach((ctc, i) => {\n        const cht = oldChats.find(cht => cht.jid === ctc.jid);\n\n        if (cht) {\n          var _squadService13, _squadService13$chat;\n\n          const msg = { ...message,\n            id: `${cht.messages.length + 1}`,\n            userName: user.name,\n            fromUser: user.id,\n            toUser: ctc.jid.split(\"@\")[0],\n            message: message.fileUrl || message.message,\n            deliverStatus: DeliverStatus.QUEUED,\n            isForwardMessage: true\n          };\n          (_squadService13 = squadService) === null || _squadService13 === void 0 ? void 0 : (_squadService13$chat = _squadService13.chat) === null || _squadService13$chat === void 0 ? void 0 : _squadService13$chat.forwardMessage(cht, msg, msgId => {\n            msg.id = msgId;\n            cht.messages.push(msg);\n            chatsFinded.push(cht);\n          });\n        }\n      });\n      const newChats = oldChats.map(chat => chatsFinded.find(cht => cht.id === chat.id) || chat);\n      const ctcsNotInChat = ctcs.filter(ctc => !newChats.find(cht => ctc.jid === cht.jid));\n      ctcsNotInChat.forEach((ctc, i) => {\n        var _squadService14, _squadService14$chat;\n\n        const chat = {\n          id: ctc.jid.split(\"@\")[0],\n          jid: ctc.jid,\n          name: ctc.name,\n          profilePicture: ctc.profilePicture,\n          status: ctc.status || undefined,\n          unRead: 0,\n          chatType: ctc.jid.includes(\"@conference.\") ? ChatType.GROUP : ChatType.USER,\n          inputMessage: \"\",\n          messageLoaded: false,\n          isTyping: false,\n          messages: [],\n          email: ctc.email || undefined,\n          favorite: ctc.favorite,\n          added: ctc.added\n        };\n        const newMessage = { ...message,\n          id: `${1}`,\n          userName: user.name,\n          fromUser: user.id,\n          toUser: ctc.jid.split(\"@\")[0],\n          deliverStatus: DeliverStatus.QUEUED,\n          isForwardMessage: true\n        };\n        (_squadService14 = squadService) === null || _squadService14 === void 0 ? void 0 : (_squadService14$chat = _squadService14.chat) === null || _squadService14$chat === void 0 ? void 0 : _squadService14$chat.forwardMessage(chat, newMessage, msgId => {\n          newMessage.id = msgId;\n          chat.messages.push(newMessage);\n          newChats.unshift(chat);\n        });\n      });\n      setChats(newChats);\n    }\n  };\n\n  const onChangeStatus = () => {\n    var _squadService15, _squadService15$chat;\n\n    if (((_squadService15 = squadService) === null || _squadService15 === void 0 ? void 0 : (_squadService15$chat = _squadService15.chat) === null || _squadService15$chat === void 0 ? void 0 : _squadService15$chat.chat.client.status) === \"online\") {\n      var _squadService16, _squadService16$chat;\n\n      (_squadService16 = squadService) === null || _squadService16 === void 0 ? void 0 : (_squadService16$chat = _squadService16.chat) === null || _squadService16$chat === void 0 ? void 0 : _squadService16$chat.changeStatus(user.status);\n    }\n  };\n\n  const onSearchContacts = () => {\n    if (contactsSearch.length > 2) {\n      var _squadService17;\n\n      (_squadService17 = squadService) === null || _squadService17 === void 0 ? void 0 : _squadService17.contacts.search(contactsSearch, searchList => {\n        setContactsSearched(searchList);\n      });\n    } else {\n      setContactsSearched(undefined);\n    }\n  };\n\n  const onSearchContactsOutsideUserContacts = () => {\n    var _squadService18;\n\n    (_squadService18 = squadService) === null || _squadService18 === void 0 ? void 0 : _squadService18.contacts.getContactsOutsideUserLists(contacts => {\n      if (contacts) {\n        setContactsOutsideUserContacts(contacts);\n      }\n    });\n  };\n\n  const onRemovingContacts = () => {\n    if (removedContact) {\n      if (removedContact.added) {\n        var _squadService19;\n\n        (_squadService19 = squadService) === null || _squadService19 === void 0 ? void 0 : _squadService19.contacts.removeContacts(removedContact, success => {\n          if (success) {\n            var _squadService20;\n\n            removedContact.added = false;\n            (_squadService20 = squadService) === null || _squadService20 === void 0 ? void 0 : _squadService20.contacts.list(contacts => {\n              setContacts(contacts);\n              setRemovedContact(undefined);\n            });\n          }\n\n          ;\n        });\n      }\n\n      ;\n    }\n\n    ;\n  };\n\n  const onLeavingGroup = () => {\n    if (memberQuit) {\n      var _squadService21;\n\n      (_squadService21 = squadService) === null || _squadService21 === void 0 ? void 0 : _squadService21.groups.leftingGroup({\n        groupId: groupIdOfLeaveRequest,\n        memberId: memberQuit.userId\n      }, success => {\n        if (success) {\n          var _squadService22;\n\n          (_squadService22 = squadService) === null || _squadService22 === void 0 ? void 0 : _squadService22.groups.list(groups => {\n            groups.forEach(grp => {\n              if (grp.jid = groupIdOfLeaveRequest) {\n                grp.members.forEach(mb => {\n                  //forEach pode ser substituído por find?\n                  if (mb.userId === memberQuit.userId) {\n                    let indexOfMemberToLeave = grp.members.indexOf(mb);\n                    let newArrayOfGroupMembers = grp.members.splice(indexOfMemberToLeave, indexOfMemberToLeave + 1);\n                    grp.members = newArrayOfGroupMembers;\n                  }\n                });\n              }\n\n              ;\n            });\n          });\n        }\n\n        ;\n      });\n    }\n\n    ;\n  };\n\n  useEffect(onChatsChange, [chats]);\n  useEffect(onNewFavorite, [newFavorite]);\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\n  useEffect(onActiveChatChange, [activeChat]);\n  useEffect(onUserDataChange, [changedUserData]);\n  useEffect(onUserPasswordChange, [changedUserPassword]);\n  useEffect(onChangeStatus, [user.status]);\n  useEffect(forwardMessage, [forwardMessageList]);\n  useEffect(onSearchContacts, [contactsSearch]);\n  useEffect(onSearchContactsOutsideUserContacts, [showModalAddContact]);\n  useEffect(onAddingContacts, [toggleAddingContacts]);\n  useEffect(onRemovingContacts, [removedContact]);\n  useEffect(onLeavingGroup, [isMemberLeaving]);\n\n  function onUserPasswordChange() {\n    if (changedUserPassword) {\n      var _squadService23;\n\n      (_squadService23 = squadService) === null || _squadService23 === void 0 ? void 0 : _squadService23.user.changePassword(changedUserPassword, password => {\n        if (password) {\n          setChangedUserPassword({\n            oldPassword: \"\",\n            newPassword: \"\"\n          });\n        }\n      });\n    }\n  }\n\n  function onUserDataChange() {\n    if (changedUserData) {\n      var _squadService24;\n\n      (_squadService24 = squadService) === null || _squadService24 === void 0 ? void 0 : _squadService24.user.changeUserData(changedUserData, chgd => {\n        if (chgd) {\n          setUser({ ...user,\n            email: changedUserData.email,\n            name: changedUserData.name\n          });\n        }\n      });\n    }\n  }\n\n  function onNewFavorite() {\n    if (newFavorite) {\n      var _squadService25;\n\n      const newFavoriteLoad = { ...newFavorite\n      };\n      (_squadService25 = squadService) === null || _squadService25 === void 0 ? void 0 : _squadService25.contacts.setFavorite(newFavorite, favorite => {\n        if (favorite) {\n          setChats(chats.map(cht => {\n            if (cht.jid === newFavoriteLoad.jid) {\n              cht.favorite = !newFavoriteLoad.favorite;\n            }\n\n            return cht;\n          }));\n          setGroups(groups.map(grp => {\n            if (grp.jid === newFavoriteLoad.jid) {\n              return { ...grp,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return grp;\n          }));\n          setContacts(contacts.map(ctt => {\n            if (ctt.jid === newFavoriteLoad.jid) {\n              return { ...ctt,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return ctt;\n          }));\n        }\n      });\n      setNewFavorite(undefined);\n    }\n  }\n\n  function chatCommunicatorSubscribe(event, data) {\n    var _squadService26;\n\n    switch (event) {\n      case Events.ONLINE:\n        (_squadService26 = squadService) === null || _squadService26 === void 0 ? void 0 : _squadService26.chats.list(receivedChats => {\n          var _squadService27, _squadService29;\n\n          const chats = [];\n          receivedChats.forEach(cht => {\n            if (!chats.find(chat => chat.id === cht.id)) {\n              chats.push(cht);\n            }\n          });\n          setChats(chats); //populating groups\n\n          (_squadService27 = squadService) === null || _squadService27 === void 0 ? void 0 : _squadService27.groups.list(groups => {\n            var _squadService28, _squadService28$chat;\n\n            setGroups(groups); //Joining Groups Rooms in XMPP\n\n            (_squadService28 = squadService) === null || _squadService28 === void 0 ? void 0 : (_squadService28$chat = _squadService28.chat) === null || _squadService28$chat === void 0 ? void 0 : _squadService28$chat.joinGroups(groups.map(group => group.jid));\n          }); //populating contacts\n\n          (_squadService29 = squadService) === null || _squadService29 === void 0 ? void 0 : _squadService29.contacts.list(contacts => setContacts(contacts)); //populating chat's with messages\n          // receivedChats.forEach((chat) => {\n          //   squadService?.messages.list(chat, (messages) => {\n          //     const chatWithMessages = { ...chat };\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\n          //       messages\n          //     );\n          //     setChats([\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\n          //       chatWithMessages,\n          //     ]);\n          //   });\n          // });\n        });\n        break;\n\n      case Events.MESSAGE:\n        if (data.fromUser === user.jid) break;\n        let find = false;\n        let newChats = [];\n        chats.forEach(chat => {\n          if (data.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || data.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\n            find = true;\n            if (!chat.messages.filter(msg => msg.id === data.id)[0]) chat.messages.push(data);\n\n            if (chat.id === activeChat.id) {\n              let chatTemporary = { ...chat\n              };\n              setActiveChat(chatTemporary);\n            } else {\n              chat.unRead++;\n            }\n\n            newChats.unshift(chat);\n          } else {\n            newChats.push(chat);\n          }\n        });\n\n        if (!find) {\n          var _squadService30;\n\n          let newChat = {};\n          (_squadService30 = squadService) === null || _squadService30 === void 0 ? void 0 : _squadService30.contacts.list(listContacts => {\n            listContacts.forEach(c => {\n              if (c.jid === data.fromUser) {\n                newChat = {\n                  id: c.id,\n                  jid: c.jid,\n                  name: c.name,\n                  profilePicture: c.profilePicture,\n                  status: c.status,\n                  unRead: 1,\n                  chatType: ChatType.USER,\n                  inputMessage: \"\",\n                  isTyping: false,\n                  messages: [],\n                  favorite: c.favorite,\n                  added: c.added\n                };\n                newChat.messages.push(data);\n                newChats.unshift(newChat);\n              }\n            });\n          });\n        }\n\n        setChats(newChats);\n        break;\n\n      case Events.RECEIVED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.deliverStatus = DeliverStatus.DELIVERED;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.DISPLAYED:\n        setChats(chats.map(chat => {\n          chat.messages = chat.messages.map(message => {\n            if (message.id === data.id) {\n              message.readStatus = ReadStatus.READ;\n            }\n\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.COMPOSING:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = true;\n            if (activeChat.jid === data) setActiveChat(chat);\n            deleteTypingTimeout(chat.jid);\n            setTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.ACTIVE:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = false;\n\n            if (activeChat.jid === data) {\n              let chatUpdate = { ...chat\n              };\n              setActiveChat(chatUpdate);\n            }\n\n            deleteTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.PRESENCE:\n        setChats(chats.map(cht => {\n          if (cht.jid === data.from.split(\"/\")[0] && !cht.jid.includes(\"@conference.\")) {\n            cht.status = data.status;\n          }\n\n          return cht;\n        }));\n        setContacts(contacts.map(ctc => {\n          if (ctc.jid === data.from.split(\"/\")[0] && !ctc.jid.includes(\"@conference.\")) {\n            ctc.status = data.status;\n          }\n\n          return ctc;\n        }));\n        break;\n    }\n  }\n\n  const deleteTypingTimeout = jid => {\n    var _typingTimeout$get;\n\n    clearTimeout(((_typingTimeout$get = typingTimeout.get(jid)) === null || _typingTimeout$get === void 0 ? void 0 : _typingTimeout$get.timeout) || setTimeout(() => {}, 1));\n    typingTimeout.delete(jid);\n  };\n\n  const setTypingTimeout = jid => {\n    const timeoutData = {\n      msgStr: \"\",\n      timeout: setTimeout(() => {\n        setChats(chats.map(cht => {\n          if (cht.jid === jid) {\n            cht.isTyping = false;\n            if (activeChat.jid === jid) setActiveChat(cht);\n          }\n\n          return cht;\n        }));\n      }, 20000)\n    };\n    typingTimeout.set(jid, timeoutData);\n  };\n\n  (_squadService31 = squadService) === null || _squadService31 === void 0 ? void 0 : _squadService31.updateSubscribeFunction(chatCommunicatorSubscribe); // Comentado para evitar warnings no console enquanto não é usado\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\n  //     squadService?.groups.list((groups) => {\n  //       setGroups(groups);\n  //       callback(true);\n  //     });\n  //   });\n  // }\n\n  function sendMessage(chat, message, callback) {\n    var _squadService32, _squadService32$chat;\n\n    (_squadService32 = squadService) === null || _squadService32 === void 0 ? void 0 : (_squadService32$chat = _squadService32.chat) === null || _squadService32$chat === void 0 ? void 0 : _squadService32$chat.chat.sendMessage(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message, callback);\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","DeliverStatus","XMPPChatType","getFileName","getUrlBooleans","isUrl","ReadStatus","useGroup","useContact","useModal","squadService","typingTimeout","Map","children","chats","setChats","activeChat","replyMsg","setReplyMsg","setActiveChat","forwardMessageList","setForwardMessageList","contactsSearch","setContactsSearched","newFavorite","setNewFavorite","contacts","setContacts","setContactsOutsideUserContacts","setToggleAddingContacts","toggleAddingContacts","checkedContacts","setCheckedContacts","removedContact","setRemovedContact","user","setUser","changedUserData","changedUserPassword","setChangedUserPassword","showModalForwardMessageTo","setShowModalForwardMessageTo","showModalAddContact","setGroups","groups","memberQuit","groupIdOfLeaveRequest","init","localStorage","setItem","JSON","stringify","access_token","user_id","email","user_name","expires_in","baseUrl","getInstance","chatCommunicatorSubscribe","get","clearSendFile","chatId","messageId","map","chat","id","messages","message","deliverStatus","QUEUED","sendFile","undefined","onChatsChange","onActiveChatChange","checkSendMessage","checkAttachedFiles","checkNewContact","cht","added","add","success","jid","list","ctcs","onAddingContacts","asynchronousFlag","forEach","ctt","addContacts","length","attachedFileList","attachments","checkSearchMessages","messageLoaded","msg","find","m","unshift","SENDING","files","sendFiles","data","updateMessageFiles","isForwardMessage","sendMessage","msgId","updateMessage","replyMsgCopy","newChat","booleans","url","fileUrl","time","Date","toISOString","isFileMessage","isImageMessage","isVideoMessage","isAudioMessage","filter","newChats","push","replyedMsg","isReplyMessage","replyedMessage","replyedMessageId","replyedMessageTo","getContacts","fromUser","split","name","forwardMessage","chatsFinded","oldChats","ctc","i","userName","toUser","ctcsNotInChat","profilePicture","status","unRead","chatType","includes","GROUP","USER","inputMessage","isTyping","favorite","newMessage","onChangeStatus","client","changeStatus","onSearchContacts","search","searchList","onSearchContactsOutsideUserContacts","getContactsOutsideUserLists","onRemovingContacts","removeContacts","onLeavingGroup","leftingGroup","groupId","memberId","userId","grp","members","mb","indexOfMemberToLeave","indexOf","newArrayOfGroupMembers","splice","onNewFavorite","onUserDataChange","onUserPasswordChange","isMemberLeaving","changePassword","password","oldPassword","newPassword","changeUserData","chgd","newFavoriteLoad","setFavorite","event","ONLINE","receivedChats","joinGroups","group","MESSAGE","chatTemporary","listContacts","c","RECEIVED","DELIVERED","DISPLAYED","readStatus","READ","COMPOSING","deleteTypingTimeout","setTypingTimeout","ACTIVE","chatUpdate","PRESENCE","from","clearTimeout","timeout","setTimeout","delete","timeoutData","msgStr","set","updateSubscribeFunction","callback","GROUPCHAT","CHAT"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\n\r\nimport { Events, SendImageCallbackReturn } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\r\nimport { SendMessageCallback } from \"./types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport { useModal } from \"../contexts/ModalContext\";\r\nimport IContact from \"../alias/IContact\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport { forEach } from \"lodash\";\r\nimport { LeaveGroupRequest } from \"@digivox/apicommunicator/dist/types/types/types\";\r\n//import { callbackify } from \"util\";\r\n\r\n// import IContact from \"../alias/IContact\";\r\n// Comentado para Evitar Warnings no console\r\n// interface CreateGroupCallback {\r\n//   (groupCreated: boolean): void;\r\n// }\r\ninterface TypingTimeoutData {\r\n  timeout: NodeJS.Timeout;\r\n  msgStr: string;\r\n}\r\nlet squadService: SquadService | undefined;\r\nlet typingTimeout: Map<string, TypingTimeoutData> = new Map<\r\n  string,\r\n  TypingTimeoutData\r\n>();\r\n\r\nconst SquadCommunicator: React.FC = ({ children }) => {\r\n  const {\r\n    chats,\r\n    setChats,\r\n    activeChat,\r\n    replyMsg,\r\n    setReplyMsg,\r\n    setActiveChat,\r\n    forwardMessageList,\r\n    setForwardMessageList,\r\n  } = useChat();\r\n  const {\r\n    contactsSearch,\r\n    setContactsSearched,\r\n    newFavorite,\r\n    setNewFavorite,\r\n    contacts,\r\n    setContacts,\r\n    setContactsOutsideUserContacts,\r\n    setToggleAddingContacts,\r\n    toggleAddingContacts,\r\n    checkedContacts,\r\n    setCheckedContacts,\r\n    removedContact,\r\n    setRemovedContact\r\n  } = useContact();\r\n  const {\r\n    user,\r\n    setUser,\r\n    changedUserData,\r\n    changedUserPassword,\r\n    setChangedUserPassword,\r\n  } = useAuth();\r\n  const {\r\n    showModalForwardMessageTo,\r\n    setShowModalForwardMessageTo,\r\n    showModalAddContact,\r\n  } = useModal();\r\n  const { setGroups, groups, memberQuit, groupIdOfLeaveRequest } = useGroup();\r\n\r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"b4c1fa651399a3eb63aee51777d3d508\",\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        email: \"romero2@digivox.com.br\",\r\n        user_name: \"ZZ Romero 2\",\r\n        expires_in: 2592000,\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n      })\r\n    );\r\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\r\n    squadService?.user.get((user: IUser) => {\r\n      setUser(user);\r\n    });\r\n  };\r\n\r\n  const clearSendFile = (chatId: string, messageId: string) => {\r\n    setChats(\r\n      chats.map((chat) => {\r\n        if (chat.id === chatId) {\r\n          chat.messages = chat.messages.map((message) => {\r\n            if (message.id === messageId) {\r\n              message.deliverStatus = DeliverStatus.QUEUED;\r\n              message.sendFile = undefined;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return chat;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onChatsChange = () => {\r\n    // chats.forEach((chat) => {\r\n    // });\r\n  };\r\n  const onActiveChatChange = () => {\r\n    checkSendMessage(activeChat);\r\n    checkAttachedFiles(activeChat);\r\n    checkNewContact(activeChat);\r\n    // checkTyping(activeChat)\r\n  };\r\n  // const checkTyping = (chat: IChat) => {\r\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\r\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\r\n  //     if (oldTimeoutData)\r\n  //       clearTimeout(oldTimeoutData.timeout)\r\n  //     else\r\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\r\n  //     const timeoutData = {\r\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\r\n  //       msgStr: `${chat.inputMessage}`\r\n  //     }\r\n  //     typingTimeout.set(chat.jid, timeoutData)\r\n  //   }\r\n  // }\r\n  const checkNewContact = (cht: IChat) => {\r\n    if (!cht.added) {\r\n      squadService?.contacts.add(cht, (success: boolean) => {\r\n        if (success) {\r\n          setChats(\r\n            chats.map((chat) => {\r\n              if (chat.jid === cht.jid) {\r\n                chat.added = true;\r\n              }\r\n              if (activeChat.jid === chat.jid) setActiveChat(chat);\r\n              return chat;\r\n            })\r\n          );\r\n          squadService?.contacts.list((ctcs) => {\r\n            setContacts(ctcs);\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const onAddingContacts = () => {\r\n    let asynchronousFlag = 0;\r\n    if (checkedContacts && toggleAddingContacts) {\r\n      checkedContacts.forEach((ctt) => {\r\n        if (!ctt.added) {\r\n          squadService?.contacts.addContacts(ctt, (success: boolean) => {\r\n            if (success) {\r\n              asynchronousFlag++;\r\n              if (checkedContacts.length === asynchronousFlag) {\r\n                squadService?.contacts.list((contacts) => {\r\n                  setContacts(contacts);\r\n                  setCheckedContacts(undefined);\r\n                  setToggleAddingContacts(false);\r\n                });\r\n              }\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkAttachedFiles = (cht: IChat) => {\r\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\r\n      squadService?.attachments.list(cht, (attachments) => {\r\n        if (attachments.length > 0)\r\n          setActiveChat({ ...cht, attachedFileList: attachments });\r\n        else setActiveChat({ ...cht, attachedFileList: null });\r\n      });\r\n    }\r\n  };\r\n\r\n  /* getMessageUserProfilePicture = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.profilePicture;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])\r\n        ?.profilePicture;\r\n    }\r\n  }; */\r\n\r\n  const checkSearchMessages = () => {\r\n    if (activeChat.messageLoaded) {\r\n      squadService?.messages.list(activeChat, (messages) => {\r\n        if (messages.length) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.id === activeChat.id) {\r\n                messages.forEach((msg) => {\r\n                  if (!activeChat.messages.find((m) => m.id === msg.id))\r\n                    cht.messages.unshift(msg);\r\n                });\r\n                cht.messageLoaded = false;\r\n                setActiveChat(cht);\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n        } else {\r\n          const chat = { ...activeChat, messageLoaded: false };\r\n          setActiveChat(chat);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkSendMessage = (chat: IChat) => {\r\n    chat.messages.forEach((msg) => {\r\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\r\n        if (msg.sendFile && !replyMsg) {\r\n          const files = [msg.sendFile];\r\n          clearSendFile(chat.id, msg.id);\r\n          squadService?.chat?.sendFiles(\r\n            chat,\r\n            files,\r\n            (data: SendImageCallbackReturn) => {\r\n              updateMessageFiles(data, chat, msg);\r\n            }\r\n          );\r\n        } else {\r\n          if (!msg.isForwardMessage && !replyMsg) {\r\n            sendMessage(chat, msg.message, (msgId) =>\r\n              updateMessage(msgId, chat, msg)\r\n            );\r\n          } else if (replyMsg) {\r\n            const replyMsgCopy = { ...replyMsg };\r\n            setReplyMsg(undefined);\r\n            squadService?.chat?.replyMsg(chat, msg, replyMsgCopy, (msgId) => {\r\n              updateMessage(msgId, chat, msg, replyMsgCopy);\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const updateMessageFiles = (\r\n    data: SendImageCallbackReturn,\r\n    chat: IChat,\r\n    msg: IMessage\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        const booleans = getUrlBooleans(data.url);\r\n        message.id = data.msgId;\r\n        message.fileUrl = data.url;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        message.message = getFileName(data.url);\r\n        message.isFileMessage = booleans.isFileMessage;\r\n        message.isImageMessage = booleans.isImageMessage;\r\n        message.isVideoMessage = booleans.isVideoMessage;\r\n        message.isAudioMessage = booleans.isAudioMessage;\r\n      }\r\n      return message;\r\n    });\r\n    setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      const newChats: IChat[] = [];\r\n      chats.forEach((cht) => {\r\n        if (cht.id === chat.id) {\r\n          cht.messages = newChat.messages;\r\n          newChats.unshift(cht);\r\n        } else {\r\n          newChats.push(cht);\r\n        }\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const updateMessage = (\r\n    msgId: string,\r\n    chat: IChat,\r\n    msg: IMessage,\r\n    replyedMsg: IMessage | undefined = undefined\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        message.id = msgId;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        if (replyedMsg) {\r\n          message.isReplyMessage = true;\r\n          message.replyedMessage = replyedMsg.message || replyedMsg.fileUrl;\r\n          message.replyedMessageId = replyedMsg.id;\r\n          message.replyedMessageTo =\r\n            squadService?.contacts\r\n              .getContacts()\r\n              .get(replyedMsg.fromUser.split(\"@\")[0])?.name ||\r\n            squadService?.user?.user?.id === replyedMsg.fromUser.split(\"@\")[0]\r\n              ? squadService?.user?.user?.name\r\n              : \"Participant\";\r\n        }\r\n        if (isUrl(message.message)) {\r\n          const booleans = getUrlBooleans(message.message);\r\n          message.isFileMessage = booleans.isFileMessage;\r\n          message.isImageMessage = booleans.isImageMessage;\r\n          message.isAudioMessage = booleans.isAudioMessage;\r\n          message.isVideoMessage = booleans.isVideoMessage;\r\n          message.fileUrl = message.message;\r\n        }\r\n      }\r\n      return message;\r\n    });\r\n    if (activeChat.jid === newChat.jid) setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      const newChats: IChat[] = [];\r\n      chats.forEach((cht) => {\r\n        if (cht.id === chat.id) {\r\n          cht.messages = newChat.messages;\r\n          newChats.unshift(cht);\r\n        } else {\r\n          newChats.push(cht);\r\n        }\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const forwardMessage = () => {\r\n    if (forwardMessageList && showModalForwardMessageTo) {\r\n      const ctcs = [...forwardMessageList];\r\n      const message = { ...showModalForwardMessageTo };\r\n      setForwardMessageList(undefined);\r\n      setShowModalForwardMessageTo(undefined);\r\n      const chatsFinded: IChat[] = [];\r\n      const oldChats = [\r\n        ...chats.map((chat) => {\r\n          return { ...chat };\r\n        }),\r\n      ];\r\n      ctcs?.forEach((ctc, i) => {\r\n        const cht = oldChats.find((cht) => cht.jid === ctc.jid);\r\n        if (cht) {\r\n          const msg = {\r\n            ...message,\r\n            id: `${cht.messages.length + 1}`,\r\n            userName: user.name,\r\n            fromUser: user.id,\r\n            toUser: ctc.jid.split(\"@\")[0],\r\n            message: message.fileUrl || message.message,\r\n            deliverStatus: DeliverStatus.QUEUED,\r\n            isForwardMessage: true,\r\n          };\r\n          squadService?.chat?.forwardMessage(cht, msg, (msgId) => {\r\n            msg.id = msgId;\r\n            cht.messages.push(msg);\r\n            chatsFinded.push(cht);\r\n          });\r\n        }\r\n      });\r\n      const newChats = oldChats.map(\r\n        (chat) => chatsFinded.find((cht) => cht.id === chat.id) || chat\r\n      );\r\n      const ctcsNotInChat: (IContact | IGroup)[] = ctcs.filter(\r\n        (ctc) => !newChats.find((cht) => ctc.jid === cht.jid)\r\n      );\r\n      ctcsNotInChat.forEach((ctc, i) => {\r\n        const chat = {\r\n          id: ctc.jid.split(\"@\")[0],\r\n          jid: ctc.jid,\r\n          name: ctc.name,\r\n          profilePicture: ctc.profilePicture,\r\n          status: (ctc as IContact).status || undefined,\r\n          unRead: 0,\r\n          chatType: ctc.jid.includes(\"@conference.\")\r\n            ? ChatType.GROUP\r\n            : ChatType.USER,\r\n          inputMessage: \"\",\r\n          messageLoaded: false,\r\n          isTyping: false,\r\n          messages: [] as IMessage[],\r\n          email: (ctc as IContact).email || undefined,\r\n          favorite: ctc.favorite,\r\n          added: ctc.added,\r\n        };\r\n        const newMessage: IMessage = {\r\n          ...message,\r\n          id: `${1}`,\r\n          userName: user.name,\r\n          fromUser: user.id,\r\n          toUser: ctc.jid.split(\"@\")[0],\r\n          deliverStatus: DeliverStatus.QUEUED,\r\n          isForwardMessage: true,\r\n        };\r\n        squadService?.chat?.forwardMessage(chat, newMessage, (msgId) => {\r\n          newMessage.id = msgId;\r\n          chat.messages.push(newMessage);\r\n          newChats.unshift(chat);\r\n        });\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const onChangeStatus = () => {\r\n    if (squadService?.chat?.chat.client.status === \"online\") {\r\n      squadService?.chat?.changeStatus(user.status);\r\n    }\r\n  };\r\n  const onSearchContacts = () => {\r\n    if (contactsSearch.length > 2) {\r\n      squadService?.contacts.search(contactsSearch, (searchList) => {\r\n        setContactsSearched(searchList);\r\n      });\r\n    } else {\r\n      setContactsSearched(undefined);\r\n    }\r\n  };\r\n\r\n  const onSearchContactsOutsideUserContacts = () => {\r\n    squadService?.contacts.getContactsOutsideUserLists((contacts) => {\r\n      if (contacts) {\r\n        setContactsOutsideUserContacts(contacts);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onRemovingContacts = () => {\r\n    if(removedContact){\r\n      if(removedContact.added){\r\n        squadService?.contacts.removeContacts(removedContact, (success: boolean) => {\r\n          if(success){\r\n            removedContact.added = false;\r\n            squadService?.contacts.list((contacts) => {\r\n              setContacts(contacts);\r\n              setRemovedContact(undefined);\r\n            });\r\n          };\r\n        });\r\n      };\r\n    };\r\n  }\r\n\r\n  const onLeavingGroup = () => {\r\n    if(memberQuit){\r\n      squadService?.groups.leftingGroup({groupId: groupIdOfLeaveRequest, memberId: memberQuit.userId}, (success: boolean) => {\r\n        if(success){\r\n          squadService?.groups.list((groups) => {\r\n            groups.forEach((grp) => {\r\n              if(grp.jid = groupIdOfLeaveRequest){\r\n                grp.members.forEach((mb) => { //forEach pode ser substituído por find?\r\n                  if(mb.userId === memberQuit.userId){\r\n                    let indexOfMemberToLeave = grp.members.indexOf(mb);\r\n                    let newArrayOfGroupMembers = grp.members.splice(indexOfMemberToLeave, indexOfMemberToLeave+1);\r\n                    grp.members = newArrayOfGroupMembers;\r\n                  }\r\n                });\r\n              };\r\n            });\r\n          });\r\n        };\r\n      });\r\n    };\r\n  };\r\n \r\n  useEffect(onChatsChange, [chats]);\r\n  useEffect(onNewFavorite, [newFavorite]);\r\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\r\n  useEffect(onActiveChatChange, [activeChat]);\r\n  useEffect(onUserDataChange, [changedUserData]);\r\n  useEffect(onUserPasswordChange, [changedUserPassword]);\r\n  useEffect(onChangeStatus, [user.status]);\r\n  useEffect(forwardMessage, [forwardMessageList]);\r\n  useEffect(onSearchContacts, [contactsSearch]);\r\n  useEffect(onSearchContactsOutsideUserContacts, [showModalAddContact]);\r\n  useEffect(onAddingContacts, [toggleAddingContacts]);\r\n  useEffect(onRemovingContacts, [removedContact]);\r\n  useEffect(onLeavingGroup, [isMemberLeaving]);\r\n\r\n  function onUserPasswordChange() {\r\n    if (changedUserPassword) {\r\n      squadService?.user.changePassword(changedUserPassword, (password) => {\r\n        if (password) {\r\n          setChangedUserPassword({ oldPassword: \"\", newPassword: \"\" });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onUserDataChange() {\r\n    if (changedUserData) {\r\n      squadService?.user.changeUserData(changedUserData, (chgd) => {\r\n        if (chgd) {\r\n          setUser({\r\n            ...user,\r\n            email: changedUserData.email,\r\n            name: changedUserData.name,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onNewFavorite() {\r\n    if (newFavorite) {\r\n      const newFavoriteLoad = { ...newFavorite };\r\n      squadService?.contacts.setFavorite(newFavorite, (favorite) => {\r\n        if (favorite) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.jid === newFavoriteLoad.jid) {\r\n                cht.favorite = !newFavoriteLoad.favorite;\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n          setGroups(\r\n            groups.map((grp) => {\r\n              if (grp.jid === newFavoriteLoad.jid) {\r\n                return {\r\n                  ...grp,\r\n                  favorite: !newFavoriteLoad.favorite,\r\n                };\r\n              }\r\n              return grp;\r\n            })\r\n          );\r\n          setContacts(\r\n            contacts.map((ctt) => {\r\n              if (ctt.jid === newFavoriteLoad.jid) {\r\n                return {\r\n                  ...ctt,\r\n                  favorite: !newFavoriteLoad.favorite,\r\n                };\r\n              }\r\n              return ctt;\r\n            })\r\n          );\r\n        }\r\n      });\r\n      setNewFavorite(undefined);\r\n    }\r\n  }\r\n\r\n  function chatCommunicatorSubscribe(event: string, data: any) {\r\n    switch (event) {\r\n      case Events.ONLINE:\r\n        squadService?.chats.list((receivedChats) => {\r\n          const chats: IChat[] = [];\r\n          receivedChats.forEach((cht) => {\r\n            if (!chats.find((chat) => chat.id === cht.id)) {\r\n              chats.push(cht);\r\n            }\r\n          });\r\n          setChats(chats);\r\n          //populating groups\r\n          squadService?.groups.list((groups) => {\r\n            setGroups(groups);\r\n            //Joining Groups Rooms in XMPP\r\n            squadService?.chat?.joinGroups(groups.map((group) => group.jid));\r\n          });\r\n          //populating contacts\r\n          squadService?.contacts.list((contacts) => setContacts(contacts));\r\n\r\n          //populating chat's with messages\r\n\r\n          // receivedChats.forEach((chat) => {\r\n          //   squadService?.messages.list(chat, (messages) => {\r\n          //     const chatWithMessages = { ...chat };\r\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\r\n          //       messages\r\n          //     );\r\n          //     setChats([\r\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n          //       chatWithMessages,\r\n          //     ]);\r\n          //   });\r\n          // });\r\n        });\r\n        break;\r\n      case Events.MESSAGE:\r\n        if (data.fromUser === user.jid) break;\r\n        let find = false;\r\n\r\n        let newChats: IChat[] = [];\r\n        chats.forEach((chat) => {\r\n          if (\r\n            data.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] ||\r\n            data.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]\r\n          ) {\r\n            find = true;\r\n            if (!chat.messages.filter((msg) => msg.id === data.id)[0])\r\n              chat.messages.push(data);\r\n            if (chat.id === activeChat.id) {\r\n              let chatTemporary = { ...chat };\r\n              setActiveChat(chatTemporary);\r\n            } else {\r\n              chat.unRead++;\r\n            }\r\n            newChats.unshift(chat);\r\n          } else {\r\n            newChats.push(chat);\r\n          }\r\n        });\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.contacts.list((listContacts) => {\r\n            listContacts.forEach((c) => {\r\n              if (c.jid === data.fromUser) {\r\n                newChat = {\r\n                  id: c.id,\r\n                  jid: c.jid,\r\n                  name: c.name,\r\n                  profilePicture: c.profilePicture,\r\n                  status: c.status,\r\n                  unRead: 1,\r\n                  chatType: ChatType.USER,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  messages: [],\r\n                  favorite: c.favorite,\r\n                  added: c.added,\r\n                };\r\n                newChat.messages.push(data);\r\n                newChats.unshift(newChat);\r\n              }\r\n            });\r\n          });\r\n        }\r\n        setChats(newChats);\r\n\r\n        break;\r\n      case Events.RECEIVED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.messages.find((msg) => msg.id === data.id))\r\n              chat.messages = chat.messages.map((message) => {\r\n                message.deliverStatus = DeliverStatus.DELIVERED;\r\n                return message;\r\n              });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.DISPLAYED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            chat.messages = chat.messages.map((message) => {\r\n              if (message.id === data.id) {\r\n                message.readStatus = ReadStatus.READ;\r\n              }\r\n              return message;\r\n            });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.COMPOSING:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = true;\r\n              if (activeChat.jid === data) setActiveChat(chat);\r\n              deleteTypingTimeout(chat.jid);\r\n              setTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.ACTIVE:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = false;\r\n              if (activeChat.jid === data) {\r\n                let chatUpdate = { ...chat };\r\n                setActiveChat(chatUpdate);\r\n              }\r\n              deleteTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.PRESENCE:\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (\r\n              cht.jid === data.from.split(\"/\")[0] &&\r\n              !cht.jid.includes(\"@conference.\")\r\n            ) {\r\n              cht.status = data.status;\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n        setContacts(\r\n          contacts.map((ctc) => {\r\n            if (\r\n              ctc.jid === data.from.split(\"/\")[0] &&\r\n              !ctc.jid.includes(\"@conference.\")\r\n            ) {\r\n              ctc.status = data.status;\r\n            }\r\n            return ctc;\r\n          })\r\n        );\r\n        break;\r\n    }\r\n  }\r\n  const deleteTypingTimeout = (jid: string) => {\r\n    clearTimeout(typingTimeout.get(jid)?.timeout || setTimeout(() => {}, 1));\r\n    typingTimeout.delete(jid);\r\n  };\r\n  const setTypingTimeout = (jid: string) => {\r\n    const timeoutData: TypingTimeoutData = {\r\n      msgStr: \"\",\r\n      timeout: setTimeout(() => {\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.jid === jid) {\r\n              cht.isTyping = false;\r\n              if (activeChat.jid === jid) setActiveChat(cht);\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n      }, 20000),\r\n    };\r\n    typingTimeout.set(jid, timeoutData);\r\n  };\r\n\r\n  squadService?.updateSubscribeFunction(chatCommunicatorSubscribe);\r\n  // Comentado para evitar warnings no console enquanto não é usado\r\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\r\n  //     squadService?.groups.list((groups) => {\r\n  //       setGroups(groups);\r\n  //       callback(true);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  function sendMessage(\r\n    chat: IChat,\r\n    message: string,\r\n    callback: SendMessageCallback\r\n  ) {\r\n    squadService?.chat?.chat.sendMessage(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message,\r\n      callback\r\n    );\r\n  }\r\n\r\n  useEffect(init, []);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}