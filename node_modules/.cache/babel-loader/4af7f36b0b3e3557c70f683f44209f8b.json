{"ast":null,"code":"import { InviteServerTransaction } from \"../transactions\";\nimport { UserAgentServer } from \"./user-agent-server\";\n/**\n * Re-INVITE UAS.\n * @remarks\n * 14 Modifying an Existing Session\n * https://tools.ietf.org/html/rfc3261#section-14\n * 14.2 UAS Behavior\n * https://tools.ietf.org/html/rfc3261#section-14.2\n * @public\n */\n\nexport class ReInviteUserAgentServer extends UserAgentServer {\n  constructor(dialog, message, delegate) {\n    super(InviteServerTransaction, dialog.userAgentCore, message, delegate);\n    dialog.reinviteUserAgentServer = this;\n    this.dialog = dialog;\n  }\n  /**\n   * Update the dialog signaling state on a 2xx response.\n   * @param options - Options bucket.\n   */\n\n\n  accept(options = {\n    statusCode: 200\n  }) {\n    // FIXME: The next two lines SHOULD go away, but I suppose it's technically harmless...\n    // These are here because some versions of SIP.js prior to 0.13.8 set the route set\n    // of all in dialog ACKs based on the Record-Route headers in the associated 2xx\n    // response. While this worked for dialog forming 2xx responses, it was technically\n    // broken for re-INVITE ACKS as it only worked if the UAS populated the Record-Route\n    // headers in the re-INVITE 2xx response (which is not required and a waste of bandwidth\n    // as the should be ignored if present in re-INVITE ACKS) and the UAS populated\n    // the Record-Route headers with the correct values (would be weird not too, but...).\n    // Anyway, for now the technically useless Record-Route headers are being added\n    // to maintain \"backwards compatibility\" with the older broken versions of SIP.js.\n    options.extraHeaders = options.extraHeaders || [];\n    options.extraHeaders = options.extraHeaders.concat(this.dialog.routeSet.map(route => `Record-Route: ${route}`)); // Send and return the response\n\n    const response = super.accept(options);\n    const session = this.dialog;\n    const result = Object.assign(Object.assign({}, response), {\n      session\n    });\n\n    if (options.body) {\n      // Update dialog signaling state with offer/answer in body\n      this.dialog.signalingStateTransition(options.body);\n    } // Update dialog\n\n\n    this.dialog.reConfirm();\n    return result;\n  }\n  /**\n   * Update the dialog signaling state on a 1xx response.\n   * @param options - Progress options bucket.\n   */\n\n\n  progress(options = {\n    statusCode: 180\n  }) {\n    // Send and return the response\n    const response = super.progress(options);\n    const session = this.dialog;\n    const result = Object.assign(Object.assign({}, response), {\n      session\n    }); // Update dialog signaling state\n\n    if (options.body) {\n      this.dialog.signalingStateTransition(options.body);\n    }\n\n    return result;\n  }\n  /**\n   * TODO: Not Yet Supported\n   * @param contacts - Contacts to redirect to.\n   * @param options - Redirect options bucket.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  redirect(contacts, options = {\n    statusCode: 302\n  }) {\n    this.dialog.signalingStateRollback();\n    this.dialog.reinviteUserAgentServer = undefined; // ACK will be handled by transaction\n\n    throw new Error(\"Unimplemented.\");\n  }\n  /**\n   * 3.1 Background on Re-INVITE Handling by UASs\n   * An error response to a re-INVITE has the following semantics.  As\n   * specified in Section 12.2.2 of RFC 3261 [RFC3261], if a re-INVITE is\n   * rejected, no state changes are performed.\n   * https://tools.ietf.org/html/rfc6141#section-3.1\n   * @param options - Reject options bucket.\n   */\n\n\n  reject(options = {\n    statusCode: 488\n  }) {\n    this.dialog.signalingStateRollback();\n    this.dialog.reinviteUserAgentServer = undefined; // ACK will be handled by transaction\n\n    return super.reject(options);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/core/user-agents/re-invite-user-agent-server.js"],"names":["InviteServerTransaction","UserAgentServer","ReInviteUserAgentServer","constructor","dialog","message","delegate","userAgentCore","reinviteUserAgentServer","accept","options","statusCode","extraHeaders","concat","routeSet","map","route","response","session","result","Object","assign","body","signalingStateTransition","reConfirm","progress","redirect","contacts","signalingStateRollback","undefined","Error","reject"],"mappings":"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","sourcesContent":["import { InviteServerTransaction } from \"../transactions\";\nimport { UserAgentServer } from \"./user-agent-server\";\n/**\n * Re-INVITE UAS.\n * @remarks\n * 14 Modifying an Existing Session\n * https://tools.ietf.org/html/rfc3261#section-14\n * 14.2 UAS Behavior\n * https://tools.ietf.org/html/rfc3261#section-14.2\n * @public\n */\nexport class ReInviteUserAgentServer extends UserAgentServer {\n    constructor(dialog, message, delegate) {\n        super(InviteServerTransaction, dialog.userAgentCore, message, delegate);\n        dialog.reinviteUserAgentServer = this;\n        this.dialog = dialog;\n    }\n    /**\n     * Update the dialog signaling state on a 2xx response.\n     * @param options - Options bucket.\n     */\n    accept(options = { statusCode: 200 }) {\n        // FIXME: The next two lines SHOULD go away, but I suppose it's technically harmless...\n        // These are here because some versions of SIP.js prior to 0.13.8 set the route set\n        // of all in dialog ACKs based on the Record-Route headers in the associated 2xx\n        // response. While this worked for dialog forming 2xx responses, it was technically\n        // broken for re-INVITE ACKS as it only worked if the UAS populated the Record-Route\n        // headers in the re-INVITE 2xx response (which is not required and a waste of bandwidth\n        // as the should be ignored if present in re-INVITE ACKS) and the UAS populated\n        // the Record-Route headers with the correct values (would be weird not too, but...).\n        // Anyway, for now the technically useless Record-Route headers are being added\n        // to maintain \"backwards compatibility\" with the older broken versions of SIP.js.\n        options.extraHeaders = options.extraHeaders || [];\n        options.extraHeaders = options.extraHeaders.concat(this.dialog.routeSet.map((route) => `Record-Route: ${route}`));\n        // Send and return the response\n        const response = super.accept(options);\n        const session = this.dialog;\n        const result = Object.assign(Object.assign({}, response), { session });\n        if (options.body) {\n            // Update dialog signaling state with offer/answer in body\n            this.dialog.signalingStateTransition(options.body);\n        }\n        // Update dialog\n        this.dialog.reConfirm();\n        return result;\n    }\n    /**\n     * Update the dialog signaling state on a 1xx response.\n     * @param options - Progress options bucket.\n     */\n    progress(options = { statusCode: 180 }) {\n        // Send and return the response\n        const response = super.progress(options);\n        const session = this.dialog;\n        const result = Object.assign(Object.assign({}, response), { session });\n        // Update dialog signaling state\n        if (options.body) {\n            this.dialog.signalingStateTransition(options.body);\n        }\n        return result;\n    }\n    /**\n     * TODO: Not Yet Supported\n     * @param contacts - Contacts to redirect to.\n     * @param options - Redirect options bucket.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    redirect(contacts, options = { statusCode: 302 }) {\n        this.dialog.signalingStateRollback();\n        this.dialog.reinviteUserAgentServer = undefined; // ACK will be handled by transaction\n        throw new Error(\"Unimplemented.\");\n    }\n    /**\n     * 3.1 Background on Re-INVITE Handling by UASs\n     * An error response to a re-INVITE has the following semantics.  As\n     * specified in Section 12.2.2 of RFC 3261 [RFC3261], if a re-INVITE is\n     * rejected, no state changes are performed.\n     * https://tools.ietf.org/html/rfc6141#section-3.1\n     * @param options - Reject options bucket.\n     */\n    reject(options = { statusCode: 488 }) {\n        this.dialog.signalingStateRollback();\n        this.dialog.reinviteUserAgentServer = undefined; // ACK will be handled by transaction\n        return super.reject(options);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}