{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\contexts\\\\ConferenceContext.tsx\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport ChatType from \"../enuns/ChatType\";\nimport { useChat } from \"./ChatContext\";\nexport const ConferenceContext = createContext({});\nexport const ConferenceProvider = ({\n  children\n}) => {\n  const [listRooms, setListRooms] = useState(false);\n  const [conferenceList, setConferenceList] = useState([]);\n  const [createConference, setCreateConference] = useState();\n  const [editConference, setEditConference] = useState();\n  const [deleteConference, setDeleteConference] = useState();\n  const {\n    activeChat,\n    chats,\n    setChats,\n    setActiveChat,\n    setShowChat\n  } = useChat();\n  const [conferenceToUpdate, setConferenceToUpdate] = useState();\n  const [conferenceToRemove, setConferenceToRemove] = useState();\n\n  const openConference = obj => {\n    if ((activeChat === null || activeChat === void 0 ? void 0 : activeChat.jid) === obj.jid) return;\n    let find = false;\n    setChats(chats.map(item => {\n      if (item.jid === obj.jid) {\n        item.unRead = 0;\n        item.mencioned = 0;\n        item.messageLoaded = item.messages.length >= 20 ? false : true;\n        setShowChat(true);\n        setActiveChat(item);\n        find = true;\n      }\n\n      return item;\n    }));\n\n    if (!find) {\n      let newChat = {\n        id: obj.jid.split(\"@\")[0],\n        jid: obj.jid,\n        name: obj.name,\n        messageLoaded: true,\n        unRead: 0,\n        chatType: ChatType.CONFERENCE,\n        inputMessage: \"\",\n        isTyping: false,\n        messages: [],\n        favorite: false,\n        added: true,\n        conferenceRoomParticipants: obj.conferenceRoomParticipants,\n        mencioned: 0\n      };\n      setShowChat(true);\n      setActiveChat(newChat);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ConferenceContext.Provider, {\n    value: {\n      createConference,\n      setCreateConference,\n      editConference,\n      setEditConference,\n      deleteConference,\n      setDeleteConference,\n      conferenceList,\n      setConferenceList,\n      listRooms,\n      setListRooms,\n      openConference,\n      conferenceToUpdate,\n      setConferenceToUpdate,\n      conferenceToRemove,\n      setConferenceToRemove\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport function useConference() {\n  return useContext(ConferenceContext);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/contexts/ConferenceContext.tsx"],"names":["React","createContext","useContext","useState","ChatType","useChat","ConferenceContext","ConferenceProvider","children","listRooms","setListRooms","conferenceList","setConferenceList","createConference","setCreateConference","editConference","setEditConference","deleteConference","setDeleteConference","activeChat","chats","setChats","setActiveChat","setShowChat","conferenceToUpdate","setConferenceToUpdate","conferenceToRemove","setConferenceToRemove","openConference","obj","jid","find","map","item","unRead","mencioned","messageLoaded","messages","length","newChat","id","split","name","chatType","CONFERENCE","inputMessage","isTyping","favorite","added","conferenceRoomParticipants","useConference"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport IChat from \"../alias/IChat\";\r\nimport { IConference } from \"../alias/IConference\";\r\nimport ICreateConference from \"../alias/ICreateConference\";\r\nimport ChatType from \"../enuns/ChatType\";\r\nimport { useChat } from \"./ChatContext\";\r\n\r\ninterface IConferenceContextData {\r\n  createConference: ICreateConference | undefined;\r\n  setCreateConference(value: ICreateConference | undefined): void;\r\n  editConference: IConference | undefined;\r\n  setEditConference(value: IConference | undefined): void;\r\n  deleteConference: IConference | undefined;\r\n  setDeleteConference(value: IConference | undefined): void;\r\n  listRooms: boolean;\r\n  setListRooms(val: boolean): void;\r\n  conferenceList: IConference[];\r\n  setConferenceList(list: IConference[]): void;\r\n  openConference(value: IConference): void;\r\n  conferenceToUpdate: IConference | undefined;\r\n  setConferenceToUpdate(value: IConference | undefined): void;\r\n  conferenceToRemove: IConference | undefined;\r\n  setConferenceToRemove(value: IConference | undefined): void;\r\n}\r\n\r\nexport const ConferenceContext = createContext<IConferenceContextData>(\r\n  {} as IConferenceContextData\r\n);\r\n\r\nexport const ConferenceProvider: React.FC = ({ children }) => {\r\n  const [listRooms, setListRooms] = useState<boolean>(false);\r\n  const [conferenceList, setConferenceList] = useState<IConference[]>([]);\r\n  const [createConference, setCreateConference] = useState<ICreateConference>();\r\n  const [editConference, setEditConference] = useState<IConference>();\r\n  const [deleteConference, setDeleteConference] = useState<IConference>();\r\n  const { activeChat, chats, setChats, setActiveChat, setShowChat } = useChat();\r\n  const [conferenceToUpdate, setConferenceToUpdate] = useState<IConference>();\r\n  const [conferenceToRemove, setConferenceToRemove] = useState<IConference>();\r\n\r\n  const openConference = (obj: IConference) => {\r\n    if (activeChat?.jid === obj.jid) return;\r\n    let find = false;\r\n\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.jid === obj.jid) {\r\n          item.unRead = 0;\r\n          item.mencioned = 0;\r\n          item.messageLoaded = item.messages.length >= 20 ? false : true;\r\n          setShowChat(true);\r\n          setActiveChat(item);\r\n          find = true;\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n\r\n    if (!find) {\r\n      let newChat: IChat = {\r\n        id: obj.jid.split(\"@\")[0],\r\n        jid: obj.jid,\r\n        name: obj.name,\r\n        messageLoaded: true,\r\n        unRead: 0,\r\n        chatType: ChatType.CONFERENCE,\r\n        inputMessage: \"\",\r\n        isTyping: false,\r\n        messages: [],\r\n        favorite: false,\r\n        added: true,\r\n        conferenceRoomParticipants: obj.conferenceRoomParticipants,\r\n        mencioned: 0,\r\n      };\r\n      setShowChat(true);\r\n      setActiveChat(newChat);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ConferenceContext.Provider\r\n      value={{\r\n        createConference,\r\n        setCreateConference,\r\n        editConference,\r\n        setEditConference,\r\n        deleteConference,\r\n        setDeleteConference,\r\n        conferenceList,\r\n        setConferenceList,\r\n        listRooms,\r\n        setListRooms,\r\n        openConference,\r\n        conferenceToUpdate,\r\n        setConferenceToUpdate,\r\n        conferenceToRemove,\r\n        setConferenceToRemove\r\n      }}\r\n    >\r\n      {children}\r\n    </ConferenceContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useConference() {\r\n  return useContext(ConferenceContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}