{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ModalAddParticipant.tsx\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { Modal, ModalHeader, ModalBody, CardBody, Button, ModalFooter } from \"reactstrap\";\nimport { useModal } from \"../contexts/ModalContext\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useTranslation } from \"react-i18next\";\nimport SimpleBar from \"simplebar-react\";\nimport SelectParticipant from \"./SelectParticipant\";\nimport Swal from \"sweetalert2\";\nimport { useConference } from \"../contexts/ConferenceContext\";\n\nconst ModalAddContacts = () => {\n  const [search, setSearch] = useState(\"\");\n  const {\n    activeChat\n  } = useChat();\n  const [selectedParticipant, setSelectedParticipant] = useState([]);\n  const {\n    t\n  } = useTranslation();\n  const {\n    setCheckedParticipants,\n    conferenceList,\n    setAddingParticipantsPayload\n  } = useConference();\n  const {\n    showModalAddParticipant,\n    setShowModalAddParticipant\n  } = useModal();\n\n  const toggle = () => {\n    if (showModalAddParticipant) {\n      setShowModalAddParticipant(!showModalAddParticipant);\n      setSelectedParticipant([]);\n      setSearch(\"\");\n    }\n  };\n\n  const handleCheckParticipant = (selected, participant) => {\n    if (selected) {\n      setSelectedParticipant([...selectedParticipant, participant]);\n    } else {\n      setSelectedParticipant(selectedParticipant.filter(sel => {\n        if (sel.userUuid === participant.userUuid) {\n          return false;\n        }\n\n        return true;\n      }));\n    }\n  };\n\n  const inputSearch = useRef(null);\n  useEffect(() => {\n    setTimeout(() => {\n      var _inputSearch$current;\n\n      return (_inputSearch$current = inputSearch.current) === null || _inputSearch$current === void 0 ? void 0 : _inputSearch$current.focus();\n    }, 500);\n  }, [showModalAddParticipant]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    backdrop: \"static\",\n    isOpen: showModalAddParticipant,\n    centered: true,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, t(\"Add Participant\")), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    className: \"p-2 border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pt-2 pb-3 border-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputSearch,\n    type: \"text\",\n    className: \"form-control mb-3\",\n    id: \"addgroupname-input\",\n    value: search,\n    onChange: e => setSearch(e.target.value),\n    placeholder: t(\"Search users..\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SimpleBar, {\n    style: {\n      height: \"500px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SelectParticipant, {\n    handleCheckParticipant: handleCheckParticipant,\n    search: search,\n    checkedParticipants: selectedParticipant,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(ModalFooter, {\n    className: \"border-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"default\",\n    onClick: () => {\n      setSelectedParticipant([]);\n      toggle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, t(\"Close\")), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    onClick: () => {\n      Swal.fire({\n        position: 'top-end',\n        icon: 'success',\n        title: 'Added!',\n        showConfirmButton: false,\n        timer: 1500,\n        customClass: {\n          popup: \"swal-mini-popup\"\n        }\n      });\n      toggle();\n      conferenceList.forEach(cfr => {\n        if (cfr.id === activeChat.id) {\n          /* name: string\r\n          email: string\r\n          description: string | null\r\n          userModerator: boolean\r\n          userUuid: string | null\r\n          type:\r\n            | ConferenceRoomParticipantType.PARTICIPANT\r\n            | ConferenceRoomParticipantType.PARTICIPANT_EXTERNAL\r\n            | ConferenceRoomParticipantType.MODERATOR */\n          setCheckedParticipants(selectedParticipant);\n          setAddingParticipantsPayload({\n            conferenceId: cfr.id,\n            data: selectedParticipant\n          });\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, t(\"Add Contacts\"))))));\n};\n\nexport default ModalAddContacts;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ModalAddParticipant.tsx"],"names":["React","useEffect","useState","useRef","Modal","ModalHeader","ModalBody","CardBody","Button","ModalFooter","useModal","useChat","useTranslation","SimpleBar","SelectParticipant","Swal","useConference","ModalAddContacts","search","setSearch","activeChat","selectedParticipant","setSelectedParticipant","t","setCheckedParticipants","conferenceList","setAddingParticipantsPayload","showModalAddParticipant","setShowModalAddParticipant","toggle","handleCheckParticipant","selected","participant","filter","sel","userUuid","inputSearch","setTimeout","current","focus","e","target","value","height","fire","position","icon","title","showConfirmButton","timer","customClass","popup","forEach","cfr","id","conferenceId","data"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  CardBody,\r\n  Button,\r\n  ModalFooter,\r\n} from \"reactstrap\";\r\n\r\nimport { useModal } from \"../contexts/ModalContext\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport SelectParticipant from \"./SelectParticipant\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useConference } from \"../contexts/ConferenceContext\";\r\nimport IParticipant from \"../alias/IParticipant\";\r\n\r\nconst ModalAddContacts: React.FC = () => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const { activeChat } = useChat();\r\n  const [selectedParticipant, setSelectedParticipant] = useState<IParticipant[]>([]);\r\n  const { t } = useTranslation();\r\n  const {\r\n    setCheckedParticipants,\r\n    conferenceList,\r\n    setAddingParticipantsPayload\r\n  } = useConference();\r\n\r\n  const { showModalAddParticipant, setShowModalAddParticipant } = useModal();\r\n\r\n  const toggle = () => {\r\n    if (showModalAddParticipant) {\r\n      setShowModalAddParticipant(!showModalAddParticipant);\r\n      setSelectedParticipant([]);\r\n      setSearch(\"\");\r\n    }\r\n  };\r\n\r\n  const handleCheckParticipant = (selected: boolean, participant: IParticipant) => {\r\n    if (selected) {\r\n      setSelectedParticipant([...selectedParticipant, participant])\r\n    } else {\r\n      setSelectedParticipant(\r\n        selectedParticipant.filter((sel) => {\r\n          if (sel.userUuid === participant.userUuid) {\r\n            return false;\r\n          }\r\n          return true;\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const inputSearch = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => inputSearch.current?.focus(), 500);\r\n  }, [showModalAddParticipant]);\r\n\r\n  return (\r\n    <Modal\r\n      backdrop=\"static\"\r\n      isOpen={showModalAddParticipant}\r\n      centered\r\n      toggle={toggle}\r\n    >\r\n      <ModalHeader  toggle={toggle}>{t(\"Add Participant\")}</ModalHeader>\r\n      <ModalBody>\r\n        <CardBody className=\"p-2 border\">\r\n          <div className=\"pt-2 pb-3 border-bottom\">\r\n            <input\r\n              ref={inputSearch}\r\n              type=\"text\"\r\n              className=\"form-control mb-3\"\r\n              id=\"addgroupname-input\"\r\n              value={search}\r\n              onChange={(e) => setSearch(e.target.value)}\r\n              placeholder={t(\"Search users..\")}\r\n            />\r\n            <hr />\r\n            <SimpleBar style={{ height: \"500px\" }}>\r\n              <SelectParticipant\r\n                handleCheckParticipant={handleCheckParticipant}\r\n                search={search}\r\n                checkedParticipants={selectedParticipant}\r\n              />\r\n            </SimpleBar>\r\n          </div>\r\n          <ModalFooter className=\"border-0\">\r\n            <Button\r\n              color=\"default\"\r\n              onClick={() => {\r\n                setSelectedParticipant([]);\r\n                toggle();\r\n              }}\r\n            >\r\n              {t(\"Close\")}\r\n            </Button>\r\n            <Button\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                Swal.fire({\r\n                  position: 'top-end',\r\n                  icon: 'success',\r\n                  title: 'Added!',\r\n                  showConfirmButton: false,\r\n                  timer: 1500,\r\n                  customClass: {\r\n                    popup: \"swal-mini-popup\"\r\n                  }\r\n                })\r\n                toggle();\r\n\r\n                conferenceList.forEach((cfr) => {\r\n                  if (cfr.id === activeChat.id) {\r\n                  /* name: string\r\n                  email: string\r\n                  description: string | null\r\n                  userModerator: boolean\r\n                  userUuid: string | null\r\n                  type:\r\n                    | ConferenceRoomParticipantType.PARTICIPANT\r\n                    | ConferenceRoomParticipantType.PARTICIPANT_EXTERNAL\r\n                    | ConferenceRoomParticipantType.MODERATOR */\r\n                    setCheckedParticipants(selectedParticipant);\r\n                    setAddingParticipantsPayload({\r\n                      conferenceId: cfr.id,\r\n                      data: selectedParticipant\r\n                    })\r\n                  }\r\n                });\r\n              }}\r\n            >\r\n              {t(\"Add Contacts\")}\r\n            </Button>\r\n          </ModalFooter>\r\n        </CardBody>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalAddContacts;\r\n"]},"metadata":{},"sourceType":"module"}