{"ast":null,"code":"import React from\"react\";export function TextMessageTagParse(value,contacts,openContact){var newValue=value.split(\"<squadtag>\");var newComp=[];newValue.forEach(function(element){var msgTest=element.split(\"<squadtag/>\");if(msgTest.length>1){msgTest.forEach(function(msg,i){if(i===0){var obj=JSON.parse(msg);newComp.push(React.createElement(\"a\",{href:\"#\",onClick:function onClick(){return openContact(contacts.filter(function(item){return item.id===obj.userId;})[0]);},key:i},\"@\".concat(obj.name)));}else{newComp.push(msg);}});}else{newComp.push(msgTest);}});return newComp;}export function ParseUserTag(id,message){var variavelExemplo=new RegExp(\"{\\\"userId\\\":\\\"\".concat(id));if(message.match(variavelExemplo)){return 1;}else{return 0;}}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/helpers/TextMessageTagParse.ts"],"names":["React","TextMessageTagParse","value","contacts","openContact","newValue","split","newComp","forEach","element","msgTest","length","msg","i","obj","JSON","parse","push","createElement","href","onClick","filter","item","id","userId","key","name","ParseUserTag","message","variavelExemplo","RegExp","match"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAGA,MAAO,SAASC,CAAAA,mBAAT,CACLC,KADK,CAELC,QAFK,CAGLC,WAHK,CAIL,CACA,GAAIC,CAAAA,QAAQ,CAAGH,KAAK,CAACI,KAAN,CAAY,YAAZ,CAAf,CACA,GAAIC,CAAAA,OAAc,CAAG,EAArB,CACAF,QAAQ,CAACG,OAAT,CAAiB,SAACC,OAAD,CAAa,CAC5B,GAAIC,CAAAA,OAAO,CAAGD,OAAO,CAACH,KAAR,CAAc,aAAd,CAAd,CACA,GAAII,OAAO,CAACC,MAAR,CAAiB,CAArB,CAAwB,CACtBD,OAAO,CAACF,OAAR,CAAgB,SAACI,GAAD,CAAMC,CAAN,CAAY,CAC1B,GAAIA,CAAC,GAAK,CAAV,CAAa,CACX,GAAIC,CAAAA,GAAG,CAAGC,IAAI,CAACC,KAAL,CAAWJ,GAAX,CAAV,CACAL,OAAO,CAACU,IAAR,CACEjB,KAAK,CAACkB,aAAN,CACE,GADF,CAEE,CACEC,IAAI,CAAE,GADR,CAEEC,OAAO,CAAE,yBACPhB,CAAAA,WAAW,CACTD,QAAQ,CAACkB,MAAT,CAAgB,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,EAAL,GAAYT,GAAG,CAACU,MAA1B,EAAhB,EAAkD,CAAlD,CADS,CADJ,EAFX,CAMEC,GAAG,CAAEZ,CANP,CAFF,YAUMC,GAAG,CAACY,IAVV,EADF,EAcD,CAhBD,IAgBO,CACLnB,OAAO,CAACU,IAAR,CAAaL,GAAb,EACD,CACF,CApBD,EAqBD,CAtBD,IAsBO,CACLL,OAAO,CAACU,IAAR,CAAaP,OAAb,EACD,CACF,CA3BD,EA6BA,MAAOH,CAAAA,OAAP,CACD,CAED,MAAO,SAASoB,CAAAA,YAAT,CAAsBJ,EAAtB,CAAkCK,OAAlC,CAAkD,CACvD,GAAMC,CAAAA,eAAe,CAAG,GAAIC,CAAAA,MAAJ,yBAAyBP,EAAzB,EAAxB,CACA,GAAGK,OAAO,CAACG,KAAR,CAAcF,eAAd,CAAH,CAAkC,CAChC,MAAO,EAAP,CACD,CAFD,IAEK,CACH,MAAO,EAAP,CACD,CACF","sourcesContent":["import React from \"react\";\r\nimport IContact from \"../alias/IContact\";\r\n\r\nexport function TextMessageTagParse(\r\n  value: string,\r\n  contacts: IContact[],\r\n  openContact: any\r\n) {\r\n  let newValue = value.split(\"<squadtag>\");\r\n  let newComp: any[] = [];\r\n  newValue.forEach((element) => {\r\n    let msgTest = element.split(\"<squadtag/>\");\r\n    if (msgTest.length > 1) {\r\n      msgTest.forEach((msg, i) => {\r\n        if (i === 0) {\r\n          let obj = JSON.parse(msg);\r\n          newComp.push(\r\n            React.createElement(\r\n              \"a\",\r\n              {\r\n                href: \"#\",\r\n                onClick: () =>\r\n                  openContact(\r\n                    contacts.filter((item) => item.id === obj.userId)[0]\r\n                  ),\r\n                key: i\r\n              },\r\n              `@${obj.name}`\r\n            )\r\n          );\r\n        } else {\r\n          newComp.push(msg);\r\n        }\r\n      });\r\n    } else {\r\n      newComp.push(msgTest);\r\n    }\r\n  });\r\n\r\n  return newComp;\r\n}\r\n\r\nexport function ParseUserTag(id: string, message: string){\r\n  const variavelExemplo = new RegExp(`{\"userId\":\"${id}`);\r\n  if(message.match(variavelExemplo)){\r\n    return 1;\r\n  }else{\r\n    return 0;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}