{"ast":null,"code":"import Chat from \"./chat/chatcommunicator\";\nimport { Events } from \"./chat/types/types\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nimport ChatType from \"../enuns/ChatType\";\nimport { ChatType as XMPPChatType } from \"./types\";\nexport default class SquadChatCommunicator {\n  constructor({\n    service,\n    domain,\n    resource,\n    username,\n    password\n  }, subscribeFunction) {\n    this.onMessage = msg => {\n      const fileParams = {\n        isFile: \"fileUrl\" in msg ? true : false,\n        isImage: false,\n        isVideo: false,\n        isAudio: false\n      };\n\n      if (fileParams.isFile) {\n        fileParams.isImage = /\\.(jpe?g|png|gif|ico)$/i.test(msg.fileUrl);\n        fileParams.isVideo = /\\.(mp4|avi)$/i.test(msg.fileUrl);\n        fileParams.isAudio = /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg.fileUrl);\n      }\n\n      const message = {\n        id: msg.id,\n        userName: \"\",\n        message: msg.message,\n        time: msg.sent_at,\n        isImageMessage: fileParams.isImage,\n        isFileMessage: fileParams.isFile,\n        isVideoMessage: fileParams.isVideo,\n        isAudioMessage: fileParams.isAudio,\n        fileUrl: fileParams.isFile ? msg.fileUrl : \"\",\n        toUser: msg.to,\n        fromUser: msg.from,\n        deliverStatus: DeliverStatus.DELIVERED,\n        readStatus: ReadStatus.UNREAD,\n        deliverTimestamp: new Date().toISOString(),\n        readTimestamp: \"\",\n        content: JSON.stringify({\n          reply_msg: msg.reply_msg,\n          reply_msg_id: msg.reply_msg_id,\n          reply_to: msg.reply_to\n        }),\n        contentType: \"text\"\n      };\n      this.notify(Events.MESSAGE, message);\n    };\n\n    this.onPresence = presence => {\n      this.notify(Events.PRESENCE, presence);\n    };\n\n    this.nextSubscriptionId = 0;\n    this.subscriptions = new Map();\n    this.makeChat({\n      service,\n      domain,\n      resource,\n      username,\n      password\n    }, subscribeFunction);\n  }\n\n  makeChat(options, subscribeFunction) {\n    this.subscribe(subscribeFunction);\n    const chat = new Chat(options);\n    this.chat = chat;\n    this.subscribeChatEvents(chat);\n    chat.client.start();\n  }\n\n  subscribeChatEvents(chat) {\n    chat.on(Events.MESSAGE, this.onMessage);\n    chat.on(Events.PRESENCE, this.onPresence);\n    chat.on(Events.ONLINE, () => this.notify(Events.ONLINE, null));\n    chat.on(Events.OFFLINE, () => this.notify(Events.OFFLINE, null));\n    chat.on(Events.ERROR, this.onError);\n    chat.on(Events.STANZA, this.onStanza);\n  }\n\n  onStanza(stanza) {}\n\n  onError(error) {}\n\n  sendMessage(chat, text) {\n    this.chat.sendMessage(chat.jid, chat.chatType === ChatType.USER ? XMPPChatType.CHAT : XMPPChatType.GROUPCHAT, text);\n  }\n\n  joinGroup(to) {\n    this.chat.joinRoom(to);\n  }\n\n  joinGroups(groups) {\n    groups.forEach(jid => this.joinGroup(jid));\n  }\n\n  subscribe(subscribeCallback) {\n    this.subscriptions.set(this.nextSubscriptionId, subscribeCallback);\n    this.nextSubscriptionId += 1;\n  }\n\n  removeSubscription(id) {\n    this.subscriptions.delete(id);\n  }\n\n  removeAllSubscription() {\n    this.subscriptions = new Map();\n  }\n\n  notify(event, data) {\n    if (this.subscriptions) {\n      this.subscriptions.forEach(subscribeCallback => {\n        if (subscribeCallback) subscribeCallback(event, data);\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadChatCommunicator.ts"],"names":["Chat","Events","DeliverStatus","ReadStatus","ChatType","XMPPChatType","SquadChatCommunicator","constructor","service","domain","resource","username","password","subscribeFunction","onMessage","msg","fileParams","isFile","isImage","isVideo","isAudio","test","fileUrl","message","id","userName","time","sent_at","isImageMessage","isFileMessage","isVideoMessage","isAudioMessage","toUser","to","fromUser","from","deliverStatus","DELIVERED","readStatus","UNREAD","deliverTimestamp","Date","toISOString","readTimestamp","content","JSON","stringify","reply_msg","reply_msg_id","reply_to","contentType","notify","MESSAGE","onPresence","presence","PRESENCE","nextSubscriptionId","subscriptions","Map","makeChat","options","subscribe","chat","subscribeChatEvents","client","start","on","ONLINE","OFFLINE","ERROR","onError","STANZA","onStanza","stanza","error","sendMessage","text","jid","chatType","USER","CHAT","GROUPCHAT","joinGroup","joinRoom","joinGroups","groups","forEach","subscribeCallback","set","removeSubscription","delete","removeAllSubscription","event","data"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,yBAAjB;AACA,SAEEC,MAFF,QAMO,oBANP;AAQA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AAGA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASA,QAAQ,IAAIC,YAArB,QAAyC,SAAzC;AAOA,eAAe,MAAMC,qBAAN,CAA4B;AACzCC,EAAAA,WAAW,CACT;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,MAAX;AAAmBC,IAAAA,QAAnB;AAA6BC,IAAAA,QAA7B;AAAuCC,IAAAA;AAAvC,GADS,EAETC,iBAFS,EAGT;AAAA,SAgCFC,SAhCE,GAgCWC,GAAD,IAAgC;AAC1C,YAAMC,UAAU,GAAG;AACjBC,QAAAA,MAAM,EAAE,aAAaF,GAAb,GAAmB,IAAnB,GAA0B,KADjB;AAEjBG,QAAAA,OAAO,EAAE,KAFQ;AAGjBC,QAAAA,OAAO,EAAE,KAHQ;AAIjBC,QAAAA,OAAO,EAAE;AAJQ,OAAnB;;AAMA,UAAIJ,UAAU,CAACC,MAAf,EAAuB;AACrBD,QAAAA,UAAU,CAACE,OAAX,GAAqB,0BAA0BG,IAA1B,CAClBN,GAAD,CAAqBO,OADF,CAArB;AAGAN,QAAAA,UAAU,CAACG,OAAX,GAAqB,gBAAgBE,IAAhB,CAAsBN,GAAD,CAAqBO,OAA1C,CAArB;AACAN,QAAAA,UAAU,CAACI,OAAX,GAAqB,6BAA6BC,IAA7B,CAClBN,GAAD,CAAqBO,OADF,CAArB;AAGD;;AACD,YAAMC,OAAiB,GAAG;AACxBC,QAAAA,EAAE,EAAET,GAAG,CAACS,EADgB;AAExBC,QAAAA,QAAQ,EAAE,EAFc;AAGxBF,QAAAA,OAAO,EAAER,GAAG,CAACQ,OAHW;AAIxBG,QAAAA,IAAI,EAAEX,GAAG,CAACY,OAJc;AAKxBC,QAAAA,cAAc,EAAEZ,UAAU,CAACE,OALH;AAMxBW,QAAAA,aAAa,EAAEb,UAAU,CAACC,MANF;AAOxBa,QAAAA,cAAc,EAAEd,UAAU,CAACG,OAPH;AAQxBY,QAAAA,cAAc,EAAEf,UAAU,CAACI,OARH;AASxBE,QAAAA,OAAO,EAAEN,UAAU,CAACC,MAAX,GAAqBF,GAAD,CAAqBO,OAAzC,GAAmD,EATpC;AAUxBU,QAAAA,MAAM,EAAEjB,GAAG,CAACkB,EAVY;AAWxBC,QAAAA,QAAQ,EAAEnB,GAAG,CAACoB,IAXU;AAYxBC,QAAAA,aAAa,EAAElC,aAAa,CAACmC,SAZL;AAaxBC,QAAAA,UAAU,EAAEnC,UAAU,CAACoC,MAbC;AAcxBC,QAAAA,gBAAgB,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAdM;AAexBC,QAAAA,aAAa,EAAE,EAfS;AAgBxBC,QAAAA,OAAO,EAAEC,IAAI,CAACC,SAAL,CAAe;AACtBC,UAAAA,SAAS,EAAEhC,GAAG,CAACgC,SADO;AAEtBC,UAAAA,YAAY,EAAEjC,GAAG,CAACiC,YAFI;AAGtBC,UAAAA,QAAQ,EAAElC,GAAG,CAACkC;AAHQ,SAAf,CAhBe;AAqBxBC,QAAAA,WAAW,EAAE;AArBW,OAA1B;AAuBA,WAAKC,MAAL,CAAYlD,MAAM,CAACmD,OAAnB,EAA4B7B,OAA5B;AACD,KAxEC;;AAAA,SAyEF8B,UAzEE,GAyEYC,QAAD,IAAwB;AACnC,WAAKH,MAAL,CAAYlD,MAAM,CAACsD,QAAnB,EAA6BD,QAA7B;AACD,KA3EC;;AACA,SAAKE,kBAAL,GAA0B,CAA1B;AACA,SAAKC,aAAL,GAAqB,IAAIC,GAAJ,EAArB;AACA,SAAKC,QAAL,CACE;AACEnD,MAAAA,OADF;AAEEC,MAAAA,MAFF;AAGEC,MAAAA,QAHF;AAIEC,MAAAA,QAJF;AAKEC,MAAAA;AALF,KADF,EAQEC,iBARF;AAUD;;AACD8C,EAAAA,QAAQ,CACNC,OADM,EAEN/C,iBAFM,EAGN;AACA,SAAKgD,SAAL,CAAehD,iBAAf;AACA,UAAMiD,IAAI,GAAG,IAAI9D,IAAJ,CAAS4D,OAAT,CAAb;AACA,SAAKE,IAAL,GAAYA,IAAZ;AACA,SAAKC,mBAAL,CAAyBD,IAAzB;AACAA,IAAAA,IAAI,CAACE,MAAL,CAAYC,KAAZ;AACD;;AACDF,EAAAA,mBAAmB,CAACD,IAAD,EAAa;AAC9BA,IAAAA,IAAI,CAACI,EAAL,CAAQjE,MAAM,CAACmD,OAAf,EAAwB,KAAKtC,SAA7B;AACAgD,IAAAA,IAAI,CAACI,EAAL,CAAQjE,MAAM,CAACsD,QAAf,EAAyB,KAAKF,UAA9B;AACAS,IAAAA,IAAI,CAACI,EAAL,CAAQjE,MAAM,CAACkE,MAAf,EAAuB,MAAM,KAAKhB,MAAL,CAAYlD,MAAM,CAACkE,MAAnB,EAA2B,IAA3B,CAA7B;AACAL,IAAAA,IAAI,CAACI,EAAL,CAAQjE,MAAM,CAACmE,OAAf,EAAwB,MAAM,KAAKjB,MAAL,CAAYlD,MAAM,CAACmE,OAAnB,EAA4B,IAA5B,CAA9B;AACAN,IAAAA,IAAI,CAACI,EAAL,CAAQjE,MAAM,CAACoE,KAAf,EAAsB,KAAKC,OAA3B;AACAR,IAAAA,IAAI,CAACI,EAAL,CAAQjE,MAAM,CAACsE,MAAf,EAAuB,KAAKC,QAA5B;AACD;;AA6CDA,EAAAA,QAAQ,CAACC,MAAD,EAAc,CAAE;;AACxBH,EAAAA,OAAO,CAACI,KAAD,EAAa,CAAE;;AACtBC,EAAAA,WAAW,CAACb,IAAD,EAAcc,IAAd,EAA4B;AACrC,SAAKd,IAAL,CAAUa,WAAV,CACEb,IAAI,CAACe,GADP,EAEEf,IAAI,CAACgB,QAAL,KAAkB1E,QAAQ,CAAC2E,IAA3B,GACI1E,YAAY,CAAC2E,IADjB,GAEI3E,YAAY,CAAC4E,SAJnB,EAKEL,IALF;AAOD;;AACDM,EAAAA,SAAS,CAACjD,EAAD,EAAa;AACpB,SAAK6B,IAAL,CAAUqB,QAAV,CAAmBlD,EAAnB;AACD;;AACDmD,EAAAA,UAAU,CAACC,MAAD,EAAmB;AAC3BA,IAAAA,MAAM,CAACC,OAAP,CAAgBT,GAAD,IAAS,KAAKK,SAAL,CAAeL,GAAf,CAAxB;AACD;;AACDhB,EAAAA,SAAS,CAAC0B,iBAAD,EAA0C;AACjD,SAAK9B,aAAL,CAAmB+B,GAAnB,CAAuB,KAAKhC,kBAA5B,EAAgD+B,iBAAhD;AACA,SAAK/B,kBAAL,IAA2B,CAA3B;AACD;;AACDiC,EAAAA,kBAAkB,CAACjE,EAAD,EAAa;AAC7B,SAAKiC,aAAL,CAAmBiC,MAAnB,CAA0BlE,EAA1B;AACD;;AACDmE,EAAAA,qBAAqB,GAAG;AACtB,SAAKlC,aAAL,GAAqB,IAAIC,GAAJ,EAArB;AACD;;AACDP,EAAAA,MAAM,CAACyC,KAAD,EAAgBC,IAAhB,EAA2B;AAC/B,QAAI,KAAKpC,aAAT,EAAwB;AACtB,WAAKA,aAAL,CAAmB6B,OAAnB,CAA4BC,iBAAD,IAAuB;AAChD,YAAIA,iBAAJ,EAAuBA,iBAAiB,CAACK,KAAD,EAAQC,IAAR,CAAjB;AACxB,OAFD;AAGD;AACF;;AAjHwC","sourcesContent":["import Chat from \"./chat/chatcommunicator\";\r\nimport {\r\n  ConnectionOptions,\r\n  Events,\r\n  FileMessage,\r\n  Message,\r\n  Presence,\r\n} from \"./chat/types/types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport { SubscriptionCallBack } from \"./types\";\r\nimport IChat from \"../alias/IChat\";\r\nimport ChatType from \"../enuns/ChatType\";\r\nimport { ChatType as XMPPChatType } from \"./types\";\r\n\r\nexport default interface SquadChatCommunicator {\r\n  chat: Chat;\r\n  nextSubscriptionId: number;\r\n  subscriptions: Map<number, SubscriptionCallBack>;\r\n}\r\nexport default class SquadChatCommunicator {\r\n  constructor(\r\n    { service, domain, resource, username, password }: ConnectionOptions,\r\n    subscribeFunction: SubscriptionCallBack\r\n  ) {\r\n    this.nextSubscriptionId = 0;\r\n    this.subscriptions = new Map<number, SubscriptionCallBack>();\r\n    this.makeChat(\r\n      {\r\n        service,\r\n        domain,\r\n        resource,\r\n        username,\r\n        password,\r\n      },\r\n      subscribeFunction\r\n    );\r\n  }\r\n  makeChat(\r\n    options: ConnectionOptions,\r\n    subscribeFunction: SubscriptionCallBack\r\n  ) {\r\n    this.subscribe(subscribeFunction);\r\n    const chat = new Chat(options);\r\n    this.chat = chat;\r\n    this.subscribeChatEvents(chat);\r\n    chat.client.start();\r\n  }\r\n  subscribeChatEvents(chat: Chat) {\r\n    chat.on(Events.MESSAGE, this.onMessage);\r\n    chat.on(Events.PRESENCE, this.onPresence);\r\n    chat.on(Events.ONLINE, () => this.notify(Events.ONLINE, null));\r\n    chat.on(Events.OFFLINE, () => this.notify(Events.OFFLINE, null));\r\n    chat.on(Events.ERROR, this.onError);\r\n    chat.on(Events.STANZA, this.onStanza);\r\n  }\r\n  onMessage = (msg: Message | FileMessage) => {\r\n    const fileParams = {\r\n      isFile: \"fileUrl\" in msg ? true : false,\r\n      isImage: false,\r\n      isVideo: false,\r\n      isAudio: false,\r\n    };\r\n    if (fileParams.isFile) {\r\n      fileParams.isImage = /\\.(jpe?g|png|gif|ico)$/i.test(\r\n        (msg as FileMessage).fileUrl\r\n      );\r\n      fileParams.isVideo = /\\.(mp4|avi)$/i.test((msg as FileMessage).fileUrl);\r\n      fileParams.isAudio = /\\.(ogg|mp3|wav|m4a|webm)$/i.test(\r\n        (msg as FileMessage).fileUrl\r\n      );\r\n    }\r\n    const message: IMessage = {\r\n      id: msg.id,\r\n      userName: \"\",\r\n      message: msg.message,\r\n      time: msg.sent_at,\r\n      isImageMessage: fileParams.isImage,\r\n      isFileMessage: fileParams.isFile,\r\n      isVideoMessage: fileParams.isVideo,\r\n      isAudioMessage: fileParams.isAudio,\r\n      fileUrl: fileParams.isFile ? (msg as FileMessage).fileUrl : \"\",\r\n      toUser: msg.to,\r\n      fromUser: msg.from,\r\n      deliverStatus: DeliverStatus.DELIVERED,\r\n      readStatus: ReadStatus.UNREAD,\r\n      deliverTimestamp: new Date().toISOString(),\r\n      readTimestamp: \"\",\r\n      content: JSON.stringify({\r\n        reply_msg: msg.reply_msg,\r\n        reply_msg_id: msg.reply_msg_id,\r\n        reply_to: msg.reply_to,\r\n      }),\r\n      contentType: \"text\",\r\n    };\r\n    this.notify(Events.MESSAGE, message);\r\n  };\r\n  onPresence = (presence: Presence) => {\r\n    this.notify(Events.PRESENCE, presence);\r\n  };\r\n  onStanza(stanza: any) {}\r\n  onError(error: any) {}\r\n  sendMessage(chat: IChat, text: string) {\r\n    this.chat.sendMessage(\r\n      chat.jid,\r\n      chat.chatType === ChatType.USER\r\n        ? XMPPChatType.CHAT\r\n        : XMPPChatType.GROUPCHAT,\r\n      text\r\n    );\r\n  }\r\n  joinGroup(to: string) {\r\n    this.chat.joinRoom(to);\r\n  }\r\n  joinGroups(groups: string[]) {\r\n    groups.forEach((jid) => this.joinGroup(jid));\r\n  }\r\n  subscribe(subscribeCallback: SubscriptionCallBack) {\r\n    this.subscriptions.set(this.nextSubscriptionId, subscribeCallback);\r\n    this.nextSubscriptionId += 1;\r\n  }\r\n  removeSubscription(id: number) {\r\n    this.subscriptions.delete(id);\r\n  }\r\n  removeAllSubscription() {\r\n    this.subscriptions = new Map<number, SubscriptionCallBack>();\r\n  }\r\n  notify(event: string, data: any) {\r\n    if (this.subscriptions) {\r\n      this.subscriptions.forEach((subscribeCallback) => {\r\n        if (subscribeCallback) subscribeCallback(event, data);\r\n      });\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}