{"ast":null,"code":"import { formatOffset, signedOffset } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\nlet singleton = null;\n/**\n * A zone with a fixed offset (meaning no DST)\n * @implements {Zone}\n */\n\nexport default class FixedOffsetZone extends Zone {\n  /**\n   * Get a singleton instance of UTC\n   * @return {FixedOffsetZone}\n   */\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n\n    return singleton;\n  }\n  /**\n   * Get an instance with a specified offset\n   * @param {number} offset - The offset in minutes\n   * @return {FixedOffsetZone}\n   */\n\n\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n  /**\n   * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\n   * @param {string} s - The offset string to parse\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\n   * @return {FixedOffsetZone}\n   */\n\n\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n\n      if (r) {\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\n      }\n    }\n\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    /** @private **/\n\n    this.fixed = offset;\n  }\n  /** @override **/\n\n\n  get type() {\n    return \"fixed\";\n  }\n  /** @override **/\n\n\n  get name() {\n    return this.fixed === 0 ? \"UTC\" : `UTC${formatOffset(this.fixed, \"narrow\")}`;\n  }\n  /** @override **/\n\n\n  offsetName() {\n    return this.name;\n  }\n  /** @override **/\n\n\n  formatOffset(ts, format) {\n    return formatOffset(this.fixed, format);\n  }\n  /** @override **/\n\n\n  get universal() {\n    return true;\n  }\n  /** @override **/\n\n\n  offset() {\n    return this.fixed;\n  }\n  /** @override **/\n\n\n  equals(otherZone) {\n    return otherZone.type === \"fixed\" && otherZone.fixed === this.fixed;\n  }\n  /** @override **/\n\n\n  get isValid() {\n    return true;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/luxon/src/zones/fixedOffsetZone.js"],"names":["formatOffset","signedOffset","Zone","singleton","FixedOffsetZone","utcInstance","instance","offset","parseSpecifier","s","r","match","constructor","fixed","type","name","offsetName","ts","format","universal","equals","otherZone","isValid"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,YAAvB,QAA2C,iBAA3C;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA,IAAIC,SAAS,GAAG,IAAhB;AAEA;;;;;AAIA,eAAe,MAAMC,eAAN,SAA8BF,IAA9B,CAAmC;AAChD;;;;AAIA,aAAWG,WAAX,GAAyB;AACvB,QAAIF,SAAS,KAAK,IAAlB,EAAwB;AACtBA,MAAAA,SAAS,GAAG,IAAIC,eAAJ,CAAoB,CAApB,CAAZ;AACD;;AACD,WAAOD,SAAP;AACD;AAED;;;;;;;AAKA,SAAOG,QAAP,CAAgBC,MAAhB,EAAwB;AACtB,WAAOA,MAAM,KAAK,CAAX,GAAeH,eAAe,CAACC,WAA/B,GAA6C,IAAID,eAAJ,CAAoBG,MAApB,CAApD;AACD;AAED;;;;;;;;;;AAQA,SAAOC,cAAP,CAAsBC,CAAtB,EAAyB;AACvB,QAAIA,CAAJ,EAAO;AACL,YAAMC,CAAC,GAAGD,CAAC,CAACE,KAAF,CAAQ,uCAAR,CAAV;;AACA,UAAID,CAAJ,EAAO;AACL,eAAO,IAAIN,eAAJ,CAAoBH,YAAY,CAACS,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,CAAhC,CAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AAEDE,EAAAA,WAAW,CAACL,MAAD,EAAS;AAClB;AACA;;AACA,SAAKM,KAAL,GAAaN,MAAb;AACD;AAED;;;AACA,MAAIO,IAAJ,GAAW;AACT,WAAO,OAAP;AACD;AAED;;;AACA,MAAIC,IAAJ,GAAW;AACT,WAAO,KAAKF,KAAL,KAAe,CAAf,GAAmB,KAAnB,GAA4B,MAAKb,YAAY,CAAC,KAAKa,KAAN,EAAa,QAAb,CAAuB,EAA3E;AACD;AAED;;;AACAG,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKD,IAAZ;AACD;AAED;;;AACAf,EAAAA,YAAY,CAACiB,EAAD,EAAKC,MAAL,EAAa;AACvB,WAAOlB,YAAY,CAAC,KAAKa,KAAN,EAAaK,MAAb,CAAnB;AACD;AAED;;;AACA,MAAIC,SAAJ,GAAgB;AACd,WAAO,IAAP;AACD;AAED;;;AACAZ,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKM,KAAZ;AACD;AAED;;;AACAO,EAAAA,MAAM,CAACC,SAAD,EAAY;AAChB,WAAOA,SAAS,CAACP,IAAV,KAAmB,OAAnB,IAA8BO,SAAS,CAACR,KAAV,KAAoB,KAAKA,KAA9D;AACD;AAED;;;AACA,MAAIS,OAAJ,GAAc;AACZ,WAAO,IAAP;AACD;;AAnF+C","sourcesContent":["import { formatOffset, signedOffset } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * A zone with a fixed offset (meaning no DST)\n * @implements {Zone}\n */\nexport default class FixedOffsetZone extends Zone {\n  /**\n   * Get a singleton instance of UTC\n   * @return {FixedOffsetZone}\n   */\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  /**\n   * Get an instance with a specified offset\n   * @param {number} offset - The offset in minutes\n   * @return {FixedOffsetZone}\n   */\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  /**\n   * Get an instance of FixedOffsetZone from a UTC offset string, like \"UTC+6\"\n   * @param {string} s - The offset string to parse\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+6\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC+06\")\n   * @example FixedOffsetZone.parseSpecifier(\"UTC-6:00\")\n   * @return {FixedOffsetZone}\n   */\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    /** @private **/\n    this.fixed = offset;\n  }\n\n  /** @override **/\n  get type() {\n    return \"fixed\";\n  }\n\n  /** @override **/\n  get name() {\n    return this.fixed === 0 ? \"UTC\" : `UTC${formatOffset(this.fixed, \"narrow\")}`;\n  }\n\n  /** @override **/\n  offsetName() {\n    return this.name;\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.fixed, format);\n  }\n\n  /** @override **/\n  get universal() {\n    return true;\n  }\n\n  /** @override **/\n  offset() {\n    return this.fixed;\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"fixed\" && otherZone.fixed === this.fixed;\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}