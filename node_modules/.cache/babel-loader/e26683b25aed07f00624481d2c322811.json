{"ast":null,"code":"import { client, xml } from \"@xmpp/client\";\nimport { v4 } from \"uuid\";\nimport { Events } from \"./types/types\";\nimport { getFrom, getMessage, isTextMessage, getTo, getMessageId, isFileMessage, getMessageType, getMessagFileUrl, getReplyTo, getReplyMsg, getReplyMsgId, isReceived, isDisplayed, getReceivedMessageId, getDisplayedMessageId, isComposing, isActive } from \"./util/stanzaUtils\";\n\nconst events = require(\"events\");\n\nexport default class Chat extends events.EventEmitter {\n  constructor({\n    service: _service,\n    domain: _domain,\n    resource: _resource,\n    username: _username,\n    password: _password\n  }) {\n    super();\n\n    this.getJid = () => {\n      return `${this.username}@${this.getDomain()}`;\n    };\n\n    this.getDomain = () => {\n      return this.domain || this.service.replace(\"wss://\", \"\").replace(\"ws://\", \"\").split(\"/\")[0];\n    };\n\n    this.instanceMaker = ({\n      service,\n      domain,\n      resource,\n      username,\n      password\n    }) => {\n      const xmpp = client({\n        service: service,\n        domain: domain,\n        resource: resource,\n        username: username,\n        password: password\n      });\n      xmpp.on(\"status\", this.onStatus);\n      xmpp.on(\"stanza\", this.onStanza);\n      xmpp.on(\"online\", this.onOnline);\n      xmpp.on(\"error\", this.onError);\n      xmpp.on(\"offline\", this.onOffline);\n      return xmpp;\n    };\n\n    this.onStanza = stanza => {\n      this.emit(\"stanza\", stanza);\n      if (stanza.is(\"message\")) this.onMessage(stanza);else if (stanza.is(\"presence\")) this.onPresence(stanza);else if (stanza.is(\"iq\")) this.onIQ(stanza);else return;\n    };\n\n    this.onOnline = __ => {\n      this.discoItensId = v4();\n      this.sendServiceDiscoveryRequest(this.discoItensId);\n      this.client.send(xml(\"presence\"));\n      this.emit(\"online\");\n    };\n\n    this.onOffline = () => {\n      this.emit(\"offline\");\n    };\n\n    this.onError = e => {\n      this.emit(\"error\", e);\n    };\n\n    this.onStatus = status => {\n      this.emit(\"status\", status);\n    };\n\n    this.onMessage = stanza => {\n      if (isTextMessage(stanza)) {\n        const message = {\n          id: getMessageId(stanza),\n          to: getTo(stanza),\n          from: getFrom(stanza),\n          message: getMessage(stanza),\n          type: getMessageType(stanza),\n          sent_at: new Date().toISOString(),\n          reply_to: getReplyTo(stanza),\n          reply_msg: getReplyMsg(stanza),\n          reply_msg_id: getReplyMsgId(stanza)\n        };\n        this.sendReceipts(stanza);\n        this.emit(\"message\", message);\n      } else if (isFileMessage(stanza)) {\n        const fileMessage = {\n          id: getMessageId(stanza),\n          to: getTo(stanza),\n          from: getFrom(stanza),\n          message: \"\",\n          type: getMessageType(stanza),\n          sent_at: new Date().toISOString(),\n          reply_to: getReplyTo(stanza),\n          reply_msg: getReplyMsg(stanza),\n          reply_msg_id: getReplyMsgId(stanza),\n          fileUrl: getMessagFileUrl(stanza)\n        };\n        this.sendReceipts(stanza);\n        this.emit(\"message\", fileMessage);\n      } else if (isReceived(stanza)) {\n        const received = {\n          id: getReceivedMessageId(stanza)\n        };\n        this.emit(Events.RECEIVED, received);\n      } else if (isDisplayed(stanza)) {\n        const displayed = {\n          id: getDisplayedMessageId(stanza)\n        };\n        this.emit(Events.DISPLAYED, displayed);\n      } else if (isComposing(stanza)) {\n        this.emit(Events.COMPOSING, getFrom(stanza));\n      } else if (isActive(stanza)) {\n        this.emit(Events.ACTIVE, getFrom(stanza));\n      }\n    };\n\n    this.onPresence = stanza => {\n      const presence = {\n        id: v4(),\n        from: stanza.attrs.from,\n        time: new Date().toISOString(),\n        status: stanza.getChild(\"show\") ? stanza.getChild(\"show\").children[0] : stanza.attrs.type || \"online\"\n      };\n      this.presences.set(stanza.attrs.from, presence);\n      this.emit(\"presence\", presence);\n    };\n\n    this.onIQ = stanza => {\n      if (stanza.attrs.type === \"result\") {\n        if (stanza.attrs.id) {\n          const file = this.filesQueue.get(stanza.attrs.id);\n\n          if (file) {\n            if (stanza.attrs.id === file.firstStepId) {\n              this.sendFileSecondStep(stanza);\n            } else if (stanza.attrs.id === file.secondStepId) {\n              this.sendFileThirdStep(stanza, file);\n            }\n          } else if (stanza.attrs.id === this.discoItensId) {\n            stanza.children[0].children.forEach(element => {\n              const key = element.attrs.jid.split(\".\")[0];\n              this.discoItems.set(key, element.attrs.jid);\n            });\n          }\n        }\n      }\n    };\n\n    this.getPresence = from => {\n      const presence = this.presences.get(from);\n      if (presence) return presence;else return null;\n    };\n\n    this.sendPresence = status => {\n      const show = xml(\"show\", {}, status);\n      if (status !== \"online\") this.client.send(xml(\"presence\", {}, show));else this.client.send(xml(\"presence\"));\n    };\n\n    this.sendMessage = (to, chatType, message, callback) => {\n      const msgId = v4();\n      this.client.send(xml(\"message\", {\n        id: msgId,\n        type: chatType,\n        to: to\n      }, xml(\"body\", {}, message), xml(\"request\", {\n        xmlns: \"urn:xmpp:receipts\"\n      }))).then(() => {\n        callback(msgId);\n      });\n    };\n\n    this.sendFile = (to, chatType, file, callback) => {\n      const fileId = v4();\n      this.filesQueue.set(fileId, {\n        firstStepId: fileId,\n        file: file,\n        to: to,\n        chatType: chatType,\n        callback: callback\n      });\n      this.sendFileFirstStep(fileId);\n    };\n\n    this.sendImageMessage = (url, to, chatType, callback) => {\n      const msgId = v4();\n      const messagePacket = xml(\"message\", {\n        id: msgId,\n        type: chatType,\n        to: to\n      }, xml(\"body\", {}, url), xml(\"request\", {\n        xmlns: \"urn:xmpp:receipts\"\n      }), xml(\"x\", {\n        xmlns: \"jabber:x:oob\"\n      }, xml(\"url\", {}, url)));\n\n      if (this.client) {\n        callback({\n          url,\n          msgId\n        });\n        this.client.send(messagePacket);\n      }\n    };\n\n    this.sendFileFirstStep = fileId => {\n      const uploadJid = this.discoItems.get(\"upload\");\n\n      if (uploadJid) {\n        this.sendServiceDiscoveryRequestToUpload(uploadJid, fileId);\n        return;\n      }\n    };\n\n    this.sendFileSecondStep = stanza => {\n      if (stanza.children.length > 0) {\n        const secondStepId = v4();\n        const file = this.filesQueue.get(stanza.attrs.id);\n\n        if (file) {\n          this.filesQueue.set(secondStepId, {\n            firstStepId: file.firstStepId,\n            secondStepId: secondStepId,\n            file: file.file,\n            to: file.to,\n            chatType: file.chatType,\n            callback: file.callback\n          });\n          this.filesQueue.delete(stanza.attrs.id);\n        }\n\n        console.log(\"upload request xmlns\", stanza.children[0].children[2].attrs.var);\n        this.sendRequestSlotOnUpload(stanza.attrs.from, secondStepId);\n      }\n    };\n\n    this.sendFileThirdStep = (stanza, file) => {\n      let getUrl = \"\";\n      let putUrl = \"\";\n      stanza.children[0].children.forEach(element => {\n        if (element.is(\"get\")) {\n          getUrl = element.attrs.url;\n        } else if (element.is(\"put\")) {\n          putUrl = element.attrs.url;\n        }\n      });\n      if (file === null || file === void 0 ? void 0 : file.secondStepId) this.uploadFile(putUrl, getUrl, file.secondStepId);\n    };\n\n    this.sendServiceDiscoveryRequest = fileId => {\n      const serviceDiscoveryRequest = xml(\"iq\", {\n        type: \"get\",\n        to: this.getDomain(),\n        id: fileId\n      }, xml(\"query\", {\n        xmlns: \"http://jabber.org/protocol/disco#items\"\n      }));\n\n      if (this.client) {\n        this.client.send(serviceDiscoveryRequest);\n      }\n    };\n\n    this.sendServiceDiscoveryRequestToUpload = (uploadJid, uploadId) => {\n      console.log(\"sendServiceDiscoveryRequestToUpload\", uploadJid);\n      const serviceDiscoveryRequest = xml(\"iq\", {\n        type: \"get\",\n        to: uploadJid,\n        id: uploadId\n      }, xml(\"query\", {\n        xmlns: \"http://jabber.org/protocol/disco#info\"\n      }));\n\n      if (this.client) {\n        this.client.send(serviceDiscoveryRequest);\n      }\n    };\n\n    this.sendRequestSlotOnUpload = (uploadJid, thirdStepId) => {\n      var _this$filesQueue$get;\n\n      console.log(\"sendRequestSlotOnUpload\", uploadJid);\n      const file = (_this$filesQueue$get = this.filesQueue.get(thirdStepId)) === null || _this$filesQueue$get === void 0 ? void 0 : _this$filesQueue$get.file;\n      const serviceDiscoveryRequest = xml(\"iq\", {\n        type: \"get\",\n        to: uploadJid,\n        id: thirdStepId\n      }, xml(\"request\", {\n        xmlns: \"urn:xmpp:http:upload:0\",\n        filename: file === null || file === void 0 ? void 0 : file.name,\n        size: file === null || file === void 0 ? void 0 : file.size,\n        \"content-type\": file === null || file === void 0 ? void 0 : file.type\n      }));\n\n      if (this.client) {\n        this.client.send(serviceDiscoveryRequest);\n      }\n    };\n\n    this.uploadFile = (putUrl, getUrl, id) => {\n      let xhr = new XMLHttpRequest();\n      const file = this.filesQueue.get(id);\n\n      if (file) {\n        xhr.onerror = () => {\n          if (xhr.responseText) {\n            file.callback(xhr.responseText, true);\n            console.log(\"upload error\");\n          }\n        };\n\n        xhr.onreadystatechange = e => {\n          if (xhr.readyState === XMLHttpRequest.DONE) {\n            console.log(\"file upload response\", e, xhr.status);\n\n            if (xhr.status === 200 || xhr.status === 201) {\n              console.log(\"file upload response success\");\n              this.sendImageMessage(getUrl, file.to, file.chatType, file === null || file === void 0 ? void 0 : file.callback);\n              this.filesQueue.delete(id);\n            }\n          }\n        };\n\n        xhr.upload.addEventListener(\"progress\", evt => {\n          console.log(\"progress\", evt); // if (file) file.file.size = evt.total\n        }, false);\n        xhr.open(\"PUT\", putUrl, true);\n        xhr.setRequestHeader(\"Content-Type\", file.file.type);\n        xhr.send(file.file);\n        console.log(\"URL\", putUrl);\n        console.log(\"fileSize\", file.file.size);\n      }\n    };\n\n    this.sendReceipts = stanza => {\n      const message = xml(\"message\", {\n        from: stanza.attrs.to,\n        id: v4(),\n        to: stanza.attrs.from.split(\"/\")[0]\n      }, xml(\"received\", {\n        xmlns: \"urn:xmpp:receipts\",\n        id: stanza.attrs.id\n      }));\n      console.log(message);\n      this.client.send(message);\n    };\n\n    this.sendTyping = to => {\n      const composing = xml(\"message\", {\n        id: v4(),\n        to: to,\n        type: \"chat\"\n      }, xml(\"composing\", {\n        xmlns: \"http://jabber.org/protocol/chatstates\"\n      }));\n      this.client.send(composing);\n    };\n\n    this.sendActive = to => {\n      const active = xml(\"message\", {\n        id: v4(),\n        to: to,\n        type: \"chat\"\n      }, xml(\"active\", {\n        xmlns: \"http://jabber.org/protocol/chatstates\"\n      }));\n      this.client.send(active);\n    };\n\n    this.replyMsg = (to, message, replyed_sender, replyed_msg, replyed_msg_id) => {\n      const reply = xml(\"message\", {\n        to: to\n      }, xml(\"body\", {}, message), xml(\"extraParams\", {}, xml(\"reply_to\", {}, replyed_sender), xml(\"reply_msg\", {}, replyed_msg), xml(\"reply_msg_id\", {}, replyed_msg_id)));\n      this.client.send(reply);\n    };\n\n    this.forwardMsg = (to, chatType, forwarded_msg_sender, forwarded_msg, forwarded_msg_id, callback) => {\n      const id = v4();\n      const forward = xml(\"message\", {\n        to: to,\n        id,\n        type: chatType\n      }, xml(\"body\", {}, forwarded_msg), xml(\"extraParams\", {}, xml(\"reply_to\", {}, forwarded_msg_sender), xml(\"reply_msg_id\", {}, forwarded_msg_id)), xml(\"request\", {\n        xmlns: \"urn:xmpp:receipts\"\n      }));\n      this.client.send(forward).then(() => {\n        callback(id);\n      });\n    };\n\n    this.joinRoom = to => {\n      const joinStanza = xml(\"presence\", {\n        to: `${to}/${this.username}`,\n        from: `${this.getJid()}/${this.resource}`\n      }, xml(\"x\", {\n        xmlns: \"http://jabber.org/protocol/muc\"\n      }, xml(\"history\", {\n        maxstanzas: \"0\"\n      })));\n      this.client.send(joinStanza);\n    };\n\n    Object.setPrototypeOf(this, Chat.prototype);\n    this.service = _service;\n    this.domain = _domain;\n    this.resource = _resource;\n    this.username = _username;\n    this.password = _password;\n    this.client = this.instanceMaker({\n      service: _service,\n      domain: _domain,\n      resource: _resource,\n      username: _username,\n      password: _password\n    });\n    this.status = this.client.status;\n    this.connect = this.client.start;\n    this.filesQueue = new Map();\n    this.presences = new Map();\n    this.discoItems = new Map();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/chat/chatcommunicator.ts"],"names":["client","xml","v4","Events","getFrom","getMessage","isTextMessage","getTo","getMessageId","isFileMessage","getMessageType","getMessagFileUrl","getReplyTo","getReplyMsg","getReplyMsgId","isReceived","isDisplayed","getReceivedMessageId","getDisplayedMessageId","isComposing","isActive","events","require","Chat","EventEmitter","constructor","service","domain","resource","username","password","getJid","getDomain","replace","split","instanceMaker","xmpp","on","onStatus","onStanza","onOnline","onError","onOffline","stanza","emit","is","onMessage","onPresence","onIQ","__","discoItensId","sendServiceDiscoveryRequest","send","e","status","message","id","to","from","type","sent_at","Date","toISOString","reply_to","reply_msg","reply_msg_id","sendReceipts","fileMessage","fileUrl","received","RECEIVED","displayed","DISPLAYED","COMPOSING","ACTIVE","presence","attrs","time","getChild","children","presences","set","file","filesQueue","get","firstStepId","sendFileSecondStep","secondStepId","sendFileThirdStep","forEach","element","key","jid","discoItems","getPresence","sendPresence","show","sendMessage","chatType","callback","msgId","xmlns","then","sendFile","fileId","sendFileFirstStep","sendImageMessage","url","messagePacket","uploadJid","sendServiceDiscoveryRequestToUpload","length","delete","console","log","var","sendRequestSlotOnUpload","getUrl","putUrl","uploadFile","serviceDiscoveryRequest","uploadId","thirdStepId","filename","name","size","xhr","XMLHttpRequest","onerror","responseText","onreadystatechange","readyState","DONE","upload","addEventListener","evt","open","setRequestHeader","sendTyping","composing","sendActive","active","replyMsg","replyed_sender","replyed_msg","replyed_msg_id","reply","forwardMsg","forwarded_msg_sender","forwarded_msg","forwarded_msg_id","forward","joinRoom","joinStanza","maxstanzas","Object","setPrototypeOf","prototype","connect","start","Map"],"mappings":"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","sourcesContent":["import { client, xml, XmppClient } from \"@xmpp/client\";\r\nimport { v4 } from \"uuid\";\r\nimport {\r\n  ActiveCallback,\r\n  ChatType,\r\n  ComposingCallback,\r\n  ConnectionOptions,\r\n  DisplayedCallback,\r\n  ErrorCallback,\r\n  Events,\r\n  FileMessage,\r\n  Message,\r\n  MessageCallback,\r\n  OfflineCallback,\r\n  OnlineCallback,\r\n  Presence,\r\n  PresenceCallback,\r\n  ReceivedCallback,\r\n  SendImageCallback,\r\n  SendingFile,\r\n  SendMessageCallback,\r\n  StanzaCallback,\r\n} from \"./types/types\";\r\nimport {\r\n  getFrom,\r\n  getMessage,\r\n  isTextMessage,\r\n  getTo,\r\n  getMessageId,\r\n  isFileMessage,\r\n  getMessageType,\r\n  getMessagFileUrl,\r\n  getReplyTo,\r\n  getReplyMsg,\r\n  getReplyMsgId,\r\n  isReceived,\r\n  isDisplayed,\r\n  getReceivedMessageId,\r\n  getDisplayedMessageId,\r\n  isComposing,\r\n  isActive,\r\n} from \"./util/stanzaUtils\";\r\nconst events = require(\"events\");\r\n\r\nexport default interface Chat {\r\n  service: string;\r\n  domain?: string;\r\n  resource: string;\r\n  username: string;\r\n  password?: string;\r\n  client: XmppClient;\r\n  status: string;\r\n  filesQueue: Map<string, SendingFile>;\r\n  presences: Map<string, Presence>;\r\n  connect(): Promise<any>;\r\n  on(event: Events.MESSAGE, cb: MessageCallback): this;\r\n  on(event: Events.PRESENCE, cb: PresenceCallback): this;\r\n  on(event: Events.ONLINE, cb: OnlineCallback): this;\r\n  on(event: Events.OFFLINE, cb: OfflineCallback): this;\r\n  on(event: Events.ERROR, cb: ErrorCallback): this;\r\n  on(event: Events.STANZA, cb: StanzaCallback): this;\r\n  on(event: Events.RECEIVED, cb: ReceivedCallback): this;\r\n  on(event: Events.DISPLAYED, cb: DisplayedCallback): this;\r\n  on(event: Events.COMPOSING, cb: ComposingCallback): this;\r\n  on(event: Events.ACTIVE, cb: ActiveCallback): this;\r\n  getPresence(from: string): Presence | null;\r\n  sendMessage(\r\n    to: string,\r\n    chatType: ChatType,\r\n    message: string,\r\n    cb: SendMessageCallback\r\n  ): void;\r\n  sendFile(\r\n    to: string,\r\n    chatType: ChatType,\r\n    file: File,\r\n    callback: SendImageCallback\r\n  ): void;\r\n  getDomain(): string;\r\n  joinRoom(to: string): void;\r\n}\r\nexport default class Chat extends events.EventEmitter {\r\n  constructor({\r\n    service,\r\n    domain,\r\n    resource,\r\n    username,\r\n    password,\r\n  }: ConnectionOptions) {\r\n    super();\r\n    Object.setPrototypeOf(this, Chat.prototype);\r\n    this.service = service;\r\n    this.domain = domain;\r\n    this.resource = resource;\r\n    this.username = username;\r\n    this.password = password;\r\n    this.client = this.instanceMaker({\r\n      service: service,\r\n      domain: domain,\r\n      resource: resource,\r\n      username: username,\r\n      password: password,\r\n    });\r\n    this.status = this.client.status;\r\n    this.connect = this.client.start;\r\n    this.filesQueue = new Map<string, SendingFile>();\r\n    this.presences = new Map<string, Presence>();\r\n    this.discoItems = new Map<string, string>();\r\n  }\r\n\r\n  getJid = () => {\r\n    return `${this.username}@${this.getDomain()}`;\r\n  };\r\n\r\n  getDomain = () => {\r\n    return (\r\n      this.domain ||\r\n      this.service.replace(\"wss://\", \"\").replace(\"ws://\", \"\").split(\"/\")[0]\r\n    );\r\n  };\r\n\r\n  instanceMaker = ({\r\n    service,\r\n    domain,\r\n    resource,\r\n    username,\r\n    password,\r\n  }: ConnectionOptions) => {\r\n    const xmpp = client({\r\n      service: service,\r\n      domain: domain,\r\n      resource: resource,\r\n      username: username,\r\n      password: password,\r\n    });\r\n    xmpp.on(\"status\", this.onStatus);\r\n    xmpp.on(\"stanza\", this.onStanza);\r\n    xmpp.on(\"online\", this.onOnline);\r\n    xmpp.on(\"error\", this.onError);\r\n    xmpp.on(\"offline\", this.onOffline);\r\n    return xmpp;\r\n  };\r\n\r\n  onStanza = (stanza: any) => {\r\n    this.emit(\"stanza\", stanza);\r\n    if (stanza.is(\"message\")) this.onMessage(stanza);\r\n    else if (stanza.is(\"presence\")) this.onPresence(stanza);\r\n    else if (stanza.is(\"iq\")) this.onIQ(stanza);\r\n    else return;\r\n  };\r\n\r\n  onOnline = (__: any) => {\r\n    this.discoItensId = v4();\r\n    this.sendServiceDiscoveryRequest(this.discoItensId);\r\n    this.client.send(xml(\"presence\"));\r\n    this.emit(\"online\");\r\n  };\r\n\r\n  onOffline = () => {\r\n    this.emit(\"offline\");\r\n  };\r\n\r\n  onError = (e: any) => {\r\n    this.emit(\"error\", e);\r\n  };\r\n\r\n  onStatus = (status: string) => {\r\n    this.emit(\"status\", status);\r\n  };\r\n\r\n  onMessage = (stanza: any) => {\r\n    if (isTextMessage(stanza)) {\r\n      const message: Message = {\r\n        id: getMessageId(stanza),\r\n        to: getTo(stanza),\r\n        from: getFrom(stanza),\r\n        message: getMessage(stanza),\r\n        type: getMessageType(stanza),\r\n        sent_at: new Date().toISOString(),\r\n        reply_to: getReplyTo(stanza),\r\n        reply_msg: getReplyMsg(stanza),\r\n        reply_msg_id: getReplyMsgId(stanza),\r\n      };\r\n      this.sendReceipts(stanza);\r\n      this.emit(\"message\", message);\r\n    } else if (isFileMessage(stanza)) {\r\n      const fileMessage: FileMessage = {\r\n        id: getMessageId(stanza),\r\n        to: getTo(stanza),\r\n        from: getFrom(stanza),\r\n        message: \"\",\r\n        type: getMessageType(stanza),\r\n        sent_at: new Date().toISOString(),\r\n        reply_to: getReplyTo(stanza),\r\n        reply_msg: getReplyMsg(stanza),\r\n        reply_msg_id: getReplyMsgId(stanza),\r\n        fileUrl: getMessagFileUrl(stanza),\r\n      };\r\n      this.sendReceipts(stanza);\r\n      this.emit(\"message\", fileMessage);\r\n    } else if (isReceived(stanza)) {\r\n      const received = {\r\n        id: getReceivedMessageId(stanza),\r\n      };\r\n      this.emit(Events.RECEIVED, received);\r\n    } else if (isDisplayed(stanza)) {\r\n      const displayed = {\r\n        id: getDisplayedMessageId(stanza),\r\n      };\r\n      this.emit(Events.DISPLAYED, displayed);\r\n    } else if (isComposing(stanza)) {\r\n      this.emit(Events.COMPOSING, getFrom(stanza));\r\n    } else if (isActive(stanza)) {\r\n      this.emit(Events.ACTIVE, getFrom(stanza));\r\n    }\r\n  };\r\n\r\n  onPresence = (stanza: any) => {\r\n    const presence: Presence = {\r\n      id: v4(),\r\n      from: stanza.attrs.from,\r\n      time: new Date().toISOString(),\r\n      status: stanza.getChild(\"show\")\r\n        ? stanza.getChild(\"show\").children[0]\r\n        : stanza.attrs.type || \"online\",\r\n    };\r\n    this.presences.set(stanza.attrs.from, presence);\r\n    this.emit(\"presence\", presence);\r\n  };\r\n\r\n  onIQ = (stanza: any) => {\r\n    if (stanza.attrs.type === \"result\") {\r\n      if (stanza.attrs.id) {\r\n        const file = this.filesQueue.get(stanza.attrs.id);\r\n        if (file) {\r\n          if (stanza.attrs.id === file.firstStepId) {\r\n            this.sendFileSecondStep(stanza);\r\n          } else if (stanza.attrs.id === file.secondStepId) {\r\n            this.sendFileThirdStep(stanza, file);\r\n          }\r\n        } else if (stanza.attrs.id === this.discoItensId) {\r\n          stanza.children[0].children.forEach((element: any) => {\r\n            const key = element.attrs.jid.split(\".\")[0];\r\n            this.discoItems.set(key, element.attrs.jid);\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  getPresence = (from: string) => {\r\n    const presence = this.presences.get(from);\r\n    if (presence) return presence;\r\n    else return null;\r\n  };\r\n  sendPresence = (status: string) => {\r\n    const show = xml(\"show\", {}, status);\r\n    if (status !== \"online\") this.client.send(xml(\"presence\", {}, show));\r\n    else this.client.send(xml(\"presence\"));\r\n  };\r\n  sendMessage = (\r\n    to: string,\r\n    chatType: ChatType,\r\n    message: string,\r\n    callback: SendMessageCallback\r\n  ) => {\r\n    const msgId = v4();\r\n    this.client\r\n      .send(\r\n        xml(\r\n          \"message\",\r\n          {\r\n            id: msgId,\r\n            type: chatType,\r\n            to: to,\r\n          },\r\n          xml(\"body\", {}, message),\r\n          xml(\"request\", { xmlns: \"urn:xmpp:receipts\" })\r\n        )\r\n      )\r\n      .then(() => {\r\n        callback(msgId);\r\n      });\r\n  };\r\n\r\n  sendFile = (\r\n    to: string,\r\n    chatType: ChatType,\r\n    file: File,\r\n    callback: SendImageCallback\r\n  ) => {\r\n    const fileId = v4();\r\n    this.filesQueue.set(fileId, {\r\n      firstStepId: fileId,\r\n      file: file,\r\n      to: to,\r\n      chatType: chatType,\r\n      callback: callback,\r\n    });\r\n    this.sendFileFirstStep(fileId);\r\n  };\r\n\r\n  sendImageMessage = (\r\n    url: string,\r\n    to: string,\r\n    chatType: ChatType,\r\n    callback: SendImageCallback\r\n  ) => {\r\n    const msgId = v4();\r\n    const messagePacket = xml(\r\n      \"message\",\r\n      {\r\n        id: msgId,\r\n        type: chatType,\r\n        to: to,\r\n      },\r\n      xml(\"body\", {}, url),\r\n      xml(\"request\", { xmlns: \"urn:xmpp:receipts\" }),\r\n      xml(\"x\", { xmlns: \"jabber:x:oob\" }, xml(\"url\", {}, url))\r\n    );\r\n    if (this.client) {\r\n      callback({ url, msgId });\r\n      this.client.send(messagePacket);\r\n    }\r\n  };\r\n\r\n  sendFileFirstStep = (fileId: string) => {\r\n    const uploadJid = this.discoItems.get(\"upload\");\r\n    if (uploadJid) {\r\n      this.sendServiceDiscoveryRequestToUpload(uploadJid, fileId);\r\n      return;\r\n    }\r\n  };\r\n\r\n  sendFileSecondStep = (stanza: any) => {\r\n    if (stanza.children.length > 0) {\r\n      const secondStepId = v4();\r\n      const file = this.filesQueue.get(stanza.attrs.id);\r\n      if (file) {\r\n        this.filesQueue.set(secondStepId, {\r\n          firstStepId: file.firstStepId,\r\n          secondStepId: secondStepId,\r\n          file: file.file,\r\n          to: file.to,\r\n          chatType: file.chatType,\r\n          callback: file.callback,\r\n        });\r\n        this.filesQueue.delete(stanza.attrs.id);\r\n      }\r\n      console.log(\r\n        \"upload request xmlns\",\r\n        stanza.children[0].children[2].attrs.var\r\n      );\r\n      this.sendRequestSlotOnUpload(stanza.attrs.from, secondStepId);\r\n    }\r\n  };\r\n\r\n  sendFileThirdStep = (stanza: any, file: SendingFile) => {\r\n    let getUrl = \"\";\r\n    let putUrl = \"\";\r\n    stanza.children[0].children.forEach((element: any) => {\r\n      if (element.is(\"get\")) {\r\n        getUrl = element.attrs.url;\r\n      } else if (element.is(\"put\")) {\r\n        putUrl = element.attrs.url;\r\n      }\r\n    });\r\n    if (file?.secondStepId) this.uploadFile(putUrl, getUrl, file.secondStepId);\r\n  };\r\n\r\n  sendServiceDiscoveryRequest = (fileId: string) => {\r\n    const serviceDiscoveryRequest = xml(\r\n      \"iq\",\r\n      {\r\n        type: \"get\",\r\n        to: this.getDomain(),\r\n        id: fileId,\r\n      },\r\n      xml(\"query\", { xmlns: \"http://jabber.org/protocol/disco#items\" })\r\n    );\r\n    if (this.client) {\r\n      this.client.send(serviceDiscoveryRequest);\r\n    }\r\n  };\r\n\r\n  sendServiceDiscoveryRequestToUpload = (\r\n    uploadJid: string,\r\n    uploadId: string\r\n  ) => {\r\n    console.log(\"sendServiceDiscoveryRequestToUpload\", uploadJid);\r\n    const serviceDiscoveryRequest = xml(\r\n      \"iq\",\r\n      {\r\n        type: \"get\",\r\n        to: uploadJid,\r\n        id: uploadId,\r\n      },\r\n      xml(\"query\", { xmlns: \"http://jabber.org/protocol/disco#info\" })\r\n    );\r\n    if (this.client) {\r\n      this.client.send(serviceDiscoveryRequest);\r\n    }\r\n  };\r\n\r\n  sendRequestSlotOnUpload = (uploadJid: string, thirdStepId: string) => {\r\n    console.log(\"sendRequestSlotOnUpload\", uploadJid);\r\n    const file = this.filesQueue.get(thirdStepId)?.file;\r\n    const serviceDiscoveryRequest = xml(\r\n      \"iq\",\r\n      {\r\n        type: \"get\",\r\n        to: uploadJid,\r\n        id: thirdStepId,\r\n      },\r\n      xml(\"request\", {\r\n        xmlns: \"urn:xmpp:http:upload:0\",\r\n        filename: file?.name,\r\n        size: file?.size,\r\n        \"content-type\": file?.type,\r\n      })\r\n    );\r\n    if (this.client) {\r\n      this.client.send(serviceDiscoveryRequest);\r\n    }\r\n  };\r\n\r\n  uploadFile = (putUrl: string, getUrl: string, id: string) => {\r\n    let xhr = new XMLHttpRequest();\r\n    const file = this.filesQueue.get(id);\r\n    if (file) {\r\n      xhr.onerror = () => {\r\n        if (xhr.responseText) {\r\n          file.callback(xhr.responseText, true);\r\n          console.log(\"upload error\");\r\n        }\r\n      };\r\n      xhr.onreadystatechange = (e) => {\r\n        if (xhr.readyState === XMLHttpRequest.DONE) {\r\n          console.log(\"file upload response\", e, xhr.status);\r\n          if (xhr.status === 200 || xhr.status === 201) {\r\n            console.log(\"file upload response success\");\r\n            this.sendImageMessage(\r\n              getUrl,\r\n              file.to,\r\n              file.chatType,\r\n              file?.callback\r\n            );\r\n            this.filesQueue.delete(id);\r\n          }\r\n        }\r\n      };\r\n      xhr.upload.addEventListener(\r\n        \"progress\",\r\n        (evt) => {\r\n          console.log(\"progress\", evt);\r\n          // if (file) file.file.size = evt.total\r\n        },\r\n        false\r\n      );\r\n      xhr.open(\"PUT\", putUrl, true);\r\n      xhr.setRequestHeader(\"Content-Type\", file.file.type);\r\n\r\n      xhr.send(file.file);\r\n\r\n      console.log(\"URL\", putUrl);\r\n      console.log(\"fileSize\", file.file.size);\r\n    }\r\n  };\r\n  sendReceipts = (stanza: any) => {\r\n    const message = xml(\r\n      \"message\",\r\n      {\r\n        from: stanza.attrs.to,\r\n        id: v4(),\r\n        to: stanza.attrs.from.split(\"/\")[0],\r\n      },\r\n      xml(\"received\", { xmlns: \"urn:xmpp:receipts\", id: stanza.attrs.id })\r\n    );\r\n    console.log(message);\r\n    this.client.send(message);\r\n  };\r\n  sendTyping = (to: string) => {\r\n    const composing = xml(\r\n      \"message\",\r\n      {\r\n        id: v4(),\r\n        to: to,\r\n        type: \"chat\",\r\n      },\r\n      xml(\"composing\", {\r\n        xmlns: \"http://jabber.org/protocol/chatstates\",\r\n      })\r\n    );\r\n    this.client.send(composing);\r\n  };\r\n  sendActive = (to: string) => {\r\n    const active = xml(\r\n      \"message\",\r\n      {\r\n        id: v4(),\r\n        to: to,\r\n        type: \"chat\",\r\n      },\r\n      xml(\"active\", {\r\n        xmlns: \"http://jabber.org/protocol/chatstates\",\r\n      })\r\n    );\r\n    this.client.send(active);\r\n  };\r\n  replyMsg = (\r\n    to: string,\r\n    message: string,\r\n    replyed_sender: string,\r\n    replyed_msg: string,\r\n    replyed_msg_id: string\r\n  ) => {\r\n    const reply = xml(\r\n      \"message\",\r\n      { to: to },\r\n      xml(\"body\", {}, message),\r\n      xml(\r\n        \"extraParams\",\r\n        {},\r\n        xml(\"reply_to\", {}, replyed_sender),\r\n        xml(\"reply_msg\", {}, replyed_msg),\r\n        xml(\"reply_msg_id\", {}, replyed_msg_id)\r\n      )\r\n    );\r\n    this.client.send(reply);\r\n  };\r\n  forwardMsg = (\r\n    to: string,\r\n    chatType: ChatType,\r\n    forwarded_msg_sender: string,\r\n    forwarded_msg: string,\r\n    forwarded_msg_id: string,\r\n    callback: SendMessageCallback\r\n  ) => {\r\n    const id = v4();\r\n    const forward = xml(\r\n      \"message\",\r\n      { to: to, id, type: chatType },\r\n      xml(\"body\", {}, forwarded_msg),\r\n      xml(\r\n        \"extraParams\",\r\n        {},\r\n        xml(\"reply_to\", {}, forwarded_msg_sender),\r\n        xml(\"reply_msg_id\", {}, forwarded_msg_id)\r\n      ),\r\n      xml(\"request\", { xmlns: \"urn:xmpp:receipts\" })\r\n    );\r\n    this.client.send(forward).then(() => {\r\n      callback(id);\r\n    });\r\n  };\r\n  joinRoom = (to: string) => {\r\n    const joinStanza = xml(\r\n      \"presence\",\r\n      {\r\n        to: `${to}/${this.username}`,\r\n        from: `${this.getJid()}/${this.resource}`,\r\n      },\r\n      xml(\r\n        \"x\",\r\n        { xmlns: \"http://jabber.org/protocol/muc\" },\r\n        xml(\"history\", { maxstanzas: \"0\" })\r\n      )\r\n    );\r\n    this.client.send(joinStanza);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}