{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\SelectParticipant.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { Input, Label } from \"reactstrap\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport { SearchContact } from \"../helpers/SearchContact\";\nimport sortContactGroup from \"../helpers/SortContactGroup\";\n\nconst SelectMember = ({\n  search,\n  handleCheckParticipant,\n  checkedContacts\n}) => {\n  var _actualGroup$members;\n\n  const {\n    contacts\n  } = useContact();\n  const {\n    groups\n  } = useGroup();\n  const {\n    activeChat\n  } = useChat();\n  let actualGroup = groups.find(grp => grp.groupId === activeChat.groupId);\n  let actualGroupMembersId = actualGroup === null || actualGroup === void 0 ? void 0 : (_actualGroup$members = actualGroup.members) === null || _actualGroup$members === void 0 ? void 0 : _actualGroup$members.map(mbrs => {\n    return mbrs.userId;\n  });\n  let [contactStorage, setContactStorage] = useState([]);\n\n  const init = () => {\n    setContactStorage(contacts.filter(ctc => {\n      if (actualGroupMembersId === null || actualGroupMembersId === void 0 ? void 0 : actualGroupMembersId.find(id => id === ctc.id)) {\n        return false;\n      }\n\n      return true;\n    }));\n  };\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, sortContactGroup(SearchContact(contactStorage, search ? search : \"\")).map((contact, key) => /*#__PURE__*/React.createElement(\"div\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ml-3 pl-1 font-weight-bold text-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, contact.group), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list-unstyled contact-list mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, contact.children.map(child => /*#__PURE__*/React.createElement(\"li\", {\n    key: child.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"custom-control custom-checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"checkbox\",\n    className: \"custom-control-input\",\n    onChange: e => {\n      handleCheckParticipant(e.target.checked, child);\n    },\n    id: \"participantCheck\" + child.id,\n    checked: checkedContacts.find(item => item.id === child.id) ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    className: \"custom-control-label\",\n    htmlFor: \"participantCheck\" + child.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 19\n    }\n  }, child.name))))))));\n};\n\nexport default SelectMember;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/SelectParticipant.tsx"],"names":["React","useEffect","useState","Input","Label","useGroup","useChat","useContact","SearchContact","sortContactGroup","SelectMember","search","handleCheckParticipant","checkedContacts","contacts","groups","activeChat","actualGroup","find","grp","groupId","actualGroupMembersId","members","map","mbrs","userId","contactStorage","setContactStorage","init","filter","ctc","id","contact","key","group","children","child","e","target","checked","item","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Input, Label } from \"reactstrap\";\r\nimport IContact from \"../alias/IContact\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport { SearchContact } from \"../helpers/SearchContact\";\r\nimport sortContactGroup from \"../helpers/SortContactGroup\";\r\n\r\ninterface IProps {\r\n  search?: string;\r\n  handleCheckParticipant(selected: boolean, contact: IContact): void;\r\n  checkedContacts: IContact[];\r\n}\r\n\r\nconst SelectMember: React.FC<IProps> = ({ search, handleCheckParticipant, checkedContacts }) => {\r\n  const {\r\n    contacts,\r\n  } = useContact();\r\n  const { groups } = useGroup();\r\n  const { activeChat } = useChat();\r\n  \r\n  let actualGroup = groups.find((grp) => (\r\n    grp.groupId === activeChat.groupId\r\n  ));  \r\n\r\n  let actualGroupMembersId = actualGroup?.members?.map((mbrs) => {\r\n    return mbrs.userId;\r\n  });\r\n\r\n  let [contactStorage, setContactStorage] = useState<IContact[]>([]);\r\n  const init = () => {\r\n    setContactStorage(\r\n      contacts.filter((ctc) => {\r\n        if(actualGroupMembersId?.find((id) => (id === ctc.id))){\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    ));\r\n  }\r\n  \r\n  useEffect(init, []);\r\n\r\n  \r\n  return (\r\n    <div className=\"mt-2\">\r\n      {sortContactGroup(\r\n        SearchContact(contactStorage, search ? search : \"\")\r\n      ).map((contact, key) => (\r\n        <div key={key}>\r\n          <div className=\"ml-3 pl-1 font-weight-bold text-primary\">\r\n            {contact.group}\r\n          </div>\r\n\r\n          <ul className=\"list-unstyled contact-list mb-2\">\r\n            {contact.children.map((child) => (\r\n              <li key={child.id}>\r\n                <div className=\"custom-control custom-checkbox\">\r\n                  <Input\r\n                    type=\"checkbox\"\r\n                    className=\"custom-control-input\"\r\n                    onChange={(e) => {\r\n                      handleCheckParticipant(e.target.checked, child);\r\n                    }}\r\n                    id={\"participantCheck\" + child.id}\r\n                    checked={ checkedContacts.find((item) => item.id === child.id) ? true : false }\r\n                  />\r\n                  <Label\r\n                    className=\"custom-control-label\"\r\n                    htmlFor={\"participantCheck\" + child.id}\r\n                  >\r\n                    {child.name}\r\n                  </Label>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectMember;\r\n"]},"metadata":{},"sourceType":"module"}