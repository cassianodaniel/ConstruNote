{"ast":null,"code":"(function (root, factory) {\n  if (typeof exports === 'object') {\n    // CommonJS\n    factory(exports, module);\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['exports', 'module'], factory);\n  }\n})(this, function (exports, module) {\n  /**\n   * PLAIN `Mechanism` constructor.\n   *\n   * This class implements the PLAIN SASL mechanism.\n   *\n   * The PLAIN SASL mechanism provides support for exchanging a clear-text\n   * username and password.  This mechanism should not be used without adequate\n   * security provided by an underlying transport layer. \n   *\n   * References:\n   *  - [RFC 4616](http://tools.ietf.org/html/rfc4616)\n   *\n   * @api public\n   */\n  function Mechanism() {}\n\n  Mechanism.prototype.name = 'PLAIN';\n  Mechanism.prototype.clientFirst = true;\n  /**\n   * Encode a response using given credential.\n   *\n   * Options:\n   *  - `username`\n   *  - `password`\n   *  - `authzid`   authorization identity (optional)\n   *\n   * @param {Object} cred\n   * @api public\n   */\n\n  Mechanism.prototype.response = function (cred) {\n    var str = '';\n    str += cred.authzid || '';\n    str += '\\0';\n    str += cred.username;\n    str += '\\0';\n    str += cred.password;\n    return str;\n  };\n  /**\n   * Decode a challenge issued by the server.\n   *\n   * @param {String} chal\n   * @return {Mechanism} for chaining\n   * @api public\n   */\n\n\n  Mechanism.prototype.challenge = function (chal) {\n    return this;\n  };\n\n  exports = module.exports = Mechanism;\n});","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sasl-plain/lib/mechanism.js"],"names":["root","factory","exports","module","define","amd","Mechanism","prototype","name","clientFirst","response","cred","str","authzid","username","password","challenge","chal"],"mappings":"AAAC,WAASA,IAAT,EAAeC,OAAf,EAAwB;AACvB,MAAI,OAAOC,OAAP,KAAmB,QAAvB,EAAiC;AAC/B;AACAD,IAAAA,OAAO,CAACC,OAAD,EAAUC,MAAV,CAAP;AACD,GAHD,MAGO,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;AACrD;AACAD,IAAAA,MAAM,CAAC,CAAC,SAAD,EAAY,QAAZ,CAAD,EAAwBH,OAAxB,CAAN;AACD;AACF,CARA,EAQC,IARD,EAQO,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAEhC;;;;;;;;;;;;;;AAcA,WAASG,SAAT,GAAqB,CACpB;;AAEDA,EAAAA,SAAS,CAACC,SAAV,CAAoBC,IAApB,GAA2B,OAA3B;AACAF,EAAAA,SAAS,CAACC,SAAV,CAAoBE,WAApB,GAAkC,IAAlC;AAEA;;;;;;;;;;;;AAWAH,EAAAA,SAAS,CAACC,SAAV,CAAoBG,QAApB,GAA+B,UAASC,IAAT,EAAe;AAC5C,QAAIC,GAAG,GAAG,EAAV;AACAA,IAAAA,GAAG,IAAID,IAAI,CAACE,OAAL,IAAgB,EAAvB;AACAD,IAAAA,GAAG,IAAI,IAAP;AACAA,IAAAA,GAAG,IAAID,IAAI,CAACG,QAAZ;AACAF,IAAAA,GAAG,IAAI,IAAP;AACAA,IAAAA,GAAG,IAAID,IAAI,CAACI,QAAZ;AACA,WAAOH,GAAP;AACD,GARD;AAUA;;;;;;;;;AAOAN,EAAAA,SAAS,CAACC,SAAV,CAAoBS,SAApB,GAAgC,UAASC,IAAT,EAAe;AAC7C,WAAO,IAAP;AACD,GAFD;;AAIAf,EAAAA,OAAO,GAAGC,MAAM,CAACD,OAAP,GAAiBI,SAA3B;AAED,CAhEA,CAAD","sourcesContent":["(function(root, factory) {\n  if (typeof exports === 'object') {\n    // CommonJS\n    factory(exports, module);\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD\n    define(['exports', 'module'], factory);\n  }\n}(this, function(exports, module) {\n\n  /**\n   * PLAIN `Mechanism` constructor.\n   *\n   * This class implements the PLAIN SASL mechanism.\n   *\n   * The PLAIN SASL mechanism provides support for exchanging a clear-text\n   * username and password.  This mechanism should not be used without adequate\n   * security provided by an underlying transport layer. \n   *\n   * References:\n   *  - [RFC 4616](http://tools.ietf.org/html/rfc4616)\n   *\n   * @api public\n   */\n  function Mechanism() {\n  }\n  \n  Mechanism.prototype.name = 'PLAIN';\n  Mechanism.prototype.clientFirst = true;\n  \n  /**\n   * Encode a response using given credential.\n   *\n   * Options:\n   *  - `username`\n   *  - `password`\n   *  - `authzid`   authorization identity (optional)\n   *\n   * @param {Object} cred\n   * @api public\n   */\n  Mechanism.prototype.response = function(cred) {\n    var str = '';\n    str += cred.authzid || '';\n    str += '\\0';\n    str += cred.username;\n    str += '\\0';\n    str += cred.password;\n    return str;\n  };\n  \n  /**\n   * Decode a challenge issued by the server.\n   *\n   * @param {String} chal\n   * @return {Mechanism} for chaining\n   * @api public\n   */\n  Mechanism.prototype.challenge = function(chal) {\n    return this;\n  };\n\n  exports = module.exports = Mechanism;\n  \n}));\n"]},"metadata":{},"sourceType":"script"}