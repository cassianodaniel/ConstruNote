{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\contexts\\\\ChatContext.tsx\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport { activeChat as activeChatData } from \"./../data/chat\"; //alias\n\nexport const ChatContext = createContext({});\nexport const ChatProvider = ({\n  children\n}) => {\n  const [showChat, setShowChat] = useState(false);\n  const [activeChat, setActiveChat] = useState(activeChatData);\n  const [chats, setChats] = useState([]);\n  const [showChatProfileSidebar, setShowChatProfileSidebar] = useState(false);\n  const [forwardMessageList, setForwardMessageList] = useState();\n  const [replyMsg, setReplyMsg] = useState();\n\n  const openChat = obj => {\n    if ((activeChat === null || activeChat === void 0 ? void 0 : activeChat.jid) === obj.jid) return;\n    setShowChat(true);\n    setChats(chats.map(item => {\n      if (item.jid === obj.jid) {\n        item.unRead = 0;\n        item.messageLoaded = item.messages.length >= 20 ? false : true;\n        setActiveChat(item);\n      }\n\n      return item;\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(ChatContext.Provider, {\n    value: {\n      showChat,\n      setShowChat,\n      activeChat,\n      setActiveChat,\n      openChat,\n      chats,\n      setChats,\n      forwardMessageList,\n      setForwardMessageList,\n      replyMsg,\n      setReplyMsg,\n      showChatProfileSidebar,\n      setShowChatProfileSidebar\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport function useChat() {\n  return useContext(ChatContext);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/contexts/ChatContext.tsx"],"names":["React","createContext","useContext","useState","activeChat","activeChatData","ChatContext","ChatProvider","children","showChat","setShowChat","setActiveChat","chats","setChats","showChatProfileSidebar","setShowChatProfileSidebar","forwardMessageList","setForwardMessageList","replyMsg","setReplyMsg","openChat","obj","jid","map","item","unRead","messageLoaded","messages","length","useChat"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,SAASC,UAAU,IAAIC,cAAvB,QAA6C,gBAA7C,C,CAEA;;AAsBA,OAAO,MAAMC,WAAW,GAAGL,aAAa,CACtC,EADsC,CAAjC;AAIP,OAAO,MAAMM,YAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACC,UAAD,EAAaO,aAAb,IAA8BR,QAAQ,CAACE,cAAD,CAA5C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAU,EAAV,CAAlC;AACA,QAAM,CAACW,sBAAD,EAAyBC,yBAAzB,IAAsDZ,QAAQ,CAAC,KAAD,CAApE;AACA,QAAM,CAACa,kBAAD,EAAqBC,qBAArB,IAA8Cd,QAAQ,EAA5D;AAGA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,EAAxC;;AAEA,QAAMiB,QAAQ,GAAIC,GAAD,IAAgB;AAC/B,QAAI,CAAAjB,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEkB,GAAZ,MAAoBD,GAAG,CAACC,GAA5B,EAAiC;AACjCZ,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAG,IAAAA,QAAQ,CACND,KAAK,CAACW,GAAN,CAAWC,IAAD,IAAU;AAClB,UAAIA,IAAI,CAACF,GAAL,KAAaD,GAAG,CAACC,GAArB,EAA0B;AACxBE,QAAAA,IAAI,CAACC,MAAL,GAAc,CAAd;AACAD,QAAAA,IAAI,CAACE,aAAL,GAAqBF,IAAI,CAACG,QAAL,CAAcC,MAAd,IAAwB,EAAxB,GAA6B,KAA7B,GAAqC,IAA1D;AACAjB,QAAAA,aAAa,CAACa,IAAD,CAAb;AACD;;AACD,aAAOA,IAAP;AACD,KAPD,CADM,CAAR;AAUD,GAbD;;AAeA,sBACE,oBAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLf,MAAAA,QADK;AAELC,MAAAA,WAFK;AAGLN,MAAAA,UAHK;AAILO,MAAAA,aAJK;AAKLS,MAAAA,QALK;AAMLR,MAAAA,KANK;AAOLC,MAAAA,QAPK;AAQLG,MAAAA,kBARK;AASLC,MAAAA,qBATK;AAULC,MAAAA,QAVK;AAWLC,MAAAA,WAXK;AAYLL,MAAAA,sBAZK;AAaLC,MAAAA;AAbK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAiBGP,QAjBH,CADF;AAqBD,CA9CM;AAgDP,OAAO,SAASqB,OAAT,GAAmB;AACxB,SAAO3B,UAAU,CAACI,WAAD,CAAjB;AACD","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport { activeChat as activeChatData } from \"./../data/chat\";\r\n\r\n//alias\r\nimport IChat from \"../alias/IChat\";\r\nimport IContact from \"../alias/IContact\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport IMessage from \"../alias/IMessage\";\r\n\r\ninterface IChatContextData {\r\n  showChat: boolean;\r\n  setShowChat(value: boolean): void;\r\n  activeChat: IChat;\r\n  setActiveChat(value: IChat): void;\r\n  openChat(obj: IChat): void;\r\n  chats: IChat[];\r\n  setChats(value: IChat[]): void;\r\n  forwardMessageList: (IContact | IGroup)[] | undefined;\r\n  setForwardMessageList(value: (IContact | IGroup)[] | undefined): void;\r\n  replyMsg: IMessage | undefined;\r\n  setReplyMsg(msg: IMessage | undefined): void;\r\n  showChatProfileSidebar: boolean;\r\n  setShowChatProfileSidebar(value: boolean) : void;\r\n}\r\n\r\nexport const ChatContext = createContext<IChatContextData>(\r\n  {} as IChatContextData\r\n);\r\n\r\nexport const ChatProvider: React.FC = ({ children }) => {\r\n  const [showChat, setShowChat] = useState(false);\r\n  const [activeChat, setActiveChat] = useState(activeChatData);\r\n  const [chats, setChats] = useState<IChat[]>([]);\r\n  const [showChatProfileSidebar, setShowChatProfileSidebar] = useState(false);\r\n  const [forwardMessageList, setForwardMessageList] = useState<\r\n    (IContact | IGroup)[] | undefined\r\n  >();\r\n  const [replyMsg, setReplyMsg] = useState<IMessage | undefined>();\r\n\r\n  const openChat = (obj: IChat) => {\r\n    if (activeChat?.jid === obj.jid) return;\r\n    setShowChat(true);\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.jid === obj.jid) {\r\n          item.unRead = 0;\r\n          item.messageLoaded = item.messages.length >= 20 ? false : true;\r\n          setActiveChat(item);\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        showChat,\r\n        setShowChat,\r\n        activeChat,\r\n        setActiveChat,\r\n        openChat,\r\n        chats,\r\n        setChats,\r\n        forwardMessageList,\r\n        setForwardMessageList,\r\n        replyMsg,\r\n        setReplyMsg,\r\n        showChatProfileSidebar, \r\n        setShowChatProfileSidebar\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useChat() {\r\n  return useContext(ChatContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}