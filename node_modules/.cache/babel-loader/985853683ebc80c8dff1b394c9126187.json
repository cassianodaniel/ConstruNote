{"ast":null,"code":"/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport withIntl from './injectIntl';\n\nvar FormattedPlural = function (props) {\n  var value = props.value,\n      other = props.other,\n      children = props.children,\n      _a = props.intl,\n      formatPlural = _a.formatPlural,\n      Text = _a.textComponent;\n  var pluralCategory = formatPlural(value, props);\n  var formattedPlural = props[pluralCategory] || other;\n\n  if (typeof children === 'function') {\n    return children(formattedPlural);\n  }\n\n  if (Text) {\n    return React.createElement(Text, null, formattedPlural);\n  } // Work around @types/react where React.FC cannot return string\n\n\n  return formattedPlural;\n};\n\nFormattedPlural.defaultProps = {\n  type: 'cardinal'\n};\nFormattedPlural.displayName = 'FormattedPlural'; // Explicitly annotate type here to workaround API extractor's inability to handle `import('./someModule')`\n// type annotations when rolling up DTS file.\n\nvar FormattedPluralWithIntl = withIntl(FormattedPlural);\nexport default FormattedPluralWithIntl;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/react-intl/lib/src/components/plural.js"],"names":["React","withIntl","FormattedPlural","props","value","other","children","_a","intl","formatPlural","Text","textComponent","pluralCategory","formattedPlural","createElement","defaultProps","type","displayName","FormattedPluralWithIntl"],"mappings":"AAAA;;;;;AAKA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,cAArB;;AACA,IAAIC,eAAe,GAAG,UAAUC,KAAV,EAAiB;AACnC,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;AAAA,MAAyBC,KAAK,GAAGF,KAAK,CAACE,KAAvC;AAAA,MAA8CC,QAAQ,GAAGH,KAAK,CAACG,QAA/D;AAAA,MAAyEC,EAAE,GAAGJ,KAAK,CAACK,IAApF;AAAA,MAA0FC,YAAY,GAAGF,EAAE,CAACE,YAA5G;AAAA,MAA0HC,IAAI,GAAGH,EAAE,CAACI,aAApI;AACA,MAAIC,cAAc,GAAGH,YAAY,CAACL,KAAD,EAAQD,KAAR,CAAjC;AACA,MAAIU,eAAe,GAAGV,KAAK,CAACS,cAAD,CAAL,IAAyBP,KAA/C;;AACA,MAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;AAChC,WAAOA,QAAQ,CAACO,eAAD,CAAf;AACH;;AACD,MAAIH,IAAJ,EAAU;AACN,WAAOV,KAAK,CAACc,aAAN,CAAoBJ,IAApB,EAA0B,IAA1B,EAAgCG,eAAhC,CAAP;AACH,GATkC,CAUnC;;;AACA,SAAOA,eAAP;AACH,CAZD;;AAaAX,eAAe,CAACa,YAAhB,GAA+B;AAC3BC,EAAAA,IAAI,EAAE;AADqB,CAA/B;AAGAd,eAAe,CAACe,WAAhB,GAA8B,iBAA9B,C,CACA;AACA;;AACA,IAAIC,uBAAuB,GAAGjB,QAAQ,CAACC,eAAD,CAAtC;AACA,eAAegB,uBAAf","sourcesContent":["/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport * as React from 'react';\nimport withIntl from './injectIntl';\nvar FormattedPlural = function (props) {\n    var value = props.value, other = props.other, children = props.children, _a = props.intl, formatPlural = _a.formatPlural, Text = _a.textComponent;\n    var pluralCategory = formatPlural(value, props);\n    var formattedPlural = props[pluralCategory] || other;\n    if (typeof children === 'function') {\n        return children(formattedPlural);\n    }\n    if (Text) {\n        return React.createElement(Text, null, formattedPlural);\n    }\n    // Work around @types/react where React.FC cannot return string\n    return formattedPlural;\n};\nFormattedPlural.defaultProps = {\n    type: 'cardinal',\n};\nFormattedPlural.displayName = 'FormattedPlural';\n// Explicitly annotate type here to workaround API extractor's inability to handle `import('./someModule')`\n// type annotations when rolling up DTS file.\nvar FormattedPluralWithIntl = withIntl(FormattedPlural);\nexport default FormattedPluralWithIntl;\n"]},"metadata":{},"sourceType":"module"}