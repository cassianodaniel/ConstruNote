{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\contexts\\\\GroupContext.tsx\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport { useChat } from \"./ChatContext\"; //alias\n\nimport ChatType from \"../enuns/ChatType\";\nexport const GroupContext = createContext({});\nexport const GroupProvider = ({\n  children\n}) => {\n  const [groups, setGroups] = useState([]);\n  const {\n    activeChat,\n    chats,\n    setChats,\n    setActiveChat,\n    setShowChat\n  } = useChat();\n  const [isMemberLeaving, setIsMemberLeaving] = useState(false);\n\n  const openGroup = obj => {\n    if ((activeChat === null || activeChat === void 0 ? void 0 : activeChat.jid) === obj.jid) return;\n    let find = false;\n    setChats(chats.map(item => {\n      if (item.jid === obj.jid) {\n        item.unRead = 0;\n        item.messageLoaded = item.messages.length >= 20 ? false : true;\n        setShowChat(true);\n        setActiveChat(item);\n        find = true;\n      }\n\n      return item;\n    }));\n\n    if (!find) {\n      let newChat = {\n        id: obj.jid.split(\"@\")[0],\n        jid: obj.jid,\n        name: obj.name,\n        profilePicture: obj.profilePicture,\n        messageLoaded: true,\n        unRead: 1,\n        chatType: ChatType.GROUP,\n        inputMessage: \"\",\n        isTyping: false,\n        messages: [],\n        favorite: obj.favorite,\n        added: obj.added,\n        members: obj.members\n      };\n      setShowChat(true);\n      setActiveChat(newChat);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(GroupContext.Provider, {\n    value: {\n      openGroup,\n      groups,\n      setGroups,\n      isMemberLeaving,\n      setIsMemberLeaving\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport function useGroup() {\n  return useContext(GroupContext);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/contexts/GroupContext.tsx"],"names":["React","createContext","useContext","useState","useChat","ChatType","GroupContext","GroupProvider","children","groups","setGroups","activeChat","chats","setChats","setActiveChat","setShowChat","isMemberLeaving","setIsMemberLeaving","openGroup","obj","jid","find","map","item","unRead","messageLoaded","messages","length","newChat","id","split","name","profilePicture","chatType","GROUP","inputMessage","isTyping","favorite","added","members","useGroup"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,SAASC,OAAT,QAAwB,eAAxB,C,CAEA;;AAEA,OAAOC,QAAP,MAAqB,mBAArB;AAUA,OAAO,MAAMC,YAAY,GAAGL,aAAa,CACvC,EADuC,CAAlC;AAIP,OAAO,MAAMM,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACvD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAW,EAAX,CAApC;AACA,QAAM;AAAEQ,IAAAA,UAAF;AAAcC,IAAAA,KAAd;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA,aAA/B;AAA8CC,IAAAA;AAA9C,MAA8DX,OAAO,EAA3E;AACA,QAAM,CAACY,eAAD,EAAkBC,kBAAlB,IAAwCd,QAAQ,CAAC,KAAD,CAAtD;;AAEA,QAAMe,SAAS,GAAIC,GAAD,IAAiB;AACjC,QAAI,CAAAR,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAES,GAAZ,MAAoBD,GAAG,CAACC,GAA5B,EAAiC;AACjC,QAAIC,IAAI,GAAG,KAAX;AAEAR,IAAAA,QAAQ,CACND,KAAK,CAACU,GAAN,CAAWC,IAAD,IAAU;AAClB,UAAIA,IAAI,CAACH,GAAL,KAAaD,GAAG,CAACC,GAArB,EAA0B;AACxBG,QAAAA,IAAI,CAACC,MAAL,GAAc,CAAd;AACAD,QAAAA,IAAI,CAACE,aAAL,GAAqBF,IAAI,CAACG,QAAL,CAAcC,MAAd,IAAwB,EAAxB,GAA6B,KAA7B,GAAqC,IAA1D;AACAZ,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAD,QAAAA,aAAa,CAACS,IAAD,CAAb;AACAF,QAAAA,IAAI,GAAG,IAAP;AACD;;AACD,aAAOE,IAAP;AACD,KATD,CADM,CAAR;;AAaA,QAAI,CAACF,IAAL,EAAW;AACT,UAAIO,OAAO,GAAG;AACZC,QAAAA,EAAE,EAAEV,GAAG,CAACC,GAAJ,CAAQU,KAAR,CAAc,GAAd,EAAmB,CAAnB,CADQ;AAEZV,QAAAA,GAAG,EAAED,GAAG,CAACC,GAFG;AAGZW,QAAAA,IAAI,EAAEZ,GAAG,CAACY,IAHE;AAIZC,QAAAA,cAAc,EAAEb,GAAG,CAACa,cAJR;AAKZP,QAAAA,aAAa,EAAE,IALH;AAMZD,QAAAA,MAAM,EAAE,CANI;AAOZS,QAAAA,QAAQ,EAAE5B,QAAQ,CAAC6B,KAPP;AAQZC,QAAAA,YAAY,EAAE,EARF;AASZC,QAAAA,QAAQ,EAAE,KATE;AAUZV,QAAAA,QAAQ,EAAE,EAVE;AAWZW,QAAAA,QAAQ,EAAElB,GAAG,CAACkB,QAXF;AAYZC,QAAAA,KAAK,EAAEnB,GAAG,CAACmB,KAZC;AAaZC,QAAAA,OAAO,EAAEpB,GAAG,CAACoB;AAbD,OAAd;AAeAxB,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAD,MAAAA,aAAa,CAACc,OAAD,CAAb;AACD;AACF,GApCD;;AAsCA,sBACE,oBAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLV,MAAAA,SADK;AAELT,MAAAA,MAFK;AAGLC,MAAAA,SAHK;AAILM,MAAAA,eAJK;AAKLC,MAAAA;AALK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGT,QATH,CADF;AAaD,CAxDM;AA0DP,OAAO,SAASgC,QAAT,GAAoB;AACzB,SAAOtC,UAAU,CAACI,YAAD,CAAjB;AACD","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport { useChat } from \"./ChatContext\";\r\n\r\n//alias\r\nimport IGroup from \"./../alias/IGroup\";\r\nimport ChatType from \"../enuns/ChatType\";\r\n\r\ninterface IGroupContextData {\r\n  openGroup(obj: IGroup): void;\r\n  groups: IGroup[];\r\n  setGroups(value: IGroup[]): void;\r\n  isMemberLeaving : boolean;\r\n  setIsMemberLeaving(value: boolean): void;\r\n}\r\n\r\nexport const GroupContext = createContext<IGroupContextData>(\r\n  {} as IGroupContextData\r\n);\r\n\r\nexport const GroupProvider: React.FC = ({ children }) => {\r\n  const [groups, setGroups] = useState<IGroup[]>([]);\r\n  const { activeChat, chats, setChats, setActiveChat, setShowChat } = useChat();\r\n  const [isMemberLeaving, setIsMemberLeaving] = useState(false);\r\n\r\n  const openGroup = (obj: IGroup) => {\r\n    if (activeChat?.jid === obj.jid) return;\r\n    let find = false;\r\n\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.jid === obj.jid) {\r\n          item.unRead = 0;\r\n          item.messageLoaded = item.messages.length >= 20 ? false : true;\r\n          setShowChat(true);\r\n          setActiveChat(item);\r\n          find = true;\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n\r\n    if (!find) {\r\n      let newChat = {\r\n        id: obj.jid.split(\"@\")[0],\r\n        jid: obj.jid,\r\n        name: obj.name,\r\n        profilePicture: obj.profilePicture,\r\n        messageLoaded: true,\r\n        unRead: 1,\r\n        chatType: ChatType.GROUP,\r\n        inputMessage: \"\",\r\n        isTyping: false,\r\n        messages: [],\r\n        favorite: obj.favorite,\r\n        added: obj.added,\r\n        members: obj.members,\r\n      };\r\n      setShowChat(true);\r\n      setActiveChat(newChat);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <GroupContext.Provider\r\n      value={{\r\n        openGroup,\r\n        groups,\r\n        setGroups,\r\n        isMemberLeaving,\r\n        setIsMemberLeaving\r\n      }}\r\n    >\r\n      {children}\r\n    </GroupContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useGroup() {\r\n  return useContext(GroupContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}