{"ast":null,"code":"import io from \"socket.io-client\";\nimport { getAuthorization } from \"./utils/localStorageUtils\"; // COMMANDS\n\nexport const commands = {\n  tmute: (conferenceId, memberId) => `conference ${conferenceId} tmute ${memberId}`,\n  tvmute: (conferenceId, memberId) => `conference ${conferenceId} tvmute ${memberId}`,\n  muteNonMod: conferenceId => `conference ${conferenceId} mute non_moderator`,\n  vmuteNonMod: conferenceId => `conference ${conferenceId} vmute non_moderator`,\n  kick: (conferenceId, memberId) => `conference ${conferenceId} kick ${memberId}`,\n  vidFloor: (conferenceId, memberId) => `conference ${conferenceId} vid-floor ${memberId}`,\n  listLayouts: conferenceId => `conference ${conferenceId} vid-layout list`,\n  setLayout: (conferenceId, layoutName) => `conference ${conferenceId} vid-layout ${layoutName}`\n};\nexport let ConferenceEvents;\n\n(function (ConferenceEvents) {\n  ConferenceEvents[\"UPDATE\"] = \"UPDATE\";\n  ConferenceEvents[\"REMOVE\"] = \"REMOVE\";\n})(ConferenceEvents || (ConferenceEvents = {}));\n\nexport default class SquadEvenstCommunicator {\n  constructor(settings) {\n    this.settings = settings;\n    this.currentSocket = void 0;\n\n    this.connect = (conferenceId, eventCallback) => {\n      if (this.currentSocket) this.disconnect();\n      const auth = getAuthorization();\n      this.settings.get(s => {\n        this.currentSocket = io(\n        /*s.eventServerUrl*/\n        \"https://fff762e39aa4.ngrok.io\", {\n          query: {\n            access_token: auth.access_token,\n            api_url: auth.baseUrl\n          }\n        });\n        this.currentSocket.on(\"connect\", () => {\n          var _this$currentSocket;\n\n          (_this$currentSocket = this.currentSocket) === null || _this$currentSocket === void 0 ? void 0 : _this$currentSocket.emit(\"enterRoom\", conferenceId.split(\"@\")[0]);\n        });\n        this.currentSocket.on(\"update\", data => {\n          console.log(data); // EMIT COMMAND\n          // this.currentSocket?.emit(\n          //   \"update\",\n          //   commands.tmute(\n          //     (data as ConferenceEvent).Caller_Name.replace(\n          //       \"citrus-conference-authenticated-\",\n          //       \"\"\n          //     ).replace(\"citrus-conference_\", \"\"),\n          //     (data as ConferenceEvent).members[0][\"Member-ID\"]\n          //   )\n          // );\n\n          data = typeof data === \"string\" ? JSON.parse(data) : data;\n          eventCallback(ConferenceEvents.UPDATE, data);\n        });\n      });\n    };\n\n    this.disconnect = () => {\n      var _this$currentSocket2, _this$currentSocket3;\n\n      (_this$currentSocket2 = this.currentSocket) === null || _this$currentSocket2 === void 0 ? void 0 : _this$currentSocket2.removeAllListeners();\n      (_this$currentSocket3 = this.currentSocket) === null || _this$currentSocket3 === void 0 ? void 0 : _this$currentSocket3.close();\n      this.currentSocket = undefined;\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadEventsCommunicator.ts"],"names":["io","getAuthorization","commands","tmute","conferenceId","memberId","tvmute","muteNonMod","vmuteNonMod","kick","vidFloor","listLayouts","setLayout","layoutName","ConferenceEvents","SquadEvenstCommunicator","constructor","settings","currentSocket","connect","eventCallback","disconnect","auth","get","s","query","access_token","api_url","baseUrl","on","emit","split","data","console","log","JSON","parse","UPDATE","removeAllListeners","close","undefined"],"mappings":"AACA,OAAOA,EAAP,MAAe,kBAAf;AAEA,SAASC,gBAAT,QAAiC,2BAAjC,C,CACA;;AACA,OAAO,MAAMC,QAAQ,GAAG;AACtBC,EAAAA,KAAK,EAAE,CAACC,YAAD,EAAuBC,QAAvB,KACJ,cAAaD,YAAa,UAASC,QAAS,EAFzB;AAGtBC,EAAAA,MAAM,EAAE,CAACF,YAAD,EAAuBC,QAAvB,KACL,cAAaD,YAAa,WAAUC,QAAS,EAJ1B;AAKtBE,EAAAA,UAAU,EAAGH,YAAD,IACT,cAAaA,YAAa,qBANP;AAOtBI,EAAAA,WAAW,EAAGJ,YAAD,IACV,cAAaA,YAAa,sBARP;AAStBK,EAAAA,IAAI,EAAE,CAACL,YAAD,EAAuBC,QAAvB,KACH,cAAaD,YAAa,SAAQC,QAAS,EAVxB;AAWtBK,EAAAA,QAAQ,EAAE,CAACN,YAAD,EAAuBC,QAAvB,KACP,cAAaD,YAAa,cAAaC,QAAS,EAZ7B;AAatBM,EAAAA,WAAW,EAAGP,YAAD,IACV,cAAaA,YAAa,kBAdP;AAetBQ,EAAAA,SAAS,EAAE,CAACR,YAAD,EAAuBS,UAAvB,KACR,cAAaT,YAAa,eAAcS,UAAW;AAhBhC,CAAjB;AAmBP,WAAYC,gBAAZ;;WAAYA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,KAAAA,gB;;AAyCZ,eAAe,MAAMC,uBAAN,CAA8B;AAE3CC,EAAAA,WAAW,CAASC,QAAT,EAAqC;AAAA,SAA5BA,QAA4B,GAA5BA,QAA4B;AAAA,SADxCC,aACwC;;AAAA,SAChDC,OADgD,GACtC,CAACf,YAAD,EAAuBgB,aAAvB,KAAwD;AAChE,UAAI,KAAKF,aAAT,EAAwB,KAAKG,UAAL;AACxB,YAAMC,IAAI,GAAGrB,gBAAgB,EAA7B;AACA,WAAKgB,QAAL,CAAcM,GAAd,CAAmBC,CAAD,IAAO;AACvB,aAAKN,aAAL,GAAqBlB,EAAE;AACrB;AAAqB,uCADA,EAErB;AACEyB,UAAAA,KAAK,EAAE;AACLC,YAAAA,YAAY,EAAEJ,IAAI,CAACI,YADd;AAELC,YAAAA,OAAO,EAAEL,IAAI,CAACM;AAFT;AADT,SAFqB,CAAvB;AASA,aAAKV,aAAL,CAAmBW,EAAnB,CAAsB,SAAtB,EAAiC,MAAM;AAAA;;AACrC,sCAAKX,aAAL,4EAAoBY,IAApB,CAAyB,WAAzB,EAAsC1B,YAAY,CAAC2B,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAtC;AACD,SAFD;AAGA,aAAKb,aAAL,CAAmBW,EAAnB,CAAsB,QAAtB,EAAiCG,IAAD,IAAoC;AAClEC,UAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADkE,CAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,UAAAA,IAAI,GAAG,OAAOA,IAAP,KAAgB,QAAhB,GAA2BG,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAA3B,GAA8CA,IAArD;AACAZ,UAAAA,aAAa,CAACN,gBAAgB,CAACuB,MAAlB,EAA0BL,IAA1B,CAAb;AACD,SAfD;AAgBD,OA7BD;AA8BD,KAlC+C;;AAAA,SAmChDX,UAnCgD,GAmCnC,MAAM;AAAA;;AACjB,mCAAKH,aAAL,8EAAoBoB,kBAApB;AACA,mCAAKpB,aAAL,8EAAoBqB,KAApB;AACA,WAAKrB,aAAL,GAAqBsB,SAArB;AACD,KAvC+C;AAAE;;AAFP","sourcesContent":["import SettingsBusiness from \"./business/Settings\";\r\nimport io from \"socket.io-client\";\r\nimport { Socket } from \"socket.io-client\";\r\nimport { getAuthorization } from \"./utils/localStorageUtils\";\r\n// COMMANDS\r\nexport const commands = {\r\n  tmute: (conferenceId: string, memberId: number) =>\r\n    `conference ${conferenceId} tmute ${memberId}`,\r\n  tvmute: (conferenceId: string, memberId: number) =>\r\n    `conference ${conferenceId} tvmute ${memberId}`,\r\n  muteNonMod: (conferenceId: string) =>\r\n    `conference ${conferenceId} mute non_moderator`,\r\n  vmuteNonMod: (conferenceId: string) =>\r\n    `conference ${conferenceId} vmute non_moderator`,\r\n  kick: (conferenceId: string, memberId: number) =>\r\n    `conference ${conferenceId} kick ${memberId}`,\r\n  vidFloor: (conferenceId: string, memberId: number) =>\r\n    `conference ${conferenceId} vid-floor ${memberId}`,\r\n  listLayouts: (conferenceId: string) =>\r\n    `conference ${conferenceId} vid-layout list`,\r\n  setLayout: (conferenceId: string, layoutName: string) =>\r\n    `conference ${conferenceId} vid-layout ${layoutName}`,\r\n};\r\n\r\nexport enum ConferenceEvents {\r\n  UPDATE = \"UPDATE\",\r\n  REMOVE = \"REMOVE\",\r\n}\r\nexport interface ConferenceEvent {\r\n  sip_server_ip: string;\r\n  Caller_Name: string;\r\n  members: ConferenceEventData[];\r\n}\r\nexport interface ConferenceEventData {\r\n  Caller_Name: string;\r\n  Conference_Name: string;\r\n  Caller_Caller_ID_Name: string;\r\n  Video: boolean;\r\n  Hear: boolean;\r\n  See: boolean;\r\n  Speak: boolean;\r\n  Talking: boolean;\r\n  Floor: boolean;\r\n  \"Mute-Detect\": boolean;\r\n  Hold: boolean;\r\n  \"Member-ID\": number;\r\n  \"Member-Type\": \"moderator\" | \"participant\";\r\n  \"Member-Ghost\": boolean;\r\n  Action:\r\n    | \"add-member\"\r\n    | \"floor-change\"\r\n    | \"video-floor-change\"\r\n    | \"mute-member\"\r\n    | \"unmute-member\"\r\n    | \"vmute-member\"\r\n    | \"unvmute-member\"\r\n    | \"start-talking\"\r\n    | \"stop-talking\"\r\n    | \"del-member\";\r\n}\r\ninterface EventCallback {\r\n  (event: ConferenceEvents, data: ConferenceEvent): void;\r\n}\r\n\r\nexport default interface SquadEventsCommunicator {}\r\nexport default class SquadEvenstCommunicator {\r\n  private currentSocket: typeof Socket | undefined;\r\n  constructor(private settings: SettingsBusiness) {}\r\n  connect = (conferenceId: string, eventCallback: EventCallback) => {\r\n    if (this.currentSocket) this.disconnect();\r\n    const auth = getAuthorization();\r\n    this.settings.get((s) => {\r\n      this.currentSocket = io(\r\n        /*s.eventServerUrl*/ \"https://fff762e39aa4.ngrok.io\",\r\n        {\r\n          query: {\r\n            access_token: auth.access_token,\r\n            api_url: auth.baseUrl,\r\n          },\r\n        }\r\n      );\r\n      this.currentSocket.on(\"connect\", () => {\r\n        this.currentSocket?.emit(\"enterRoom\", conferenceId.split(\"@\")[0]);\r\n      });\r\n      this.currentSocket.on(\"update\", (data: string | ConferenceEvent) => {\r\n        console.log(data);\r\n        // EMIT COMMAND\r\n        // this.currentSocket?.emit(\r\n        //   \"update\",\r\n        //   commands.tmute(\r\n        //     (data as ConferenceEvent).Caller_Name.replace(\r\n        //       \"citrus-conference-authenticated-\",\r\n        //       \"\"\r\n        //     ).replace(\"citrus-conference_\", \"\"),\r\n        //     (data as ConferenceEvent).members[0][\"Member-ID\"]\r\n        //   )\r\n        // );\r\n        data = typeof data === \"string\" ? JSON.parse(data) : data;\r\n        eventCallback(ConferenceEvents.UPDATE, data as ConferenceEvent);\r\n      });\r\n    });\r\n  };\r\n  disconnect = () => {\r\n    this.currentSocket?.removeAllListeners();\r\n    this.currentSocket?.close();\r\n    this.currentSocket = undefined;\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}