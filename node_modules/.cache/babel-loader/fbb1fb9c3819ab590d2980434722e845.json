{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events, ChatType as XMPPChatType } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\nlet squadService;\n\nconst SquadCommunicator = ({\n  children\n}) => {\n  var _squadService;\n\n  const {\n    chats,\n    setChats,\n    setGroups,\n    setContacts\n  } = useChat();\n  const {\n    setUser\n  } = useAuth();\n\n  const init = () => {\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"e9e34268a0adb4b4f009b508de092e2c\",\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      user_name: \"ZZ Romero 2\",\n      email: \"romero2@digivox.com.br\",\n      expires_in: 2592000,\n      baseUrl: \"https://app.citrussquad.com/api/v1/\"\n    }));\n  };\n\n  squadService = SquadService.getInstance(chatCommunicatorSubscribe);\n  (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.getUser(user => {\n    setUser(user);\n  });\n\n  function chatCommunicatorSubscribe(event, data) {\n    var _squadService2;\n\n    switch (event) {\n      case Events.ONLINE:\n        (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.getChats(receivedChats => {\n          var _squadService3, _squadService5;\n\n          setChats(receivedChats); //populating groups\n\n          (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.getGroups(groups => {\n            var _squadService4;\n\n            setGroups(groups);\n            (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : _squadService4.joinGroups();\n          }); //populating contacts\n\n          (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.getContacts(contacts => setContacts(contacts)); //populating chat's with messages\n\n          receivedChats.forEach(chat => {\n            var _squadService6;\n\n            (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : _squadService6.getMessages(chat, messages => {\n              console.log(messages);\n              const chatWithMessages = { ...chat\n              };\n              chatWithMessages.messages = chatWithMessages.messages.concat(messages);\n              setChats([...receivedChats.filter(cht => chat.id !== cht.id), chatWithMessages]);\n            });\n          });\n        });\n        break;\n\n      case Events.MESSAGE:\n        console.log(\"MESSAGE\", data);\n        console.log(chats);\n        let find = false;\n        let newChats = chats.map(chat => {\n          if (data.fromUser === chat.jid) {\n            chat.messages.push(data);\n            find = true;\n          }\n\n          return chat;\n        });\n\n        if (!find) {\n          var _squadService7;\n\n          let newChat = {};\n          (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : _squadService7.getContacts(listContacts => {\n            console.log(listContacts);\n            listContacts.map(c => {\n              if (c.jid === data.fromUser) {\n                newChat = {\n                  id: c.id,\n                  jid: c.jid,\n                  name: c.name,\n                  profilePicture: c.profilePicture,\n                  status: c.status,\n                  unRead: 1,\n                  chatType: ChatType.USER,\n                  inputMessage: \"\",\n                  isTyping: false,\n                  messages: []\n                };\n                newChat.messages.push(data);\n                newChats.unshift(newChat);\n                setChats(newChats);\n              }\n            });\n          });\n        } else {\n          setChats(newChats);\n        }\n\n        break;\n\n      case Events.PRESENCE:\n        console.log(\"PRESENCE\", data);\n        break;\n    }\n  } //squadService?.updateSubscribeFunction(chatCommunicatorSubscribe);\n\n\n  function createGroup(group, callback) {\n    var _squadService8;\n\n    (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : _squadService8.createGroup(group, iGroup => {\n      var _squadService9;\n\n      (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : _squadService9.getGroups(groups => {\n        setGroups(groups);\n        callback(true);\n      });\n    });\n  }\n\n  function sendMessage(chat, message) {\n    var _squadService10, _squadService10$chat, _squadService11;\n\n    (_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : (_squadService10$chat = _squadService10.chat) === null || _squadService10$chat === void 0 ? void 0 : _squadService10$chat.chat.sendMessage(chat.jid, chat.chatType === ChatType.USER ? XMPPChatType.CHAT : XMPPChatType.GROUPCHAT, message);\n    (_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : _squadService11.sendMessage(chat, message);\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","XMPPChatType","squadService","children","chats","setChats","setGroups","setContacts","setUser","init","localStorage","setItem","JSON","stringify","access_token","user_id","user_name","email","expires_in","baseUrl","getInstance","chatCommunicatorSubscribe","getUser","user","event","data","ONLINE","getChats","receivedChats","getGroups","groups","joinGroups","getContacts","contacts","forEach","chat","getMessages","messages","console","log","chatWithMessages","concat","filter","cht","id","MESSAGE","find","newChats","map","fromUser","jid","push","newChat","listContacts","c","name","profilePicture","status","unRead","chatType","USER","inputMessage","isTyping","unshift","PRESENCE","createGroup","group","callback","iGroup","sendMessage","message","CHAT","GROUPCHAT"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport INewGroup from \"../alias/INewGroup\";\r\n\r\nimport { Events, ChatType as XMPPChatType } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\n\r\ninterface CreateGroupCallback {\r\n  (groupCreated: boolean): void;\r\n}\r\n\r\nlet squadService: SquadService | undefined;\r\n\r\nconst SquadCommunicator: React.FC = ({ children }) => {\r\n  const { chats, setChats, setGroups, setContacts } = useChat();\r\n  const { setUser } = useAuth();\r\n\r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"e9e34268a0adb4b4f009b508de092e2c\",\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        user_name: \"ZZ Romero 2\",\r\n        email: \"romero2@digivox.com.br\",\r\n        expires_in: 2592000,\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n      })\r\n    );\r\n  };\r\n\r\n  squadService = SquadService.getInstance(chatCommunicatorSubscribe);\r\n  squadService?.getUser((user: IUser) => {\r\n    setUser(user);\r\n  });\r\n\r\n  function chatCommunicatorSubscribe(event: string, data: any) {\r\n    switch (event) {\r\n      case Events.ONLINE:\r\n        squadService?.getChats((receivedChats) => {\r\n          setChats(receivedChats);\r\n          //populating groups\r\n          squadService?.getGroups((groups) => {\r\n            setGroups(groups);\r\n            squadService?.joinGroups();\r\n          });\r\n          //populating contacts\r\n          squadService?.getContacts((contacts) => setContacts(contacts));\r\n          //populating chat's with messages\r\n\r\n          receivedChats.forEach((chat) => {\r\n            squadService?.getMessages(chat, (messages) => {\r\n              console.log(messages);\r\n              const chatWithMessages = { ...chat };\r\n              chatWithMessages.messages = chatWithMessages.messages.concat(\r\n                messages\r\n              );\r\n              setChats([\r\n                ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n                chatWithMessages,\r\n              ]);\r\n            });\r\n          });\r\n        });\r\n        break;\r\n      case Events.MESSAGE:\r\n        console.log(\"MESSAGE\", data);\r\n        console.log(chats);\r\n\r\n        let find = false;\r\n\r\n        let newChats = chats.map((chat) => {\r\n          if (data.fromUser === chat.jid) {\r\n            chat.messages.push(data);\r\n            find = true;\r\n          }\r\n          return chat;\r\n        });\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.getContacts((listContacts) => {\r\n            console.log(listContacts);\r\n\r\n            listContacts.map((c) => {\r\n              if (c.jid === data.fromUser) {\r\n                newChat = {\r\n                  id: c.id,\r\n                  jid: c.jid,\r\n                  name: c.name,\r\n                  profilePicture: c.profilePicture,\r\n                  status: c.status,\r\n                  unRead: 1,\r\n                  chatType: ChatType.USER,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  messages: [],\r\n                };\r\n                newChat.messages.push(data);\r\n                newChats.unshift(newChat);\r\n                setChats(newChats);\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          setChats(newChats);\r\n        }\r\n\r\n        break;\r\n      case Events.PRESENCE:\r\n        console.log(\"PRESENCE\", data);\r\n        break;\r\n    }\r\n  }\r\n\r\n  //squadService?.updateSubscribeFunction(chatCommunicatorSubscribe);\r\n\r\n  function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n    squadService?.createGroup(group, (iGroup: IGroup) => {\r\n      squadService?.getGroups((groups) => {\r\n        setGroups(groups);\r\n        callback(true);\r\n      });\r\n    });\r\n  }\r\n\r\n  function sendMessage(chat: IChat, message: string) {\r\n    squadService?.chat?.chat.sendMessage(\r\n      chat.jid,\r\n      chat.chatType === ChatType.USER\r\n        ? XMPPChatType.CHAT\r\n        : XMPPChatType.GROUPCHAT,\r\n      message\r\n    );\r\n    squadService?.sendMessage(chat, message);\r\n  }\r\n\r\n  useEffect(init, []);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}