{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import React from\"react\";import{Input,Label}from\"reactstrap\";import{useContact}from\"../contexts/ContactContext\";import{SearchContact}from\"../helpers/SearchContact\";import sortContactGroup from\"../helpers/SortContactGroup\";var SelectContact=function SelectContact(_ref){var search=_ref.search,contacts=_ref.contacts,handleCheckContact=_ref.handleCheckContact;var _useContact=useContact(),checkedContacts=_useContact.checkedContacts,setCheckedContacts=_useContact.setCheckedContacts;return/*#__PURE__*/React.createElement(\"div\",{className:\"mt-2\"},sortContactGroup(SearchContact(contacts,search?search:\"\")).map(function(contact,key){return/*#__PURE__*/React.createElement(\"div\",{key:key},/*#__PURE__*/React.createElement(\"div\",{className:\"ml-3 pl-1 font-weight-bold text-primary\"},contact.group),/*#__PURE__*/React.createElement(\"ul\",{className:\"list-unstyled contact-list mb-2\"},contact.children.map(function(child,keyChild){return/*#__PURE__*/React.createElement(\"li\",{key:keyChild},/*#__PURE__*/React.createElement(\"div\",{className:\"custom-control custom-checkbox\"},/*#__PURE__*/React.createElement(Input,{type:\"checkbox\",className:\"custom-control-input\",onChange:function onChange(e){handleCheckContact(e.target.checked,child);setCheckedContacts([].concat(_toConsumableArray(checkedContacts),[child]));},id:\"memberCheck\"+child.id,value:child.name}),/*#__PURE__*/React.createElement(Label,{className:\"custom-control-label\",htmlFor:\"memberCheck\"+child.id},child.name)));})));}));};export default SelectContact;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/SelectContact.tsx"],"names":["React","Input","Label","useContact","SearchContact","sortContactGroup","SelectContact","search","contacts","handleCheckContact","checkedContacts","setCheckedContacts","map","contact","key","group","children","child","keyChild","e","target","checked","id","name"],"mappings":"wLAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,KAAT,CAAgBC,KAAhB,KAA6B,YAA7B,CAEA,OAASC,UAAT,KAA2B,4BAA3B,CACA,OAASC,aAAT,KAA8B,0BAA9B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,6BAA7B,CAQA,GAAMC,CAAAA,aAA+B,CAAG,QAAlCA,CAAAA,aAAkC,MAIlC,IAHJC,CAAAA,MAGI,MAHJA,MAGI,CAFJC,QAEI,MAFJA,QAEI,CADJC,kBACI,MADJA,kBACI,iBAC4CN,UAAU,EADtD,CACIO,eADJ,aACIA,eADJ,CACqBC,kBADrB,aACqBA,kBADrB,CAGJ,mBACE,2BAAK,SAAS,CAAC,MAAf,EACGN,gBAAgB,CAACD,aAAa,CAACI,QAAD,CAAWD,MAAM,CAAGA,MAAH,CAAY,EAA7B,CAAd,CAAhB,CAAgEK,GAAhE,CACC,SAACC,OAAD,CAAUC,GAAV,qBACE,2BAAK,GAAG,CAAEA,GAAV,eACE,2BAAK,SAAS,CAAC,yCAAf,EACGD,OAAO,CAACE,KADX,CADF,cAKE,0BAAI,SAAS,CAAC,iCAAd,EACGF,OAAO,CAACG,QAAR,CAAiBJ,GAAjB,CAAqB,SAACK,KAAD,CAAQC,QAAR,qBACpB,0BAAI,GAAG,CAAEA,QAAT,eACE,2BAAK,SAAS,CAAC,gCAAf,eACE,oBAAC,KAAD,EACE,IAAI,CAAC,UADP,CAEE,SAAS,CAAC,sBAFZ,CAGE,QAAQ,CAAE,kBAACC,CAAD,CAAO,CACfV,kBAAkB,CAACU,CAAC,CAACC,MAAF,CAASC,OAAV,CAAmBJ,KAAnB,CAAlB,CACAN,kBAAkB,8BAAKD,eAAL,GAAsBO,KAAtB,GAAlB,CACD,CANH,CAOE,EAAE,CAAE,cAAgBA,KAAK,CAACK,EAP5B,CAQE,KAAK,CAAEL,KAAK,CAACM,IARf,EADF,cAWE,oBAAC,KAAD,EACE,SAAS,CAAC,sBADZ,CAEE,OAAO,CAAE,cAAgBN,KAAK,CAACK,EAFjC,EAIGL,KAAK,CAACM,IAJT,CAXF,CADF,CADoB,EAArB,CADH,CALF,CADF,EADD,CADH,CADF,CAsCD,CA7CD,CA+CA,cAAejB,CAAAA,aAAf","sourcesContent":["import React from \"react\";\r\nimport { Input, Label } from \"reactstrap\";\r\nimport IContact from \"../alias/IContact\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport { SearchContact } from \"../helpers/SearchContact\";\r\nimport sortContactGroup from \"../helpers/SortContactGroup\";\r\n\r\ninterface IProps {\r\n  search?: string;\r\n  contacts: IContact[];\r\n  handleCheckContact(selected: boolean, contact: IContact): void;\r\n}\r\n\r\nconst SelectContact: React.FC<IProps> = ({\r\n  search,\r\n  contacts,\r\n  handleCheckContact,\r\n}) => {\r\n  const { checkedContacts, setCheckedContacts } = useContact();\r\n\r\n  return (\r\n    <div className=\"mt-2\">\r\n      {sortContactGroup(SearchContact(contacts, search ? search : \"\")).map(\r\n        (contact, key) => (\r\n          <div key={key}>\r\n            <div className=\"ml-3 pl-1 font-weight-bold text-primary\">\r\n              {contact.group}\r\n            </div>\r\n\r\n            <ul className=\"list-unstyled contact-list mb-2\">\r\n              {contact.children.map((child, keyChild) => (\r\n                <li key={keyChild}>\r\n                  <div className=\"custom-control custom-checkbox\">\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      className=\"custom-control-input\"\r\n                      onChange={(e) => {\r\n                        handleCheckContact(e.target.checked, child);\r\n                        setCheckedContacts([...checkedContacts, child]);\r\n                      }}\r\n                      id={\"memberCheck\" + child.id}\r\n                      value={child.name}\r\n                    />\r\n                    <Label\r\n                      className=\"custom-control-label\"\r\n                      htmlFor={\"memberCheck\" + child.id}\r\n                    >\r\n                      {child.name}\r\n                    </Label>\r\n                  </div>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectContact;\r\n"]},"metadata":{},"sourceType":"module"}