{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\n// Comentado para Evitar Warnings no console\n// interface CreateGroupCallback {\n//   (groupCreated: boolean): void;\n// }\nlet squadService;\n\nconst SquadCommunicator = ({\n  children\n}) => {\n  var _squadService8;\n\n  const {\n    chats,\n    setChats,\n    setGroups,\n    setContacts\n  } = useChat();\n  const {\n    setUser\n  } = useAuth();\n\n  const init = () => {\n    var _squadService;\n\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"e9e34268a0adb4b4f009b508de092e2c\",\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      user_name: \"ZZ Romero 2\",\n      email: \"romero2@digivox.com.br\",\n      expires_in: 2592000,\n      baseUrl: \"https://app.citrussquad.com/api/v1/\"\n    }));\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\n    (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.user.get(user => {\n      setUser(user);\n    });\n  };\n\n  function chatCommunicatorSubscribe(event, data) {\n    var _squadService2;\n\n    switch (event) {\n      case Events.ONLINE:\n        (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.chats.list(receivedChats => {\n          var _squadService3, _squadService5;\n\n          setChats(receivedChats); //populating groups\n\n          (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.groups.list(groups => {\n            var _squadService4, _squadService4$chat;\n\n            setGroups(groups); //Joining Groups Rooms in XMPP\n\n            (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : (_squadService4$chat = _squadService4.chat) === null || _squadService4$chat === void 0 ? void 0 : _squadService4$chat.joinGroups(groups.map(group => group.jid));\n          }); //populating contacts\n\n          (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.contacts.list(contacts => setContacts(contacts)); //populating chat's with messages\n\n          receivedChats.forEach(chat => {\n            var _squadService6;\n\n            (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : _squadService6.messages.list(chat, messages => {\n              console.log(messages);\n              const chatWithMessages = { ...chat\n              };\n              chatWithMessages.messages = chatWithMessages.messages.concat(messages);\n              setChats([...receivedChats.filter(cht => chat.id !== cht.id), chatWithMessages]);\n            });\n          });\n        });\n        break;\n\n      case Events.MESSAGE:\n        console.log(\"MESSAGE\", data);\n        console.log(chats);\n        let find = false;\n        let newChats = chats.map(chat => {\n          if (data.fromUser === chat.jid) {\n            chat.messages.push(data);\n            find = true;\n          }\n\n          return chat;\n        });\n\n        if (!find) {\n          var _squadService7;\n\n          let newChat = {};\n          (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : _squadService7.contacts.list(listContacts => {\n            console.log(listContacts);\n            listContacts.forEach(c => {\n              if (c.jid === data.fromUser) {\n                newChat = {\n                  id: c.id,\n                  jid: c.jid,\n                  name: c.name,\n                  profilePicture: c.profilePicture,\n                  status: c.status,\n                  unRead: 1,\n                  chatType: ChatType.USER,\n                  inputMessage: \"\",\n                  isTyping: false,\n                  messages: []\n                };\n                newChat.messages.push(data);\n                newChats.unshift(newChat);\n                setChats(newChats);\n              }\n            });\n          });\n        } else {\n          setChats(newChats);\n        }\n\n        break;\n\n      case Events.PRESENCE:\n        console.log(\"PRESENCE\", data);\n        break;\n    }\n  }\n\n  (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : _squadService8.updateSubscribeFunction(chatCommunicatorSubscribe); // Comentado para evitar warnings no console enquanto não é usado\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\n  //     squadService?.groups.list((groups) => {\n  //       setGroups(groups);\n  //       callback(true);\n  //     });\n  //   });\n  // }\n  // function sendMessage(chat: IChat, message: string) {\n  //   squadService?.chat?.chat.sendMessage(\n  //     chat.jid,\n  //     chat.chatType === ChatType.USER\n  //       ? XMPPChatType.CHAT\n  //       : XMPPChatType.GROUPCHAT,\n  //     message\n  //   );\n  //   squadService?.chat?.sendMessage(chat, message);\n  // }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","squadService","children","chats","setChats","setGroups","setContacts","setUser","init","localStorage","setItem","JSON","stringify","access_token","user_id","user_name","email","expires_in","baseUrl","getInstance","chatCommunicatorSubscribe","user","get","event","data","ONLINE","list","receivedChats","groups","chat","joinGroups","map","group","jid","contacts","forEach","messages","console","log","chatWithMessages","concat","filter","cht","id","MESSAGE","find","newChats","fromUser","push","newChat","listContacts","c","name","profilePicture","status","unRead","chatType","USER","inputMessage","isTyping","unshift","PRESENCE","updateSubscribeFunction"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\n\r\nimport { Events } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\n// Comentado para Evitar Warnings no console\r\n// interface CreateGroupCallback {\r\n//   (groupCreated: boolean): void;\r\n// }\r\n\r\nlet squadService: SquadService | undefined;\r\n\r\nconst SquadCommunicator: React.FC = ({ children }) => {\r\n  const { chats, setChats, setGroups, setContacts } = useChat();\r\n  const { setUser } = useAuth();\r\n\r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"e9e34268a0adb4b4f009b508de092e2c\",\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        user_name: \"ZZ Romero 2\",\r\n        email: \"romero2@digivox.com.br\",\r\n        expires_in: 2592000,\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n      })\r\n    );\r\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\r\n    squadService?.user.get((user: IUser) => {\r\n      setUser(user);\r\n    });\r\n  };\r\n  function chatCommunicatorSubscribe(event: string, data: any) {\r\n    switch (event) {\r\n      case Events.ONLINE:\r\n        squadService?.chats.list((receivedChats) => {\r\n          setChats(receivedChats);\r\n          //populating groups\r\n          squadService?.groups.list((groups) => {\r\n            setGroups(groups);\r\n            //Joining Groups Rooms in XMPP\r\n            squadService?.chat?.joinGroups(groups.map((group) => group.jid));\r\n          });\r\n          //populating contacts\r\n          squadService?.contacts.list((contacts) => setContacts(contacts));\r\n          //populating chat's with messages\r\n\r\n          receivedChats.forEach((chat) => {\r\n            squadService?.messages.list(chat, (messages) => {\r\n              console.log(messages);\r\n              const chatWithMessages = { ...chat };\r\n              chatWithMessages.messages = chatWithMessages.messages.concat(\r\n                messages\r\n              );\r\n              setChats([\r\n                ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n                chatWithMessages,\r\n              ]);\r\n            });\r\n          });\r\n        });\r\n        break;\r\n      case Events.MESSAGE:\r\n        console.log(\"MESSAGE\", data);\r\n        console.log(chats);\r\n\r\n        let find = false;\r\n\r\n        let newChats = chats.map((chat) => {\r\n          if (data.fromUser === chat.jid) {\r\n            chat.messages.push(data);\r\n            find = true;\r\n          }\r\n          return chat;\r\n        });\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.contacts.list((listContacts) => {\r\n            console.log(listContacts);\r\n\r\n            listContacts.forEach((c) => {\r\n              if (c.jid === data.fromUser) {\r\n                newChat = {\r\n                  id: c.id,\r\n                  jid: c.jid,\r\n                  name: c.name,\r\n                  profilePicture: c.profilePicture,\r\n                  status: c.status,\r\n                  unRead: 1,\r\n                  chatType: ChatType.USER,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  messages: [],\r\n                };\r\n                newChat.messages.push(data);\r\n                newChats.unshift(newChat);\r\n                setChats(newChats);\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          setChats(newChats);\r\n        }\r\n\r\n        break;\r\n      case Events.PRESENCE:\r\n        console.log(\"PRESENCE\", data);\r\n        break;\r\n    }\r\n  }\r\n\r\n  squadService?.updateSubscribeFunction(chatCommunicatorSubscribe);\r\n  // Comentado para evitar warnings no console enquanto não é usado\r\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\r\n  //     squadService?.groups.list((groups) => {\r\n  //       setGroups(groups);\r\n  //       callback(true);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  // function sendMessage(chat: IChat, message: string) {\r\n  //   squadService?.chat?.chat.sendMessage(\r\n  //     chat.jid,\r\n  //     chat.chatType === ChatType.USER\r\n  //       ? XMPPChatType.CHAT\r\n  //       : XMPPChatType.GROUPCHAT,\r\n  //     message\r\n  //   );\r\n  //   squadService?.chat?.sendMessage(chat, message);\r\n  // }\r\n\r\n  useEffect(init, []);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}