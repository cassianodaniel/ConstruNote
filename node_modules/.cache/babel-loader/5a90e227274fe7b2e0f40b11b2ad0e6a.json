{"ast":null,"code":"import { parseGroup } from \"../utils/parseUtils\";\nexport default class GroupsBusiness {\n  constructor(api, settings, contacts) {\n    this.api = api;\n    this.settings = settings;\n    this.contacts = contacts;\n    this.groups = void 0;\n\n    this.getGroups = () => {\n      return this.groups;\n    };\n\n    this.list = callback => {\n      this.api.getGroups({\n        paramsUrl: {\n          members: true,\n          limit: 5000\n        }\n      }, (apiGroups, err) => {\n        // Populando o Map de grupos\n        if (!err) {\n          if (!this.api) return;\n          this.api.getContacts({\n            paramsUrl: {\n              contactType: \"group\",\n              limit: 5000,\n              added: true\n            }\n          }, apiGroupsContactsFormat => {\n            this.populate(apiGroups, apiGroupsContactsFormat);\n            callback(Array.from(this.groups.values()));\n          });\n        }\n      });\n    };\n\n    this.create = (group, callback) => {\n      if (!this.api) return;\n      this.settings.get(settings => {\n        const contactsId = group.contacts.map(contact => contact.id);\n        const body = {\n          name: group.name,\n          description: group.description,\n          members: contactsId,\n          domain: settings.sipDomain\n        };\n        this.api.createGroup({\n          body\n        }, (returnGroup, err) => {\n          if (err) return;\n          if (!this.api) return;\n          if (!returnGroup) return;\n          this.api.getGroup(returnGroup.id, {\n            paramsUrl: {\n              members: true\n            }\n          }, groupWithMember => {\n            const parsedGroup = parseGroup(groupWithMember);\n            this.groups.set(parsedGroup.groupId, parsedGroup);\n            callback(parsedGroup);\n          });\n        });\n      });\n    };\n\n    this.removeMember = (grp, mbr, callback) => {\n      this.api.removeMember({\n        groupId: grp,\n        memberId: mbr.userId\n      }, callback);\n    };\n\n    this.groups = new Map();\n  }\n\n  populate(apiGroups, apiGroupsContactsFormat) {\n    apiGroups.groups.forEach(group => {\n      const apiContactGroup = apiGroupsContactsFormat.contacts.find(grp => grp.id === group.id);\n      this.groups.set(group.id, parseGroup(Object.assign(group, apiContactGroup)));\n    });\n  }\n\n  leftingGroup(request, callback) {\n    this.api.leaveGroup({\n      memberId: request.memberId,\n      groupId: request.groupId\n    }, callback);\n  }\n\n}\n;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Groups.ts"],"names":["parseGroup","GroupsBusiness","constructor","api","settings","contacts","groups","getGroups","list","callback","paramsUrl","members","limit","apiGroups","err","getContacts","contactType","added","apiGroupsContactsFormat","populate","Array","from","values","create","group","get","contactsId","map","contact","id","body","name","description","domain","sipDomain","createGroup","returnGroup","getGroup","groupWithMember","parsedGroup","set","groupId","removeMember","grp","mbr","memberId","userId","Map","forEach","apiContactGroup","find","Object","assign","leftingGroup","request","leaveGroup"],"mappings":"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","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport IGroup from \"../../alias/IGroup\";\r\nimport INewGroup from \"../../alias/INewGroup\";\r\nimport IMember from \"../../alias/IMember\";\r\nimport { parseGroup } from \"../utils/parseUtils\";\r\nimport ContactsBusiness from \"./Contacts\";\r\nimport SettingsBusiness from \"./Settings\";\r\nimport {\r\n  LeaveGroupCallback,\r\n  LeaveGroupRequest,\r\n  RemoveMemberCallback\r\n} from \"@digivox/apicommunicator/dist/types/types/types\";\r\n\r\nexport interface NewGroupCallback {\r\n  (group: IGroup): void;\r\n}\r\nexport interface GroupsCallBack {\r\n  (groups: IGroup[]): void;\r\n}\r\nexport default interface GroupsBusiness {\r\n  getGroups(): Map<string, IGroup>;\r\n  list(callback: GroupsCallBack): void;\r\n  create(group: INewGroup, cb: NewGroupCallback): void;\r\n}\r\nexport default class GroupsBusiness {\r\n  public groups: Map<string, IGroup>;\r\n  constructor(\r\n    private api: API,\r\n    private settings: SettingsBusiness,\r\n    private contacts: ContactsBusiness\r\n  ) {\r\n    this.groups = new Map<string, IGroup>();\r\n  }\r\n  getGroups = () => {\r\n    return this.groups;\r\n  };\r\n  list = (callback: GroupsCallBack) => {\r\n    this.api.getGroups(\r\n      { paramsUrl: { members: true, limit: 5000 } },\r\n      (apiGroups: any, err) => {\r\n        // Populando o Map de grupos\r\n        if (!err) {\r\n          if (!this.api) return;\r\n          this.api.getContacts(\r\n            { paramsUrl: { contactType: \"group\", limit: 5000, added: true } },\r\n            (apiGroupsContactsFormat) => {\r\n              this.populate(apiGroups, apiGroupsContactsFormat);\r\n              callback(Array.from(this.groups.values()));\r\n            }\r\n          );\r\n        }\r\n      }\r\n    );\r\n  };\r\n  create = (group: INewGroup, callback: NewGroupCallback) => {\r\n    if (!this.api) return;\r\n    this.settings.get((settings) => {\r\n      const contactsId = group.contacts.map((contact) => contact.id);\r\n      const body = {\r\n        name: group.name,\r\n        description: group.description,\r\n        members: contactsId,\r\n        domain: settings.sipDomain,\r\n      };\r\n      this.api.createGroup({ body }, (returnGroup, err) => {\r\n        if (err) return;\r\n        if (!this.api) return;\r\n        if (!returnGroup) return;\r\n        this.api.getGroup(\r\n          returnGroup.id,\r\n          { paramsUrl: { members: true } },\r\n          (groupWithMember) => {\r\n            const parsedGroup = parseGroup(groupWithMember);\r\n            this.groups.set(parsedGroup.groupId, parsedGroup);\r\n            callback(parsedGroup);\r\n          }\r\n        );\r\n      });\r\n    });\r\n  };\r\n  populate(apiGroups: any, apiGroupsContactsFormat: any) {\r\n    apiGroups.groups.forEach((group: any) => {\r\n      const apiContactGroup = apiGroupsContactsFormat.contacts.find(\r\n        (grp: any) => grp.id === group.id\r\n      );\r\n      this.groups.set(\r\n        group.id,\r\n        parseGroup(Object.assign(group, apiContactGroup))\r\n      );\r\n    });\r\n  };\r\n  leftingGroup(request: LeaveGroupRequest, callback: LeaveGroupCallback){\r\n    this.api.leaveGroup({memberId: request.memberId, groupId: request.groupId}, callback);\r\n  };\r\n  removeMember = (grp: string, mbr: IMember, callback: RemoveMemberCallback) => {\r\n    this.api.removeMember(\r\n      {\r\n        groupId: grp,\r\n        memberId: mbr.userId\r\n      },\r\n      callback\r\n    );\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}