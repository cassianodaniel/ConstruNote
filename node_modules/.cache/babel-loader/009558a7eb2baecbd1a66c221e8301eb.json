{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import{parseGroup}from\"../utils/parseUtils\";var GroupsBusiness=/*#__PURE__*/function(){function GroupsBusiness(api,settings,contacts){var _this=this;_classCallCheck(this,GroupsBusiness);this.api=api;this.settings=settings;this.contacts=contacts;this.groups=void 0;this.chat=void 0;this.setChat=function(chat){_this.chat=chat;};this.getGroups=function(){return _this.groups;};this.list=function(callback){_this.api.getGroups({paramsUrl:{members:true,limit:5000}},function(apiGroups,err){// Populando o Map de grupos\nif(!err){if(!_this.api)return;_this.api.getContacts({paramsUrl:{contactType:\"group\",limit:5000,added:true}},function(apiGroupsContactsFormat){_this.populate(apiGroups,apiGroupsContactsFormat);callback(Array.from(_this.groups.values()));});}});};this.create=function(group,callback){if(!_this.api)return;_this.settings.get(function(settings){var contactsId=group===null||group===void 0?void 0:group.contacts.map(function(contact){return contact.id;});var body={name:group===null||group===void 0?void 0:group.name,description:group===null||group===void 0?void 0:group.description,members:contactsId,domain:settings.sipDomain};_this.api.createGroup({body:body},function(returnGroup,err){if(err)return;if(!_this.api)return;if(!returnGroup)return;_this.api.getGroup(returnGroup.id,{paramsUrl:{members:true}},function(groupWithMember){var _this$chat;var parsedGroup=parseGroup(groupWithMember,(_this$chat=_this.chat)===null||_this$chat===void 0?void 0:_this$chat.chat.presences);_this.groups.set(parsedGroup.groupId,parsedGroup);if(callback){callback(parsedGroup);}});});});};this.removeMember=function(grp,mbr,callback){_this.api.removeMember({groupId:grp,memberId:mbr.userId},callback);};this.addMember=function(grp,ctc,callback){_this.api.addMember({groupId:grp.groupId,memberId:ctc.id},callback);};this.groups=new Map();}_createClass(GroupsBusiness,[{key:\"populate\",value:function populate(apiGroups,apiGroupsContactsFormat){var _this2=this;apiGroups.groups.forEach(function(group){var _this2$chat;var apiContactGroup=apiGroupsContactsFormat.contacts.find(function(grp){return grp.id===group.id;});_this2.groups.set(group.id,parseGroup(Object.assign(group,apiContactGroup),(_this2$chat=_this2.chat)===null||_this2$chat===void 0?void 0:_this2$chat.chat.presences));});}},{key:\"leftingGroup\",value:function leftingGroup(request,callback){this.api.leaveGroup({memberId:request.memberId,groupId:request.groupId},callback);}},{key:\"editGroupInfo\",value:function editGroupInfo(request,callback){this.api.changeGroupInfo({groupId:request.groupId,groupName:request.groupName,members:request.members,description:request.description},callback);}}]);return GroupsBusiness;}();export{GroupsBusiness as default};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Groups.ts"],"names":["parseGroup","GroupsBusiness","api","settings","contacts","groups","chat","setChat","getGroups","list","callback","paramsUrl","members","limit","apiGroups","err","getContacts","contactType","added","apiGroupsContactsFormat","populate","Array","from","values","create","group","get","contactsId","map","contact","id","body","name","description","domain","sipDomain","createGroup","returnGroup","getGroup","groupWithMember","parsedGroup","presences","set","groupId","removeMember","grp","mbr","memberId","userId","addMember","ctc","Map","forEach","apiContactGroup","find","Object","assign","request","leaveGroup","changeGroupInfo","groupName"],"mappings":"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","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport IGroup from \"../../alias/IGroup\";\r\nimport INewGroup from \"../../alias/INewGroup\";\r\nimport IMember from \"../../alias/IMember\";\r\nimport IContact from \"../../alias/IContact\";\r\nimport { parseGroup } from \"../utils/parseUtils\";\r\nimport ContactsBusiness from \"./Contacts\";\r\nimport SettingsBusiness from \"./Settings\";\r\nimport {\r\n  LeaveGroupCallback,\r\n  LeaveGroupRequest,\r\n  RemoveMemberCallback,\r\n  AddMemberCallback,\r\n  ChangeGroupInfoRequest,\r\n  ChangeGroupInfoCallback,\r\n} from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport SquadChatCommunicator from \"../SquadChatCommunicator\";\r\n\r\nexport interface NewGroupCallback {\r\n  (group: IGroup | undefined): void;\r\n}\r\nexport interface GroupsCallBack {\r\n  (groups: IGroup[]): void;\r\n}\r\nexport default interface GroupsBusiness {\r\n  getGroups(): Map<string, IGroup>;\r\n  list(callback: GroupsCallBack): void;\r\n  create(group: INewGroup | undefined, cb: NewGroupCallback | undefined): void;\r\n}\r\nexport default class GroupsBusiness {\r\n  public groups: Map<string, IGroup>;\r\n  private chat: SquadChatCommunicator | undefined;\r\n  constructor(\r\n    private api: API,\r\n    private settings: SettingsBusiness,\r\n    private contacts: ContactsBusiness\r\n  ) {\r\n    this.groups = new Map<string, IGroup>();\r\n  }\r\n  setChat = (chat: SquadChatCommunicator) => {\r\n    this.chat = chat;\r\n  };\r\n  getGroups = () => {\r\n    return this.groups;\r\n  };\r\n  list = (callback: GroupsCallBack) => {\r\n    this.api.getGroups(\r\n      { paramsUrl: { members: true, limit: 5000 } },\r\n      (apiGroups: any, err) => {\r\n        // Populando o Map de grupos\r\n        if (!err) {\r\n          if (!this.api) return;\r\n          this.api.getContacts(\r\n            { paramsUrl: { contactType: \"group\", limit: 5000, added: true } },\r\n            (apiGroupsContactsFormat) => {\r\n              this.populate(apiGroups, apiGroupsContactsFormat);\r\n              callback(Array.from(this.groups.values()));\r\n            }\r\n          );\r\n        }\r\n      }\r\n    );\r\n  };\r\n  create = (\r\n    group: INewGroup | undefined,\r\n    callback: NewGroupCallback | undefined\r\n  ) => {\r\n    if (!this.api) return;\r\n    this.settings.get((settings) => {\r\n      const contactsId = group?.contacts.map((contact) => contact.id);\r\n      const body = {\r\n        name: group?.name,\r\n        description: group?.description,\r\n        members: contactsId,\r\n        domain: settings.sipDomain,\r\n      };\r\n      this.api.createGroup({ body }, (returnGroup, err) => {\r\n        if (err) return;\r\n        if (!this.api) return;\r\n        if (!returnGroup) return;\r\n        this.api.getGroup(\r\n          returnGroup.id,\r\n          { paramsUrl: { members: true } },\r\n          (groupWithMember) => {\r\n            const parsedGroup = parseGroup(\r\n              groupWithMember,\r\n              this.chat?.chat.presences\r\n            );\r\n            this.groups.set(parsedGroup.groupId, parsedGroup);\r\n            if (callback) {\r\n              callback(parsedGroup);\r\n            }\r\n          }\r\n        );\r\n      });\r\n    });\r\n  };\r\n  populate(apiGroups: any, apiGroupsContactsFormat: any) {\r\n    apiGroups.groups.forEach((group: any) => {\r\n      const apiContactGroup = apiGroupsContactsFormat.contacts.find(\r\n        (grp: any) => grp.id === group.id\r\n      );\r\n      this.groups.set(\r\n        group.id,\r\n        parseGroup(\r\n          Object.assign(group, apiContactGroup),\r\n          this.chat?.chat.presences\r\n        )\r\n      );\r\n    });\r\n  }\r\n  leftingGroup(request: LeaveGroupRequest, callback: LeaveGroupCallback) {\r\n    this.api.leaveGroup(\r\n      { memberId: request.memberId, groupId: request.groupId },\r\n      callback\r\n    );\r\n  }\r\n  removeMember = (\r\n    grp: string,\r\n    mbr: IMember,\r\n    callback: RemoveMemberCallback\r\n  ) => {\r\n    this.api.removeMember(\r\n      {\r\n        groupId: grp,\r\n        memberId: mbr.userId,\r\n      },\r\n      callback\r\n    );\r\n  };\r\n  editGroupInfo(\r\n    request: ChangeGroupInfoRequest,\r\n    callback: ChangeGroupInfoCallback\r\n  ) {\r\n    this.api.changeGroupInfo(\r\n      {\r\n        groupId: request.groupId,\r\n        groupName: request.groupName,\r\n        members: request.members,\r\n        description: request.description,\r\n      },\r\n      callback\r\n    );\r\n  }\r\n  addMember = (grp: IGroup, ctc: IContact, callback: AddMemberCallback) => {\r\n    this.api.addMember(\r\n      {\r\n        groupId: grp.groupId,\r\n        memberId: ctc.id,\r\n      },\r\n      callback\r\n    );\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}