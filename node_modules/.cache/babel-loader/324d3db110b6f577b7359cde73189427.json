{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ChatBody.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport SimpleBar from \"simplebar-react\";\nimport { Spinner } from \"reactstrap\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport ChatMessage from \"./ChatMessage\";\nimport \"./../assets/css/reply-msg.scss\";\nconst scrollableNodeRef = React.createRef();\n\nconst ChatBody = () => {\n  const {\n    activeChat,\n    replyMsg\n  } = useChat();\n  const [showButtonBottom, setShowButtonBottom] = useState(false);\n\n  const onScroll = ev => {\n    var _ev$target, _ev$target2;\n\n    if ((ev === null || ev === void 0 ? void 0 : (_ev$target = ev.target) === null || _ev$target === void 0 ? void 0 : _ev$target.scrollTop) <= (ev === null || ev === void 0 ? void 0 : (_ev$target2 = ev.target) === null || _ev$target2 === void 0 ? void 0 : _ev$target2.scrollHeight) - 1000) {\n      setShowButtonBottom(true);\n    } else {\n      setShowButtonBottom(false);\n    }\n  };\n\n  const scrolltoBottom = () => {\n    var _scrollableNodeRef$cu;\n\n    (_scrollableNodeRef$cu = scrollableNodeRef.current) === null || _scrollableNodeRef$cu === void 0 ? void 0 : _scrollableNodeRef$cu.scrollTo({\n      top: 99999999\n    });\n    setShowButtonBottom(false);\n  };\n\n  const checkScroll = () => {\n    scrolltoBottom();\n\n    if (scrollableNodeRef === null || scrollableNodeRef === void 0 ? void 0 : scrollableNodeRef.current) {\n      scrollableNodeRef.current.onscroll = onScroll;\n    }\n  };\n\n  const checkLoading = () => {\n    if (!activeChat.messageLoaded) {\n      scrolltoBottom();\n    }\n  };\n\n  useEffect(checkLoading, [activeChat.messageLoaded]);\n  useEffect(checkScroll, [activeChat]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SimpleBar, {\n    className: `chat-conversation ${replyMsg ? \"reply\" : \"\"} p-3 p-lg-4`,\n    id: \"messages\",\n    scrollableNodeProps: {\n      ref: scrollableNodeRef\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `d-flex justify-content-center`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    color: \"primary\",\n    className: `${activeChat.messageLoaded ? \"\" : \"d-none\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"ul\", {\n    className: `list-unstyled mb-0 ${activeChat.messageLoaded ? \"d-none\" : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, activeChat.messages.map((message, key) => /*#__PURE__*/React.createElement(ChatMessage, {\n    activeChat: activeChat,\n    message: message,\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  })))), showButtonBottom && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-chat-down\",\n    onClick: scrolltoBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"ri-arrow-down-s-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default ChatBody;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ChatBody.tsx"],"names":["React","useState","useEffect","SimpleBar","Spinner","useChat","ChatMessage","scrollableNodeRef","createRef","ChatBody","activeChat","replyMsg","showButtonBottom","setShowButtonBottom","onScroll","ev","target","scrollTop","scrollHeight","scrolltoBottom","current","scrollTo","top","checkScroll","onscroll","checkLoading","messageLoaded","ref","messages","map","message","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport ChatMessage from \"./ChatMessage\";\r\nimport DragNDropCaller from './DragNDropCaller';\r\n\r\nimport \"./../assets/css/reply-msg.scss\";\r\n\r\nconst scrollableNodeRef = React.createRef<HTMLDivElement>();\r\n\r\nconst ChatBody: React.FC = () => {\r\n  const { activeChat, replyMsg } = useChat();\r\n  const [showButtonBottom, setShowButtonBottom] = useState(false);\r\n\r\n  const onScroll = (ev: any) => {\r\n    if (ev?.target?.scrollTop <= ev?.target?.scrollHeight - 1000) {\r\n      setShowButtonBottom(true);\r\n    } else {\r\n      setShowButtonBottom(false);\r\n    }\r\n  };\r\n\r\n  const scrolltoBottom = () => {\r\n    scrollableNodeRef.current?.scrollTo({\r\n      top: 99999999,\r\n    });\r\n    setShowButtonBottom(false);\r\n  };\r\n\r\n  const checkScroll = () => {\r\n    scrolltoBottom();\r\n    if (scrollableNodeRef?.current) {\r\n      scrollableNodeRef.current.onscroll = onScroll;\r\n    }\r\n  };\r\n\r\n  const checkLoading = () => {\r\n    if (!activeChat.messageLoaded) {\r\n      scrolltoBottom();\r\n    }\r\n  };\r\n\r\n  useEffect(checkLoading, [activeChat.messageLoaded]);\r\n  useEffect(checkScroll, [activeChat]);\r\n\r\n  return (\r\n    <>\r\n        <SimpleBar\r\n          className={`chat-conversation ${replyMsg ? \"reply\" : \"\"} p-3 p-lg-4`}\r\n          id=\"messages\"\r\n          scrollableNodeProps={{ ref: scrollableNodeRef }}\r\n        >\r\n\r\n          <div className={`d-flex justify-content-center`}>\r\n            <Spinner\r\n              color=\"primary\"\r\n              className={`${activeChat.messageLoaded ? \"\" : \"d-none\"}`}\r\n            />\r\n          </div>\r\n          <ul\r\n            className={`list-unstyled mb-0 ${\r\n              activeChat.messageLoaded ? \"d-none\" : \"\"\r\n            }`}\r\n          >\r\n            {activeChat.messages.map((message, key) => (\r\n              <ChatMessage activeChat={activeChat} message={message} key={key} />\r\n            ))}\r\n          </ul>\r\n\r\n        </SimpleBar>\r\n        {showButtonBottom && (\r\n          <div className=\"btn-chat-down\" onClick={scrolltoBottom}>\r\n            <i className=\"ri-arrow-down-s-line\"></i>\r\n          </div>\r\n        )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatBody;\r\n"]},"metadata":{},"sourceType":"module"}