{"ast":null,"code":"/**\n * An {@link Emitter} implementation.\n * @internal\n */\nexport class EmitterImpl {\n  constructor() {\n    this.listeners = new Array();\n  }\n  /**\n   * Sets up a function that will be called whenever the target changes.\n   * @param listener - Callback function.\n   * @param options - An options object that specifies characteristics about the listener.\n   *                  If once true, indicates that the listener should be invoked at most once after being added.\n   *                  If once true, the listener would be automatically removed when invoked.\n   */\n\n\n  addListener(listener, options) {\n    const onceWrapper = data => {\n      this.removeListener(onceWrapper);\n      listener(data);\n    };\n\n    (options === null || options === void 0 ? void 0 : options.once) === true ? this.listeners.push(onceWrapper) : this.listeners.push(listener);\n  }\n  /**\n   * Emit change.\n   * @param data - Data to emit.\n   */\n\n\n  emit(data) {\n    this.listeners.slice().forEach(listener => listener(data));\n  }\n  /**\n   * Removes all listeners previously registered with addListener.\n   */\n\n\n  removeAllListeners() {\n    this.listeners = [];\n  }\n  /**\n   * Removes a listener previously registered with addListener.\n   * @param listener - Callback function.\n   */\n\n\n  removeListener(listener) {\n    this.listeners = this.listeners.filter(l => l !== listener);\n  }\n  /**\n   * Registers a listener.\n   * @param listener - Callback function.\n   * @deprecated Use addListener.\n   */\n\n\n  on(listener) {\n    return this.addListener(listener);\n  }\n  /**\n   * Unregisters a listener.\n   * @param listener - Callback function.\n   * @deprecated Use removeListener.\n   */\n\n\n  off(listener) {\n    return this.removeListener(listener);\n  }\n  /**\n   * Registers a listener then unregisters the listener after one event emission.\n   * @param listener - Callback function.\n   * @deprecated Use addListener.\n   */\n\n\n  once(listener) {\n    return this.addListener(listener, {\n      once: true\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/api/emitter.js"],"names":["EmitterImpl","constructor","listeners","Array","addListener","listener","options","onceWrapper","data","removeListener","once","push","emit","slice","forEach","removeAllListeners","filter","l","on","off"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,WAAN,CAAkB;AACrBC,EAAAA,WAAW,GAAG;AACV,SAAKC,SAAL,GAAiB,IAAIC,KAAJ,EAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,WAAW,CAACC,QAAD,EAAWC,OAAX,EAAoB;AAC3B,UAAMC,WAAW,GAAIC,IAAD,IAAU;AAC1B,WAAKC,cAAL,CAAoBF,WAApB;AACAF,MAAAA,QAAQ,CAACG,IAAD,CAAR;AACH,KAHD;;AAIA,KAACF,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACI,IAA3D,MAAqE,IAArE,GAA4E,KAAKR,SAAL,CAAeS,IAAf,CAAoBJ,WAApB,CAA5E,GAA+G,KAAKL,SAAL,CAAeS,IAAf,CAAoBN,QAApB,CAA/G;AACH;AACD;AACJ;AACA;AACA;;;AACIO,EAAAA,IAAI,CAACJ,IAAD,EAAO;AACP,SAAKN,SAAL,CAAeW,KAAf,GAAuBC,OAAvB,CAAgCT,QAAD,IAAcA,QAAQ,CAACG,IAAD,CAArD;AACH;AACD;AACJ;AACA;;;AACIO,EAAAA,kBAAkB,GAAG;AACjB,SAAKb,SAAL,GAAiB,EAAjB;AACH;AACD;AACJ;AACA;AACA;;;AACIO,EAAAA,cAAc,CAACJ,QAAD,EAAW;AACrB,SAAKH,SAAL,GAAiB,KAAKA,SAAL,CAAec,MAAf,CAAuBC,CAAD,IAAOA,CAAC,KAAKZ,QAAnC,CAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIa,EAAAA,EAAE,CAACb,QAAD,EAAW;AACT,WAAO,KAAKD,WAAL,CAAiBC,QAAjB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIc,EAAAA,GAAG,CAACd,QAAD,EAAW;AACV,WAAO,KAAKI,cAAL,CAAoBJ,QAApB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIK,EAAAA,IAAI,CAACL,QAAD,EAAW;AACX,WAAO,KAAKD,WAAL,CAAiBC,QAAjB,EAA2B;AAAEK,MAAAA,IAAI,EAAE;AAAR,KAA3B,CAAP;AACH;;AA7DoB","sourcesContent":["/**\n * An {@link Emitter} implementation.\n * @internal\n */\nexport class EmitterImpl {\n    constructor() {\n        this.listeners = new Array();\n    }\n    /**\n     * Sets up a function that will be called whenever the target changes.\n     * @param listener - Callback function.\n     * @param options - An options object that specifies characteristics about the listener.\n     *                  If once true, indicates that the listener should be invoked at most once after being added.\n     *                  If once true, the listener would be automatically removed when invoked.\n     */\n    addListener(listener, options) {\n        const onceWrapper = (data) => {\n            this.removeListener(onceWrapper);\n            listener(data);\n        };\n        (options === null || options === void 0 ? void 0 : options.once) === true ? this.listeners.push(onceWrapper) : this.listeners.push(listener);\n    }\n    /**\n     * Emit change.\n     * @param data - Data to emit.\n     */\n    emit(data) {\n        this.listeners.slice().forEach((listener) => listener(data));\n    }\n    /**\n     * Removes all listeners previously registered with addListener.\n     */\n    removeAllListeners() {\n        this.listeners = [];\n    }\n    /**\n     * Removes a listener previously registered with addListener.\n     * @param listener - Callback function.\n     */\n    removeListener(listener) {\n        this.listeners = this.listeners.filter((l) => l !== listener);\n    }\n    /**\n     * Registers a listener.\n     * @param listener - Callback function.\n     * @deprecated Use addListener.\n     */\n    on(listener) {\n        return this.addListener(listener);\n    }\n    /**\n     * Unregisters a listener.\n     * @param listener - Callback function.\n     * @deprecated Use removeListener.\n     */\n    off(listener) {\n        return this.removeListener(listener);\n    }\n    /**\n     * Registers a listener then unregisters the listener after one event emission.\n     * @param listener - Callback function.\n     * @deprecated Use addListener.\n     */\n    once(listener) {\n        return this.addListener(listener, { once: true });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}