{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant } from '@formatjs/ecma402-abstract';\nimport { IntlMessageFormat } from 'intl-messageformat';\nimport { MissingTranslationError, MessageFormatError } from './error';\nimport { TYPE } from 'intl-messageformat-parser';\n\nfunction setTimeZoneInOptions(opts, timeZone) {\n  return Object.keys(opts).reduce(function (all, k) {\n    all[k] = __assign({\n      timeZone: timeZone\n    }, opts[k]);\n    return all;\n  }, {});\n}\n\nfunction deepMergeOptions(opts1, opts2) {\n  var keys = Object.keys(__assign(__assign({}, opts1), opts2));\n  return keys.reduce(function (all, k) {\n    all[k] = __assign(__assign({}, opts1[k] || {}), opts2[k] || {});\n    return all;\n  }, {});\n}\n\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n  if (!timeZone) {\n    return f1;\n  }\n\n  var mfFormats = IntlMessageFormat.formats;\n  return __assign(__assign(__assign({}, mfFormats), f1), {\n    date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)),\n    time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone))\n  });\n}\n\nexport function formatMessage(_a, state, messageDescriptor, values) {\n  var locale = _a.locale,\n      formats = _a.formats,\n      messages = _a.messages,\n      defaultLocale = _a.defaultLocale,\n      defaultFormats = _a.defaultFormats,\n      onError = _a.onError,\n      timeZone = _a.timeZone,\n      defaultRichTextElements = _a.defaultRichTextElements;\n\n  if (messageDescriptor === void 0) {\n    messageDescriptor = {\n      id: ''\n    };\n  }\n\n  var msgId = messageDescriptor.id,\n      defaultMessage = messageDescriptor.defaultMessage; // `id` is a required field of a Message Descriptor.\n\n  invariant(!!msgId, '[@formatjs/intl] An `id` must be provided to format a message.');\n  var id = String(msgId);\n  var message = // In case messages is Object.create(null)\n  // e.g import('foo.json') from webpack)\n  // See https://github.com/formatjs/formatjs/issues/1914\n  messages && Object.prototype.hasOwnProperty.call(messages, id) && messages[id]; // IMPORTANT: Hot path if `message` is AST with a single literal node\n\n  if (Array.isArray(message) && message.length === 1 && message[0].type === TYPE.literal) {\n    return message[0].value;\n  }\n\n  if (!values && message && typeof message === 'string' && defaultRichTextElements) {\n    console.warn(\"[@formatjs/intl] \\\"defaultRichTextElements\\\" was specified but \\\"message\\\" was not pre-compiled. \\nPlease consider using \\\"@formatjs/cli\\\" to pre-compile your messages for performance.\\nFor more details see https://formatjs.io/docs/getting-started/message-distribution\");\n  } // IMPORTANT: Hot path straight lookup for performance\n\n\n  if (!values && message && typeof message === 'string' && !defaultRichTextElements) {\n    return message.replace(/'\\{(.*?)\\}'/gi, \"{$1}\");\n  }\n\n  values = __assign(__assign({}, defaultRichTextElements), values || {});\n  formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n  defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n\n  if (!message) {\n    if (!defaultMessage || locale && locale.toLowerCase() !== defaultLocale.toLowerCase()) {\n      // This prevents warnings from littering the console in development\n      // when no `messages` are passed into the <IntlProvider> for the\n      // default locale.\n      onError(new MissingTranslationError(messageDescriptor, locale));\n    }\n\n    if (defaultMessage) {\n      try {\n        var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n        return formatter.format(values);\n      } catch (e) {\n        onError(new MessageFormatError(\"Error formatting default message for: \\\"\" + id + \"\\\", rendering default message verbatim\", locale, messageDescriptor, e));\n        return typeof defaultMessage === 'string' ? defaultMessage : id;\n      }\n    }\n\n    return id;\n  } // We have the translated message\n\n\n  try {\n    var formatter = state.getMessageFormat(message, locale, formats, {\n      formatters: state\n    });\n    return formatter.format(values);\n  } catch (e) {\n    onError(new MessageFormatError(\"Error formatting message: \\\"\" + id + \"\\\", using \" + (defaultMessage ? 'default message' : 'id') + \" as fallback.\", locale, messageDescriptor, e));\n  }\n\n  if (defaultMessage) {\n    try {\n      var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n      return formatter.format(values);\n    } catch (e) {\n      onError(new MessageFormatError(\"Error formatting the default message for: \\\"\" + id + \"\\\", rendering message verbatim\", locale, messageDescriptor, e));\n    }\n  }\n\n  if (typeof message === 'string') {\n    return message;\n  }\n\n  if (typeof defaultMessage === 'string') {\n    return defaultMessage;\n  }\n\n  return id;\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@formatjs/intl/lib/src/message.js"],"names":["__assign","invariant","IntlMessageFormat","MissingTranslationError","MessageFormatError","TYPE","setTimeZoneInOptions","opts","timeZone","Object","keys","reduce","all","k","deepMergeOptions","opts1","opts2","deepMergeFormatsAndSetTimeZone","f1","mfFormats","formats","date","time","formatMessage","_a","state","messageDescriptor","values","locale","messages","defaultLocale","defaultFormats","onError","defaultRichTextElements","id","msgId","defaultMessage","String","message","prototype","hasOwnProperty","call","Array","isArray","length","type","literal","value","console","warn","replace","toLowerCase","formatter","getMessageFormat","format","e","formatters"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { invariant } from '@formatjs/ecma402-abstract';\nimport { IntlMessageFormat, } from 'intl-messageformat';\nimport { MissingTranslationError, MessageFormatError } from './error';\nimport { TYPE } from 'intl-messageformat-parser';\nfunction setTimeZoneInOptions(opts, timeZone) {\n    return Object.keys(opts).reduce(function (all, k) {\n        all[k] = __assign({ timeZone: timeZone }, opts[k]);\n        return all;\n    }, {});\n}\nfunction deepMergeOptions(opts1, opts2) {\n    var keys = Object.keys(__assign(__assign({}, opts1), opts2));\n    return keys.reduce(function (all, k) {\n        all[k] = __assign(__assign({}, (opts1[k] || {})), (opts2[k] || {}));\n        return all;\n    }, {});\n}\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n    if (!timeZone) {\n        return f1;\n    }\n    var mfFormats = IntlMessageFormat.formats;\n    return __assign(__assign(__assign({}, mfFormats), f1), { date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)), time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone)) });\n}\nexport function formatMessage(_a, state, messageDescriptor, values) {\n    var locale = _a.locale, formats = _a.formats, messages = _a.messages, defaultLocale = _a.defaultLocale, defaultFormats = _a.defaultFormats, onError = _a.onError, timeZone = _a.timeZone, defaultRichTextElements = _a.defaultRichTextElements;\n    if (messageDescriptor === void 0) { messageDescriptor = { id: '' }; }\n    var msgId = messageDescriptor.id, defaultMessage = messageDescriptor.defaultMessage;\n    // `id` is a required field of a Message Descriptor.\n    invariant(!!msgId, '[@formatjs/intl] An `id` must be provided to format a message.');\n    var id = String(msgId);\n    var message = \n    // In case messages is Object.create(null)\n    // e.g import('foo.json') from webpack)\n    // See https://github.com/formatjs/formatjs/issues/1914\n    messages &&\n        Object.prototype.hasOwnProperty.call(messages, id) &&\n        messages[id];\n    // IMPORTANT: Hot path if `message` is AST with a single literal node\n    if (Array.isArray(message) &&\n        message.length === 1 &&\n        message[0].type === TYPE.literal) {\n        return message[0].value;\n    }\n    if (!values &&\n        message &&\n        typeof message === 'string' &&\n        defaultRichTextElements) {\n        console.warn(\"[@formatjs/intl] \\\"defaultRichTextElements\\\" was specified but \\\"message\\\" was not pre-compiled. \\nPlease consider using \\\"@formatjs/cli\\\" to pre-compile your messages for performance.\\nFor more details see https://formatjs.io/docs/getting-started/message-distribution\");\n    }\n    // IMPORTANT: Hot path straight lookup for performance\n    if (!values &&\n        message &&\n        typeof message === 'string' &&\n        !defaultRichTextElements) {\n        return message.replace(/'\\{(.*?)\\}'/gi, \"{$1}\");\n    }\n    values = __assign(__assign({}, defaultRichTextElements), (values || {}));\n    formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n    defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n    if (!message) {\n        if (!defaultMessage ||\n            (locale && locale.toLowerCase() !== defaultLocale.toLowerCase())) {\n            // This prevents warnings from littering the console in development\n            // when no `messages` are passed into the <IntlProvider> for the\n            // default locale.\n            onError(new MissingTranslationError(messageDescriptor, locale));\n        }\n        if (defaultMessage) {\n            try {\n                var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n                return formatter.format(values);\n            }\n            catch (e) {\n                onError(new MessageFormatError(\"Error formatting default message for: \\\"\" + id + \"\\\", rendering default message verbatim\", locale, messageDescriptor, e));\n                return typeof defaultMessage === 'string' ? defaultMessage : id;\n            }\n        }\n        return id;\n    }\n    // We have the translated message\n    try {\n        var formatter = state.getMessageFormat(message, locale, formats, {\n            formatters: state,\n        });\n        return formatter.format(values);\n    }\n    catch (e) {\n        onError(new MessageFormatError(\"Error formatting message: \\\"\" + id + \"\\\", using \" + (defaultMessage ? 'default message' : 'id') + \" as fallback.\", locale, messageDescriptor, e));\n    }\n    if (defaultMessage) {\n        try {\n            var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats);\n            return formatter.format(values);\n        }\n        catch (e) {\n            onError(new MessageFormatError(\"Error formatting the default message for: \\\"\" + id + \"\\\", rendering message verbatim\", locale, messageDescriptor, e));\n        }\n    }\n    if (typeof message === 'string') {\n        return message;\n    }\n    if (typeof defaultMessage === 'string') {\n        return defaultMessage;\n    }\n    return id;\n}\n"]},"metadata":{},"sourceType":"module"}