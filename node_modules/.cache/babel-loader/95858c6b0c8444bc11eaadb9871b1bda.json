{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import{parseContact}from\"../utils/parseUtils\";import debounce from\"lodash/debounce\";var ContactsBusiness=/*#__PURE__*/function(){function ContactsBusiness(api,settings){var _this=this;_classCallCheck(this,ContactsBusiness);this.api=api;this.settings=settings;this.contacts=void 0;this.add=function(ctc,callback){_this.api.addContact({contactType:\"contact\",contactId:ctc.id,favorite:false,blocked:false},callback);};this.remove=function(ctc,callback){_this.api.removeContact({contactId:ctc.id,contactType:\"contact\"},callback);};this.addContacts=function(ctc,callback){_this.api.addContact({contactType:\"contact\",contactId:ctc.id,favorite:false,blocked:false},callback);};this.toggleMemberRole=function(usrId,grpId,mbRole,callback){mbRole===\"admin\"?_this.api.toggleMemberRole({admin:false,groupId:grpId,memberId:usrId},callback):_this.api.toggleMemberRole({admin:true,groupId:grpId,memberId:usrId},callback);};this.search=debounce(function(strSearch,callback){_this.settings.get(function(settings){_this.api.getContacts({paramsUrl:{limit:5000,contactType:\"contact\",domain:settings.sipDomain,name:strSearch}},function(apiContacts,err){if(!err){if(!_this.api)return;var searchList=apiContacts.contacts.map(function(contact){return parseContact(contact);});callback(searchList);}});});},250);this.contacts=new Map();}_createClass(ContactsBusiness,[{key:\"getContacts\",value:function getContacts(){return this.contacts;}},{key:\"getContactsOutsideUserLists\",value:function getContactsOutsideUserLists(callback){var _this2=this;this.settings.get(function(settings){_this2.api.getContacts({paramsUrl:{limit:5000,contactType:\"contact\",domain:settings.sipDomain,added:false}},function(apiContacts,err){if(!err){if(!_this2.api)return;var searchList=apiContacts.contacts.map(function(contact){return parseContact(contact);});callback(searchList);}});});}},{key:\"list\",value:function list(callback){var _this3=this;this.settings.get(function(settings){_this3.api.getContacts({paramsUrl:{added:true,limit:5000,contactType:\"contact\",domain:settings.sipDomain}},function(apiContacts,err){// Populando o Map de contatos\nif(!err){if(!_this3.api)return;_this3.populate(apiContacts);//Favoritar o contato dentro da população com\n//favoriteCallback()\ncallback(Array.from(_this3.contacts.values()));}});});}},{key:\"populate\",value:function populate(apiContacts){var _this4=this;apiContacts.contacts.forEach(function(contact){_this4.contacts.set(contact.id,parseContact(contact));});}},{key:\"setFavorite\",value:function setFavorite(favorited,callback){this.api.setFavoriteUser({contactID:favorited.jid.split(\"@\")[0],contactType:favorited.jid.includes(\"@conference.\")?\"group\":\"contact\",favorite:!favorited.favorite},callback);}}]);return ContactsBusiness;}();export{ContactsBusiness as default};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Contacts.ts"],"names":["parseContact","debounce","ContactsBusiness","api","settings","contacts","add","ctc","callback","addContact","contactType","contactId","id","favorite","blocked","remove","removeContact","addContacts","toggleMemberRole","usrId","grpId","mbRole","admin","groupId","memberId","search","strSearch","get","getContacts","paramsUrl","limit","domain","sipDomain","name","apiContacts","err","searchList","map","contact","Map","added","populate","Array","from","values","forEach","set","favorited","setFavoriteUser","contactID","jid","split","includes"],"mappings":"8VAIA,OAASA,YAAT,KAA6B,qBAA7B,CAQA,MAAOC,CAAAA,QAAP,KAAqB,iBAArB,C,GAOqBC,CAAAA,gB,yBAEnB,0BAAoBC,GAApB,CAAsCC,QAAtC,CAAkE,4DAA9CD,GAA8C,CAA9CA,GAA8C,MAA5BC,QAA4B,CAA5BA,QAA4B,MAD1DC,QAC0D,aA4ElEC,GA5EkE,CA4E5D,SAACC,GAAD,CAAaC,QAAb,CAA8C,CAClD,KAAI,CAACL,GAAL,CAASM,UAAT,CACE,CACEC,WAAW,CAAE,SADf,CAEEC,SAAS,CAAEJ,GAAG,CAACK,EAFjB,CAGEC,QAAQ,CAAE,KAHZ,CAIEC,OAAO,CAAE,KAJX,CADF,CAOEN,QAPF,EASD,CAtFiE,MAwFlEO,MAxFkE,CAwFzD,SAACR,GAAD,CAAgBC,QAAhB,CAAoD,CAC3D,KAAI,CAACL,GAAL,CAASa,aAAT,CAAuB,CACrBL,SAAS,CAAEJ,GAAG,CAACK,EADM,CAErBF,WAAW,CAAE,SAFQ,CAAvB,CAGGF,QAHH,EAID,CA7FiE,MA+FlES,WA/FkE,CA+FpD,SAACV,GAAD,CAAgBC,QAAhB,CAAiD,CAC7D,KAAI,CAACL,GAAL,CAASM,UAAT,CACE,CACEC,WAAW,CAAE,SADf,CAEEC,SAAS,CAAEJ,GAAG,CAACK,EAFjB,CAGEC,QAAQ,CAAE,KAHZ,CAIEC,OAAO,CAAE,KAJX,CADF,CAOEN,QAPF,EASD,CAzGiE,MA2GlEU,gBA3GkE,CA2G/C,SAACC,KAAD,CAAgBC,KAAhB,CAA+BC,MAA/B,CAAiDb,QAAjD,CAAwF,CACzGa,MAAM,GAAK,OAAX,CACE,KAAI,CAAClB,GAAL,CAASe,gBAAT,CAA0B,CACxBI,KAAK,CAAE,KADiB,CAExBC,OAAO,CAAEH,KAFe,CAGxBI,QAAQ,CAAEL,KAHc,CAA1B,CAIGX,QAJH,CADF,CAMI,KAAI,CAACL,GAAL,CAASe,gBAAT,CAA0B,CAC5BI,KAAK,CAAE,IADqB,CAE5BC,OAAO,CAAEH,KAFmB,CAG5BI,QAAQ,CAAEL,KAHkB,CAA1B,CAIDX,QAJC,CANJ,CAWD,CAvHiE,MAyHlEiB,MAzHkE,CAyHzDxB,QAAQ,CAAC,SAACyB,SAAD,CAAoBlB,QAApB,CAAmD,CACnE,KAAI,CAACJ,QAAL,CAAcuB,GAAd,CAAkB,SAACvB,QAAD,CAAc,CAC9B,KAAI,CAACD,GAAL,CAASyB,WAAT,CACE,CACEC,SAAS,CAAE,CACTC,KAAK,CAAE,IADE,CAETpB,WAAW,CAAE,SAFJ,CAGTqB,MAAM,CAAE3B,QAAQ,CAAC4B,SAHR,CAITC,IAAI,CAAEP,SAJG,CADb,CADF,CASE,SAACQ,WAAD,CAAmBC,GAAnB,CAAgC,CAC9B,GAAI,CAACA,GAAL,CAAU,CACR,GAAI,CAAC,KAAI,CAAChC,GAAV,CAAe,OACf,GAAMiC,CAAAA,UAAU,CAAGF,WAAW,CAAC7B,QAAZ,CAAqBgC,GAArB,CAAyB,SAACC,OAAD,CAAkB,CAC5D,MAAOtC,CAAAA,YAAY,CAACsC,OAAD,CAAnB,CACD,CAFkB,CAAnB,CAIA9B,QAAQ,CAAC4B,UAAD,CAAR,CACD,CACF,CAlBH,EAoBD,CArBD,EAsBD,CAvBgB,CAuBd,GAvBc,CAzHiD,CAChE,KAAK/B,QAAL,CAAgB,GAAIkC,CAAAA,GAAJ,EAAhB,CACD,C,8EACa,CACZ,MAAO,MAAKlC,QAAZ,CACD,C,gFAE2BG,Q,CAA2B,iBACrD,KAAKJ,QAAL,CAAcuB,GAAd,CAAkB,SAACvB,QAAD,CAAc,CAC9B,MAAI,CAACD,GAAL,CAASyB,WAAT,CACE,CACEC,SAAS,CAAE,CACTC,KAAK,CAAE,IADE,CAETpB,WAAW,CAAE,SAFJ,CAGTqB,MAAM,CAAE3B,QAAQ,CAAC4B,SAHR,CAITQ,KAAK,CAAE,KAJE,CADb,CADF,CAQK,SAACN,WAAD,CAAmBC,GAAnB,CAAgC,CACjC,GAAI,CAACA,GAAL,CAAU,CACR,GAAI,CAAC,MAAI,CAAChC,GAAV,CAAe,OACf,GAAMiC,CAAAA,UAAU,CAAGF,WAAW,CAAC7B,QAAZ,CAAqBgC,GAArB,CAAyB,SAACC,OAAD,CAAkB,CAC5D,MAAOtC,CAAAA,YAAY,CAACsC,OAAD,CAAnB,CACD,CAFkB,CAAnB,CAGA9B,QAAQ,CAAC4B,UAAD,CAAR,CACH,CACF,CAhBD,EAiBD,CAlBD,EAmBD,C,kCAEI5B,Q,CAA4B,iBAC/B,KAAKJ,QAAL,CAAcuB,GAAd,CAAkB,SAACvB,QAAD,CAAc,CAC9B,MAAI,CAACD,GAAL,CAASyB,WAAT,CACE,CACEC,SAAS,CAAE,CACTW,KAAK,CAAE,IADE,CAETV,KAAK,CAAE,IAFE,CAGTpB,WAAW,CAAE,SAHJ,CAITqB,MAAM,CAAE3B,QAAQ,CAAC4B,SAJR,CADb,CADF,CASE,SAACE,WAAD,CAAmBC,GAAnB,CAAgC,CAC9B;AACA,GAAI,CAACA,GAAL,CAAU,CACR,GAAI,CAAC,MAAI,CAAChC,GAAV,CAAe,OACf,MAAI,CAACsC,QAAL,CAAcP,WAAd,EAEA;AACA;AAEA1B,QAAQ,CAACkC,KAAK,CAACC,IAAN,CAAW,MAAI,CAACtC,QAAL,CAAcuC,MAAd,EAAX,CAAD,CAAR,CACD,CACF,CApBH,EAsBD,CAvBD,EAwBD,C,0CACQV,W,CAAkB,iBACzBA,WAAW,CAAC7B,QAAZ,CAAqBwC,OAArB,CAA6B,SAACP,OAAD,CAAkB,CAC7C,MAAI,CAACjC,QAAL,CAAcyC,GAAd,CAAkBR,OAAO,CAAC1B,EAA1B,CAA8BZ,YAAY,CAACsC,OAAD,CAA1C,EACD,CAFD,EAGD,C,gDAECS,S,CACAvC,Q,CACA,CACA,KAAKL,GAAL,CAAS6C,eAAT,CACE,CACEC,SAAS,CAAEF,SAAS,CAACG,GAAV,CAAcC,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CADb,CAEEzC,WAAW,CAAEqC,SAAS,CAACG,GAAV,CAAcE,QAAd,CAAuB,cAAvB,EACT,OADS,CAET,SAJN,CAKEvC,QAAQ,CAAE,CAACkC,SAAS,CAAClC,QALvB,CADF,CAQEL,QARF,EAUD,C,uCA5EkBN,gB","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport IContact from \"../../alias/IContact\";\r\nimport IChat from \"../../alias/IChat\";\r\nimport IGroup from \"../../alias/IGroup\";\r\nimport { parseContact } from \"../utils/parseUtils\";\r\nimport SettingsBusiness from \"./Settings\";\r\nimport {\r\n  AddContactCallback,\r\n  FavoriteUserCallback,\r\n  RemoveContactCallback,\r\n  toggleMemberRoleCallback\r\n} from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport debounce from \"lodash/debounce\";\r\nimport UserType from \"./../../enuns/UserType\";\r\ninterface ContactsCallBack {\r\n  (contacts: IContact[]): void;\r\n}\r\n\r\nexport default interface ContactsBusiness {}\r\nexport default class ContactsBusiness {\r\n  private contacts: Map<string, IContact>;\r\n  constructor(private api: API, private settings: SettingsBusiness) {\r\n    this.contacts = new Map<string, IContact>();\r\n  }\r\n  getContacts() {\r\n    return this.contacts;\r\n  }\r\n\r\n  getContactsOutsideUserLists(callback: ContactsCallBack){\r\n    this.settings.get((settings) => {\r\n      this.api.getContacts(\r\n        {\r\n          paramsUrl: {\r\n            limit: 5000,\r\n            contactType: \"contact\",\r\n            domain: settings.sipDomain,\r\n            added: false\r\n          },\r\n        }, (apiContacts: any, err: any) => {\r\n          if (!err) {\r\n            if (!this.api) return;\r\n            const searchList = apiContacts.contacts.map((contact: any) => {\r\n              return parseContact(contact);\r\n            });\r\n            callback(searchList);\r\n        }\r\n      });\r\n    })\r\n  };\r\n\r\n  list(callback: ContactsCallBack) {\r\n    this.settings.get((settings) => {\r\n      this.api.getContacts(\r\n        {\r\n          paramsUrl: {\r\n            added: true,\r\n            limit: 5000,\r\n            contactType: \"contact\",\r\n            domain: settings.sipDomain,\r\n          },\r\n        },\r\n        (apiContacts: any, err: any) => {\r\n          // Populando o Map de contatos\r\n          if (!err) {\r\n            if (!this.api) return;\r\n            this.populate(apiContacts);\r\n\r\n            //Favoritar o contato dentro da população com\r\n            //favoriteCallback()\r\n\r\n            callback(Array.from(this.contacts.values()));\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n  populate(apiContacts: any) {\r\n    apiContacts.contacts.forEach((contact: any) => {\r\n      this.contacts.set(contact.id, parseContact(contact));\r\n    });\r\n  }\r\n  setFavorite(\r\n    favorited: IGroup | IChat | IContact,\r\n    callback: FavoriteUserCallback\r\n  ) {\r\n    this.api.setFavoriteUser(\r\n      {\r\n        contactID: favorited.jid.split(\"@\")[0],\r\n        contactType: favorited.jid.includes(\"@conference.\")\r\n          ? \"group\"\r\n          : \"contact\",\r\n        favorite: !favorited.favorite,\r\n      },\r\n      callback\r\n    );\r\n  }\r\n\r\n  add = (ctc: IChat, callback: AddContactCallback) => {\r\n    this.api.addContact(\r\n      {\r\n        contactType: \"contact\",\r\n        contactId: ctc.id,\r\n        favorite: false,\r\n        blocked: false,\r\n      },\r\n      callback\r\n    );\r\n  };\r\n  \r\n  remove = (ctc: IContact, callback: RemoveContactCallback) => {\r\n    this.api.removeContact({\r\n      contactId: ctc.id,\r\n      contactType: \"contact\"\r\n    }, callback)\r\n  }\r\n\r\n  addContacts = (ctc: IContact, callback: AddContactCallback) => {\r\n    this.api.addContact(\r\n      {\r\n        contactType: \"contact\",\r\n        contactId: ctc.id,\r\n        favorite: false,\r\n        blocked: false,\r\n      },\r\n      callback\r\n    );\r\n  };\r\n\r\n  toggleMemberRole = (usrId: string, grpId: string, mbRole: UserType, callback: toggleMemberRoleCallback) => {\r\n    mbRole === \"admin\" ? (\r\n      this.api.toggleMemberRole({\r\n        admin: false,\r\n        groupId: grpId,\r\n        memberId: usrId\r\n      }, callback)\r\n    ) : this.api.toggleMemberRole({\r\n      admin: true,\r\n      groupId: grpId,\r\n      memberId: usrId\r\n    }, callback)\r\n  }\r\n\r\n  search = debounce((strSearch: string, callback: ContactsCallBack) => {\r\n    this.settings.get((settings) => {\r\n      this.api.getContacts(\r\n        {\r\n          paramsUrl: {\r\n            limit: 5000,\r\n            contactType: \"contact\",\r\n            domain: settings.sipDomain,\r\n            name: strSearch,\r\n          },\r\n        },\r\n        (apiContacts: any, err: any) => {\r\n          if (!err) {\r\n            if (!this.api) return;\r\n            const searchList = apiContacts.contacts.map((contact: any) => {\r\n              return parseContact(contact);\r\n            });\r\n\r\n            callback(searchList);\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }, 250);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}