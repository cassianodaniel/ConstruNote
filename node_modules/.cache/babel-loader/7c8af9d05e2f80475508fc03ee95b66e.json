{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\contexts\\\\CallContext.tsx\";\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport CallStatus from \"../enuns/CallStatus\"; //alias\n\nexport const CallContext = createContext({});\nexport const CallProvider = ({\n  children\n}) => {\n  const [show, setShow] = useState(false);\n  const [currentCalls, setCurrentCalls] = useState(new Map());\n  const [callNumber, setCallNumber] = useState();\n\n  const time = () => {\n    const callWhitoutTime = Array.from(currentCalls.values()).find(c => !c.interval);\n\n    if (callWhitoutTime) {\n      if (callWhitoutTime.callStatus === CallStatus.ON_GOING) {\n        let cc = { ...callWhitoutTime\n        };\n        if (cc.interval) clearInterval(cc.interval);\n        cc.interval = setInterval(() => {\n          const currentCallsCopy = new Map(currentCalls);\n          cc.seconds = cc.seconds ? cc.seconds + 1 : 1;\n          currentCallsCopy.set(cc.callId, cc);\n          setCurrentCalls(currentCallsCopy);\n        }, 1000);\n      }\n    }\n  };\n\n  useEffect(time, [currentCalls]);\n  return /*#__PURE__*/React.createElement(CallContext.Provider, {\n    value: {\n      show,\n      setShow,\n      currentCalls,\n      setCurrentCalls,\n      callNumber,\n      setCallNumber\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport function useCall() {\n  return useContext(CallContext);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/contexts/CallContext.tsx"],"names":["React","createContext","useContext","useState","useEffect","CallStatus","CallContext","CallProvider","children","show","setShow","currentCalls","setCurrentCalls","Map","callNumber","setCallNumber","time","callWhitoutTime","Array","from","values","find","c","interval","callStatus","ON_GOING","cc","clearInterval","setInterval","currentCallsCopy","seconds","set","callId","useCall"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,EAAqDC,SAArD,QAAsE,OAAtE;AAEA,OAAOC,UAAP,MAAuB,qBAAvB,C,CAEA;;AAeA,OAAO,MAAMC,WAAW,GAAGL,aAAa,CACtC,EADsC,CAAjC;AAIP,OAAO,MAAMM,YAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAC9C,IAAIU,GAAJ,EAD8C,CAAhD;AAGA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,EAA5C;;AAEA,QAAMa,IAAI,GAAG,MAAM;AACjB,UAAMC,eAAe,GAAGC,KAAK,CAACC,IAAN,CAAWR,YAAY,CAACS,MAAb,EAAX,EAAkCC,IAAlC,CACrBC,CAAD,IAAO,CAACA,CAAC,CAACC,QADY,CAAxB;;AAGA,QAAIN,eAAJ,EAAqB;AACnB,UAAIA,eAAe,CAACO,UAAhB,KAA+BnB,UAAU,CAACoB,QAA9C,EAAwD;AACtD,YAAIC,EAAE,GAAG,EAAE,GAAGT;AAAL,SAAT;AACA,YAAIS,EAAE,CAACH,QAAP,EAAiBI,aAAa,CAACD,EAAE,CAACH,QAAJ,CAAb;AACjBG,QAAAA,EAAE,CAACH,QAAH,GAAcK,WAAW,CAAC,MAAM;AAC9B,gBAAMC,gBAAgB,GAAG,IAAIhB,GAAJ,CAAuBF,YAAvB,CAAzB;AACAe,UAAAA,EAAE,CAACI,OAAH,GAAaJ,EAAE,CAACI,OAAH,GAAaJ,EAAE,CAACI,OAAH,GAAa,CAA1B,GAA8B,CAA3C;AACAD,UAAAA,gBAAgB,CAACE,GAAjB,CAAqBL,EAAE,CAACM,MAAxB,EAAgCN,EAAhC;AACAd,UAAAA,eAAe,CAACiB,gBAAD,CAAf;AACD,SALwB,EAKtB,IALsB,CAAzB;AAMD;AACF;AACF,GAhBD;;AAkBAzB,EAAAA,SAAS,CAACY,IAAD,EAAO,CAACL,YAAD,CAAP,CAAT;AAEA,sBACE,oBAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLF,MAAAA,IADK;AAELC,MAAAA,OAFK;AAGLC,MAAAA,YAHK;AAILC,MAAAA,eAJK;AAKLE,MAAAA,UALK;AAMLC,MAAAA;AANK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUGP,QAVH,CADF;AAcD,CAzCM;AA2CP,OAAO,SAASyB,OAAT,GAAmB;AACxB,SAAO/B,UAAU,CAACI,WAAD,CAAjB;AACD","sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport ICall from \"../alias/ICall\";\r\nimport CallStatus from \"../enuns/CallStatus\";\r\n\r\n//alias\r\ninterface MakeCall {\r\n  number: string;\r\n  useVideo: boolean;\r\n  useAudio: boolean;\r\n}\r\ninterface ICallContextData {\r\n  show: boolean;\r\n  setShow(value: boolean): void;\r\n  currentCalls: Map<string, ICall>;\r\n  setCurrentCalls(value: Map<string, ICall>): void;\r\n  callNumber: MakeCall | undefined;\r\n  setCallNumber(value: MakeCall | undefined): void;\r\n}\r\n\r\nexport const CallContext = createContext<ICallContextData>(\r\n  {} as ICallContextData\r\n);\r\n\r\nexport const CallProvider: React.FC = ({ children }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [currentCalls, setCurrentCalls] = useState<Map<string, ICall>>(\r\n    new Map<string, ICall>()\r\n  );\r\n  const [callNumber, setCallNumber] = useState<MakeCall | undefined>();\r\n\r\n  const time = () => {\r\n    const callWhitoutTime = Array.from(currentCalls.values()).find(\r\n      (c) => !c.interval\r\n    );\r\n    if (callWhitoutTime) {\r\n      if (callWhitoutTime.callStatus === CallStatus.ON_GOING) {\r\n        let cc = { ...callWhitoutTime };\r\n        if (cc.interval) clearInterval(cc.interval);\r\n        cc.interval = setInterval(() => {\r\n          const currentCallsCopy = new Map<string, ICall>(currentCalls);\r\n          cc.seconds = cc.seconds ? cc.seconds + 1 : 1;\r\n          currentCallsCopy.set(cc.callId, cc);\r\n          setCurrentCalls(currentCallsCopy);\r\n        }, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(time, [currentCalls]);\r\n\r\n  return (\r\n    <CallContext.Provider\r\n      value={{\r\n        show,\r\n        setShow,\r\n        currentCalls,\r\n        setCurrentCalls,\r\n        callNumber,\r\n        setCallNumber,\r\n      }}\r\n    >\r\n      {children}\r\n    </CallContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useCall() {\r\n  return useContext(CallContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}