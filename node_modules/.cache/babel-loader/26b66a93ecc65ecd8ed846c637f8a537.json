{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _get from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { NonInviteServerTransaction } from \"../transactions\";\nimport { UserAgentServer } from \"./user-agent-server\";\n/**\n * PRACK UAS.\n * @public\n */\n\nexport var PrackUserAgentServer = /*#__PURE__*/function (_UserAgentServer) {\n  _inherits(PrackUserAgentServer, _UserAgentServer);\n\n  var _super = _createSuper(PrackUserAgentServer);\n\n  function PrackUserAgentServer(dialog, message, delegate) {\n    var _this;\n\n    _classCallCheck(this, PrackUserAgentServer);\n\n    _this = _super.call(this, NonInviteServerTransaction, dialog.userAgentCore, message, delegate); // Update dialog signaling state with offer/answer in body\n\n    dialog.signalingStateTransition(message);\n    _this.dialog = dialog;\n    return _this;\n  }\n  /**\n   * Update the dialog signaling state on a 2xx response.\n   * @param options - Options bucket.\n   */\n\n\n  _createClass(PrackUserAgentServer, [{\n    key: \"accept\",\n    value: function accept() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        statusCode: 200\n      };\n\n      if (options.body) {\n        // Update dialog signaling state with offer/answer in body\n        this.dialog.signalingStateTransition(options.body);\n      }\n\n      return _get(_getPrototypeOf(PrackUserAgentServer.prototype), \"accept\", this).call(this, options);\n    }\n  }]);\n\n  return PrackUserAgentServer;\n}(UserAgentServer);","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/core/user-agents/prack-user-agent-server.js"],"names":["NonInviteServerTransaction","UserAgentServer","PrackUserAgentServer","dialog","message","delegate","userAgentCore","signalingStateTransition","options","statusCode","body"],"mappings":";;;;;;AAAA,SAASA,0BAAT,QAA2C,iBAA3C;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA;AACA;AACA;AACA;;AACA,WAAaC,oBAAb;AAAA;;AAAA;;AACI,gCAAYC,MAAZ,EAAoBC,OAApB,EAA6BC,QAA7B,EAAuC;AAAA;;AAAA;;AACnC,8BAAML,0BAAN,EAAkCG,MAAM,CAACG,aAAzC,EAAwDF,OAAxD,EAAiEC,QAAjE,EADmC,CAEnC;;AACAF,IAAAA,MAAM,CAACI,wBAAP,CAAgCH,OAAhC;AACA,UAAKD,MAAL,GAAcA,MAAd;AAJmC;AAKtC;AACD;AACJ;AACA;AACA;;;AAVA;AAAA;AAAA,6BAW0C;AAAA,UAA/BK,OAA+B,uEAArB;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAqB;;AAClC,UAAID,OAAO,CAACE,IAAZ,EAAkB;AACd;AACA,aAAKP,MAAL,CAAYI,wBAAZ,CAAqCC,OAAO,CAACE,IAA7C;AACH;;AACD,8FAAoBF,OAApB;AACH;AAjBL;;AAAA;AAAA,EAA0CP,eAA1C","sourcesContent":["import { NonInviteServerTransaction } from \"../transactions\";\nimport { UserAgentServer } from \"./user-agent-server\";\n/**\n * PRACK UAS.\n * @public\n */\nexport class PrackUserAgentServer extends UserAgentServer {\n    constructor(dialog, message, delegate) {\n        super(NonInviteServerTransaction, dialog.userAgentCore, message, delegate);\n        // Update dialog signaling state with offer/answer in body\n        dialog.signalingStateTransition(message);\n        this.dialog = dialog;\n    }\n    /**\n     * Update the dialog signaling state on a 2xx response.\n     * @param options - Options bucket.\n     */\n    accept(options = { statusCode: 200 }) {\n        if (options.body) {\n            // Update dialog signaling state with offer/answer in body\n            this.dialog.signalingStateTransition(options.body);\n        }\n        return super.accept(options);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}