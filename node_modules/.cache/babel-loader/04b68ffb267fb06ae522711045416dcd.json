{"ast":null,"code":"'use strict';\n/**\n * References\n * https://xmpp.org/rfcs/rfc6120.html#stanzas-semantics-iq\n * https://xmpp.org/rfcs/rfc6120.html#stanzas-error\n */\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar xml = require('@xmpp/xml');\n\nvar NS_STANZA = 'urn:ietf:params:xml:ns:xmpp-stanzas';\n\nfunction isQuery(_ref) {\n  var name = _ref.name,\n      type = _ref.type;\n  if (name !== 'iq') return false;\n  if (type === 'error' || type === 'result') return false;\n  return true;\n}\n\nfunction isValidQuery(_ref2, children, child) {\n  var type = _ref2.type;\n  if (type !== 'get' && type !== 'set') return false;\n  if (children.length !== 1) return false;\n  if (!child) return false;\n  return true;\n}\n\nfunction buildReply(_ref3) {\n  var stanza = _ref3.stanza;\n  return xml('iq', {\n    to: stanza.attrs.from,\n    from: stanza.attrs.to,\n    id: stanza.attrs.id\n  });\n}\n\nfunction buildReplyResult(ctx, child) {\n  var reply = buildReply(ctx);\n  reply.attrs.type = 'result';\n\n  if (child) {\n    reply.append(child);\n  }\n\n  return reply;\n}\n\nfunction buildReplyError(ctx, error, child) {\n  var reply = buildReply(ctx);\n  reply.attrs.type = 'error';\n\n  if (child) {\n    reply.append(child);\n  }\n\n  reply.append(error);\n  return reply;\n}\n\nfunction buildError(type, condition) {\n  return xml('error', {\n    type: type\n  }, xml(condition, NS_STANZA));\n}\n\nfunction iqHandler(entity) {\n  return /*#__PURE__*/function () {\n    var _iqHandler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx, next) {\n      var stanza, children, _children, child, reply;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (isQuery(ctx)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", next());\n\n            case 2:\n              stanza = ctx.stanza;\n              children = stanza.getChildElements();\n              _children = _slicedToArray(children, 1), child = _children[0];\n\n              if (isValidQuery(ctx, children, child)) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\", buildReplyError(ctx, buildError('modify', 'bad-request'), child));\n\n            case 7:\n              ctx.element = child;\n              _context.prev = 8;\n              _context.next = 11;\n              return next();\n\n            case 11:\n              reply = _context.sent;\n              _context.next = 18;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](8);\n              entity.emit('error', _context.t0);\n              reply = buildError('cancel', 'internal-server-error');\n\n            case 18:\n              if (!reply) {\n                reply = buildError('cancel', 'service-unavailable');\n              }\n\n              if (!(reply instanceof xml.Element && reply.is('error'))) {\n                _context.next = 21;\n                break;\n              }\n\n              return _context.abrupt(\"return\", buildReplyError(ctx, reply, child));\n\n            case 21:\n              return _context.abrupt(\"return\", buildReplyResult(ctx, reply instanceof xml.Element ? reply : undefined));\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[8, 14]]);\n    }));\n\n    function iqHandler(_x, _x2) {\n      return _iqHandler.apply(this, arguments);\n    }\n\n    return iqHandler;\n  }();\n}\n\nfunction route(type, ns, name, handler) {\n  return function (ctx, next) {\n    if (ctx.type !== type | !ctx.element || !ctx.element.is(name, ns)) return next();\n    return handler(ctx, next);\n  };\n}\n\nmodule.exports = function (_ref4) {\n  var middleware = _ref4.middleware,\n      entity = _ref4.entity;\n  middleware.use(iqHandler(entity));\n  return {\n    get: function get(ns, name, handler) {\n      middleware.use(route('get', ns, name, handler));\n    },\n    set: function set(ns, name, handler) {\n      middleware.use(route('set', ns, name, handler));\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/iq/callee.js"],"names":["xml","require","NS_STANZA","isQuery","name","type","isValidQuery","children","child","length","buildReply","stanza","to","attrs","from","id","buildReplyResult","ctx","reply","append","buildReplyError","error","buildError","condition","iqHandler","entity","next","getChildElements","element","emit","Element","is","undefined","route","ns","handler","module","exports","middleware","use","get","set"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;AAEA,IAAMA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AAEA,IAAMC,SAAS,GAAG,qCAAlB;;AAEA,SAASC,OAAT,OAA+B;AAAA,MAAbC,IAAa,QAAbA,IAAa;AAAA,MAAPC,IAAO,QAAPA,IAAO;AAC7B,MAAID,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP;AACnB,MAAIC,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,QAAjC,EAA2C,OAAO,KAAP;AAC3C,SAAO,IAAP;AACD;;AAED,SAASC,YAAT,QAA8BC,QAA9B,EAAwCC,KAAxC,EAA+C;AAAA,MAAxBH,IAAwB,SAAxBA,IAAwB;AAC7C,MAAIA,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,KAA/B,EAAsC,OAAO,KAAP;AACtC,MAAIE,QAAQ,CAACE,MAAT,KAAoB,CAAxB,EAA2B,OAAO,KAAP;AAC3B,MAAI,CAACD,KAAL,EAAY,OAAO,KAAP;AACZ,SAAO,IAAP;AACD;;AAED,SAASE,UAAT,QAA8B;AAAA,MAATC,MAAS,SAATA,MAAS;AAC5B,SAAOX,GAAG,CAAC,IAAD,EAAO;AACfY,IAAAA,EAAE,EAAED,MAAM,CAACE,KAAP,CAAaC,IADF;AAEfA,IAAAA,IAAI,EAAEH,MAAM,CAACE,KAAP,CAAaD,EAFJ;AAGfG,IAAAA,EAAE,EAAEJ,MAAM,CAACE,KAAP,CAAaE;AAHF,GAAP,CAAV;AAKD;;AAED,SAASC,gBAAT,CAA0BC,GAA1B,EAA+BT,KAA/B,EAAsC;AACpC,MAAMU,KAAK,GAAGR,UAAU,CAACO,GAAD,CAAxB;AACAC,EAAAA,KAAK,CAACL,KAAN,CAAYR,IAAZ,GAAmB,QAAnB;;AACA,MAAIG,KAAJ,EAAW;AACTU,IAAAA,KAAK,CAACC,MAAN,CAAaX,KAAb;AACD;;AAED,SAAOU,KAAP;AACD;;AAED,SAASE,eAAT,CAAyBH,GAAzB,EAA8BI,KAA9B,EAAqCb,KAArC,EAA4C;AAC1C,MAAMU,KAAK,GAAGR,UAAU,CAACO,GAAD,CAAxB;AACAC,EAAAA,KAAK,CAACL,KAAN,CAAYR,IAAZ,GAAmB,OAAnB;;AACA,MAAIG,KAAJ,EAAW;AACTU,IAAAA,KAAK,CAACC,MAAN,CAAaX,KAAb;AACD;;AAEDU,EAAAA,KAAK,CAACC,MAAN,CAAaE,KAAb;AACA,SAAOH,KAAP;AACD;;AAED,SAASI,UAAT,CAAoBjB,IAApB,EAA0BkB,SAA1B,EAAqC;AACnC,SAAOvB,GAAG,CAAC,OAAD,EAAU;AAACK,IAAAA,IAAI,EAAJA;AAAD,GAAV,EAAkBL,GAAG,CAACuB,SAAD,EAAYrB,SAAZ,CAArB,CAAV;AACD;;AAED,SAASsB,SAAT,CAAmBC,MAAnB,EAA2B;AACzB;AAAA,8EAAO,iBAAyBR,GAAzB,EAA8BS,IAA9B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kBACAvB,OAAO,CAACc,GAAD,CADP;AAAA;AAAA;AAAA;;AAAA,+CACqBS,IAAI,EADzB;;AAAA;AAGEf,cAAAA,MAHF,GAGYM,GAHZ,CAGEN,MAHF;AAICJ,cAAAA,QAJD,GAIYI,MAAM,CAACgB,gBAAP,EAJZ;AAAA,yCAKWpB,QALX,MAKEC,KALF;;AAAA,kBAOAF,YAAY,CAACW,GAAD,EAAMV,QAAN,EAAgBC,KAAhB,CAPZ;AAAA;AAAA;AAAA;;AAAA,+CAQIY,eAAe,CAACH,GAAD,EAAMK,UAAU,CAAC,QAAD,EAAW,aAAX,CAAhB,EAA2Cd,KAA3C,CARnB;;AAAA;AAWLS,cAAAA,GAAG,CAACW,OAAJ,GAAcpB,KAAd;AAXK;AAAA;AAAA,qBAeWkB,IAAI,EAff;;AAAA;AAeHR,cAAAA,KAfG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiBHO,cAAAA,MAAM,CAACI,IAAP,CAAY,OAAZ;AACAX,cAAAA,KAAK,GAAGI,UAAU,CAAC,QAAD,EAAW,uBAAX,CAAlB;;AAlBG;AAqBL,kBAAI,CAACJ,KAAL,EAAY;AACVA,gBAAAA,KAAK,GAAGI,UAAU,CAAC,QAAD,EAAW,qBAAX,CAAlB;AACD;;AAvBI,oBAyBDJ,KAAK,YAAYlB,GAAG,CAAC8B,OAArB,IAAgCZ,KAAK,CAACa,EAAN,CAAS,OAAT,CAzB/B;AAAA;AAAA;AAAA;;AAAA,+CA0BIX,eAAe,CAACH,GAAD,EAAMC,KAAN,EAAaV,KAAb,CA1BnB;;AAAA;AAAA,+CA6BEQ,gBAAgB,CACrBC,GADqB,EAErBC,KAAK,YAAYlB,GAAG,CAAC8B,OAArB,GAA+BZ,KAA/B,GAAuCc,SAFlB,CA7BlB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA,aAAsBR,SAAtB;AAAA;AAAA;;AAAA,WAAsBA,SAAtB;AAAA;AAkCD;;AAED,SAASS,KAAT,CAAe5B,IAAf,EAAqB6B,EAArB,EAAyB9B,IAAzB,EAA+B+B,OAA/B,EAAwC;AACtC,SAAO,UAASlB,GAAT,EAAcS,IAAd,EAAoB;AACzB,QAAKT,GAAG,CAACZ,IAAJ,KAAaA,IAAd,GAAsB,CAACY,GAAG,CAACW,OAA3B,IAAsC,CAACX,GAAG,CAACW,OAAJ,CAAYG,EAAZ,CAAe3B,IAAf,EAAqB8B,EAArB,CAA3C,EACE,OAAOR,IAAI,EAAX;AACF,WAAOS,OAAO,CAAClB,GAAD,EAAMS,IAAN,CAAd;AACD,GAJD;AAKD;;AAEDU,MAAM,CAACC,OAAP,GAAiB,iBAA+B;AAAA,MAArBC,UAAqB,SAArBA,UAAqB;AAAA,MAATb,MAAS,SAATA,MAAS;AAC9Ca,EAAAA,UAAU,CAACC,GAAX,CAAef,SAAS,CAACC,MAAD,CAAxB;AAEA,SAAO;AACLe,IAAAA,GADK,eACDN,EADC,EACG9B,IADH,EACS+B,OADT,EACkB;AACrBG,MAAAA,UAAU,CAACC,GAAX,CAAeN,KAAK,CAAC,KAAD,EAAQC,EAAR,EAAY9B,IAAZ,EAAkB+B,OAAlB,CAApB;AACD,KAHI;AAILM,IAAAA,GAJK,eAIDP,EAJC,EAIG9B,IAJH,EAIS+B,OAJT,EAIkB;AACrBG,MAAAA,UAAU,CAACC,GAAX,CAAeN,KAAK,CAAC,KAAD,EAAQC,EAAR,EAAY9B,IAAZ,EAAkB+B,OAAlB,CAApB;AACD;AANI,GAAP;AAQD,CAXD","sourcesContent":["'use strict'\n\n/**\n * References\n * https://xmpp.org/rfcs/rfc6120.html#stanzas-semantics-iq\n * https://xmpp.org/rfcs/rfc6120.html#stanzas-error\n */\n\nconst xml = require('@xmpp/xml')\n\nconst NS_STANZA = 'urn:ietf:params:xml:ns:xmpp-stanzas'\n\nfunction isQuery({name, type}) {\n  if (name !== 'iq') return false\n  if (type === 'error' || type === 'result') return false\n  return true\n}\n\nfunction isValidQuery({type}, children, child) {\n  if (type !== 'get' && type !== 'set') return false\n  if (children.length !== 1) return false\n  if (!child) return false\n  return true\n}\n\nfunction buildReply({stanza}) {\n  return xml('iq', {\n    to: stanza.attrs.from,\n    from: stanza.attrs.to,\n    id: stanza.attrs.id,\n  })\n}\n\nfunction buildReplyResult(ctx, child) {\n  const reply = buildReply(ctx)\n  reply.attrs.type = 'result'\n  if (child) {\n    reply.append(child)\n  }\n\n  return reply\n}\n\nfunction buildReplyError(ctx, error, child) {\n  const reply = buildReply(ctx)\n  reply.attrs.type = 'error'\n  if (child) {\n    reply.append(child)\n  }\n\n  reply.append(error)\n  return reply\n}\n\nfunction buildError(type, condition) {\n  return xml('error', {type}, xml(condition, NS_STANZA))\n}\n\nfunction iqHandler(entity) {\n  return async function iqHandler(ctx, next) {\n    if (!isQuery(ctx)) return next()\n\n    const {stanza} = ctx\n    const children = stanza.getChildElements()\n    const [child] = children\n\n    if (!isValidQuery(ctx, children, child)) {\n      return buildReplyError(ctx, buildError('modify', 'bad-request'), child)\n    }\n\n    ctx.element = child\n\n    let reply\n    try {\n      reply = await next()\n    } catch (err) {\n      entity.emit('error', err)\n      reply = buildError('cancel', 'internal-server-error')\n    }\n\n    if (!reply) {\n      reply = buildError('cancel', 'service-unavailable')\n    }\n\n    if (reply instanceof xml.Element && reply.is('error')) {\n      return buildReplyError(ctx, reply, child)\n    }\n\n    return buildReplyResult(\n      ctx,\n      reply instanceof xml.Element ? reply : undefined\n    )\n  }\n}\n\nfunction route(type, ns, name, handler) {\n  return function(ctx, next) {\n    if ((ctx.type !== type) | !ctx.element || !ctx.element.is(name, ns))\n      return next()\n    return handler(ctx, next)\n  }\n}\n\nmodule.exports = function({middleware, entity}) {\n  middleware.use(iqHandler(entity))\n\n  return {\n    get(ns, name, handler) {\n      middleware.use(route('get', ns, name, handler))\n    },\n    set(ns, name, handler) {\n      middleware.use(route('set', ns, name, handler))\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"script"}