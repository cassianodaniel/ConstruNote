{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ModalAddMember.tsx\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { Modal, ModalHeader, ModalBody, CardBody, Button, ModalFooter } from \"reactstrap\";\nimport { useModal } from \"../contexts/ModalContext\";\nimport { useContact } from \"./../contexts/ContactContext\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useTranslation } from \"react-i18next\";\nimport SimpleBar from \"simplebar-react\";\nimport SelectMember from \"./SelectMember\";\nimport Swal from \"sweetalert2\";\n\nconst ModalAddContacts = () => {\n  const [search, setSearch] = useState(\"\");\n  const {\n    activeChat\n  } = useChat();\n  const {\n    groups\n  } = useGroup();\n  const [selectedContact, setSelectedContact] = useState([]);\n  const {\n    t\n  } = useTranslation();\n  const {\n    setToggleAddingMembers,\n    setCheckedMembers,\n    setGroupToInsertMember,\n    checkedMembers\n  } = useContact();\n  const {\n    showModalAddMember,\n    setShowModalAddMember\n  } = useModal();\n\n  const toggle = () => {\n    if (showModalAddMember) {\n      setShowModalAddMember(!showModalAddMember);\n    }\n  };\n\n  const handleCheckContact = (selected, contact) => {\n    if (selected) {\n      setSelectedContact([...selectedContact, contact]);\n    } else {\n      setSelectedContact(selectedContact.filter(sel => {\n        if (sel.id === contact.id) {\n          return false;\n        }\n\n        return true;\n      }));\n    }\n  };\n\n  const inputSearch = useRef(null);\n  useEffect(() => {\n    setTimeout(() => {\n      var _inputSearch$current;\n\n      return (_inputSearch$current = inputSearch.current) === null || _inputSearch$current === void 0 ? void 0 : _inputSearch$current.focus();\n    }, 500);\n  }, [showModalAddMember]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    backdrop: \"static\",\n    isOpen: !!showModalAddMember,\n    centered: true,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, t(\"Modalllll\")), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    className: \"p-2 border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pt-2 pb-3 border-bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputSearch,\n    type: \"text\",\n    className: \"form-control mb-3\",\n    id: \"addgroupname-input\",\n    value: search,\n    onChange: e => setSearch(e.target.value),\n    placeholder: t(\"Search users..\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(SimpleBar, {\n    style: {\n      height: \"500px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SelectMember, {\n    handleCheckContact: handleCheckContact,\n    search: search,\n    checkedContacts: selectedContact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(ModalFooter, {\n    className: \"border-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"default\",\n    onClick: () => {\n      setCheckedMembers([]);\n      toggle();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, t(\"Close\")), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    onClick: () => {\n      Swal.fire({\n        position: 'top-end',\n        icon: 'success',\n        title: 'Added!',\n        showConfirmButton: false,\n        timer: 1500,\n        customClass: {\n          popup: \"swal-small-popup\"\n        }\n      });\n      setToggleAddingMembers(true);\n      toggle();\n      groups.forEach(grp => {\n        if (grp.groupId === activeChat.groupId) {\n          setGroupToInsertMember(grp);\n          setCheckedMembers(selectedContact);\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, t(\"Add Contacts\"))))));\n};\n\nexport default ModalAddContacts;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ModalAddMember.tsx"],"names":["React","useEffect","useState","useRef","Modal","ModalHeader","ModalBody","CardBody","Button","ModalFooter","useModal","useContact","useChat","useGroup","useTranslation","SimpleBar","SelectMember","Swal","ModalAddContacts","search","setSearch","activeChat","groups","selectedContact","setSelectedContact","t","setToggleAddingMembers","setCheckedMembers","setGroupToInsertMember","checkedMembers","showModalAddMember","setShowModalAddMember","toggle","handleCheckContact","selected","contact","filter","sel","id","inputSearch","setTimeout","current","focus","e","target","value","height","fire","position","icon","title","showConfirmButton","timer","customClass","popup","forEach","grp","groupId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SACEC,KADF,EAEEC,WAFF,EAGEC,SAHF,EAIEC,QAJF,EAKEC,MALF,EAMEC,WANF,QAOO,YAPP;AASA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,UAAT,QAA2B,8BAA3B;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,IAAP,MAAiB,aAAjB;;AAEA,MAAMC,gBAA0B,GAAG,MAAM;AACvC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAEmB,IAAAA;AAAF,MAAiBT,OAAO,EAA9B;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAaT,QAAQ,EAA3B;AAEA,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCtB,QAAQ,CAAa,EAAb,CAAtD;AAEA,QAAM;AAAEuB,IAAAA;AAAF,MAAQX,cAAc,EAA5B;AACA,QAAM;AACJY,IAAAA,sBADI;AAEJC,IAAAA,iBAFI;AAGJC,IAAAA,sBAHI;AAIJC,IAAAA;AAJI,MAKFlB,UAAU,EALd;AAOA,QAAM;AAAEmB,IAAAA,kBAAF;AAAsBC,IAAAA;AAAtB,MAAgDrB,QAAQ,EAA9D;;AAEA,QAAMsB,MAAM,GAAG,MAAM;AACnB,QAAIF,kBAAJ,EAAwB;AACtBC,MAAAA,qBAAqB,CAAC,CAACD,kBAAF,CAArB;AACD;AACF,GAJD;;AAMA,QAAMG,kBAAkB,GAAG,CAACC,QAAD,EAAoBC,OAApB,KAA0C;AACnE,QAAID,QAAJ,EAAc;AACZV,MAAAA,kBAAkB,CAAC,CAAC,GAAGD,eAAJ,EAAqBY,OAArB,CAAD,CAAlB;AACD,KAFD,MAEO;AACLX,MAAAA,kBAAkB,CAChBD,eAAe,CAACa,MAAhB,CAAwBC,GAAD,IAAS;AAC9B,YAAIA,GAAG,CAACC,EAAJ,KAAWH,OAAO,CAACG,EAAvB,EAA2B;AACzB,iBAAO,KAAP;AACD;;AACD,eAAO,IAAP;AACD,OALD,CADgB,CAAlB;AAQD;AACF,GAbD;;AAeA,QAAMC,WAAW,GAAGpC,MAAM,CAAmB,IAAnB,CAA1B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACduC,IAAAA,UAAU,CAAC;AAAA;;AAAA,qCAAMD,WAAW,CAACE,OAAlB,yDAAM,qBAAqBC,KAArB,EAAN;AAAA,KAAD,EAAqC,GAArC,CAAV;AACD,GAFQ,EAEN,CAACZ,kBAAD,CAFM,CAAT;AAIA,sBACE,oBAAC,KAAD;AACE,IAAA,QAAQ,EAAC,QADX;AAEE,IAAA,MAAM,EAAE,CAAC,CAACA,kBAFZ;AAGE,IAAA,QAAQ,MAHV;AAIE,IAAA,MAAM,EAAEE,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,WAAD;AAAa,IAAA,MAAM,EAAEA,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA8BP,CAAC,CAAC,WAAD,CAA/B,CANF,eAOE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAC,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,GAAG,EAAEc,WADP;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,SAAS,EAAC,mBAHZ;AAIE,IAAA,EAAE,EAAC,oBAJL;AAKE,IAAA,KAAK,EAAEpB,MALT;AAME,IAAA,QAAQ,EAAGwB,CAAD,IAAOvB,SAAS,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV,CAN5B;AAOE,IAAA,WAAW,EAAEpB,CAAC,CAAC,gBAAD,CAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,eAWE,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAE;AAAEqB,MAAAA,MAAM,EAAE;AAAV,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AACE,IAAA,kBAAkB,EAAEb,kBADtB;AAEE,IAAA,MAAM,EAAEd,MAFV;AAGE,IAAA,eAAe,EAAEI,eAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAXF,CADF,eAoBE,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAC,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,SADR;AAEE,IAAA,OAAO,EAAE,MAAM;AACbI,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAK,MAAAA,MAAM;AACP,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGP,CAAC,CAAC,OAAD,CAPJ,CADF,eAUE,oBAAC,MAAD;AACE,IAAA,KAAK,EAAC,SADR;AAEE,IAAA,OAAO,EAAE,MAAM;AACbR,MAAAA,IAAI,CAAC8B,IAAL,CAAU;AACRC,QAAAA,QAAQ,EAAE,SADF;AAERC,QAAAA,IAAI,EAAE,SAFE;AAGRC,QAAAA,KAAK,EAAE,QAHC;AAIRC,QAAAA,iBAAiB,EAAE,KAJX;AAKRC,QAAAA,KAAK,EAAE,IALC;AAMRC,QAAAA,WAAW,EAAE;AACXC,UAAAA,KAAK,EAAE;AADI;AANL,OAAV;AAUA5B,MAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACAM,MAAAA,MAAM;AACNV,MAAAA,MAAM,CAACiC,OAAP,CAAgBC,GAAD,IAAS;AACtB,YAAIA,GAAG,CAACC,OAAJ,KAAgBpC,UAAU,CAACoC,OAA/B,EAAwC;AACtC7B,UAAAA,sBAAsB,CAAC4B,GAAD,CAAtB;AACA7B,UAAAA,iBAAiB,CAACJ,eAAD,CAAjB;AACD;AACF,OALD;AAMD,KArBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAuBGE,CAAC,CAAC,cAAD,CAvBJ,CAVF,CApBF,CADF,CAPF,CADF;AAqED,CAjHD;;AAmHA,eAAeP,gBAAf","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  CardBody,\r\n  Button,\r\n  ModalFooter,\r\n} from \"reactstrap\";\r\n\r\nimport { useModal } from \"../contexts/ModalContext\";\r\nimport { useContact } from \"./../contexts/ContactContext\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport IContact from \"../alias/IContact\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport SelectMember from \"./SelectMember\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nconst ModalAddContacts: React.FC = () => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const { activeChat } = useChat();\r\n  const { groups } = useGroup();\r\n\r\n  const [selectedContact, setSelectedContact] = useState<IContact[]>([]);\r\n\r\n  const { t } = useTranslation();\r\n  const {\r\n    setToggleAddingMembers,\r\n    setCheckedMembers,\r\n    setGroupToInsertMember,\r\n    checkedMembers\r\n  } = useContact();\r\n\r\n  const { showModalAddMember, setShowModalAddMember } = useModal();\r\n\r\n  const toggle = () => {\r\n    if (showModalAddMember) {\r\n      setShowModalAddMember(!showModalAddMember);\r\n    }\r\n  };\r\n\r\n  const handleCheckContact = (selected: boolean, contact: IContact) => {\r\n    if (selected) {\r\n      setSelectedContact([...selectedContact, contact])\r\n    } else {\r\n      setSelectedContact(\r\n        selectedContact.filter((sel) => {\r\n          if (sel.id === contact.id) {\r\n            return false;\r\n          }\r\n          return true;\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const inputSearch = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => inputSearch.current?.focus(), 500);\r\n  }, [showModalAddMember]);\r\n\r\n  return (\r\n    <Modal\r\n      backdrop=\"static\"\r\n      isOpen={!!showModalAddMember}\r\n      centered\r\n      toggle={toggle}\r\n    >\r\n      <ModalHeader toggle={toggle}>{t(\"Modalllll\")}</ModalHeader>\r\n      <ModalBody>\r\n        <CardBody className=\"p-2 border\">\r\n          <div className=\"pt-2 pb-3 border-bottom\">\r\n            <input\r\n              ref={inputSearch}\r\n              type=\"text\"\r\n              className=\"form-control mb-3\"\r\n              id=\"addgroupname-input\"\r\n              value={search}\r\n              onChange={(e) => setSearch(e.target.value)}\r\n              placeholder={t(\"Search users..\")}\r\n            />\r\n            <hr />\r\n            <SimpleBar style={{ height: \"500px\" }}>\r\n              <SelectMember\r\n                handleCheckContact={handleCheckContact}\r\n                search={search}\r\n                checkedContacts={selectedContact}\r\n              />\r\n            </SimpleBar>\r\n          </div>\r\n          <ModalFooter className=\"border-0\">\r\n            <Button\r\n              color=\"default\"\r\n              onClick={() => {\r\n                setCheckedMembers([]);\r\n                toggle();\r\n              }}\r\n            >\r\n              {t(\"Close\")}\r\n            </Button>\r\n            <Button\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                Swal.fire({\r\n                  position: 'top-end',\r\n                  icon: 'success',\r\n                  title: 'Added!',\r\n                  showConfirmButton: false,\r\n                  timer: 1500,\r\n                  customClass: {\r\n                    popup: \"swal-small-popup\"\r\n                  }\r\n                })\r\n                setToggleAddingMembers(true);\r\n                toggle();\r\n                groups.forEach((grp) => {\r\n                  if (grp.groupId === activeChat.groupId) {\r\n                    setGroupToInsertMember(grp);\r\n                    setCheckedMembers(selectedContact);\r\n                  }\r\n                });\r\n              }}\r\n            >\r\n              {t(\"Add Contacts\")}\r\n            </Button>\r\n          </ModalFooter>\r\n        </CardBody>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalAddContacts;\r\n"]},"metadata":{},"sourceType":"module"}