{"ast":null,"code":"import { parseMessage } from \"../utils/parseUtils\";\nexport default class MessagesBusiness {\n  constructor(api, contacts) {\n    this.api = api;\n    this.contacts = contacts;\n\n    this.list = (chat, callback) => {\n      if (!this.api) return;\n      const lastMessageId = chat.messages[0].id;\n      this.api.getMessages(chat.id, chat.chatType, {\n        paramsUrl: {\n          startingByMessageId: lastMessageId\n        }\n      }, data => {\n        if (data) callback(data.messages.map(msg => parseMessage(msg, this.contacts.getContacts())));else return;\n      });\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Messages.ts"],"names":["parseMessage","MessagesBusiness","constructor","api","contacts","list","chat","callback","lastMessageId","messages","id","getMessages","chatType","paramsUrl","startingByMessageId","data","map","msg","getContacts"],"mappings":"AAGA,SAASA,YAAT,QAA6B,qBAA7B;AAMA,eAAe,MAAMC,gBAAN,CAAuB;AACpCC,EAAAA,WAAW,CAASC,GAAT,EAA2BC,QAA3B,EAAuD;AAAA,SAA9CD,GAA8C,GAA9CA,GAA8C;AAAA,SAA5BC,QAA4B,GAA5BA,QAA4B;;AAAA,SAClEC,IADkE,GAC3D,CAACC,IAAD,EAAcC,QAAd,KAAgD;AACrD,UAAI,CAAC,KAAKJ,GAAV,EAAe;AACf,YAAMK,aAAa,GAAGF,IAAI,CAACG,QAAL,CAAc,CAAd,EAAiBC,EAAvC;AACA,WAAKP,GAAL,CAASQ,WAAT,CACEL,IAAI,CAACI,EADP,EAEEJ,IAAI,CAACM,QAFP,EAGE;AAAEC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,mBAAmB,EAAEN;AAAvB;AAAb,OAHF,EAIGO,IAAD,IAAU;AACR,YAAIA,IAAJ,EACER,QAAQ,CACNQ,IAAI,CAACN,QAAL,CAAcO,GAAd,CAAmBC,GAAD,IAChBjB,YAAY,CAACiB,GAAD,EAAM,KAAKb,QAAL,CAAcc,WAAd,EAAN,CADd,CADM,CAAR,CADF,KAMK;AACN,OAZH;AAcD,KAlBiE;AAAE;;AADhC","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport IChat from \"../../alias/IChat\";\r\nimport IMessage from \"../../alias/IMessage\";\r\nimport { parseMessage } from \"../utils/parseUtils\";\r\nimport ContactsBusiness from \"./Contacts\";\r\n\r\ninterface GetMessagesCallback {\r\n  (messages: IMessage[]): void;\r\n}\r\nexport default class MessagesBusiness {\r\n  constructor(private api: API, private contacts: ContactsBusiness) {}\r\n  list = (chat: IChat, callback: GetMessagesCallback) => {\r\n    if (!this.api) return;\r\n    const lastMessageId = chat.messages[0].id;\r\n    this.api.getMessages(\r\n      chat.id,\r\n      chat.chatType,\r\n      { paramsUrl: { startingByMessageId: lastMessageId } },\r\n      (data) => {\r\n        if (data)\r\n          callback(\r\n            data.messages.map((msg) =>\r\n              parseMessage(msg, this.contacts.getContacts())\r\n            )\r\n          );\r\n        else return;\r\n      }\r\n    );\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}