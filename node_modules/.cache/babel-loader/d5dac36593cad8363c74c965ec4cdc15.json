{"ast":null,"code":"import { IncomingRequestMessage } from \"./incoming-request-message\";\nimport { IncomingResponseMessage } from \"./incoming-response-message\";\nimport { OutgoingRequestMessage } from \"./outgoing-request-message\"; // If the Content-Disposition header field is missing, bodies of\n// Content-Type application/sdp imply the disposition \"session\", while\n// other content types imply \"render\".\n// https://tools.ietf.org/html/rfc3261#section-13.2.1\n\nfunction contentTypeToContentDisposition(contentType) {\n  if (contentType === \"application/sdp\") {\n    return \"session\";\n  } else {\n    return \"render\";\n  }\n}\n/**\n * Create a Body given a legacy body type.\n * @param bodyLegacy - Body Object\n * @internal\n */\n\n\nexport function fromBodyLegacy(bodyLegacy) {\n  const content = typeof bodyLegacy === \"string\" ? bodyLegacy : bodyLegacy.body;\n  const contentType = typeof bodyLegacy === \"string\" ? \"application/sdp\" : bodyLegacy.contentType;\n  const contentDisposition = contentTypeToContentDisposition(contentType);\n  const body = {\n    contentDisposition,\n    contentType,\n    content\n  };\n  return body;\n}\n/**\n * User-Defined Type Guard for Body.\n * @param body - Body to check.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nexport function isBody(body) {\n  return body && typeof body.content === \"string\" && typeof body.contentType === \"string\" && body.contentDisposition === undefined ? true : typeof body.contentDisposition === \"string\";\n}\n/**\n * Given a message, get a normalized body.\n * The content disposition is inferred if not set.\n * @param message - The message.\n * @internal\n */\n\nexport function getBody(message) {\n  let contentDisposition;\n  let contentType;\n  let content; // We're in UAS role, receiving incoming request\n\n  if (message instanceof IncomingRequestMessage) {\n    if (message.body) {\n      // FIXME: Parsing needs typing\n      const parse = message.parseHeader(\"Content-Disposition\");\n      contentDisposition = parse ? parse.type : undefined;\n      contentType = message.parseHeader(\"Content-Type\");\n      content = message.body;\n    }\n  } // We're in UAC role, receiving incoming response\n\n\n  if (message instanceof IncomingResponseMessage) {\n    if (message.body) {\n      // FIXME: Parsing needs typing\n      const parse = message.parseHeader(\"Content-Disposition\");\n      contentDisposition = parse ? parse.type : undefined;\n      contentType = message.parseHeader(\"Content-Type\");\n      content = message.body;\n    }\n  } // We're in UAC role, sending outgoing request\n\n\n  if (message instanceof OutgoingRequestMessage) {\n    if (message.body) {\n      contentDisposition = message.getHeader(\"Content-Disposition\");\n      contentType = message.getHeader(\"Content-Type\");\n\n      if (typeof message.body === \"string\") {\n        // FIXME: OutgoingRequest should not allow a \"string\" body without a \"Content-Type\" header.\n        if (!contentType) {\n          throw new Error(\"Header content type header does not equal body content type.\");\n        }\n\n        content = message.body;\n      } else {\n        // FIXME: OutgoingRequest should not allow the \"Content-Type\" header not to match th body content type\n        if (contentType && contentType !== message.body.contentType) {\n          throw new Error(\"Header content type header does not equal body content type.\");\n        }\n\n        contentType = message.body.contentType;\n        content = message.body.body;\n      }\n    }\n  } // We're in UAS role, sending outgoing response\n\n\n  if (isBody(message)) {\n    contentDisposition = message.contentDisposition;\n    contentType = message.contentType;\n    content = message.content;\n  } // No content, no body.\n\n\n  if (!content) {\n    return undefined;\n  }\n\n  if (contentType && !contentDisposition) {\n    contentDisposition = contentTypeToContentDisposition(contentType);\n  }\n\n  if (!contentDisposition) {\n    throw new Error(\"Content disposition undefined.\");\n  }\n\n  if (!contentType) {\n    throw new Error(\"Content type undefined.\");\n  }\n\n  return {\n    contentDisposition,\n    contentType,\n    content\n  };\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/core/messages/body.js"],"names":["IncomingRequestMessage","IncomingResponseMessage","OutgoingRequestMessage","contentTypeToContentDisposition","contentType","fromBodyLegacy","bodyLegacy","content","body","contentDisposition","isBody","undefined","getBody","message","parse","parseHeader","type","getHeader","Error"],"mappings":"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","sourcesContent":["import { IncomingRequestMessage } from \"./incoming-request-message\";\nimport { IncomingResponseMessage } from \"./incoming-response-message\";\nimport { OutgoingRequestMessage } from \"./outgoing-request-message\";\n// If the Content-Disposition header field is missing, bodies of\n// Content-Type application/sdp imply the disposition \"session\", while\n// other content types imply \"render\".\n// https://tools.ietf.org/html/rfc3261#section-13.2.1\nfunction contentTypeToContentDisposition(contentType) {\n    if (contentType === \"application/sdp\") {\n        return \"session\";\n    }\n    else {\n        return \"render\";\n    }\n}\n/**\n * Create a Body given a legacy body type.\n * @param bodyLegacy - Body Object\n * @internal\n */\nexport function fromBodyLegacy(bodyLegacy) {\n    const content = typeof bodyLegacy === \"string\" ? bodyLegacy : bodyLegacy.body;\n    const contentType = typeof bodyLegacy === \"string\" ? \"application/sdp\" : bodyLegacy.contentType;\n    const contentDisposition = contentTypeToContentDisposition(contentType);\n    const body = { contentDisposition, contentType, content };\n    return body;\n}\n/**\n * User-Defined Type Guard for Body.\n * @param body - Body to check.\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isBody(body) {\n    return body &&\n        typeof body.content === \"string\" &&\n        typeof body.contentType === \"string\" &&\n        body.contentDisposition === undefined\n        ? true\n        : typeof body.contentDisposition === \"string\";\n}\n/**\n * Given a message, get a normalized body.\n * The content disposition is inferred if not set.\n * @param message - The message.\n * @internal\n */\nexport function getBody(message) {\n    let contentDisposition;\n    let contentType;\n    let content;\n    // We're in UAS role, receiving incoming request\n    if (message instanceof IncomingRequestMessage) {\n        if (message.body) {\n            // FIXME: Parsing needs typing\n            const parse = message.parseHeader(\"Content-Disposition\");\n            contentDisposition = parse ? parse.type : undefined;\n            contentType = message.parseHeader(\"Content-Type\");\n            content = message.body;\n        }\n    }\n    // We're in UAC role, receiving incoming response\n    if (message instanceof IncomingResponseMessage) {\n        if (message.body) {\n            // FIXME: Parsing needs typing\n            const parse = message.parseHeader(\"Content-Disposition\");\n            contentDisposition = parse ? parse.type : undefined;\n            contentType = message.parseHeader(\"Content-Type\");\n            content = message.body;\n        }\n    }\n    // We're in UAC role, sending outgoing request\n    if (message instanceof OutgoingRequestMessage) {\n        if (message.body) {\n            contentDisposition = message.getHeader(\"Content-Disposition\");\n            contentType = message.getHeader(\"Content-Type\");\n            if (typeof message.body === \"string\") {\n                // FIXME: OutgoingRequest should not allow a \"string\" body without a \"Content-Type\" header.\n                if (!contentType) {\n                    throw new Error(\"Header content type header does not equal body content type.\");\n                }\n                content = message.body;\n            }\n            else {\n                // FIXME: OutgoingRequest should not allow the \"Content-Type\" header not to match th body content type\n                if (contentType && contentType !== message.body.contentType) {\n                    throw new Error(\"Header content type header does not equal body content type.\");\n                }\n                contentType = message.body.contentType;\n                content = message.body.body;\n            }\n        }\n    }\n    // We're in UAS role, sending outgoing response\n    if (isBody(message)) {\n        contentDisposition = message.contentDisposition;\n        contentType = message.contentType;\n        content = message.content;\n    }\n    // No content, no body.\n    if (!content) {\n        return undefined;\n    }\n    if (contentType && !contentDisposition) {\n        contentDisposition = contentTypeToContentDisposition(contentType);\n    }\n    if (!contentDisposition) {\n        throw new Error(\"Content disposition undefined.\");\n    }\n    if (!contentType) {\n        throw new Error(\"Content type undefined.\");\n    }\n    return {\n        contentDisposition,\n        contentType,\n        content\n    };\n}\n"]},"metadata":{},"sourceType":"module"}