{"ast":null,"code":"import { client, xml } from \"@xmpp/client\";\nimport { v4 } from \"uuid\";\nimport PresenceStatus from \"../../enuns/PresenceStatus\";\nimport { Events } from \"./types/types\";\nimport { getFrom, getMessage, isTextMessage, getTo, getMessageId, isFileMessage, getMessageType, getMessagFileUrl, getReplyTo, getReplyMsg, getReplyMsgId, isReceived, isDisplayed, getReceivedMessageId, getDisplayedMessageId, isComposing, isActive, isGroupEvent, getEventId, isNewGroup, getEventBody } from \"./util/stanzaUtils\";\n\nconst events = require(\"events\");\n\nexport default class Chat extends events.EventEmitter {\n  constructor({\n    service: _service,\n    domain: _domain,\n    resource: _resource,\n    username: _username,\n    password: _password\n  }) {\n    super();\n\n    this.getJid = () => {\n      return `${this.username}@${this.getDomain()}`;\n    };\n\n    this.getDomain = () => {\n      return this.domain || this.service.replace(\"wss://\", \"\").replace(\"ws://\", \"\").split(\"/\")[0];\n    };\n\n    this.instanceMaker = ({\n      service,\n      domain,\n      resource,\n      username,\n      password\n    }) => {\n      const xmpp = client({\n        service: service,\n        domain: domain,\n        resource: resource,\n        username: username,\n        password: password\n      });\n      xmpp.on(\"status\", this.onStatus);\n      xmpp.on(\"stanza\", this.onStanza);\n      xmpp.on(\"online\", this.onOnline);\n      xmpp.on(\"error\", this.onError);\n      xmpp.on(\"offline\", this.onOffline);\n      return xmpp;\n    };\n\n    this.onStanza = stanza => {\n      this.emit(\"stanza\", stanza);\n      if (stanza.is(\"message\")) this.onMessage(stanza);else if (stanza.is(\"presence\")) this.onPresence(stanza);else if (stanza.is(\"iq\")) this.onIQ(stanza);else return;\n    };\n\n    this.onOnline = __ => {\n      this.discoItensId = v4(); // this.sendEnableCarbon();\n\n      this.sendServiceDiscoveryRequest(this.discoItensId);\n      this.client.send(xml(\"presence\"));\n      this.emit(\"online\");\n    };\n\n    this.onOffline = () => {\n      this.emit(\"offline\");\n    };\n\n    this.onError = e => {\n      this.emit(\"error\", e);\n    };\n\n    this.onStatus = status => {\n      this.emit(\"status\", status);\n    };\n\n    this.onMessage = stanza => {\n      if (isGroupEvent(stanza)) {\n        if (isNewGroup(stanza)) {\n          const eventToNewGroup = {\n            to: getTo(stanza),\n            from: getFrom(stanza),\n            id: v4(),\n            eventId: 1,\n            message: \"\",\n            reply_msg: undefined,\n            sent_at: new Date().toISOString(),\n            type: \"groupchat\",\n            reply_msg_id: undefined,\n            reply_to: undefined\n          };\n          this.emit(Events.SEND_EVENT, eventToNewGroup);\n        } else {\n          const event = {\n            id: getMessageId(stanza),\n            to: getTo(stanza),\n            from: getFrom(stanza),\n            message: \"\",\n            type: \"groupchat\",\n            sent_at: new Date().toISOString(),\n            reply_to: undefined,\n            reply_msg: undefined,\n            reply_msg_id: undefined,\n            eventId: getEventId(stanza),\n            eventBody: getEventBody(stanza)\n          };\n          this.emit(Events.SEND_EVENT, event);\n        }\n      } else if (isTextMessage(stanza)) {\n        const message = {\n          id: getMessageId(stanza),\n          to: getTo(stanza),\n          from: getFrom(stanza),\n          message: getMessage(stanza),\n          type: getMessageType(stanza),\n          sent_at: new Date().toISOString(),\n          reply_to: getReplyTo(stanza),\n          reply_msg: getReplyMsg(stanza),\n          reply_msg_id: getReplyMsgId(stanza)\n        };\n        this.sendReceipts(stanza);\n        this.emit(Events.MESSAGE, message);\n      } else if (isFileMessage(stanza)) {\n        const fileMessage = {\n          id: getMessageId(stanza),\n          to: getTo(stanza),\n          from: getFrom(stanza),\n          message: \"\",\n          type: getMessageType(stanza),\n          sent_at: new Date().toISOString(),\n          reply_to: getReplyTo(stanza),\n          reply_msg: getReplyMsg(stanza),\n          reply_msg_id: getReplyMsgId(stanza),\n          fileUrl: getMessagFileUrl(stanza)\n        };\n        this.sendReceipts(stanza);\n        this.emit(Events.MESSAGE, fileMessage);\n      } else if (isReceived(stanza)) {\n        const received = {\n          id: getReceivedMessageId(stanza)\n        };\n        this.emit(Events.RECEIVED, received);\n      } else if (isDisplayed(stanza)) {\n        const displayed = {\n          id: getDisplayedMessageId(stanza)\n        };\n        this.emit(Events.DISPLAYED, displayed);\n      } else if (isComposing(stanza)) {\n        this.emit(Events.COMPOSING, getFrom(stanza));\n      } else if (isActive(stanza)) {\n        this.emit(Events.ACTIVE, getFrom(stanza));\n      }\n    };\n\n    this.onPresence = stanza => {\n      const presence = {\n        id: v4(),\n        from: stanza.attrs.from,\n        time: new Date().toISOString(),\n        status: stanza.getChild(\"show\") ? stanza.getChild(\"show\").children[0] : stanza.attrs.type || \"online\"\n      };\n      this.presences.set(stanza.attrs.from, presence);\n      this.emit(\"presence\", presence);\n    };\n\n    this.onIQ = stanza => {\n      if (stanza.attrs.type === \"result\") {\n        if (stanza.attrs.id) {\n          const file = this.filesQueue.get(stanza.attrs.id);\n\n          if (file) {\n            if (stanza.attrs.id === file.firstStepId) {\n              this.sendFileSecondStep(stanza);\n            } else if (stanza.attrs.id === file.secondStepId) {\n              this.sendFileThirdStep(stanza, file);\n            }\n          } else if (stanza.attrs.id === this.discoItensId) {\n            stanza.children[0].children.forEach(element => {\n              const key = element.attrs.jid.split(\".\")[0];\n              this.discoItems.set(key, element.attrs.jid);\n            });\n          }\n        }\n      }\n    };\n\n    this.getPresence = from => {\n      const presence = this.presences.get(from);\n      if (presence) return presence;else return null;\n    };\n\n    this.sendEnableCarbon = () => {\n      const stanza = xml(\"iq\", {\n        from: `${this.getJid()}/${this.resource}`,\n        type: \"set\",\n        id: \"enable1\"\n      }, xml(\"enable\", {\n        xmlns: \"urn:xmpp:carbons:2\"\n      }));\n      this.client.send(stanza);\n    };\n\n    this.sendPresence = (status, to = undefined) => {\n      const show = xml(\"show\", {}, status);\n      if (status !== \"online\") this.client.send(xml(\"presence\", {\n        to\n      }, show));else this.client.send(xml(\"presence\"));\n    };\n\n    this.leaveGroup = (to, type = PresenceStatus.UNAVAILABLE) => {\n      this.client.send(xml(\"presence\", {\n        to,\n        type\n      }));\n    };\n\n    this.sendMessage = (to, chatType, message, callback) => {\n      const msgId = v4();\n      this.client.send(xml(\"message\", {\n        id: msgId,\n        type: chatType,\n        to: to\n      }, xml(\"body\", {}, message), xml(\"request\", {\n        xmlns: \"urn:xmpp:receipts\"\n      }))).then(() => {\n        callback(msgId);\n      });\n    };\n\n    this.sendFile = (to, chatType, file, callback) => {\n      const fileId = v4();\n      this.filesQueue.set(fileId, {\n        firstStepId: fileId,\n        file: file,\n        to: to,\n        chatType: chatType,\n        callback: callback\n      });\n      this.sendFileFirstStep(fileId);\n    };\n\n    this.sendImageMessage = (url, to, chatType, callback) => {\n      const msgId = v4();\n      const messagePacket = xml(\"message\", {\n        id: msgId,\n        type: chatType,\n        to: to\n      }, xml(\"body\", {}, url), xml(\"request\", {\n        xmlns: \"urn:xmpp:receipts\"\n      }), xml(\"x\", {\n        xmlns: \"jabber:x:oob\"\n      }, xml(\"url\", {}, url)));\n\n      if (this.client) {\n        callback({\n          url,\n          msgId\n        });\n        this.client.send(messagePacket);\n      }\n    };\n\n    this.sendFileFirstStep = fileId => {\n      const uploadJid = this.discoItems.get(\"upload\");\n\n      if (uploadJid) {\n        this.sendServiceDiscoveryRequestToUpload(uploadJid, fileId);\n        return;\n      }\n    };\n\n    this.sendFileSecondStep = stanza => {\n      if (stanza.children.length > 0) {\n        const secondStepId = v4();\n        const file = this.filesQueue.get(stanza.attrs.id);\n\n        if (file) {\n          this.filesQueue.set(secondStepId, {\n            firstStepId: file.firstStepId,\n            secondStepId: secondStepId,\n            file: file.file,\n            to: file.to,\n            chatType: file.chatType,\n            callback: file.callback\n          });\n          this.filesQueue.delete(stanza.attrs.id);\n        }\n\n        console.log(\"upload request xmlns\", stanza.children[0].children[2].attrs.var);\n        this.sendRequestSlotOnUpload(stanza.attrs.from, secondStepId);\n      }\n    };\n\n    this.sendFileThirdStep = (stanza, file) => {\n      let getUrl = \"\";\n      let putUrl = \"\";\n      stanza.children[0].children.forEach(element => {\n        if (element.is(\"get\")) {\n          getUrl = element.attrs.url;\n        } else if (element.is(\"put\")) {\n          putUrl = element.attrs.url;\n        }\n      });\n      if (file === null || file === void 0 ? void 0 : file.secondStepId) this.uploadFile(putUrl, getUrl, file.secondStepId);\n    };\n\n    this.sendServiceDiscoveryRequest = fileId => {\n      const serviceDiscoveryRequest = xml(\"iq\", {\n        type: \"get\",\n        to: this.getDomain(),\n        id: fileId\n      }, xml(\"query\", {\n        xmlns: \"http://jabber.org/protocol/disco#items\"\n      }));\n\n      if (this.client) {\n        this.client.send(serviceDiscoveryRequest);\n      }\n    };\n\n    this.sendServiceDiscoveryRequestToUpload = (uploadJid, uploadId) => {\n      console.log(\"sendServiceDiscoveryRequestToUpload\", uploadJid);\n      const serviceDiscoveryRequest = xml(\"iq\", {\n        type: \"get\",\n        to: uploadJid,\n        id: uploadId\n      }, xml(\"query\", {\n        xmlns: \"http://jabber.org/protocol/disco#info\"\n      }));\n\n      if (this.client) {\n        this.client.send(serviceDiscoveryRequest);\n      }\n    };\n\n    this.sendRequestSlotOnUpload = (uploadJid, thirdStepId) => {\n      var _this$filesQueue$get;\n\n      console.log(\"sendRequestSlotOnUpload\", uploadJid);\n      const file = (_this$filesQueue$get = this.filesQueue.get(thirdStepId)) === null || _this$filesQueue$get === void 0 ? void 0 : _this$filesQueue$get.file;\n      const serviceDiscoveryRequest = xml(\"iq\", {\n        type: \"get\",\n        to: uploadJid,\n        id: thirdStepId\n      }, xml(\"request\", {\n        xmlns: \"urn:xmpp:http:upload:0\",\n        filename: file === null || file === void 0 ? void 0 : file.name,\n        size: file === null || file === void 0 ? void 0 : file.size,\n        \"content-type\": file === null || file === void 0 ? void 0 : file.type\n      }));\n\n      if (this.client) {\n        this.client.send(serviceDiscoveryRequest);\n      }\n    };\n\n    this.uploadFile = (putUrl, getUrl, id) => {\n      let xhr = new XMLHttpRequest();\n      const file = this.filesQueue.get(id);\n\n      if (file) {\n        xhr.onerror = () => {\n          if (xhr.responseText) {\n            file.callback(xhr.responseText, true);\n            console.log(\"upload error\");\n          }\n        };\n\n        xhr.onreadystatechange = e => {\n          if (xhr.readyState === XMLHttpRequest.DONE) {\n            console.log(\"file upload response\", e, xhr.status);\n\n            if (xhr.status === 200 || xhr.status === 201) {\n              console.log(\"file upload response success\");\n              this.sendImageMessage(getUrl, file.to, file.chatType, file === null || file === void 0 ? void 0 : file.callback);\n              this.filesQueue.delete(id);\n            }\n          }\n        };\n\n        xhr.upload.addEventListener(\"progress\", evt => {\n          console.log(\"progress\", evt); // if (file) file.file.size = evt.total\n        }, false);\n        xhr.open(\"PUT\", putUrl, true);\n        xhr.setRequestHeader(\"Content-Type\", file.file.type);\n        xhr.send(file.file);\n        console.log(\"URL\", putUrl);\n        console.log(\"fileSize\", file.file.size);\n      }\n    };\n\n    this.sendReceipts = stanza => {\n      const message = xml(\"message\", {\n        from: stanza.attrs.to,\n        id: v4(),\n        to: stanza.attrs.from.split(\"/\")[0]\n      }, xml(\"received\", {\n        xmlns: \"urn:xmpp:receipts\",\n        id: stanza.attrs.id\n      }));\n      console.log(message);\n      this.client.send(message);\n    };\n\n    this.sendTyping = to => {\n      const composing = xml(\"message\", {\n        id: v4(),\n        to: to,\n        type: \"chat\"\n      }, xml(\"composing\", {\n        xmlns: \"http://jabber.org/protocol/chatstates\"\n      }));\n      this.client.send(composing);\n    };\n\n    this.sendActive = to => {\n      const active = xml(\"message\", {\n        id: v4(),\n        to: to,\n        type: \"chat\"\n      }, xml(\"active\", {\n        xmlns: \"http://jabber.org/protocol/chatstates\"\n      }));\n      this.client.send(active);\n    };\n\n    this.replyMsg = (to, chatType, message, replyed_sender, replyed_msg, replyed_msg_id, cb) => {\n      const id = v4();\n      const reply = xml(\"message\", {\n        to: to,\n        id,\n        type: chatType\n      }, xml(\"body\", {}, message), xml(\"extraParams\", {}, xml(\"reply_to\", {}, replyed_sender), xml(\"reply_msg\", {}, replyed_msg), xml(\"reply_msg_id\", {}, replyed_msg_id)));\n      this.client.send(reply).then(() => {\n        cb(id);\n      });\n    };\n\n    this.sendEvent = (to, eventBody = undefined, //jid from user\n    nbr = undefined, cb = () => {}) => {\n      const id = v4();\n      const stanza = xml(\"message\", {\n        to,\n        type: \"groupchat\",\n        id\n      }, xml(\"subject\", {}, \"KEY_ROOM_GENERAL\"), xml(\"body\", {}), xml(\"extraParams\", {\n        xmlns: 'jabber:client'\n      }, xml(\"key_room_event\", {}, nbr), eventBody ? xml(\"key_room_event_body\", {}, eventBody) : undefined));\n      this.client.send(stanza).then(() => {\n        cb(id);\n      });\n    };\n\n    this.joinRoomEvent = (to, eventBody, from, cb = () => {}) => {\n      const id = v4();\n      const stanza = xml(\"message\", {\n        to,\n        from,\n        type: \"groupchat\",\n        id\n      }, //from - UNNECESSARY?\n      xml(\"extraParams\", {}, xml(\"key_room_event\", {}, \"2\"), eventBody ? xml(\"key_room_event_body\", {}, eventBody) : undefined), xml(\"body\", {}), xml(\"subject\", {}, \"KEY_ROOM_GENERAL\"));\n      this.client.send(stanza).then(() => {\n        cb(id);\n      });\n    };\n\n    this.forwardMsg = (to, chatType, forwarded_msg_sender, forwarded_msg, forwarded_msg_id, callback) => {\n      const id = v4();\n      const forward = xml(\"message\", {\n        to: to,\n        id,\n        type: chatType\n      }, xml(\"body\", {}, forwarded_msg), xml(\"extraParams\", {}, xml(\"reply_to\", {}, forwarded_msg_sender), xml(\"reply_msg_id\", {}, forwarded_msg_id)), xml(\"request\", {\n        xmlns: \"urn:xmpp:receipts\"\n      }));\n      this.client.send(forward).then(() => {\n        callback(id);\n      });\n    };\n\n    this.joinRoom = to => {\n      const joinStanza = xml(\"presence\", {\n        to: `${to}/${this.username}`,\n        from: `${this.getJid()}/${this.resource}`\n      }, xml(\"x\", {\n        xmlns: \"http://jabber.org/protocol/muc\"\n      }, xml(\"history\", {\n        maxstanzas: \"0\"\n      })));\n      this.client.send(joinStanza);\n    };\n\n    Object.setPrototypeOf(this, Chat.prototype);\n    this.service = _service;\n    this.domain = _domain;\n    this.resource = _resource;\n    this.username = _username;\n    this.password = _password;\n    this.client = this.instanceMaker({\n      service: _service,\n      domain: _domain,\n      resource: _resource,\n      username: _username,\n      password: _password\n    });\n    this.status = this.client.status;\n    this.connect = this.client.start;\n    this.filesQueue = new Map();\n    this.presences = new Map();\n    this.discoItems = new Map();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/chat/chatcommunicator.ts"],"names":["client","xml","v4","PresenceStatus","Events","getFrom","getMessage","isTextMessage","getTo","getMessageId","isFileMessage","getMessageType","getMessagFileUrl","getReplyTo","getReplyMsg","getReplyMsgId","isReceived","isDisplayed","getReceivedMessageId","getDisplayedMessageId","isComposing","isActive","isGroupEvent","getEventId","isNewGroup","getEventBody","events","require","Chat","EventEmitter","constructor","service","domain","resource","username","password","getJid","getDomain","replace","split","instanceMaker","xmpp","on","onStatus","onStanza","onOnline","onError","onOffline","stanza","emit","is","onMessage","onPresence","onIQ","__","discoItensId","sendServiceDiscoveryRequest","send","e","status","eventToNewGroup","to","from","id","eventId","message","reply_msg","undefined","sent_at","Date","toISOString","type","reply_msg_id","reply_to","SEND_EVENT","event","eventBody","sendReceipts","MESSAGE","fileMessage","fileUrl","received","RECEIVED","displayed","DISPLAYED","COMPOSING","ACTIVE","presence","attrs","time","getChild","children","presences","set","file","filesQueue","get","firstStepId","sendFileSecondStep","secondStepId","sendFileThirdStep","forEach","element","key","jid","discoItems","getPresence","sendEnableCarbon","xmlns","sendPresence","show","leaveGroup","UNAVAILABLE","sendMessage","chatType","callback","msgId","then","sendFile","fileId","sendFileFirstStep","sendImageMessage","url","messagePacket","uploadJid","sendServiceDiscoveryRequestToUpload","length","delete","console","log","var","sendRequestSlotOnUpload","getUrl","putUrl","uploadFile","serviceDiscoveryRequest","uploadId","thirdStepId","filename","name","size","xhr","XMLHttpRequest","onerror","responseText","onreadystatechange","readyState","DONE","upload","addEventListener","evt","open","setRequestHeader","sendTyping","composing","sendActive","active","replyMsg","replyed_sender","replyed_msg","replyed_msg_id","cb","reply","sendEvent","nbr","joinRoomEvent","forwardMsg","forwarded_msg_sender","forwarded_msg","forwarded_msg_id","forward","joinRoom","joinStanza","maxstanzas","Object","setPrototypeOf","prototype","connect","start","Map"],"mappings":"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","sourcesContent":["import { client, xml, XmppClient } from \"@xmpp/client\";\r\nimport { v4 } from \"uuid\";\r\nimport PresenceStatus from \"../../enuns/PresenceStatus\";\r\nimport {\r\n  ActiveCallback,\r\n  ChatType,\r\n  ComposingCallback,\r\n  ConnectionOptions,\r\n  DisplayedCallback,\r\n  ErrorCallback,\r\n  EventCallback,\r\n  Events,\r\n  FileMessage,\r\n  Message,\r\n  MessageCallback,\r\n  OfflineCallback,\r\n  OnlineCallback,\r\n  Presence,\r\n  PresenceCallback,\r\n  ReceivedCallback,\r\n  SendImageCallback,\r\n  SendingFile,\r\n  SendMessageCallback,\r\n  StanzaCallback,\r\n} from \"./types/types\";\r\nimport {\r\n  getFrom,\r\n  getMessage,\r\n  isTextMessage,\r\n  getTo,\r\n  getMessageId,\r\n  isFileMessage,\r\n  getMessageType,\r\n  getMessagFileUrl,\r\n  getReplyTo,\r\n  getReplyMsg,\r\n  getReplyMsgId,\r\n  isReceived,\r\n  isDisplayed,\r\n  getReceivedMessageId,\r\n  getDisplayedMessageId,\r\n  isComposing,\r\n  isActive,\r\n  isGroupEvent,\r\n  getEventId,\r\n  isNewGroup,\r\n  getEventBody,\r\n} from \"./util/stanzaUtils\";\r\nconst events = require(\"events\");\r\n\r\nexport default interface Chat {\r\n  service: string;\r\n  domain?: string;\r\n  resource: string;\r\n  username: string;\r\n  password?: string;\r\n  client: XmppClient;\r\n  status: string;\r\n  filesQueue: Map<string, SendingFile>;\r\n  presences: Map<string, Presence>;\r\n  connect(): Promise<any>;\r\n  on(event: Events.MESSAGE, cb: MessageCallback): this;\r\n  on(event: Events.PRESENCE, cb: PresenceCallback): this;\r\n  on(event: Events.ONLINE, cb: OnlineCallback): this;\r\n  on(event: Events.OFFLINE, cb: OfflineCallback): this;\r\n  on(event: Events.ERROR, cb: ErrorCallback): this;\r\n  on(event: Events.STANZA, cb: StanzaCallback): this;\r\n  on(event: Events.RECEIVED, cb: ReceivedCallback): this;\r\n  on(event: Events.DISPLAYED, cb: DisplayedCallback): this;\r\n  on(event: Events.COMPOSING, cb: ComposingCallback): this;\r\n  on(event: Events.ACTIVE, cb: ActiveCallback): this;\r\n  on(event: Events.JOIN_ROOM, cb: EventCallback): this;\r\n  on(event: Events.SEND_EVENT, cb: EventCallback): this;\r\n  getPresence(from: string): Presence | null;\r\n  sendMessage(\r\n    to: string,\r\n    chatType: ChatType,\r\n    message: string,\r\n    cb: SendMessageCallback\r\n  ): void;\r\n  sendFile(\r\n    to: string,\r\n    chatType: ChatType,\r\n    file: File,\r\n    callback: SendImageCallback\r\n  ): void;\r\n  getDomain(): string;\r\n  joinRoom(to: string): void;\r\n}\r\nexport default class Chat extends events.EventEmitter {\r\n  constructor({\r\n    service,\r\n    domain,\r\n    resource,\r\n    username,\r\n    password,\r\n  }: ConnectionOptions) {\r\n    super();\r\n    Object.setPrototypeOf(this, Chat.prototype);\r\n    this.service = service;\r\n    this.domain = domain;\r\n    this.resource = resource;\r\n    this.username = username;\r\n    this.password = password;\r\n    this.client = this.instanceMaker({\r\n      service: service,\r\n      domain: domain,\r\n      resource: resource,\r\n      username: username,\r\n      password: password,\r\n    });\r\n    this.status = this.client.status;\r\n    this.connect = this.client.start;\r\n    this.filesQueue = new Map<string, SendingFile>();\r\n    this.presences = new Map<string, Presence>();\r\n    this.discoItems = new Map<string, string>();\r\n  }\r\n\r\n  getJid = () => {\r\n    return `${this.username}@${this.getDomain()}`;\r\n  };\r\n\r\n  getDomain = () => {\r\n    return (\r\n      this.domain ||\r\n      this.service.replace(\"wss://\", \"\").replace(\"ws://\", \"\").split(\"/\")[0]\r\n    );\r\n  };\r\n\r\n  instanceMaker = ({\r\n    service,\r\n    domain,\r\n    resource,\r\n    username,\r\n    password,\r\n  }: ConnectionOptions) => {\r\n    const xmpp = client({\r\n      service: service,\r\n      domain: domain,\r\n      resource: resource,\r\n      username: username,\r\n      password: password,\r\n    });\r\n    xmpp.on(\"status\", this.onStatus);\r\n    xmpp.on(\"stanza\", this.onStanza);\r\n    xmpp.on(\"online\", this.onOnline);\r\n    xmpp.on(\"error\", this.onError);\r\n    xmpp.on(\"offline\", this.onOffline);\r\n    return xmpp;\r\n  };\r\n\r\n  onStanza = (stanza: any) => {\r\n    this.emit(\"stanza\", stanza);\r\n    if (stanza.is(\"message\")) this.onMessage(stanza);\r\n    else if (stanza.is(\"presence\")) this.onPresence(stanza);\r\n    else if (stanza.is(\"iq\")) this.onIQ(stanza);\r\n    else return;\r\n  };\r\n\r\n  onOnline = (__: any) => {\r\n    this.discoItensId = v4();\r\n    // this.sendEnableCarbon();\r\n    this.sendServiceDiscoveryRequest(this.discoItensId);\r\n    this.client.send(xml(\"presence\"));\r\n    this.emit(\"online\");\r\n  };\r\n\r\n  onOffline = () => {\r\n    this.emit(\"offline\");\r\n  };\r\n\r\n  onError = (e: any) => {\r\n    this.emit(\"error\", e);\r\n  };\r\n\r\n  onStatus = (status: string) => {\r\n    this.emit(\"status\", status);\r\n  };\r\n\r\n  onMessage = (stanza: any) => {\r\n    if (isGroupEvent(stanza)) {\r\n      if(isNewGroup(stanza)){\r\n        const eventToNewGroup: Message = {\r\n          to: getTo(stanza),\r\n          from: getFrom(stanza),\r\n          id: v4(),\r\n          eventId: 1,\r\n          message: \"\",\r\n          reply_msg: undefined,\r\n          sent_at: new Date().toISOString(),\r\n          type: \"groupchat\",\r\n          reply_msg_id: undefined,\r\n          reply_to: undefined\r\n        };\r\n        this.emit(Events.SEND_EVENT, eventToNewGroup);\r\n      }else{\r\n          const event: Message = {\r\n            id: getMessageId(stanza),\r\n            to: getTo(stanza),\r\n            from: getFrom(stanza),\r\n            message: \"\",\r\n            type: \"groupchat\",\r\n            sent_at: new Date().toISOString(),\r\n            reply_to: undefined,\r\n            reply_msg: undefined,\r\n            reply_msg_id: undefined,\r\n            eventId: getEventId(stanza),\r\n            eventBody: getEventBody(stanza),\r\n          };\r\n          this.emit(Events.SEND_EVENT, event);\r\n        }\r\n      }else if (isTextMessage(stanza)) {\r\n      const message: Message = {\r\n        id: getMessageId(stanza),\r\n        to: getTo(stanza),\r\n        from: getFrom(stanza),\r\n        message: getMessage(stanza),\r\n        type: getMessageType(stanza),\r\n        sent_at: new Date().toISOString(),\r\n        reply_to: getReplyTo(stanza),\r\n        reply_msg: getReplyMsg(stanza),\r\n        reply_msg_id: getReplyMsgId(stanza),\r\n      };\r\n      this.sendReceipts(stanza);\r\n      this.emit(Events.MESSAGE, message);\r\n    } else if (isFileMessage(stanza)) {\r\n      const fileMessage: FileMessage = {\r\n        id: getMessageId(stanza),\r\n        to: getTo(stanza),\r\n        from: getFrom(stanza),\r\n        message: \"\",\r\n        type: getMessageType(stanza),\r\n        sent_at: new Date().toISOString(),\r\n        reply_to: getReplyTo(stanza),\r\n        reply_msg: getReplyMsg(stanza),\r\n        reply_msg_id: getReplyMsgId(stanza),\r\n        fileUrl: getMessagFileUrl(stanza),\r\n      };\r\n      this.sendReceipts(stanza);\r\n      this.emit(Events.MESSAGE, fileMessage);\r\n    } else if (isReceived(stanza)) {\r\n      const received = {\r\n        id: getReceivedMessageId(stanza),\r\n      };\r\n      this.emit(Events.RECEIVED, received);\r\n    } else if (isDisplayed(stanza)) {\r\n      const displayed = {\r\n        id: getDisplayedMessageId(stanza),\r\n      };\r\n      this.emit(Events.DISPLAYED, displayed);\r\n    } else if (isComposing(stanza)) {\r\n      this.emit(Events.COMPOSING, getFrom(stanza));\r\n    } else if (isActive(stanza)) {\r\n      this.emit(Events.ACTIVE, getFrom(stanza));\r\n    }\r\n  };\r\n\r\n  onPresence = (stanza: any) => {\r\n    const presence: Presence = {\r\n      id: v4(),\r\n      from: stanza.attrs.from,\r\n      time: new Date().toISOString(),\r\n      status: stanza.getChild(\"show\")\r\n        ? stanza.getChild(\"show\").children[0]\r\n        : stanza.attrs.type || \"online\",\r\n    };\r\n    this.presences.set(stanza.attrs.from, presence);\r\n    this.emit(\"presence\", presence);\r\n  };\r\n\r\n  onIQ = (stanza: any) => {\r\n    if (stanza.attrs.type === \"result\") {\r\n      if (stanza.attrs.id) {\r\n        const file = this.filesQueue.get(stanza.attrs.id);\r\n        if (file) {\r\n          if (stanza.attrs.id === file.firstStepId) {\r\n            this.sendFileSecondStep(stanza);\r\n          } else if (stanza.attrs.id === file.secondStepId) {\r\n            this.sendFileThirdStep(stanza, file);\r\n          }\r\n        } else if (stanza.attrs.id === this.discoItensId) {\r\n          stanza.children[0].children.forEach((element: any) => {\r\n            const key = element.attrs.jid.split(\".\")[0];\r\n            this.discoItems.set(key, element.attrs.jid);\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  getPresence = (from: string) => {\r\n    const presence = this.presences.get(from);\r\n    if (presence) return presence;\r\n    else return null;\r\n  };\r\n  sendEnableCarbon = () => {\r\n    const stanza = xml(\r\n      \"iq\",\r\n      { from: `${this.getJid()}/${this.resource}`, type: \"set\", id: \"enable1\" },\r\n      xml(\"enable\", { xmlns: \"urn:xmpp:carbons:2\" })\r\n    );\r\n    this.client.send(stanza);\r\n  };\r\n  sendPresence = (status: string, to: string | undefined = undefined) => {\r\n    const show = xml(\"show\", {}, status);\r\n    if (status !== \"online\") this.client.send(xml(\"presence\", {to}, show));\r\n    else this.client.send(xml(\"presence\"));\r\n  };\r\n  leaveGroup = (to: string, type: PresenceStatus = PresenceStatus.UNAVAILABLE) => {\r\n    this.client.send(xml(\"presence\", {to, type}));\r\n  };\r\n  sendMessage = (\r\n    to: string,\r\n    chatType: ChatType,\r\n    message: string,\r\n    callback: SendMessageCallback\r\n  ) => {\r\n    const msgId = v4();\r\n    this.client\r\n      .send(\r\n        xml(\r\n          \"message\",\r\n          {\r\n            id: msgId,\r\n            type: chatType,\r\n            to: to,\r\n          },\r\n          xml(\"body\", {}, message),\r\n          xml(\"request\", { xmlns: \"urn:xmpp:receipts\" })\r\n        )\r\n      )\r\n      .then(() => {\r\n        callback(msgId);\r\n      });\r\n  };\r\n\r\n  sendFile = (\r\n    to: string,\r\n    chatType: ChatType,\r\n    file: File,\r\n    callback: SendImageCallback\r\n  ) => {\r\n    const fileId = v4();\r\n    this.filesQueue.set(fileId, {\r\n      firstStepId: fileId,\r\n      file: file,\r\n      to: to,\r\n      chatType: chatType,\r\n      callback: callback,\r\n    });\r\n    this.sendFileFirstStep(fileId);\r\n  };\r\n\r\n  sendImageMessage = (\r\n    url: string,\r\n    to: string,\r\n    chatType: ChatType,\r\n    callback: SendImageCallback\r\n  ) => {\r\n    const msgId = v4();\r\n    const messagePacket = xml(\r\n      \"message\",\r\n      {\r\n        id: msgId,\r\n        type: chatType,\r\n        to: to,\r\n      },\r\n      xml(\"body\", {}, url),\r\n      xml(\"request\", { xmlns: \"urn:xmpp:receipts\" }),\r\n      xml(\"x\", { xmlns: \"jabber:x:oob\" }, xml(\"url\", {}, url))\r\n    );\r\n    if (this.client) {\r\n      callback({ url, msgId });\r\n      this.client.send(messagePacket);\r\n    }\r\n  };\r\n\r\n  sendFileFirstStep = (fileId: string) => {\r\n    const uploadJid = this.discoItems.get(\"upload\");\r\n    if (uploadJid) {\r\n      this.sendServiceDiscoveryRequestToUpload(uploadJid, fileId);\r\n      return;\r\n    }\r\n  };\r\n\r\n  sendFileSecondStep = (stanza: any) => {\r\n    if (stanza.children.length > 0) {\r\n      const secondStepId = v4();\r\n      const file = this.filesQueue.get(stanza.attrs.id);\r\n      if (file) {\r\n        this.filesQueue.set(secondStepId, {\r\n          firstStepId: file.firstStepId,\r\n          secondStepId: secondStepId,\r\n          file: file.file,\r\n          to: file.to,\r\n          chatType: file.chatType,\r\n          callback: file.callback,\r\n        });\r\n        this.filesQueue.delete(stanza.attrs.id);\r\n      }\r\n      console.log(\r\n        \"upload request xmlns\",\r\n        stanza.children[0].children[2].attrs.var\r\n      );\r\n      this.sendRequestSlotOnUpload(stanza.attrs.from, secondStepId);\r\n    }\r\n  };\r\n\r\n  sendFileThirdStep = (stanza: any, file: SendingFile) => {\r\n    let getUrl = \"\";\r\n    let putUrl = \"\";\r\n    stanza.children[0].children.forEach((element: any) => {\r\n      if (element.is(\"get\")) {\r\n        getUrl = element.attrs.url;\r\n      } else if (element.is(\"put\")) {\r\n        putUrl = element.attrs.url;\r\n      }\r\n    });\r\n    if (file?.secondStepId) this.uploadFile(putUrl, getUrl, file.secondStepId);\r\n  };\r\n\r\n  sendServiceDiscoveryRequest = (fileId: string) => {\r\n    const serviceDiscoveryRequest = xml(\r\n      \"iq\",\r\n      {\r\n        type: \"get\",\r\n        to: this.getDomain(),\r\n        id: fileId,\r\n      },\r\n      xml(\"query\", { xmlns: \"http://jabber.org/protocol/disco#items\" })\r\n    );\r\n    if (this.client) {\r\n      this.client.send(serviceDiscoveryRequest);\r\n    }\r\n  };\r\n\r\n  sendServiceDiscoveryRequestToUpload = (\r\n    uploadJid: string,\r\n    uploadId: string\r\n  ) => {\r\n    console.log(\"sendServiceDiscoveryRequestToUpload\", uploadJid);\r\n    const serviceDiscoveryRequest = xml(\r\n      \"iq\",\r\n      {\r\n        type: \"get\",\r\n        to: uploadJid,\r\n        id: uploadId,\r\n      },\r\n      xml(\"query\", { xmlns: \"http://jabber.org/protocol/disco#info\" })\r\n    );\r\n    if (this.client) {\r\n      this.client.send(serviceDiscoveryRequest);\r\n    }\r\n  };\r\n\r\n  sendRequestSlotOnUpload = (uploadJid: string, thirdStepId: string) => {\r\n    console.log(\"sendRequestSlotOnUpload\", uploadJid);\r\n    const file = this.filesQueue.get(thirdStepId)?.file;\r\n    const serviceDiscoveryRequest = xml(\r\n      \"iq\",\r\n      {\r\n        type: \"get\",\r\n        to: uploadJid,\r\n        id: thirdStepId,\r\n      },\r\n      xml(\"request\", {\r\n        xmlns: \"urn:xmpp:http:upload:0\",\r\n        filename: file?.name,\r\n        size: file?.size,\r\n        \"content-type\": file?.type,\r\n      })\r\n    );\r\n    if (this.client) {\r\n      this.client.send(serviceDiscoveryRequest);\r\n    }\r\n  };\r\n\r\n  uploadFile = (putUrl: string, getUrl: string, id: string) => {\r\n    let xhr = new XMLHttpRequest();\r\n    const file = this.filesQueue.get(id);\r\n    if (file) {\r\n      xhr.onerror = () => {\r\n        if (xhr.responseText) {\r\n          file.callback(xhr.responseText, true);\r\n          console.log(\"upload error\");\r\n        }\r\n      };\r\n      xhr.onreadystatechange = (e) => {\r\n        if (xhr.readyState === XMLHttpRequest.DONE) {\r\n          console.log(\"file upload response\", e, xhr.status);\r\n          if (xhr.status === 200 || xhr.status === 201) {\r\n            console.log(\"file upload response success\");\r\n            this.sendImageMessage(\r\n              getUrl,\r\n              file.to,\r\n              file.chatType,\r\n              file?.callback\r\n            );\r\n            this.filesQueue.delete(id);\r\n          }\r\n        }\r\n      };\r\n      xhr.upload.addEventListener(\r\n        \"progress\",\r\n        (evt) => {\r\n          console.log(\"progress\", evt);\r\n          // if (file) file.file.size = evt.total\r\n        },\r\n        false\r\n      );\r\n      xhr.open(\"PUT\", putUrl, true);\r\n      xhr.setRequestHeader(\"Content-Type\", file.file.type);\r\n\r\n      xhr.send(file.file);\r\n\r\n      console.log(\"URL\", putUrl);\r\n      console.log(\"fileSize\", file.file.size);\r\n    }\r\n  };\r\n  sendReceipts = (stanza: any) => {\r\n    const message = xml(\r\n      \"message\",\r\n      {\r\n        from: stanza.attrs.to,\r\n        id: v4(),\r\n        to: stanza.attrs.from.split(\"/\")[0],\r\n      },\r\n      xml(\"received\", { xmlns: \"urn:xmpp:receipts\", id: stanza.attrs.id })\r\n    );\r\n    console.log(message);\r\n    this.client.send(message);\r\n  };\r\n  sendTyping = (to: string) => {\r\n    const composing = xml(\r\n      \"message\",\r\n      {\r\n        id: v4(),\r\n        to: to,\r\n        type: \"chat\",\r\n      },\r\n      xml(\"composing\", {\r\n        xmlns: \"http://jabber.org/protocol/chatstates\",\r\n      })\r\n    );\r\n    this.client.send(composing);\r\n  };\r\n  sendActive = (to: string) => {\r\n    const active = xml(\r\n      \"message\",\r\n      {\r\n        id: v4(),\r\n        to: to,\r\n        type: \"chat\",\r\n      },\r\n      xml(\"active\", {\r\n        xmlns: \"http://jabber.org/protocol/chatstates\",\r\n      })\r\n    );\r\n    this.client.send(active);\r\n  };\r\n  replyMsg = (\r\n    to: string,\r\n    chatType: string,\r\n    message: string,\r\n    replyed_sender: string,\r\n    replyed_msg: string,\r\n    replyed_msg_id: string,\r\n    cb: SendMessageCallback\r\n  ) => {\r\n    const id = v4();\r\n    const reply = xml(\r\n      \"message\",\r\n      { to: to, id, type: chatType },\r\n      xml(\"body\", {}, message),\r\n      xml(\r\n        \"extraParams\",\r\n        {},\r\n        xml(\"reply_to\", {}, replyed_sender),\r\n        xml(\"reply_msg\", {}, replyed_msg),\r\n        xml(\"reply_msg_id\", {}, replyed_msg_id)\r\n      )\r\n    );\r\n    this.client.send(reply).then(() => {\r\n      cb(id);\r\n    });\r\n  };\r\n  /* \r\n  unMarkRoomEvent = (\r\n    to: string,\r\n    eventBody: string | undefined = undefined,\r\n    cb: SendMessageCallback\r\n  ) => {\r\n    const id = v4();\r\n    const stanza = xml(\r\n      \"message\",\r\n      { to, type: \"groupchat\", id },\r\n      xml(\"body\", {}),\r\n      xml(\"subject\", {}, \"KEY_ROOM_GENERAL\"),\r\n      xml(\r\n        \"extraParams\",\r\n        { xmlns: \"jabber:client\" },\r\n        xml(\"key_room_event\", {}, \"9\"),\r\n        eventBody ? xml(\"key_room_event_body\", {}, eventBody) : undefined\r\n      )\r\n    );\r\n    this.client.send(stanza).then(() => {\r\n      cb(id);\r\n    });\r\n  };*/\r\n\r\n  sendEvent = (\r\n    to: string,\r\n    eventBody: string | undefined = undefined, //jid from user\r\n    nbr: string | undefined = undefined, \r\n    cb: SendMessageCallback = () => {},\r\n  ) => {\r\n    const id = v4();\r\n    const stanza = xml(\r\n      \"message\", {to, type: \"groupchat\", id},\r\n      xml(\"subject\", {}, \"KEY_ROOM_GENERAL\"),\r\n      xml(\"body\", {}),\r\n      xml(\"extraParams\", {xmlns:'jabber:client'},\r\n        xml(\"key_room_event\", {}, nbr),\r\n        eventBody ? xml(\"key_room_event_body\", {}, eventBody) : undefined,\r\n      )\r\n    );\r\n    this.client.send(stanza).then(() => {\r\n      cb(id);\r\n    });\r\n  };\r\n\r\n  joinRoomEvent = (\r\n    to: string,\r\n    eventBody: string | undefined, //jid of user who was added -> I ADDED\r\n    from: string,\r\n    cb: SendMessageCallback = () => {}\r\n  ) => {\r\n    const id = v4();\r\n    const stanza = xml(\r\n    \"message\",\r\n    { to, from, type: \"groupchat\", id}, //from - UNNECESSARY?\r\n    xml(\"extraParams\", {},\r\n      xml(\"key_room_event\", {}, \"2\"),\r\n      eventBody ? xml(\"key_room_event_body\", {}, eventBody) : undefined,\r\n      ),\r\n    xml(\"body\", {}),\r\n    xml(\"subject\", {}, \"KEY_ROOM_GENERAL\"),\r\n    );\r\n    this.client.send(stanza).then(() => {\r\n      cb(id);\r\n    });\r\n  };\r\n\r\n  /*\r\n  leaveRoomEvent = (\r\n    to: string,\r\n    from: string,\r\n    cb: SendMessageCallback\r\n  ) => {\r\n    const id = v4();\r\n    const stanza = xml(\r\n      \"message\", {\r\n        to, from, type: \"groupchat\", id\r\n      },\r\n      xml(\"extraParams\", {},\r\n        xml(\"key_room_event\", {}, \"3\")\r\n      ),\r\n      xml(\"body\", {}),\r\n      xml(\"subject\", {}, \"KEY_ROOM_GENERAL\"),\r\n    )\r\n    this.client.send(stanza).then(() => {\r\n      cb(id);\r\n    });\r\n  };\r\n */\r\n  forwardMsg = (\r\n    to: string,\r\n    chatType: ChatType,\r\n    forwarded_msg_sender: string,\r\n    forwarded_msg: string,\r\n    forwarded_msg_id: string,\r\n    callback: SendMessageCallback\r\n  ) => {\r\n    const id = v4();\r\n    const forward = xml(\r\n      \"message\",\r\n      { to: to, id, type: chatType },\r\n      xml(\"body\", {}, forwarded_msg),\r\n      xml(\r\n        \"extraParams\",\r\n        {},\r\n        xml(\"reply_to\", {}, forwarded_msg_sender),\r\n        xml(\"reply_msg_id\", {}, forwarded_msg_id)\r\n      ),\r\n      xml(\"request\", { xmlns: \"urn:xmpp:receipts\" })\r\n    );\r\n    this.client.send(forward).then(() => {\r\n      callback(id);\r\n    });\r\n  };\r\n  joinRoom = (to: string) => {\r\n    const joinStanza = xml(\r\n      \"presence\",\r\n      {\r\n        to: `${to}/${this.username}`,\r\n        from: `${this.getJid()}/${this.resource}`,\r\n      },\r\n      xml(\r\n        \"x\",\r\n        { xmlns: \"http://jabber.org/protocol/muc\" },\r\n        xml(\"history\", { maxstanzas: \"0\" })\r\n      )\r\n    );\r\n    this.client.send(joinStanza);\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}