{"ast":null,"code":"import { Inviter, Registerer, SessionState // SIPExtension,\n, UserAgent, Web } from \"sip.js\";\nimport MultiStreamsMixer from \"multistreamsmixer\";\nimport short from \"short-uuid\";\nexport const tagsRange = [0, 1, 2, 3];\nexport default class SIP {\n  constructor(props) {\n    this.Register = () => {\n      if (this.userAgent) {\n        var _this$registerer, _this$registerer2;\n\n        if (!this.registerer) this.registerer = new Registerer(this.userAgent);\n        (_this$registerer = this.registerer) === null || _this$registerer === void 0 ? void 0 : _this$registerer.register();\n        (_this$registerer2 = this.registerer) === null || _this$registerer2 === void 0 ? void 0 : _this$registerer2.stateChange.addListener(this.connectionCB);\n      }\n    };\n\n    this.unRegister = () => {\n      var _this$registerer3, _this$registerer4;\n\n      Object.values(this.activeCalls).forEach(c => this.endCall(c));\n      (_this$registerer3 = this.registerer) === null || _this$registerer3 === void 0 ? void 0 : _this$registerer3.unregister();\n      (_this$registerer4 = this.registerer) === null || _this$registerer4 === void 0 ? void 0 : _this$registerer4.dispose();\n      return true;\n    };\n\n    this.myMediaStreamFactory = (constraints, sessionDescriptionHandler) => {\n      if (constraints.customStream) {\n        return Promise.resolve(constraints.customStream);\n      } else if (!constraints.audio && !constraints.video) {\n        return Promise.resolve(new MediaStream());\n      } else if (navigator.mediaDevices === undefined) {\n        return Promise.reject(new Error(\"Media devices not available in insecure contexts.\"));\n      } else {\n        return navigator.mediaDevices.getUserMedia.call(navigator.mediaDevices, constraints);\n      }\n    };\n\n    this.mySessionDescriptionHandlerFactory = Web.defaultSessionDescriptionHandlerFactory(this.myMediaStreamFactory);\n\n    this.onInvite = invitation => {\n      if (this.activeCalls.size < tagsRange.length) {\n        const cb = session => {\n          this.activeCalls.set(invitation.id, invitation);\n          this.onReceiveCall(session, invitation);\n        };\n\n        invitation.stateChange.addListener(cb);\n        this.onReceiveCall(SessionState.Initial, invitation);\n      } else {\n        invitation.reject();\n      }\n    };\n\n    this.endScreenShare = () => {\n      if (this.screenShareSession) {\n        this.endCall(this.screenShareSession);\n        this.screenShareSession = undefined;\n        return;\n      }\n    };\n\n    this.remoteVideoEnabled = session => {\n      var _ref, _ref$peerConnection;\n\n      let receivingVideo = false;\n      (_ref = session.sessionDescriptionHandler) === null || _ref === void 0 ? void 0 : (_ref$peerConnection = _ref.peerConnection) === null || _ref$peerConnection === void 0 ? void 0 : _ref$peerConnection.getReceivers().forEach(receiver => {\n        if (receiver.track) {\n          if (receiver.track.kind === \"video\") receivingVideo = true;\n        }\n      });\n      return receivingVideo;\n    };\n\n    this.localVideoEnabled = session => {\n      var _ref2, _ref3;\n\n      return !!((_ref2 = (_ref3 = session) === null || _ref3 === void 0 ? void 0 : _ref3.sessionDescriptionHandlerOptions.constraints) === null || _ref2 === void 0 ? void 0 : _ref2.video);\n    };\n\n    this.muteMic = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        var _sdh$peerConnection;\n\n        const sdh = call.sessionDescriptionHandler;\n        sdh === null || sdh === void 0 ? void 0 : (_sdh$peerConnection = sdh.peerConnection) === null || _sdh$peerConnection === void 0 ? void 0 : _sdh$peerConnection.getSenders().forEach(stream => {\n          var _stream$track;\n\n          if (((_stream$track = stream.track) === null || _stream$track === void 0 ? void 0 : _stream$track.kind) === \"audio\") stream.track.enabled = false;\n        });\n      }\n    };\n\n    this.unMuteMic = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        var _sdh$peerConnection2;\n\n        const sdh = call.sessionDescriptionHandler;\n        sdh === null || sdh === void 0 ? void 0 : (_sdh$peerConnection2 = sdh.peerConnection) === null || _sdh$peerConnection2 === void 0 ? void 0 : _sdh$peerConnection2.getSenders().forEach(stream => {\n          var _stream$track2;\n\n          if (((_stream$track2 = stream.track) === null || _stream$track2 === void 0 ? void 0 : _stream$track2.kind) === \"audio\") stream.track.enabled = true;\n        });\n      }\n    };\n\n    this.disableCam = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        if (this.localVideoEnabled(call)) {\n          var _sdh$peerConnection3;\n\n          const sdh = call.sessionDescriptionHandler;\n          sdh === null || sdh === void 0 ? void 0 : (_sdh$peerConnection3 = sdh.peerConnection) === null || _sdh$peerConnection3 === void 0 ? void 0 : _sdh$peerConnection3.getSenders().forEach(stream => {\n            var _stream$track3;\n\n            if (((_stream$track3 = stream.track) === null || _stream$track3 === void 0 ? void 0 : _stream$track3.kind) === \"video\") stream.track.enabled = false;\n          });\n        } else {\n          // TODO\n          console.log(\"re-invite\");\n        }\n      }\n    };\n\n    this.enableCam = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        if (this.localVideoEnabled(call)) {\n          var _sdh$peerConnection4;\n\n          const sdh = call.sessionDescriptionHandler;\n          sdh === null || sdh === void 0 ? void 0 : (_sdh$peerConnection4 = sdh.peerConnection) === null || _sdh$peerConnection4 === void 0 ? void 0 : _sdh$peerConnection4.getSenders().forEach(stream => {\n            var _stream$track4;\n\n            if (((_stream$track4 = stream.track) === null || _stream$track4 === void 0 ? void 0 : _stream$track4.kind) === \"video\") stream.track.enabled = true;\n          });\n        } else {\n          // TODO\n          console.log(\"re-invite\");\n        }\n      }\n    };\n\n    this.holdCall = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        const options = {\n          sessionDescriptionHandlerModifiers: [Web.holdModifier]\n        };\n        return call.invite(options);\n      }\n    };\n\n    this.unHoldCall = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        const options = {\n          sessionDescriptionHandlerModifiers: []\n        };\n\n        if (call) {\n          call.invite(options);\n        }\n      }\n    };\n\n    this.sendDTMF = (callID, dtmf) => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        var _call$sessionDescript;\n\n        (_call$sessionDescript = call.sessionDescriptionHandler) === null || _call$sessionDescript === void 0 ? void 0 : _call$sessionDescript.sendDtmf(dtmf);\n      }\n    };\n\n    this.mixAudios = (firstStream, secondStream) => {\n      return new MultiStreamsMixer([firstStream, secondStream]).getMixedStream();\n    };\n\n    this.mergeCalls = (firstCallId, secondCallId) => {\n      const firstCall = this.activeCalls.get(firstCallId);\n      const secondCall = this.activeCalls.get(secondCallId);\n\n      if (firstCall && secondCall) {\n        var _ref4, _ref5;\n\n        const firstPeer = (_ref4 = firstCall.sessionDescriptionHandler) === null || _ref4 === void 0 ? void 0 : _ref4.peerConnection;\n        const secondPeer = (_ref5 = firstCall.sessionDescriptionHandler) === null || _ref5 === void 0 ? void 0 : _ref5.peerConnection;\n        const firstSendedTrack = firstPeer === null || firstPeer === void 0 ? void 0 : firstPeer.getSenders().filter(str => {\n          var _str$track;\n\n          return ((_str$track = str.track) === null || _str$track === void 0 ? void 0 : _str$track.kind) === \"audio\";\n        })[0].track;\n        const secondSendedTrack = secondPeer === null || secondPeer === void 0 ? void 0 : secondPeer.getSenders().filter(str => {\n          var _str$track2;\n\n          return ((_str$track2 = str.track) === null || _str$track2 === void 0 ? void 0 : _str$track2.kind) === \"audio\";\n        })[0].track;\n        const firstReceivedStream = new MediaStream();\n        const firstReceivedTrack = firstPeer === null || firstPeer === void 0 ? void 0 : firstPeer.getReceivers().filter(str => str.track.kind === \"audio\")[0].track;\n        firstReceivedTrack && firstReceivedStream.addTrack(firstReceivedTrack);\n        const secondReceivedStream = new MediaStream();\n        const secondReceivedTrack = secondPeer === null || secondPeer === void 0 ? void 0 : secondPeer.getReceivers().filter(str => str.track.kind === \"audio\")[0].track;\n        secondReceivedTrack && secondReceivedStream.addTrack(secondReceivedTrack);\n\n        if (firstSendedTrack && secondSendedTrack && firstReceivedStream && secondReceivedStream) {\n          const firtsLocalMediaStream = new MediaStream();\n          const secondLocalMediaStream = new MediaStream();\n          firtsLocalMediaStream.addTrack(firstSendedTrack);\n          secondLocalMediaStream.addTrack(secondSendedTrack);\n          firstPeer === null || firstPeer === void 0 ? void 0 : firstPeer.getSenders().filter(str => {\n            var _str$track3;\n\n            return ((_str$track3 = str.track) === null || _str$track3 === void 0 ? void 0 : _str$track3.kind) === \"audio\";\n          })[0].replaceTrack(this.mixAudios(firtsLocalMediaStream, secondReceivedStream).getAudioTracks()[0]);\n          secondPeer === null || secondPeer === void 0 ? void 0 : secondPeer.getSenders().filter(str => {\n            var _str$track4;\n\n            return ((_str$track4 = str.track) === null || _str$track4 === void 0 ? void 0 : _str$track4.kind) === \"audio\";\n          })[0].replaceTrack(this.mixAudios(secondLocalMediaStream, firstReceivedStream).getAudioTracks()[0]);\n        }\n      }\n    };\n\n    this.conferenceScreenShare = async conferenceNumber => {\n      this.endScreenShare();\n\n      if (this.userAgent && conferenceNumber) {\n        const destination = UserAgent.makeURI(`sip:${conferenceNumber}-screen@${this.domain}`);\n        let screenShare;\n\n        if (destination) {\n          //@ts-ignore\n          const customStream = await navigator.mediaDevices.getDisplayMedia(navigator.mediaDevices, {\n            video: {\n              mediaSource: \"screen\"\n            },\n            audio: true\n          });\n          if (!customStream) return;\n          screenShare = new Inviter(this.userAgent, destination, {\n            params: {\n              fromDisplayName: `${this.displayName} (Screen)`\n            },\n            sessionDescriptionHandlerOptions: {\n              constraints: {\n                customStream,\n                audio: {\n                  deviceId: short().generate()\n                },\n                video: {\n                  deviceId: short().generate()\n                }\n              }\n            }\n          });\n\n          if (screenShare) {\n            customStream.getVideoTracks()[0].onended = () => this.endCall(screenShare);\n\n            this.screenShareSession = screenShare;\n            screenShare.invite();\n          }\n        }\n      }\n    };\n\n    Object.assign(this, props);\n    this.makeSIP();\n    this.activeCalls = new Map();\n    this.usedTags = new Map();\n  }\n\n  makeSIP() {\n    const transportOptions = {\n      server: this.wsURL,\n      // server: \"wss://test.citrussquad.com:7443\",\n      keepAliveInterval: 90\n    };\n    const uri = UserAgent.makeURI(`sip:${this.user}@${this.domain}`);\n    const userAgentOptions = {\n      authorizationUsername: this.user,\n      authorizationPassword: this.password,\n      displayName: this.displayName,\n      transportOptions,\n      uri,\n      logBuiltinEnabled: true,\n      delegate: {\n        onInvite: this.onInvite\n      },\n      sessionDescriptionHandlerFactory: this.mySessionDescriptionHandlerFactory\n    };\n    this.userAgent = new UserAgent(userAgentOptions);\n    this.registerer = new Registerer(this.userAgent);\n    this.userAgent.start().then(() => {\n      var _this$registerer5, _this$registerer6;\n\n      (_this$registerer5 = this.registerer) === null || _this$registerer5 === void 0 ? void 0 : _this$registerer5.register();\n      (_this$registerer6 = this.registerer) === null || _this$registerer6 === void 0 ? void 0 : _this$registerer6.stateChange.addListener(this.connectionCB);\n    });\n    this.userAgent.transport.onDisconnect = this.onDisconnect;\n    this.userAgent.transport.onConnect = this.onConnect;\n    window.addEventListener(\"unload\", ev => {\n      ev.preventDefault();\n      return this.unRegister();\n    });\n  }\n\n  invite(number, constraints = {\n    video: false,\n    audio: true\n  }) {\n    if (!(this.activeCalls.size >= tagsRange.length) && this.userAgent) {\n      const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\n      let newCall;\n\n      if (destination) {\n        newCall = new Inviter(this.userAgent, destination, {\n          sessionDescriptionHandlerOptions: {\n            constraints\n          } // inviteWithoutSdp: true,\n\n        });\n        this.activeCalls.set(newCall.id, newCall);\n      }\n\n      const currentInvite = newCall && this.activeCalls.get(newCall.id);\n\n      if (currentInvite) {\n        currentInvite.stateChange.addListener(state => {\n          if (this.activeCalls) this.onMakeCall(state, currentInvite);\n        });\n        currentInvite.invite();\n        this.onMakeCall(SessionState.Initial, currentInvite);\n      }\n    }\n  }\n\n  blindTransfer(callId, number) {\n    const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\n    const call = this.activeCalls.get(callId);\n\n    if (call && destination) {\n      call.refer(destination); // this.activeCalls.delete(callId);\n    }\n  }\n\n  attendedTransfer(firstCallId, secondCallId) {\n    const firstCall = this.activeCalls.get(firstCallId);\n    const secondCall = this.activeCalls.get(secondCallId);\n\n    if (firstCall && secondCall) {\n      firstCall.refer(secondCall);\n    }\n  }\n\n  getAvailableTag() {\n    let tagsUsing = Array.from(this.usedTags.values());\n\n    for (const tagId of tagsRange) {\n      if (!tagsUsing.find(tgId => tgId === `remote-stream-${tagId}`)) {\n        return `remote-stream-${tagId}`;\n      }\n    }\n  }\n\n  endCall(session) {\n    switch (session.state) {\n      case SessionState.Initial:\n      case SessionState.Establishing:\n        if (session instanceof Inviter) {\n          // An unestablished outgoing session\n          session.cancel();\n        } else {\n          // An unestablished incoming session\n          session.reject();\n        }\n\n        break;\n\n      case SessionState.Established:\n        // An established session\n        session.bye();\n        break;\n\n      case SessionState.Terminating:\n      case SessionState.Terminated:\n        // Cannot terminate a session that is already terminated\n        break;\n    }\n  }\n\n  setupRemoteMedia(session, speakerId = \"\") {\n    var _ref7, _ref7$peerConnection;\n\n    const tagId = this.getAvailableTag();\n\n    if (!tagId) {\n      var _ref6;\n\n      (_ref6 = session) === null || _ref6 === void 0 ? void 0 : _ref6.reject();\n      return;\n    }\n\n    const mediaElement = document.getElementById(tagId);\n    this.usedTags.set(session.id, tagId);\n    const remoteStream = new MediaStream();\n    (_ref7 = session.sessionDescriptionHandler) === null || _ref7 === void 0 ? void 0 : (_ref7$peerConnection = _ref7.peerConnection) === null || _ref7$peerConnection === void 0 ? void 0 : _ref7$peerConnection.getReceivers().forEach(receiver => {\n      if (receiver.track) {\n        remoteStream.addTrack(receiver.track);\n      }\n    });\n\n    const playAudio = async (mediaElement, remoteStream, speakerId) => {\n      if (mediaElement) {\n        if (speakerId) {\n          try {\n            await mediaElement.setSinkId(speakerId);\n          } catch {}\n        }\n\n        mediaElement.srcObject = remoteStream;\n        mediaElement.play();\n      }\n    };\n\n    playAudio(mediaElement, remoteStream, speakerId);\n    return {\n      receivingVideo: this.remoteVideoEnabled(session),\n      tagId\n    };\n  }\n\n  cleanupMedia(callId) {\n    const tag = this.usedTags.get(callId);\n    if (!tag) return;\n    const mediaElement = document.getElementById(tag);\n\n    if (mediaElement) {\n      mediaElement.srcObject = null;\n      mediaElement.pause();\n      this.usedTags.delete(callId);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/voice/voicecommunicator.ts"],"names":["Inviter","Registerer","SessionState","UserAgent","Web","MultiStreamsMixer","short","tagsRange","SIP","constructor","props","Register","userAgent","registerer","register","stateChange","addListener","connectionCB","unRegister","Object","values","activeCalls","forEach","c","endCall","unregister","dispose","myMediaStreamFactory","constraints","sessionDescriptionHandler","customStream","Promise","resolve","audio","video","MediaStream","navigator","mediaDevices","undefined","reject","Error","getUserMedia","call","mySessionDescriptionHandlerFactory","defaultSessionDescriptionHandlerFactory","onInvite","invitation","size","length","cb","session","set","id","onReceiveCall","Initial","endScreenShare","screenShareSession","remoteVideoEnabled","receivingVideo","peerConnection","getReceivers","receiver","track","kind","localVideoEnabled","sessionDescriptionHandlerOptions","muteMic","callID","get","sdh","getSenders","stream","enabled","unMuteMic","disableCam","console","log","enableCam","holdCall","options","sessionDescriptionHandlerModifiers","holdModifier","invite","unHoldCall","sendDTMF","dtmf","sendDtmf","mixAudios","firstStream","secondStream","getMixedStream","mergeCalls","firstCallId","secondCallId","firstCall","secondCall","firstPeer","secondPeer","firstSendedTrack","filter","str","secondSendedTrack","firstReceivedStream","firstReceivedTrack","addTrack","secondReceivedStream","secondReceivedTrack","firtsLocalMediaStream","secondLocalMediaStream","replaceTrack","getAudioTracks","conferenceScreenShare","conferenceNumber","destination","makeURI","domain","screenShare","getDisplayMedia","mediaSource","params","fromDisplayName","displayName","deviceId","generate","getVideoTracks","onended","assign","makeSIP","Map","usedTags","transportOptions","server","wsURL","keepAliveInterval","uri","user","userAgentOptions","authorizationUsername","authorizationPassword","password","logBuiltinEnabled","delegate","sessionDescriptionHandlerFactory","start","then","transport","onDisconnect","onConnect","window","addEventListener","ev","preventDefault","number","newCall","currentInvite","state","onMakeCall","blindTransfer","callId","refer","attendedTransfer","getAvailableTag","tagsUsing","Array","from","tagId","find","tgId","Establishing","cancel","Established","bye","Terminating","Terminated","setupRemoteMedia","speakerId","mediaElement","document","getElementById","remoteStream","playAudio","setSinkId","srcObject","play","cleanupMedia","tag","pause","delete"],"mappings":"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","sourcesContent":["import {\r\n  Invitation,\r\n  Inviter,\r\n  Registerer,\r\n  RegistererState,\r\n  Session,\r\n  SessionInviteOptions,\r\n  SessionState,\r\n  // SIPExtension,\r\n  UserAgent,\r\n  UserAgentOptions,\r\n  Web,\r\n} from \"sip.js\";\r\nimport MultiStreamsMixer from \"multistreamsmixer\";\r\nimport short from \"short-uuid\";\r\ninterface CustomMediaStreamConstraints extends MediaStreamConstraints {\r\n  customStream?: MediaStream;\r\n}\r\ninterface ConnectionListenerCallback {\r\n  (data: RegistererState): void;\r\n}\r\ninterface MakeCallCallback {\r\n  (state: SessionState, inviter: Inviter): void;\r\n}\r\ninterface ReceiveCallCallback {\r\n  (state: SessionState, invitation: Invitation): void;\r\n}\r\ninterface SIPConstructorPropeties {\r\n  user: string;\r\n  password: string;\r\n  wsURL: string;\r\n  domain: string;\r\n  displayName: string;\r\n  connectionCB: ConnectionListenerCallback;\r\n  onMakeCall: MakeCallCallback;\r\n  onReceiveCall: ReceiveCallCallback;\r\n  onDisconnect(e: Error | undefined): void;\r\n  onConnect(): void;\r\n}\r\nexport const tagsRange: number[] = [0, 1, 2, 3];\r\nexport default interface SIP {\r\n  user: string;\r\n  password: string;\r\n  wsURL: string;\r\n  domain: string;\r\n  displayName: string;\r\n  connectionCB: ConnectionListenerCallback;\r\n  onDisconnect(e: Error | undefined): void;\r\n  onConnect(): void;\r\n  onMakeCall: MakeCallCallback;\r\n  onReceiveCall: ReceiveCallCallback;\r\n  userAgent?: UserAgent;\r\n  registerer?: Registerer;\r\n  activeCalls: Map<string, Session>;\r\n  usedTags: Map<string, string>;\r\n  screenShareSession: Session | undefined;\r\n}\r\nexport default class SIP {\r\n  constructor(props: SIPConstructorPropeties) {\r\n    Object.assign(this, props);\r\n    this.makeSIP();\r\n    this.activeCalls = new Map<string, Session>();\r\n    this.usedTags = new Map<string, string>();\r\n  }\r\n  makeSIP() {\r\n    const transportOptions = {\r\n      server: this.wsURL,\r\n      // server: \"wss://test.citrussquad.com:7443\",\r\n      keepAliveInterval: 90,\r\n    };\r\n    const uri = UserAgent.makeURI(`sip:${this.user}@${this.domain}`);\r\n    const userAgentOptions: UserAgentOptions = {\r\n      authorizationUsername: this.user,\r\n      authorizationPassword: this.password,\r\n      displayName: this.displayName,\r\n      transportOptions,\r\n      uri,\r\n      logBuiltinEnabled: true,\r\n      delegate: {\r\n        onInvite: this.onInvite,\r\n      },\r\n      sessionDescriptionHandlerFactory: this.mySessionDescriptionHandlerFactory,\r\n    };\r\n    this.userAgent = new UserAgent(userAgentOptions);\r\n    this.registerer = new Registerer(this.userAgent);\r\n    this.userAgent.start().then(() => {\r\n      this.registerer?.register();\r\n      this.registerer?.stateChange.addListener(this.connectionCB);\r\n    });\r\n    this.userAgent.transport.onDisconnect = this.onDisconnect;\r\n    this.userAgent.transport.onConnect = this.onConnect;\r\n    window.addEventListener(\"unload\", (ev) => {\r\n      ev.preventDefault();\r\n\r\n      return this.unRegister();\r\n    });\r\n  }\r\n  Register = () => {\r\n    if (this.userAgent) {\r\n      if (!this.registerer) this.registerer = new Registerer(this.userAgent);\r\n      this.registerer?.register();\r\n      this.registerer?.stateChange.addListener(this.connectionCB);\r\n    }\r\n  };\r\n  unRegister = () => {\r\n    Object.values(this.activeCalls).forEach((c) => this.endCall(c));\r\n    this.registerer?.unregister();\r\n    this.registerer?.dispose();\r\n    return true;\r\n  };\r\n  myMediaStreamFactory: Web.MediaStreamFactory = (\r\n    constraints: CustomMediaStreamConstraints,\r\n    sessionDescriptionHandler: Web.SessionDescriptionHandler\r\n    //@ts-ignore\r\n  ): Promise<MediaStream> => {\r\n    if (constraints.customStream) {\r\n      return Promise.resolve(constraints.customStream);\r\n    } else if (!constraints.audio && !constraints.video) {\r\n      return Promise.resolve(new MediaStream());\r\n    } else if (navigator.mediaDevices === undefined) {\r\n      return Promise.reject(\r\n        new Error(\"Media devices not available in insecure contexts.\")\r\n      );\r\n    } else {\r\n      return navigator.mediaDevices.getUserMedia.call(\r\n        navigator.mediaDevices,\r\n        constraints\r\n      );\r\n    }\r\n  };\r\n\r\n  // Create session description handler factory\r\n  mySessionDescriptionHandlerFactory: Web.SessionDescriptionHandlerFactory = Web.defaultSessionDescriptionHandlerFactory(\r\n    this.myMediaStreamFactory\r\n  );\r\n  invite(\r\n    number: string,\r\n    constraints: MediaStreamConstraints = { video: false, audio: true }\r\n  ) {\r\n    if (!(this.activeCalls.size >= tagsRange.length) && this.userAgent) {\r\n      const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\r\n      let newCall;\r\n      if (destination) {\r\n        newCall = new Inviter(this.userAgent, destination, {\r\n          sessionDescriptionHandlerOptions: {\r\n            constraints,\r\n          },\r\n          // inviteWithoutSdp: true,\r\n        });\r\n        this.activeCalls.set(newCall.id, newCall);\r\n      }\r\n      const currentInvite =\r\n        newCall && (this.activeCalls.get(newCall.id) as Inviter);\r\n      if (currentInvite) {\r\n        currentInvite.stateChange.addListener((state) => {\r\n          if (this.activeCalls) this.onMakeCall(state, currentInvite);\r\n        });\r\n        currentInvite.invite();\r\n        this.onMakeCall(SessionState.Initial, currentInvite);\r\n      }\r\n    }\r\n  }\r\n  blindTransfer(callId: string, number: string) {\r\n    const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\r\n    const call = this.activeCalls.get(callId);\r\n    if (call && destination) {\r\n      call.refer(destination);\r\n      // this.activeCalls.delete(callId);\r\n    }\r\n  }\r\n  attendedTransfer(firstCallId: string, secondCallId: string) {\r\n    const firstCall = this.activeCalls.get(firstCallId);\r\n    const secondCall = this.activeCalls.get(secondCallId);\r\n    if (firstCall && secondCall) {\r\n      firstCall.refer(secondCall);\r\n    }\r\n  }\r\n  getAvailableTag() {\r\n    let tagsUsing = Array.from(this.usedTags.values());\r\n    for (const tagId of tagsRange) {\r\n      if (!tagsUsing.find((tgId) => tgId === `remote-stream-${tagId}`)) {\r\n        return `remote-stream-${tagId}`;\r\n      }\r\n    }\r\n  }\r\n  onInvite = (invitation: Invitation) => {\r\n    if (this.activeCalls.size < tagsRange.length) {\r\n      const cb = (session: SessionState) => {\r\n        this.activeCalls.set(invitation.id, invitation);\r\n        this.onReceiveCall(session, invitation);\r\n      };\r\n      invitation.stateChange.addListener(cb);\r\n      this.onReceiveCall(SessionState.Initial, invitation);\r\n    } else {\r\n      invitation.reject();\r\n    }\r\n  };\r\n  endScreenShare = () => {\r\n    if (this.screenShareSession) {\r\n      this.endCall(this.screenShareSession);\r\n      this.screenShareSession = undefined;\r\n      return;\r\n    }\r\n  };\r\n  endCall(session: Session) {\r\n    switch (session.state) {\r\n      case SessionState.Initial:\r\n      case SessionState.Establishing:\r\n        if (session instanceof Inviter) {\r\n          // An unestablished outgoing session\r\n          session.cancel();\r\n        } else {\r\n          // An unestablished incoming session\r\n          (session as Invitation).reject();\r\n        }\r\n        break;\r\n      case SessionState.Established:\r\n        // An established session\r\n        session.bye();\r\n        break;\r\n      case SessionState.Terminating:\r\n      case SessionState.Terminated:\r\n        // Cannot terminate a session that is already terminated\r\n        break;\r\n    }\r\n  }\r\n  setupRemoteMedia(session: Session, speakerId: string = \"\") {\r\n    const tagId = this.getAvailableTag();\r\n    if (!tagId) {\r\n      (session as Invitation)?.reject();\r\n      return;\r\n    }\r\n    const mediaElement: HTMLVideoElement = document.getElementById(\r\n      tagId\r\n    ) as HTMLVideoElement;\r\n    this.usedTags.set(session.id, tagId);\r\n    const remoteStream = new MediaStream();\r\n\r\n    (session.sessionDescriptionHandler as Web.SessionDescriptionHandler)?.peerConnection\r\n      ?.getReceivers()\r\n      .forEach((receiver) => {\r\n        if (receiver.track) {\r\n          remoteStream.addTrack(receiver.track);\r\n        }\r\n      });\r\n    const playAudio = async (\r\n      mediaElement: HTMLVideoElement,\r\n      remoteStream: MediaStream,\r\n      speakerId: string\r\n    ) => {\r\n      if (mediaElement) {\r\n        if (speakerId) {\r\n          try {\r\n            await (mediaElement as any).setSinkId(speakerId);\r\n          } catch {}\r\n        }\r\n        mediaElement.srcObject = remoteStream;\r\n        mediaElement.play();\r\n      }\r\n    };\r\n    playAudio(mediaElement, remoteStream, speakerId);\r\n    return {\r\n      receivingVideo: this.remoteVideoEnabled(session),\r\n      tagId,\r\n    };\r\n  }\r\n  remoteVideoEnabled = (session: Session) => {\r\n    let receivingVideo = false;\r\n    (session.sessionDescriptionHandler as Web.SessionDescriptionHandler)?.peerConnection\r\n      ?.getReceivers()\r\n      .forEach((receiver) => {\r\n        if (receiver.track) {\r\n          if (receiver.track.kind === \"video\") receivingVideo = true;\r\n        }\r\n      });\r\n    return receivingVideo;\r\n  };\r\n  localVideoEnabled = (session: Session) => {\r\n    return !!((session as Inviter)?.sessionDescriptionHandlerOptions\r\n      .constraints as MediaStreamConstraints)?.video;\r\n  };\r\n  cleanupMedia(callId: string) {\r\n    const tag = this.usedTags.get(callId);\r\n    if (!tag) return;\r\n    const mediaElement: HTMLVideoElement = document.getElementById(\r\n      tag\r\n    ) as HTMLVideoElement;\r\n    if (mediaElement) {\r\n      mediaElement.srcObject = null;\r\n      mediaElement.pause();\r\n      this.usedTags.delete(callId);\r\n    }\r\n  }\r\n  muteMic = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      const sdh: Web.SessionDescriptionHandler = call.sessionDescriptionHandler as Web.SessionDescriptionHandler;\r\n      sdh?.peerConnection?.getSenders().forEach((stream: any) => {\r\n        if (stream.track?.kind === \"audio\") stream.track.enabled = false;\r\n      });\r\n    }\r\n  };\r\n  unMuteMic = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      const sdh: Web.SessionDescriptionHandler = call.sessionDescriptionHandler as Web.SessionDescriptionHandler;\r\n      sdh?.peerConnection?.getSenders().forEach((stream: any) => {\r\n        if (stream.track?.kind === \"audio\") stream.track.enabled = true;\r\n      });\r\n    }\r\n  };\r\n  disableCam = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      if (this.localVideoEnabled(call)) {\r\n        const sdh: Web.SessionDescriptionHandler = call.sessionDescriptionHandler as Web.SessionDescriptionHandler;\r\n        sdh?.peerConnection?.getSenders().forEach((stream) => {\r\n          if (stream.track?.kind === \"video\") stream.track.enabled = false;\r\n        });\r\n      } else {\r\n        // TODO\r\n        console.log(\"re-invite\");\r\n      }\r\n    }\r\n  };\r\n  enableCam = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      if (this.localVideoEnabled(call)) {\r\n        const sdh: Web.SessionDescriptionHandler = call.sessionDescriptionHandler as Web.SessionDescriptionHandler;\r\n        sdh?.peerConnection?.getSenders().forEach((stream: any) => {\r\n          if (stream.track?.kind === \"video\") stream.track.enabled = true;\r\n        });\r\n      } else {\r\n        // TODO\r\n        console.log(\"re-invite\");\r\n      }\r\n    }\r\n  };\r\n  holdCall = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      const options: SessionInviteOptions = {\r\n        sessionDescriptionHandlerModifiers: [Web.holdModifier],\r\n      };\r\n      return call.invite(options);\r\n    }\r\n  };\r\n  unHoldCall = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      const options: SessionInviteOptions = {\r\n        sessionDescriptionHandlerModifiers: [],\r\n      };\r\n      if (call) {\r\n        call.invite(options);\r\n      }\r\n    }\r\n  };\r\n  sendDTMF = (callID: string, dtmf: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      call.sessionDescriptionHandler?.sendDtmf(dtmf);\r\n    }\r\n  };\r\n  mixAudios = (firstStream: MediaStream, secondStream: MediaStream) => {\r\n    return new MultiStreamsMixer([firstStream, secondStream]).getMixedStream();\r\n  };\r\n  mergeCalls = (firstCallId: string, secondCallId: string) => {\r\n    const firstCall = this.activeCalls.get(firstCallId);\r\n    const secondCall = this.activeCalls.get(secondCallId);\r\n    if (firstCall && secondCall) {\r\n      const firstPeer = (firstCall.sessionDescriptionHandler as Web.SessionDescriptionHandler)\r\n        ?.peerConnection;\r\n      const secondPeer = (firstCall.sessionDescriptionHandler as Web.SessionDescriptionHandler)\r\n        ?.peerConnection;\r\n      const firstSendedTrack = firstPeer\r\n        ?.getSenders()\r\n        .filter((str) => str.track?.kind === \"audio\")[0].track;\r\n      const secondSendedTrack = secondPeer\r\n        ?.getSenders()\r\n        .filter((str) => str.track?.kind === \"audio\")[0].track;\r\n      const firstReceivedStream = new MediaStream();\r\n      const firstReceivedTrack = firstPeer\r\n        ?.getReceivers()\r\n        .filter((str) => str.track.kind === \"audio\")[0].track;\r\n      firstReceivedTrack && firstReceivedStream.addTrack(firstReceivedTrack);\r\n      const secondReceivedStream = new MediaStream();\r\n      const secondReceivedTrack = secondPeer\r\n        ?.getReceivers()\r\n        .filter((str) => str.track.kind === \"audio\")[0].track;\r\n      secondReceivedTrack && secondReceivedStream.addTrack(secondReceivedTrack);\r\n      if (\r\n        firstSendedTrack &&\r\n        secondSendedTrack &&\r\n        firstReceivedStream &&\r\n        secondReceivedStream\r\n      ) {\r\n        const firtsLocalMediaStream = new MediaStream();\r\n        const secondLocalMediaStream = new MediaStream();\r\n        firtsLocalMediaStream.addTrack(firstSendedTrack);\r\n        secondLocalMediaStream.addTrack(secondSendedTrack);\r\n        firstPeer\r\n          ?.getSenders()\r\n          .filter((str) => str.track?.kind === \"audio\")[0]\r\n          .replaceTrack(\r\n            this.mixAudios(\r\n              firtsLocalMediaStream,\r\n              secondReceivedStream\r\n            ).getAudioTracks()[0]\r\n          );\r\n        secondPeer\r\n          ?.getSenders()\r\n          .filter((str) => str.track?.kind === \"audio\")[0]\r\n          .replaceTrack(\r\n            this.mixAudios(\r\n              secondLocalMediaStream,\r\n              firstReceivedStream\r\n            ).getAudioTracks()[0]\r\n          );\r\n      }\r\n    }\r\n  };\r\n  conferenceScreenShare = async (conferenceNumber: string | undefined) => {\r\n    this.endScreenShare();\r\n    if (this.userAgent && conferenceNumber) {\r\n      const destination = UserAgent.makeURI(\r\n        `sip:${conferenceNumber}-screen@${this.domain}`\r\n      );\r\n      let screenShare: Inviter;\r\n      if (destination) {\r\n        //@ts-ignore\r\n        const customStream: MediaStream = await navigator.mediaDevices.getDisplayMedia(\r\n          navigator.mediaDevices,\r\n          {\r\n            video: { mediaSource: \"screen\" },\r\n            audio: true,\r\n          }\r\n        );\r\n        if (!customStream) return;\r\n        screenShare = new Inviter(this.userAgent, destination, {\r\n          params: {\r\n            fromDisplayName: `${this.displayName} (Screen)`,\r\n          },\r\n          sessionDescriptionHandlerOptions: {\r\n            constraints: {\r\n              customStream,\r\n              audio: { deviceId: short().generate() },\r\n              video: { deviceId: short().generate() },\r\n            },\r\n          },\r\n        });\r\n        if (screenShare) {\r\n          customStream.getVideoTracks()[0].onended = () =>\r\n            this.endCall(screenShare);\r\n          this.screenShareSession = screenShare;\r\n          screenShare.invite();\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}