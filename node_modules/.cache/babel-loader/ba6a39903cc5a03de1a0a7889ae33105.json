{"ast":null,"code":"/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g; // trim patterns after transformations\n\nvar expPatternTrimmer = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\nfunction matchSkeletonPattern(match, result) {\n  if (result === void 0) {\n    result = {\n      pattern: '',\n      pattern12: '',\n      skeleton: '',\n      rawPattern: ''\n    };\n  }\n\n  var len = match.length;\n\n  switch (match[0]) {\n    // Era\n    case 'G':\n      result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n      return '{era}';\n    // Year\n\n    case 'y':\n    case 'Y':\n    case 'u':\n    case 'U':\n    case 'r':\n      result.year = len === 2 ? '2-digit' : 'numeric';\n      return '{year}';\n    // Quarter\n\n    case 'q':\n    case 'Q':\n      throw new RangeError('`w/Q` (quarter) patterns are not supported');\n    // Month\n\n    case 'M':\n    case 'L':\n      result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n      return '{month}';\n    // Week\n\n    case 'w':\n    case 'W':\n      throw new RangeError('`w/W` (week of year) patterns are not supported');\n\n    case 'd':\n      result.day = ['numeric', '2-digit'][len - 1];\n      return '{day}';\n\n    case 'D':\n    case 'F':\n    case 'g':\n      result.day = 'numeric';\n      return '{day}';\n    // Weekday\n\n    case 'E':\n      result.weekday = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n      return '{weekday}';\n\n    case 'e':\n      result.weekday = ['numeric', '2-digit', 'short', 'long', 'narrow', 'short'][len - 1];\n      return '{weekday}';\n\n    case 'c':\n      result.weekday = ['numeric', undefined, 'short', 'long', 'narrow', 'short'][len - 1];\n      return '{weekday}';\n    // Period\n\n    case 'a': // AM, PM\n\n    case 'b': // am, pm, noon, midnight\n\n    case 'B':\n      // flexible day periods\n      result.hour12 = true;\n      return '{ampm}';\n    // Hour\n\n    case 'h':\n      result.hour = ['numeric', '2-digit'][len - 1];\n      return '{hour}';\n\n    case 'H':\n      result.hour = ['numeric', '2-digit'][len - 1];\n      return '{hour}';\n\n    case 'K':\n      result.hour = ['numeric', '2-digit'][len - 1];\n      return '{hour}';\n\n    case 'k':\n      result.hour = ['numeric', '2-digit'][len - 1];\n      return '{hour}';\n\n    case 'j':\n    case 'J':\n    case 'C':\n      throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n    // Minute\n\n    case 'm':\n      result.minute = ['numeric', '2-digit'][len - 1];\n      return '{minute}';\n    // Second\n\n    case 's':\n      result.second = ['numeric', '2-digit'][len - 1];\n      return '{second}';\n\n    case 'S':\n    case 'A':\n      result.second = 'numeric';\n      return '{second}';\n    // Zone\n\n    case 'z': // 1..3, 4: specific non-location format\n\n    case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n\n    case 'O': // 1, 4: miliseconds in day short, long\n\n    case 'v': // 1, 4: generic non-location format\n\n    case 'V': // 1, 2, 3, 4: time zone ID or city\n\n    case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n\n    case 'x':\n      // 1, 2, 3, 4: The ISO8601 varios formats\n      result.timeZoneName = len < 4 ? 'short' : 'long';\n      return '{timeZoneName}';\n  }\n\n  return '';\n}\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\n\n\nexport function parseDateTimeSkeleton(skeleton, pattern) {\n  if (pattern === void 0) {\n    pattern = skeleton;\n  }\n\n  var result = {\n    pattern: '',\n    pattern12: '',\n    skeleton: skeleton,\n    rawPattern: pattern\n  };\n  var literals = []; // Use skeleton to populate result, but use mapped pattern to populate pattern\n\n  result.pattern12 = pattern // Double apostrophe\n  .replace(/'{2}/g, '{apostrophe}') // Apostrophe-escaped\n  .replace(/'(.*?)'/g, function (_, literal) {\n    literals.push(literal);\n    return \"$$\" + (literals.length - 1) + \"$$\";\n  }).replace(DATE_TIME_REGEX, matchSkeletonPattern);\n  skeleton.replace(DATE_TIME_REGEX, function (m) {\n    return matchSkeletonPattern(m, result);\n  }); //Restore literals\n\n  if (literals.length) {\n    result.pattern12 = result.pattern12.replace(/\\$\\$(\\d+)\\$\\$/g, function (_, i) {\n      return literals[+i];\n    }).replace(/\\{apostrophe\\}/g, \"'\");\n  } // Handle apostrophe-escaped things\n\n\n  result.pattern = result.pattern12.replace(/([\\s\\uFEFF\\xA0])\\{ampm\\}([\\s\\uFEFF\\xA0])/, '$1').replace('{ampm}', '').replace(expPatternTrimmer, '');\n  return result;\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@formatjs/ecma402-abstract/lib/src/DateTimeFormat/skeleton.js"],"names":["DATE_TIME_REGEX","expPatternTrimmer","matchSkeletonPattern","match","result","pattern","pattern12","skeleton","rawPattern","len","length","era","year","RangeError","month","day","weekday","undefined","hour12","hour","minute","second","timeZoneName","parseDateTimeSkeleton","literals","replace","_","literal","push","m","i"],"mappings":"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","sourcesContent":["/**\n * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js\n * with some tweaks\n */\nvar DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;\n// trim patterns after transformations\nvar expPatternTrimmer = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\nfunction matchSkeletonPattern(match, result) {\n    if (result === void 0) { result = {\n        pattern: '',\n        pattern12: '',\n        skeleton: '',\n        rawPattern: '',\n    }; }\n    var len = match.length;\n    switch (match[0]) {\n        // Era\n        case 'G':\n            result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n            return '{era}';\n        // Year\n        case 'y':\n        case 'Y':\n        case 'u':\n        case 'U':\n        case 'r':\n            result.year = len === 2 ? '2-digit' : 'numeric';\n            return '{year}';\n        // Quarter\n        case 'q':\n        case 'Q':\n            throw new RangeError('`w/Q` (quarter) patterns are not supported');\n        // Month\n        case 'M':\n        case 'L':\n            result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];\n            return '{month}';\n        // Week\n        case 'w':\n        case 'W':\n            throw new RangeError('`w/W` (week of year) patterns are not supported');\n        case 'd':\n            result.day = ['numeric', '2-digit'][len - 1];\n            return '{day}';\n        case 'D':\n        case 'F':\n        case 'g':\n            result.day = 'numeric';\n            return '{day}';\n        // Weekday\n        case 'E':\n            result.weekday = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';\n            return '{weekday}';\n        case 'e':\n            result.weekday = [\n                'numeric',\n                '2-digit',\n                'short',\n                'long',\n                'narrow',\n                'short',\n            ][len - 1];\n            return '{weekday}';\n        case 'c':\n            result.weekday = [\n                'numeric',\n                undefined,\n                'short',\n                'long',\n                'narrow',\n                'short',\n            ][len - 1];\n            return '{weekday}';\n        // Period\n        case 'a': // AM, PM\n        case 'b': // am, pm, noon, midnight\n        case 'B': // flexible day periods\n            result.hour12 = true;\n            return '{ampm}';\n        // Hour\n        case 'h':\n            result.hour = ['numeric', '2-digit'][len - 1];\n            return '{hour}';\n        case 'H':\n            result.hour = ['numeric', '2-digit'][len - 1];\n            return '{hour}';\n        case 'K':\n            result.hour = ['numeric', '2-digit'][len - 1];\n            return '{hour}';\n        case 'k':\n            result.hour = ['numeric', '2-digit'][len - 1];\n            return '{hour}';\n        case 'j':\n        case 'J':\n        case 'C':\n            throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');\n        // Minute\n        case 'm':\n            result.minute = ['numeric', '2-digit'][len - 1];\n            return '{minute}';\n        // Second\n        case 's':\n            result.second = ['numeric', '2-digit'][len - 1];\n            return '{second}';\n        case 'S':\n        case 'A':\n            result.second = 'numeric';\n            return '{second}';\n        // Zone\n        case 'z': // 1..3, 4: specific non-location format\n        case 'Z': // 1..3, 4, 5: The ISO8601 varios formats\n        case 'O': // 1, 4: miliseconds in day short, long\n        case 'v': // 1, 4: generic non-location format\n        case 'V': // 1, 2, 3, 4: time zone ID or city\n        case 'X': // 1, 2, 3, 4: The ISO8601 varios formats\n        case 'x': // 1, 2, 3, 4: The ISO8601 varios formats\n            result.timeZoneName = len < 4 ? 'short' : 'long';\n            return '{timeZoneName}';\n    }\n    return '';\n}\n/**\n * Parse Date time skeleton into Intl.DateTimeFormatOptions\n * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * @public\n * @param skeleton skeleton string\n */\nexport function parseDateTimeSkeleton(skeleton, pattern) {\n    if (pattern === void 0) { pattern = skeleton; }\n    var result = {\n        pattern: '',\n        pattern12: '',\n        skeleton: skeleton,\n        rawPattern: pattern,\n    };\n    var literals = [];\n    // Use skeleton to populate result, but use mapped pattern to populate pattern\n    result.pattern12 = pattern\n        // Double apostrophe\n        .replace(/'{2}/g, '{apostrophe}')\n        // Apostrophe-escaped\n        .replace(/'(.*?)'/g, function (_, literal) {\n        literals.push(literal);\n        return \"$$\" + (literals.length - 1) + \"$$\";\n    })\n        .replace(DATE_TIME_REGEX, matchSkeletonPattern);\n    skeleton.replace(DATE_TIME_REGEX, function (m) { return matchSkeletonPattern(m, result); });\n    //Restore literals\n    if (literals.length) {\n        result.pattern12 = result.pattern12\n            .replace(/\\$\\$(\\d+)\\$\\$/g, function (_, i) {\n            return literals[+i];\n        })\n            .replace(/\\{apostrophe\\}/g, \"'\");\n    }\n    // Handle apostrophe-escaped things\n    result.pattern = result.pattern12\n        .replace(/([\\s\\uFEFF\\xA0])\\{ampm\\}([\\s\\uFEFF\\xA0])/, '$1')\n        .replace('{ampm}', '')\n        .replace(expPatternTrimmer, '');\n    return result;\n}\n"]},"metadata":{},"sourceType":"module"}