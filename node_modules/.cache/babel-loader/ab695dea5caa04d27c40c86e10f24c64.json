{"ast":null,"code":"export default class UserBusiness {\n  constructor(api, settings) {\n    this.api = api;\n    this.settings = settings;\n\n    this.getRamalInfo = cb => {\n      if (this.ramalInfo) {\n        cb(this.ramalInfo);\n        return;\n      }\n\n      this.settings.get(settings => {\n        const extension = settings.sipUser.replace(\"w-\", \"\").replace(\"s-\", \"\");\n        const domain = settings.sipDomain;\n        this.api.getRamalInfo(extension, domain, ramalInfo => {\n          this.ramalInfo = ramalInfo || undefined;\n          cb(ramalInfo);\n        });\n      });\n    };\n  }\n\n  get(callback) {\n    if (this.user) {\n      callback(this.user);\n      return;\n    }\n\n    if (!this.api) return;\n    this.api.getUserInfo(user => {\n      this.settings.get(settings => {\n        this.user = {\n          id: settings.xmppUser,\n          jid: `${settings.xmppUser}@${settings.xmppDomain}`,\n          name: (user === null || user === void 0 ? void 0 : user.name) || \"\",\n          email: (user === null || user === void 0 ? void 0 : user.email) || \"\",\n          profilePicture: settings.imageUrl,\n          number: settings.sipUser.replace(\"w-\", \"\").replace(\"s-\", \"\"),\n          status: \"online\"\n        };\n        callback(this.user);\n      });\n    });\n  }\n\n  changeUserData(user, callback) {\n    this.api.setDataUser({\n      name: user.name,\n      email: user.email\n    }, callback);\n  }\n\n  changePassword(user, callback) {\n    this.api.setNewPassword({\n      oldPassword: user.oldPassword,\n      newPassword: user.newPassword\n    }, callback);\n  }\n\n  getRamalFacilities(cb) {\n    this.getRamalInfo(extensionInfo => {\n      if (extensionInfo) this.api.getRamalFacilities(extensionInfo.id, {}, cb);\n    });\n  }\n\n  updateRamalFacilities(data, cb) {\n    this.getRamalInfo(extensionInfo => {\n      if (extensionInfo) this.api.updateRamalFacilities(extensionInfo.id, data, cb);\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/User.ts"],"names":["UserBusiness","constructor","api","settings","getRamalInfo","cb","ramalInfo","get","extension","sipUser","replace","domain","sipDomain","undefined","callback","user","getUserInfo","id","xmppUser","jid","xmppDomain","name","email","profilePicture","imageUrl","number","status","changeUserData","setDataUser","changePassword","setNewPassword","oldPassword","newPassword","getRamalFacilities","extensionInfo","updateRamalFacilities","data"],"mappings":"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","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport IUser from \"../../alias/IUser\";\r\nimport IChangedUserData from \"../../alias/IChangedUserData\";\r\nimport SettingsBusiness from \"./Settings\";\r\nimport {\r\n  GetRamalFacilitiesCallback,\r\n  GetRamalInfoCallback,\r\n  RamalFacilities,\r\n  RamalInfo,\r\n  UpdateRamalFacilitiesCallback,\r\n  UserDataChangeCallback,\r\n} from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport { UserPasswordChangeCallback } from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport IUserPasswordChange from \"./../../alias/IUserPasswordChange\";\r\n\r\ninterface GetUserCallBack {\r\n  (user: IUser): void;\r\n}\r\nexport default interface UserBusiness {\r\n  user: IUser | undefined;\r\n  ramalInfo: RamalInfo | undefined;\r\n}\r\n\r\nexport default class UserBusiness {\r\n  constructor(private api: API, private settings: SettingsBusiness) {}\r\n  get(callback: GetUserCallBack) {\r\n    if (this.user) {\r\n      callback(this.user);\r\n      return;\r\n    }\r\n    if (!this.api) return;\r\n    this.api.getUserInfo((user) => {\r\n      this.settings.get((settings) => {\r\n        this.user = {\r\n          id: settings.xmppUser,\r\n          jid: `${settings.xmppUser}@${settings.xmppDomain}`,\r\n          name: user?.name || \"\",\r\n          email: user?.email || \"\",\r\n          profilePicture: settings.imageUrl,\r\n          number: settings.sipUser.replace(\"w-\", \"\").replace(\"s-\", \"\"),\r\n          status: \"online\",\r\n        };\r\n        callback(this.user);\r\n      });\r\n    });\r\n  }\r\n  changeUserData(user: IChangedUserData, callback: UserDataChangeCallback) {\r\n    this.api.setDataUser(\r\n      {\r\n        name: user.name,\r\n        email: user.email,\r\n      },\r\n      callback\r\n    );\r\n  }\r\n  changePassword(\r\n    user: IUserPasswordChange,\r\n    callback: UserPasswordChangeCallback\r\n  ) {\r\n    this.api.setNewPassword(\r\n      {\r\n        oldPassword: user.oldPassword,\r\n        newPassword: user.newPassword,\r\n      },\r\n      callback\r\n    );\r\n  }\r\n  getRamalInfo = (cb: GetRamalInfoCallback) => {\r\n    if (this.ramalInfo) {\r\n      cb(this.ramalInfo);\r\n      return;\r\n    }\r\n    this.settings.get((settings) => {\r\n      const extension = settings.sipUser.replace(\"w-\", \"\").replace(\"s-\", \"\");\r\n      const domain = settings.sipDomain;\r\n      this.api.getRamalInfo(extension, domain, (ramalInfo) => {\r\n        this.ramalInfo = ramalInfo || undefined;\r\n        cb(ramalInfo);\r\n      });\r\n    });\r\n  };\r\n  getRamalFacilities(cb: GetRamalFacilitiesCallback) {\r\n    this.getRamalInfo((extensionInfo) => {\r\n      if (extensionInfo) this.api.getRamalFacilities(extensionInfo.id, {}, cb);\r\n    });\r\n  }\r\n  updateRamalFacilities(\r\n    data: RamalFacilities,\r\n    cb: UpdateRamalFacilitiesCallback\r\n  ) {\r\n    this.getRamalInfo((extensionInfo) => {\r\n      if (extensionInfo)\r\n        this.api.updateRamalFacilities(extensionInfo.id, data, cb);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}