{"ast":null,"code":"import React from\"react\";import{Input,Label}from\"reactstrap\";import{useChat}from\"../contexts/ChatContext\";import{useContact}from\"../contexts/ContactContext\";import{SearchContact}from\"../helpers/SearchContact\";import sortContactGroup from\"../helpers/SortContactGroup\";var SelectContactGroup=function SelectContactGroup(_ref){var search=_ref.search,handleCheckContact=_ref.handleCheckContact;var _useContact=useContact(),contacts=_useContact.contacts;var _useChat=useChat(),activeChat=_useChat.activeChat;return/*#__PURE__*/React.createElement(\"div\",{className:\"mt-2\"},sortContactGroup(SearchContact(contacts.filter(function(contact){var _activeChat$members;(_activeChat$members=activeChat.members)===null||_activeChat$members===void 0?void 0:_activeChat$members.forEach(function(element){if(contact.id===element.userId){return false;}});return true;}),search?search:\"\")).map(function(contact,key){return/*#__PURE__*/React.createElement(\"div\",{key:key},/*#__PURE__*/React.createElement(\"div\",{className:\"ml-3 pl-1 font-weight-bold text-primary\"},contact.group),/*#__PURE__*/React.createElement(\"ul\",{className:\"list-unstyled contact-list mb-2\"},contact.children.map(function(child,keyChild){return/*#__PURE__*/React.createElement(\"li\",{key:keyChild},/*#__PURE__*/React.createElement(\"div\",{className:\"custom-control custom-checkbox\"},/*#__PURE__*/React.createElement(Input,{type:\"checkbox\",className:\"custom-control-input\",onChange:function onChange(e){handleCheckContact(e.target.checked,child);},id:\"memberCheck\"+child.id,value:child.name}),/*#__PURE__*/React.createElement(Label,{className:\"custom-control-label\",htmlFor:\"memberCheck\"+child.id},child.name)));})));}));};export default SelectContactGroup;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/SelectContactGroup.tsx"],"names":["React","Input","Label","useChat","useContact","SearchContact","sortContactGroup","SelectContactGroup","search","handleCheckContact","contacts","activeChat","filter","contact","members","forEach","element","id","userId","map","key","group","children","child","keyChild","e","target","checked","name"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,KAAT,CAAgBC,KAAhB,KAA6B,YAA7B,CAEA,OAASC,OAAT,KAAwB,yBAAxB,CACA,OAASC,UAAT,KAA2B,4BAA3B,CACA,OAASC,aAAT,KAA8B,0BAA9B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,6BAA7B,CAOA,GAAMC,CAAAA,kBAAoC,CAAG,QAAvCA,CAAAA,kBAAuC,MAGvC,IAFJC,CAAAA,MAEI,MAFJA,MAEI,CADJC,kBACI,MADJA,kBACI,iBACiBL,UAAU,EAD3B,CACIM,QADJ,aACIA,QADJ,cAEmBP,OAAO,EAF1B,CAEIQ,UAFJ,UAEIA,UAFJ,CAIJ,mBACE,2BAAK,SAAS,CAAC,MAAf,EACGL,gBAAgB,CACfD,aAAa,CACXK,QAAQ,CAACE,MAAT,CAAgB,SAACC,OAAD,CAAa,yBAC3B,qBAAAF,UAAU,CAACG,OAAX,kEAAoBC,OAApB,CAA4B,SAACC,OAAD,CAAa,CACvC,GAAIH,OAAO,CAACI,EAAR,GAAeD,OAAO,CAACE,MAA3B,CAAmC,CACjC,MAAO,MAAP,CACD,CACF,CAJD,EAKA,MAAO,KAAP,CACD,CAPD,CADW,CASXV,MAAM,CAAGA,MAAH,CAAY,EATP,CADE,CAAhB,CAYCW,GAZD,CAYK,SAACN,OAAD,CAAUO,GAAV,qBACJ,2BAAK,GAAG,CAAEA,GAAV,eACE,2BAAK,SAAS,CAAC,yCAAf,EACGP,OAAO,CAACQ,KADX,CADF,cAKE,0BAAI,SAAS,CAAC,iCAAd,EACGR,OAAO,CAACS,QAAR,CAAiBH,GAAjB,CAAqB,SAACI,KAAD,CAAQC,QAAR,qBACpB,0BAAI,GAAG,CAAEA,QAAT,eACE,2BAAK,SAAS,CAAC,gCAAf,eACE,oBAAC,KAAD,EACE,IAAI,CAAC,UADP,CAEE,SAAS,CAAC,sBAFZ,CAGE,QAAQ,CAAE,kBAACC,CAAD,CAAO,CACfhB,kBAAkB,CAACgB,CAAC,CAACC,MAAF,CAASC,OAAV,CAAmBJ,KAAnB,CAAlB,CACD,CALH,CAME,EAAE,CAAE,cAAgBA,KAAK,CAACN,EAN5B,CAOE,KAAK,CAAEM,KAAK,CAACK,IAPf,EADF,cAUE,oBAAC,KAAD,EACE,SAAS,CAAC,sBADZ,CAEE,OAAO,CAAE,cAAgBL,KAAK,CAACN,EAFjC,EAIGM,KAAK,CAACK,IAJT,CAVF,CADF,CADoB,EAArB,CADH,CALF,CADI,EAZL,CADH,CADF,CA+CD,CAtDD,CAwDA,cAAerB,CAAAA,kBAAf","sourcesContent":["import React from \"react\";\r\nimport { Input, Label } from \"reactstrap\";\r\nimport IContact from \"../alias/IContact\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport { SearchContact } from \"../helpers/SearchContact\";\r\nimport sortContactGroup from \"../helpers/SortContactGroup\";\r\n\r\ninterface IProps {\r\n  search?: string;\r\n  handleCheckContact(selected: boolean, contact: IContact): void;\r\n}\r\n\r\nconst SelectContactGroup: React.FC<IProps> = ({\r\n  search,\r\n  handleCheckContact,\r\n}) => {\r\n  const { contacts } = useContact();\r\n  const { activeChat } = useChat();\r\n\r\n  return (\r\n    <div className=\"mt-2\">\r\n      {sortContactGroup(\r\n        SearchContact(\r\n          contacts.filter((contact) => {\r\n            activeChat.members?.forEach((element) => {\r\n              if (contact.id === element.userId) {\r\n                return false;\r\n              }\r\n            });\r\n            return true;\r\n          }),\r\n          search ? search : \"\"\r\n        )\r\n      ).map((contact, key) => (\r\n        <div key={key}>\r\n          <div className=\"ml-3 pl-1 font-weight-bold text-primary\">\r\n            {contact.group}\r\n          </div>\r\n\r\n          <ul className=\"list-unstyled contact-list mb-2\">\r\n            {contact.children.map((child, keyChild) => (\r\n              <li key={keyChild}>\r\n                <div className=\"custom-control custom-checkbox\">\r\n                  <Input\r\n                    type=\"checkbox\"\r\n                    className=\"custom-control-input\"\r\n                    onChange={(e) => {\r\n                      handleCheckContact(e.target.checked, child);\r\n                    }}\r\n                    id={\"memberCheck\" + child.id}\r\n                    value={child.name}\r\n                  />\r\n                  <Label\r\n                    className=\"custom-control-label\"\r\n                    htmlFor={\"memberCheck\" + child.id}\r\n                  >\r\n                    {child.name}\r\n                  </Label>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectContactGroup;\r\n"]},"metadata":{},"sourceType":"module"}