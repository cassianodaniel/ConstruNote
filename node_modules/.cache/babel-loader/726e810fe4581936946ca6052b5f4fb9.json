{"ast":null,"code":"'use strict';\n\nconst {\n  EventEmitter,\n  promise\n} = require('@xmpp/events');\n\nconst jid = require('@xmpp/jid');\n\nconst xml = require('@xmpp/xml');\n\nconst StreamError = require('./lib/StreamError');\n\nconst {\n  parseHost,\n  parseService\n} = require('./lib/util');\n\nconst NS_STREAM = 'urn:ietf:params:xml:ns:xmpp-streams';\nconst NS_JABBER_STREAM = 'http://etherx.jabber.org/streams';\n\nclass Connection extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    this.jid = null;\n    this.timeout = 2000;\n    this.options = options;\n    this.socketListeners = Object.create(null);\n    this.parserListeners = Object.create(null);\n    this.status = 'offline';\n    this.socket = null;\n    this.parser = null;\n    this.root = null;\n  }\n\n  _reset() {\n    this.jid = null;\n    this.status = 'offline';\n\n    this._detachSocket();\n\n    this._detachParser();\n  }\n\n  async _streamError(condition, children) {\n    try {\n      await this.send( // prettier-ignore\n      xml('stream:error', {}, [xml(condition, {\n        xmlns: NS_STREAM\n      }, children)])); // eslint-disable-next-line no-unused-vars\n    } catch (err) {}\n\n    return this._end();\n  }\n\n  _onData(data) {\n    const str = data.toString('utf8');\n    this.emit('input', str);\n    this.parser.write(str);\n  }\n\n  _onParserError(error) {\n    // https://xmpp.org/rfcs/rfc6120.html#streams-error-conditions-bad-format\n    // \"This error can be used instead of the more specific XML-related errors,\n    // such as <bad-namespace-prefix/>, <invalid-xml/>, <not-well-formed/>, <restricted-xml/>,\n    // and <unsupported-encoding/>. However, the more specific errors are RECOMMENDED.\"\n    this._streamError('bad-format');\n\n    this._detachParser();\n\n    this.emit('error', error);\n  }\n\n  _attachSocket(socket) {\n    const sock = this.socket = socket;\n    const listeners = this.socketListeners;\n    listeners.data = this._onData.bind(this);\n\n    listeners.close = (dirty, event) => {\n      this._reset();\n\n      this._status('disconnect', {\n        clean: !dirty,\n        event\n      });\n    };\n\n    listeners.connect = () => {\n      this._status('connect');\n    };\n\n    listeners.error = error => {\n      this.emit('error', error);\n    };\n\n    sock.on('close', listeners.close);\n    sock.on('data', listeners.data);\n    sock.on('error', listeners.error);\n    sock.on('connect', listeners.connect);\n  }\n\n  _detachSocket() {\n    const {\n      socketListeners,\n      socket\n    } = this;\n    Object.getOwnPropertyNames(socketListeners).forEach(k => {\n      socket.removeListener(k, socketListeners[k]);\n      delete socketListeners[k];\n    });\n    this.socket = null;\n    return socket;\n  }\n\n  _onElement(element) {\n    const isStreamError = element.is('error', NS_JABBER_STREAM);\n\n    if (isStreamError) {\n      this._onStreamError(element);\n    }\n\n    this.emit('element', element);\n    this.emit(this.isStanza(element) ? 'stanza' : 'nonza', element);\n\n    if (isStreamError) {\n      // \"Stream Errors Are Unrecoverable\"\n      // \"The entity that receives the stream error then SHALL close the stream\"\n      this._end();\n    }\n  } // https://xmpp.org/rfcs/rfc6120.html#streams-error\n\n\n  _onStreamError(element) {\n    const error = StreamError.fromElement(element);\n\n    if (error.condition === 'see-other-host') {\n      return this._onSeeOtherHost(error);\n    }\n\n    this.emit('error', error);\n  } // https://xmpp.org/rfcs/rfc6120.html#streams-error-conditions-see-other-host\n\n\n  async _onSeeOtherHost(error) {\n    const {\n      protocol\n    } = parseService(this.options.service);\n    const host = error.element.getChildText('see-other-host');\n    const {\n      port\n    } = parseHost(host);\n    let service;\n\n    if (port) {\n      service = `${protocol || 'xmpp:'}//${host}`;\n    } else {\n      service = (protocol ? `${protocol}//` : '') + host;\n    }\n\n    try {\n      await promise(this, 'disconnect');\n      const {\n        domain,\n        lang\n      } = this.options;\n      await this.connect(service);\n      await this.open({\n        domain,\n        lang\n      });\n    } catch (err) {\n      this.emit('error', err);\n    }\n  }\n\n  _attachParser(p) {\n    const parser = this.parser = p;\n    const listeners = this.parserListeners;\n    listeners.element = this._onElement.bind(this);\n    listeners.error = this._onParserError.bind(this);\n\n    listeners.end = element => {\n      this._detachParser();\n\n      this._status('close', element);\n    };\n\n    listeners.start = element => {\n      this._status('open', element);\n    };\n\n    parser.on('error', listeners.error);\n    parser.on('element', listeners.element);\n    parser.on('end', listeners.end);\n    parser.on('start', listeners.start);\n  }\n\n  _detachParser() {\n    const listeners = this.parserListeners;\n    Object.getOwnPropertyNames(listeners).forEach(k => {\n      this.parser.removeListener(k, listeners[k]);\n      delete listeners[k];\n    });\n    this.parser = null;\n  }\n\n  _jid(id) {\n    this.jid = jid(id);\n    return this.jid;\n  }\n\n  _status(status, ...args) {\n    this.status = status;\n    this.emit('status', status, ...args);\n    this.emit(status, ...args);\n  }\n\n  async _end() {\n    let el;\n\n    try {\n      el = await this.close(); // eslint-disable-next-line no-unused-vars\n    } catch (err) {}\n\n    try {\n      await this.disconnect(); // eslint-disable-next-line no-unused-vars\n    } catch (err) {}\n\n    return el;\n  }\n  /**\n   * Opens the socket then opens the stream\n   */\n\n\n  async start() {\n    if (this.status !== 'offline') {\n      throw new Error('Connection is not offline');\n    }\n\n    const {\n      service,\n      domain,\n      lang\n    } = this.options;\n    await this.connect(service);\n    const promiseOnline = promise(this, 'online');\n    await this.open({\n      domain,\n      lang\n    });\n    return promiseOnline;\n  }\n  /**\n   * Connects the socket\n   */\n\n\n  async connect(service) {\n    this._status('connecting', service);\n\n    const socket = new this.Socket();\n\n    this._attachSocket(socket); // The 'connect' status is set by the socket 'connect' listener\n\n\n    socket.connect(this.socketParameters(service));\n    return promise(socket, 'connect');\n  }\n  /**\n   * Disconnects the socket\n   * https://xmpp.org/rfcs/rfc6120.html#streams-close\n   * https://tools.ietf.org/html/rfc7395#section-3.6\n   */\n\n\n  async disconnect(timeout = this.timeout) {\n    if (this.socket) this._status('disconnecting');\n    this.socket.end(); // The 'disconnect' status is set by the socket 'close' listener\n\n    await promise(this.socket, 'close', 'error', timeout);\n  }\n  /**\n   * Opens the stream\n   */\n\n\n  async open(options) {\n    this._status('opening');\n\n    if (typeof options === 'string') {\n      options = {\n        domain: options\n      };\n    }\n\n    const {\n      domain,\n      lang,\n      timeout = this.timeout\n    } = options;\n    const headerElement = this.headerElement();\n    headerElement.attrs.to = domain;\n    headerElement.attrs['xml:lang'] = lang;\n    this.root = headerElement;\n\n    this._attachParser(new this.Parser());\n\n    await this.write(this.header(headerElement));\n    return promise(this, 'open', 'error', timeout);\n  }\n  /**\n   * Closes the stream then closes the socket\n   * https://xmpp.org/rfcs/rfc6120.html#streams-close\n   * https://tools.ietf.org/html/rfc7395#section-3.6\n   */\n\n\n  async stop() {\n    const el = await this._end();\n    if (this.status !== 'offline') this._status('offline', el);\n    return el;\n  }\n  /**\n   * Closes the stream and wait for the server to close it\n   * https://xmpp.org/rfcs/rfc6120.html#streams-close\n   * https://tools.ietf.org/html/rfc7395#section-3.6\n   */\n\n\n  async close(timeout = this.timeout) {\n    const p = Promise.all([promise(this.parser, 'end', 'error', timeout), this.write(this.footer(this.footerElement()))]);\n    if (this.parser && this.socket) this._status('closing');\n    const [el] = await p;\n    this.root = null;\n    return el; // The 'close' status is set by the parser 'end' listener\n  }\n  /**\n   * Restart the stream\n   * https://xmpp.org/rfcs/rfc6120.html#streams-negotiation-restart\n   */\n\n\n  async restart() {\n    this._detachParser();\n\n    const {\n      domain,\n      lang\n    } = this.options;\n    return this.open({\n      domain,\n      lang\n    });\n  }\n\n  async send(element) {\n    element.parent = this.root;\n    this.emit('outgoing', element);\n    await this.write(element);\n    this.emit('send', element);\n  }\n\n  sendReceive(element, timeout = this.timeout) {\n    return Promise.all([this.send(element), promise(this, 'element', 'error', timeout)]).then(([, el]) => el);\n  }\n\n  write(data) {\n    return new Promise((resolve, reject) => {\n      // https://xmpp.org/rfcs/rfc6120.html#streams-close\n      // \"Refrain from sending any further data over its outbound stream to the other entity\"\n      if (this.status === 'closing') {\n        reject(new Error('Connection is closing'));\n        return;\n      }\n\n      const str = data.toString('utf8');\n      this.socket.write(str, err => {\n        if (err) {\n          return reject(err);\n        }\n\n        this.emit('output', str);\n        resolve();\n      });\n    });\n  }\n\n  isStanza(element) {\n    const {\n      name\n    } = element;\n    return name === 'iq' || name === 'message' || name === 'presence';\n  }\n\n  isNonza(element) {\n    return !this.isStanza(element);\n  } // Override\n\n\n  header(el) {\n    return el.toString();\n  } // Override\n\n\n  headerElement() {\n    return new xml.Element('', {\n      version: '1.0',\n      xmlns: this.NS\n    });\n  } // Override\n\n\n  footer(el) {\n    return el.toString();\n  } // Override\n\n\n  footerElement() {} // Override\n\n\n  socketParameters() {}\n\n} // Overrirde\n\n\nConnection.prototype.NS = '';\nConnection.prototype.Socket = null;\nConnection.prototype.Parser = null;\nmodule.exports = Connection;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/connection/index.js"],"names":["EventEmitter","promise","require","jid","xml","StreamError","parseHost","parseService","NS_STREAM","NS_JABBER_STREAM","Connection","constructor","options","timeout","socketListeners","Object","create","parserListeners","status","socket","parser","root","_reset","_detachSocket","_detachParser","_streamError","condition","children","send","xmlns","err","_end","_onData","data","str","toString","emit","write","_onParserError","error","_attachSocket","sock","listeners","bind","close","dirty","event","_status","clean","connect","on","getOwnPropertyNames","forEach","k","removeListener","_onElement","element","isStreamError","is","_onStreamError","isStanza","fromElement","_onSeeOtherHost","protocol","service","host","getChildText","port","domain","lang","open","_attachParser","p","end","start","_jid","id","args","el","disconnect","Error","promiseOnline","Socket","socketParameters","headerElement","attrs","to","Parser","header","stop","Promise","all","footer","footerElement","restart","parent","sendReceive","then","resolve","reject","name","isNonza","Element","version","NS","prototype","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst {EventEmitter, promise} = require('@xmpp/events')\nconst jid = require('@xmpp/jid')\nconst xml = require('@xmpp/xml')\nconst StreamError = require('./lib/StreamError')\nconst {parseHost, parseService} = require('./lib/util')\n\nconst NS_STREAM = 'urn:ietf:params:xml:ns:xmpp-streams'\nconst NS_JABBER_STREAM = 'http://etherx.jabber.org/streams'\n\nclass Connection extends EventEmitter {\n  constructor(options = {}) {\n    super()\n    this.jid = null\n    this.timeout = 2000\n    this.options = options\n    this.socketListeners = Object.create(null)\n    this.parserListeners = Object.create(null)\n    this.status = 'offline'\n    this.socket = null\n    this.parser = null\n    this.root = null\n  }\n\n  _reset() {\n    this.jid = null\n    this.status = 'offline'\n    this._detachSocket()\n    this._detachParser()\n  }\n\n  async _streamError(condition, children) {\n    try {\n      await this.send(\n        // prettier-ignore\n        xml('stream:error', {}, [\n          xml(condition, {xmlns: NS_STREAM}, children),\n        ])\n      )\n      // eslint-disable-next-line no-unused-vars\n    } catch (err) {}\n\n    return this._end()\n  }\n\n  _onData(data) {\n    const str = data.toString('utf8')\n    this.emit('input', str)\n    this.parser.write(str)\n  }\n\n  _onParserError(error) {\n    // https://xmpp.org/rfcs/rfc6120.html#streams-error-conditions-bad-format\n    // \"This error can be used instead of the more specific XML-related errors,\n    // such as <bad-namespace-prefix/>, <invalid-xml/>, <not-well-formed/>, <restricted-xml/>,\n    // and <unsupported-encoding/>. However, the more specific errors are RECOMMENDED.\"\n    this._streamError('bad-format')\n    this._detachParser()\n    this.emit('error', error)\n  }\n\n  _attachSocket(socket) {\n    const sock = (this.socket = socket)\n    const listeners = this.socketListeners\n\n    listeners.data = this._onData.bind(this)\n\n    listeners.close = (dirty, event) => {\n      this._reset()\n      this._status('disconnect', {clean: !dirty, event})\n    }\n\n    listeners.connect = () => {\n      this._status('connect')\n    }\n\n    listeners.error = error => {\n      this.emit('error', error)\n    }\n\n    sock.on('close', listeners.close)\n    sock.on('data', listeners.data)\n    sock.on('error', listeners.error)\n    sock.on('connect', listeners.connect)\n  }\n\n  _detachSocket() {\n    const {socketListeners, socket} = this\n    Object.getOwnPropertyNames(socketListeners).forEach(k => {\n      socket.removeListener(k, socketListeners[k])\n      delete socketListeners[k]\n    })\n    this.socket = null\n    return socket\n  }\n\n  _onElement(element) {\n    const isStreamError = element.is('error', NS_JABBER_STREAM)\n\n    if (isStreamError) {\n      this._onStreamError(element)\n    }\n\n    this.emit('element', element)\n    this.emit(this.isStanza(element) ? 'stanza' : 'nonza', element)\n\n    if (isStreamError) {\n      // \"Stream Errors Are Unrecoverable\"\n      // \"The entity that receives the stream error then SHALL close the stream\"\n      this._end()\n    }\n  }\n\n  // https://xmpp.org/rfcs/rfc6120.html#streams-error\n  _onStreamError(element) {\n    const error = StreamError.fromElement(element)\n\n    if (error.condition === 'see-other-host') {\n      return this._onSeeOtherHost(error)\n    }\n\n    this.emit('error', error)\n  }\n\n  // https://xmpp.org/rfcs/rfc6120.html#streams-error-conditions-see-other-host\n  async _onSeeOtherHost(error) {\n    const {protocol} = parseService(this.options.service)\n\n    const host = error.element.getChildText('see-other-host')\n    const {port} = parseHost(host)\n\n    let service\n    if (port) {\n      service = `${protocol || 'xmpp:'}//${host}`\n    } else {\n      service = (protocol ? `${protocol}//` : '') + host\n    }\n\n    try {\n      await promise(this, 'disconnect')\n      const {domain, lang} = this.options\n      await this.connect(service)\n      await this.open({domain, lang})\n    } catch (err) {\n      this.emit('error', err)\n    }\n  }\n\n  _attachParser(p) {\n    const parser = (this.parser = p)\n    const listeners = this.parserListeners\n\n    listeners.element = this._onElement.bind(this)\n    listeners.error = this._onParserError.bind(this)\n\n    listeners.end = element => {\n      this._detachParser()\n      this._status('close', element)\n    }\n\n    listeners.start = element => {\n      this._status('open', element)\n    }\n\n    parser.on('error', listeners.error)\n    parser.on('element', listeners.element)\n    parser.on('end', listeners.end)\n    parser.on('start', listeners.start)\n  }\n\n  _detachParser() {\n    const listeners = this.parserListeners\n    Object.getOwnPropertyNames(listeners).forEach(k => {\n      this.parser.removeListener(k, listeners[k])\n      delete listeners[k]\n    })\n    this.parser = null\n  }\n\n  _jid(id) {\n    this.jid = jid(id)\n    return this.jid\n  }\n\n  _status(status, ...args) {\n    this.status = status\n    this.emit('status', status, ...args)\n    this.emit(status, ...args)\n  }\n\n  async _end() {\n    let el\n    try {\n      el = await this.close()\n      // eslint-disable-next-line no-unused-vars\n    } catch (err) {}\n\n    try {\n      await this.disconnect()\n      // eslint-disable-next-line no-unused-vars\n    } catch (err) {}\n\n    return el\n  }\n\n  /**\n   * Opens the socket then opens the stream\n   */\n  async start() {\n    if (this.status !== 'offline') {\n      throw new Error('Connection is not offline')\n    }\n\n    const {service, domain, lang} = this.options\n\n    await this.connect(service)\n\n    const promiseOnline = promise(this, 'online')\n\n    await this.open({domain, lang})\n\n    return promiseOnline\n  }\n\n  /**\n   * Connects the socket\n   */\n  async connect(service) {\n    this._status('connecting', service)\n    const socket = new this.Socket()\n    this._attachSocket(socket)\n    // The 'connect' status is set by the socket 'connect' listener\n    socket.connect(this.socketParameters(service))\n    return promise(socket, 'connect')\n  }\n\n  /**\n   * Disconnects the socket\n   * https://xmpp.org/rfcs/rfc6120.html#streams-close\n   * https://tools.ietf.org/html/rfc7395#section-3.6\n   */\n  async disconnect(timeout = this.timeout) {\n    if (this.socket) this._status('disconnecting')\n\n    this.socket.end()\n\n    // The 'disconnect' status is set by the socket 'close' listener\n    await promise(this.socket, 'close', 'error', timeout)\n  }\n\n  /**\n   * Opens the stream\n   */\n  async open(options) {\n    this._status('opening')\n\n    if (typeof options === 'string') {\n      options = {domain: options}\n    }\n\n    const {domain, lang, timeout = this.timeout} = options\n\n    const headerElement = this.headerElement()\n    headerElement.attrs.to = domain\n    headerElement.attrs['xml:lang'] = lang\n    this.root = headerElement\n\n    this._attachParser(new this.Parser())\n\n    await this.write(this.header(headerElement))\n    return promise(this, 'open', 'error', timeout)\n  }\n\n  /**\n   * Closes the stream then closes the socket\n   * https://xmpp.org/rfcs/rfc6120.html#streams-close\n   * https://tools.ietf.org/html/rfc7395#section-3.6\n   */\n  async stop() {\n    const el = await this._end()\n    if (this.status !== 'offline') this._status('offline', el)\n    return el\n  }\n\n  /**\n   * Closes the stream and wait for the server to close it\n   * https://xmpp.org/rfcs/rfc6120.html#streams-close\n   * https://tools.ietf.org/html/rfc7395#section-3.6\n   */\n  async close(timeout = this.timeout) {\n    const p = Promise.all([\n      promise(this.parser, 'end', 'error', timeout),\n      this.write(this.footer(this.footerElement())),\n    ])\n\n    if (this.parser && this.socket) this._status('closing')\n    const [el] = await p\n    this.root = null\n    return el\n    // The 'close' status is set by the parser 'end' listener\n  }\n\n  /**\n   * Restart the stream\n   * https://xmpp.org/rfcs/rfc6120.html#streams-negotiation-restart\n   */\n  async restart() {\n    this._detachParser()\n    const {domain, lang} = this.options\n    return this.open({domain, lang})\n  }\n\n  async send(element) {\n    element.parent = this.root\n    this.emit('outgoing', element)\n    await this.write(element)\n    this.emit('send', element)\n  }\n\n  sendReceive(element, timeout = this.timeout) {\n    return Promise.all([\n      this.send(element),\n      promise(this, 'element', 'error', timeout),\n    ]).then(([, el]) => el)\n  }\n\n  write(data) {\n    return new Promise((resolve, reject) => {\n      // https://xmpp.org/rfcs/rfc6120.html#streams-close\n      // \"Refrain from sending any further data over its outbound stream to the other entity\"\n      if (this.status === 'closing') {\n        reject(new Error('Connection is closing'))\n        return\n      }\n\n      const str = data.toString('utf8')\n      this.socket.write(str, err => {\n        if (err) {\n          return reject(err)\n        }\n\n        this.emit('output', str)\n        resolve()\n      })\n    })\n  }\n\n  isStanza(element) {\n    const {name} = element\n    return name === 'iq' || name === 'message' || name === 'presence'\n  }\n\n  isNonza(element) {\n    return !this.isStanza(element)\n  }\n\n  // Override\n  header(el) {\n    return el.toString()\n  }\n\n  // Override\n  headerElement() {\n    return new xml.Element('', {\n      version: '1.0',\n      xmlns: this.NS,\n    })\n  }\n\n  // Override\n  footer(el) {\n    return el.toString()\n  }\n\n  // Override\n  footerElement() {}\n\n  // Override\n  socketParameters() {}\n}\n\n// Overrirde\nConnection.prototype.NS = ''\nConnection.prototype.Socket = null\nConnection.prototype.Parser = null\n\nmodule.exports = Connection\n"]},"metadata":{},"sourceType":"script"}