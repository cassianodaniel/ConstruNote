{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\GroupMember.tsx\";\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Card, Media, Badge } from 'reactstrap';\nimport ReactImageFallback from \"react-image-fallback\";\nimport { Link } from \"react-router-dom\";\nimport { useContact } from '../contexts/ContactContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useChat } from '../contexts/ChatContext';\nimport { useGroup } from '../contexts/GroupContext';\nimport Swal from 'sweetalert2';\nimport { ConferenceRoomParticipantType } from '../services/business/Conferences';\nimport { useConference } from '../contexts/ConferenceContext';\n\nconst ChangeGroupNameButton = ({\n  isAdmin,\n  defaultAvatar,\n  member\n}) => {\n  var _activeChat$conferenc, _activeChat$conferenc2, _activeChat$conferenc3;\n\n  const {\n    activeChat,\n    chats,\n    openChat,\n    setShowChat\n  } = useChat();\n  const {\n    setToggleMemberRole,\n    setRemovedMember,\n    setGroupToRemoveContact\n  } = useGroup();\n  const {\n    setClickedContact,\n    contacts,\n    contactsOutsideUserContacts,\n    openContact\n  } = useContact();\n  const {\n    setRemovingParticipantsPayload,\n    setAddingParticipantsPayload\n  } = useConference();\n  const [arrayToPushAOnlyParticipant, setArrayToPushAOnlyParticipant] = useState([]);\n  const {\n    user\n  } = useAuth();\n  const {\n    t\n  } = useTranslation();\n  const moderators = (_activeChat$conferenc = activeChat.conferenceRoomParticipants) === null || _activeChat$conferenc === void 0 ? void 0 : _activeChat$conferenc.filter(participant => participant.userModerator === true && participant.type === ConferenceRoomParticipantType.MODERATOR && participant.userUuid === user.id);\n  const amIaModerator = ((_activeChat$conferenc2 = activeChat.conferenceRoomParticipants) === null || _activeChat$conferenc2 === void 0 ? void 0 : (_activeChat$conferenc3 = _activeChat$conferenc2.find(member => member.userUuid === user.id)) === null || _activeChat$conferenc3 === void 0 ? void 0 : _activeChat$conferenc3.userModerator) === true;\n\n  const isThisMemberAModerator = member => {\n    moderators === null || moderators === void 0 ? void 0 : moderators.find(moderator => moderator.userUuid === member.userId);\n  };\n\n  const openChatAction = chat => {\n    openChat(chat);\n    setShowChat(true);\n  };\n\n  const toggleParticipantRole = (conferenceId, participant) => {\n    setArrayToPushAOnlyParticipant([...arrayToPushAOnlyParticipant, {\n      description: '',\n      email: '',\n      name: participant.name,\n      userModerator: participant.role === \"admin\" ? false : true,\n      type: participant.role === \"admin\" ? ConferenceRoomParticipantType.PARTICIPANT : ConferenceRoomParticipantType.MODERATOR,\n      userUuid: participant.userId\n    }]);\n    setRemovingParticipantsPayload({\n      conferenceId: conferenceId,\n      participantId: participant.userId\n    });\n    setAddingParticipantsPayload({\n      conferenceId: conferenceId,\n      data: arrayToPushAOnlyParticipant\n    });\n    setArrayToPushAOnlyParticipant([]);\n  };\n\n  return /*#__PURE__*/React.createElement(Card, {\n    key: member.userId,\n    className: \"p-2 mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(Media, {\n    className: \"align-items-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ReactImageFallback, {\n    src: member.profilePicture,\n    className: \"rounded-circle avatar-xs mr-2\",\n    alt: \"chatvia\",\n    fallbackImage: defaultAvatar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Media, {\n    body: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"font-size-14 mb-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"#\",\n    onClick: () => {\n      chats.forEach(cht => {\n        if (cht.id === member.userId) {\n          openChatAction(cht);\n          contacts.forEach(ctc => {\n            if (ctc.id === member.userId) {\n              setClickedContact(ctc);\n            }\n          });\n        } else {\n          contactsOutsideUserContacts.forEach(ctcOut => {\n            if (ctcOut.id === member.userId) {\n              openContact(ctcOut);\n              setClickedContact(ctcOut);\n            }\n          });\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, member.name), (isAdmin || amIaModerator) && user.id !== member.userId && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"float-right ml-2\",\n    style: {\n      cursor: \"pointer\"\n    },\n    onClick: () => Swal.fire({\n      title: t(\"Remove\") + \" \" + member.name + \"?\",\n      text: \"\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#4e5e96\",\n      cancelButtonColor: \"#d33\",\n      cancelButtonText: t(\"No\"),\n      confirmButtonText: t(\"Yes\"),\n      customClass: {\n        popup: \"swal-mini-popup\"\n      }\n    }).then(result => {\n      if (result.isConfirmed) {\n        activeChat.conferenceRoomParticipants ? Swal.fire({\n          position: 'center',\n          icon: 'success',\n          title: member.name + \" \" + t(\"has been removed!\"),\n          showConfirmButton: false,\n          timer: 1500,\n          customClass: {\n            popup: \"swal-mini-popup\"\n          }\n        }).then(() => {\n          setRemovingParticipantsPayload({\n            conferenceId: activeChat.id,\n            participantId: member.userId\n          });\n        }) : Swal.fire({\n          position: 'center',\n          icon: 'success',\n          title: member.name + \" \" + t(\"has been removed!\"),\n          showConfirmButton: false,\n          timer: 1500,\n          customClass: {\n            popup: \"swal-mini-popup\"\n          }\n        });\n        setRemovedMember(member);\n        setGroupToRemoveContact(activeChat.groupId);\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"ri-close-fill\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  })), member.role === \"admin\" || isThisMemberAModerator(member) ? /*#__PURE__*/React.createElement(Badge, {\n    color: activeChat.conferenceRoomParticipants ? \"warning\" : \"danger\",\n    className: activeChat.conferenceRoomParticipants ? \"badge-soft-warning float-right\" : \"badge-soft-danger float-right\",\n    onClick: () => (isAdmin || amIaModerator) && member.userId !== user.id && Swal.fire({\n      title: t(\"Turn\") + \" \" + member.name + \" \" + t(\"a member?\"),\n      text: \"\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#4e5e96\",\n      cancelButtonColor: \"#d33\",\n      cancelButtonText: t(\"No\"),\n      confirmButtonText: t(\"Yes\"),\n      customClass: {\n        popup: \"swal-mini-popup\"\n      }\n    }).then(result => {\n      if (result.isConfirmed) {\n        Swal.fire({\n          position: 'center',\n          icon: 'success',\n          title: member.name + \" \" + t(\"is now a member!\"),\n          showConfirmButton: false,\n          timer: 1500,\n          customClass: {\n            popup: \"swal-mini-popup\"\n          }\n        });\n      }\n\n      activeChat.conferenceRoomParticipants ? toggleParticipantRole(activeChat.id, member) : setToggleMemberRole({\n        mbId: member.userId,\n        gpId: activeChat.groupId ? activeChat.groupId : \"\",\n        mbRole: member.role,\n        mb: member\n      });\n    }),\n    style: {\n      cursor: \"pointer\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }\n  }, activeChat.conferenceRoomParticipants ? t(\"Moderator\") : t(\"Admin\")) : /*#__PURE__*/React.createElement(Badge, {\n    color: \"success\",\n    className: \"badge-soft-success float-right\",\n    style: {\n      cursor: \"pointer\"\n    },\n    onClick: () => (isAdmin || amIaModerator) && member.userId !== user.id && Swal.fire({\n      title: t(\"Turn\") + \" \" + member.name + \" \" + t(\"an administrator?\"),\n      text: \"\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#4e5e96\",\n      cancelButtonColor: \"#d33\",\n      cancelButtonText: t(\"No\"),\n      confirmButtonText: t(\"Yes\"),\n      customClass: {\n        popup: \"swal-mini-popup\"\n      }\n    }).then(result => {\n      if (result.isConfirmed) {\n        Swal.fire({\n          position: 'center',\n          icon: 'success',\n          title: member.name + \" \" + t(\"is now an administrator!\"),\n          showConfirmButton: false,\n          timer: 1500,\n          customClass: {\n            popup: \"swal-mini-popup\"\n          }\n        });\n        setToggleMemberRole({\n          mbId: member.userId,\n          gpId: activeChat.groupId ? activeChat.groupId : \"\",\n          mbRole: member.role,\n          mb: member\n        });\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 15\n    }\n  }, t(\"Member\")))))));\n};\n\nexport default ChangeGroupNameButton;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/GroupMember.tsx"],"names":["React","useState","useTranslation","Card","Media","Badge","ReactImageFallback","Link","useContact","useAuth","useChat","useGroup","Swal","ConferenceRoomParticipantType","useConference","ChangeGroupNameButton","isAdmin","defaultAvatar","member","activeChat","chats","openChat","setShowChat","setToggleMemberRole","setRemovedMember","setGroupToRemoveContact","setClickedContact","contacts","contactsOutsideUserContacts","openContact","setRemovingParticipantsPayload","setAddingParticipantsPayload","arrayToPushAOnlyParticipant","setArrayToPushAOnlyParticipant","user","t","moderators","conferenceRoomParticipants","filter","participant","userModerator","type","MODERATOR","userUuid","id","amIaModerator","find","isThisMemberAModerator","moderator","userId","openChatAction","chat","toggleParticipantRole","conferenceId","description","email","name","role","PARTICIPANT","participantId","data","profilePicture","forEach","cht","ctc","ctcOut","cursor","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","cancelButtonText","confirmButtonText","customClass","popup","then","result","isConfirmed","position","showConfirmButton","timer","groupId","mbId","gpId","mbRole","mb"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Card, Media, Badge } from 'reactstrap';\r\nimport ReactImageFallback from \"react-image-fallback\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useContact } from '../contexts/ContactContext';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { useChat } from '../contexts/ChatContext';\r\nimport { useGroup } from '../contexts/GroupContext';\r\nimport Swal from 'sweetalert2'\r\nimport IChat from '../alias/IChat';\r\nimport IMember from '../alias/IMember';\r\nimport { ConferenceRoomParticipantType } from '../services/business/Conferences';\r\nimport { useConference } from '../contexts/ConferenceContext';\r\nimport { ConferenceRoomParticipant } from '@digivox/apicommunicator/dist/types/types/types';\r\n\r\ninterface IProps{\r\n    member: IMember;\r\n    defaultAvatar: any;\r\n    isAdmin: any;\r\n}\r\n\r\n\r\n\r\nconst ChangeGroupNameButton : React.FC<IProps> = ({ isAdmin, defaultAvatar, member, }) => {\r\n    const { activeChat, chats, openChat, setShowChat } = useChat();\r\n    const { setToggleMemberRole, setRemovedMember, setGroupToRemoveContact } = useGroup();\r\n    const { setClickedContact, contacts, contactsOutsideUserContacts, openContact } = useContact();\r\n    const { setRemovingParticipantsPayload, setAddingParticipantsPayload } = useConference();\r\n    const [arrayToPushAOnlyParticipant, setArrayToPushAOnlyParticipant] = useState<ConferenceRoomParticipant[]>([]);\r\n    const { user } = useAuth();\r\n    const { t } = useTranslation();\r\n    const moderators = activeChat\r\n    .conferenceRoomParticipants?.filter(\r\n      (participant) => \r\n          participant.userModerator === true && \r\n          participant.type === ConferenceRoomParticipantType.MODERATOR &&\r\n          participant.userUuid === user.id\r\n    );\r\n    const amIaModerator =\r\n    activeChat.conferenceRoomParticipants?.find((member) => member.userUuid === user.id)?.userModerator ===\r\n    true;\r\n\r\n    const isThisMemberAModerator = (member: IMember) => {\r\n      moderators?.find((moderator) => moderator.userUuid === member.userId)\r\n    }\r\n\r\n\r\n    const openChatAction = (chat: IChat) => {\r\n        openChat(chat);\r\n        setShowChat(true);\r\n    };\r\n\r\n    const toggleParticipantRole = (conferenceId: string, participant: IMember) => {\r\n      setArrayToPushAOnlyParticipant(\r\n        [...arrayToPushAOnlyParticipant, \r\n          {\r\n            description: '',\r\n            email: '',\r\n            name: participant.name,\r\n            userModerator: participant.role === \"admin\" ? false : true,\r\n            type: participant.role === \"admin\" ? ConferenceRoomParticipantType.PARTICIPANT : ConferenceRoomParticipantType.MODERATOR,\r\n            userUuid: participant.userId\r\n          } as ConferenceRoomParticipant\r\n        ]\r\n      )\r\n      setRemovingParticipantsPayload({\r\n        conferenceId: conferenceId,\r\n        participantId: participant.userId\r\n      });\r\n      setAddingParticipantsPayload({\r\n        conferenceId: conferenceId,\r\n        data: arrayToPushAOnlyParticipant,\r\n      });\r\n      setArrayToPushAOnlyParticipant([]);\r\n    }\r\n\r\n    return <Card key={member.userId} className=\"p-2 mb-2\">\r\n    <Media className=\"align-items-center\">\r\n      <ReactImageFallback\r\n        src={member.profilePicture}\r\n        className=\"rounded-circle avatar-xs mr-2\"\r\n        alt=\"chatvia\"\r\n        fallbackImage={defaultAvatar}\r\n      />\r\n      <Media body>\r\n        <div className=\"text-left\">\r\n          <h5 className=\"font-size-14 mb-1\">\r\n            <Link\r\n              to=\"#\"\r\n              onClick={() => {\r\n                chats.forEach((cht: any) => {\r\n                  if (cht.id === member.userId) {\r\n                    openChatAction(cht);\r\n                    contacts.forEach((ctc: any) => {\r\n                      if (ctc.id === member.userId) {\r\n                        setClickedContact(ctc);\r\n                      }\r\n                    });\r\n                  } else {\r\n                    contactsOutsideUserContacts.forEach(\r\n                      (ctcOut) => {\r\n                        if (ctcOut.id === member.userId) {\r\n                          openContact(ctcOut);\r\n                          setClickedContact(ctcOut);\r\n                        }\r\n                      }\r\n                    );\r\n                  }\r\n                });\r\n              }}\r\n            >\r\n              {member.name}\r\n            </Link>\r\n\r\n            {(((isAdmin || amIaModerator) && user.id !== member.userId) && (\r\n              <span\r\n                className=\"float-right ml-2\"\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() =>\r\n                  Swal.fire({\r\n                    title:\r\n                      t(\"Remove\") + \" \" + member.name + \"?\",\r\n                    text: \"\",\r\n                    icon: \"warning\",\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: \"#4e5e96\",\r\n                    cancelButtonColor: \"#d33\",\r\n                    cancelButtonText: t(\"No\"),\r\n                    confirmButtonText: t(\"Yes\"),\r\n                    customClass: {\r\n                      popup: \"swal-mini-popup\"\r\n                    }\r\n                  }\r\n                  ).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                      activeChat.conferenceRoomParticipants ?\r\n                      \r\n                      Swal.fire({\r\n                        position: 'center',\r\n                        icon: 'success',\r\n                        title: member.name + \" \" + t(\"has been removed!\"),\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        customClass: {\r\n                          popup: \"swal-mini-popup\"\r\n                        }\r\n                      }).then(() => {\r\n                        setRemovingParticipantsPayload({\r\n                          conferenceId: activeChat.id,\r\n                          participantId: member.userId\r\n                        })\r\n                      })\r\n                      \r\n                        : \r\n                      Swal.fire({\r\n                        position: 'center',\r\n                        icon: 'success',\r\n                        title: member.name + \" \" + t(\"has been removed!\"),\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        customClass: {\r\n                          popup: \"swal-mini-popup\"\r\n                        }\r\n                      })\r\n                      setRemovedMember(member);\r\n                      setGroupToRemoveContact(\r\n                        activeChat.groupId\r\n                      );\r\n                    }\r\n                  })\r\n                }\r\n              >\r\n                <i className=\"ri-close-fill\"></i>\r\n              </span>\r\n            ))}\r\n            {member.role === \"admin\" || isThisMemberAModerator(member) ?\r\n              (\r\n              <Badge\r\n                color={activeChat.conferenceRoomParticipants ? \"warning\" : \"danger\"}\r\n                className={activeChat.conferenceRoomParticipants ? \"badge-soft-warning float-right\" : \"badge-soft-danger float-right\"}\r\n                onClick={() =>\r\n                  (isAdmin || amIaModerator) && (member.userId !== user.id) &&\r\n                  Swal.fire({\r\n                    title:\r\n                      t(\"Turn\") +\r\n                      \" \" +\r\n                      member.name +\r\n                      \" \" +\r\n                      t(\"a member?\"),\r\n                    text: \"\",\r\n                    icon: \"warning\",\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: \"#4e5e96\",\r\n                    cancelButtonColor: \"#d33\",\r\n                    cancelButtonText: t(\"No\"),\r\n                    confirmButtonText: t(\"Yes\"),\r\n                    customClass: {\r\n                      popup: \"swal-mini-popup\"\r\n                    }\r\n                  }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                      Swal.fire({\r\n                        position: 'center',\r\n                        icon: 'success',\r\n                        title: member.name + \" \" + t(\"is now a member!\"),\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        customClass: {\r\n                          popup: \"swal-mini-popup\"\r\n                        }\r\n                      })\r\n                    }\r\n                    activeChat.conferenceRoomParticipants ?\r\n\r\n                      toggleParticipantRole(activeChat.id, member)\r\n\r\n                    : \r\n                \r\n                    setToggleMemberRole({\r\n                      mbId: member.userId,\r\n                      gpId: activeChat.groupId\r\n                        ? activeChat.groupId\r\n                        : \"\",\r\n                      mbRole: member.role,\r\n                      mb: member,\r\n                    });\r\n                  })\r\n                }\r\n                style={{ cursor: \"pointer\" }}\r\n              >\r\n                {activeChat.conferenceRoomParticipants ? t(\"Moderator\") : t(\"Admin\")}\r\n              </Badge>\r\n            ) : (\r\n              <Badge\r\n                color=\"success\"\r\n                className=\"badge-soft-success float-right\"\r\n                style={{ cursor: \"pointer\" }}\r\n                onClick={() =>\r\n                  (isAdmin || amIaModerator) && (member.userId !== user.id) &&\r\n                  Swal.fire({\r\n                    title:\r\n                      t(\"Turn\") +\r\n                      \" \" +\r\n                      member.name +\r\n                      \" \" +\r\n                      t(\"an administrator?\"),\r\n                    text: \"\",\r\n                    icon: \"warning\",\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: \"#4e5e96\",\r\n                    cancelButtonColor: \"#d33\",\r\n                    cancelButtonText: t(\"No\"),\r\n                    confirmButtonText: t(\"Yes\"),\r\n                    customClass: {\r\n                      popup: \"swal-mini-popup\"\r\n                    }\r\n                  }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                      Swal.fire({\r\n                        position: 'center',\r\n                        icon: 'success',\r\n                        title: member.name + \" \" + t(\"is now an administrator!\"),\r\n                        showConfirmButton: false,\r\n                        timer: 1500,\r\n                        customClass: {\r\n                          popup: \"swal-mini-popup\"\r\n                        }\r\n                      })\r\n                      setToggleMemberRole({\r\n                        mbId: member.userId,\r\n                        gpId: activeChat.groupId\r\n                          ? activeChat.groupId\r\n                          : \"\",\r\n                        mbRole: member.role,\r\n                        mb: member,\r\n                      });\r\n                    }\r\n                  })\r\n                }\r\n              >\r\n                {t(\"Member\")}\r\n              </Badge>\r\n            )}\r\n          </h5>\r\n        </div>\r\n      </Media>\r\n    </Media>\r\n  </Card>\r\n}\r\n\r\nexport default ChangeGroupNameButton; "]},"metadata":{},"sourceType":"module"}