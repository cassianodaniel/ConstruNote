{"ast":null,"code":"'use strict';\n\nconst {\n  xml,\n  jid,\n  Client\n} = require('@xmpp/client-core');\n\nconst getDomain = require('./lib/getDomain');\n\nconst _reconnect = require('@xmpp/reconnect');\n\nconst _websocket = require('@xmpp/websocket');\n\nconst _middleware = require('@xmpp/middleware');\n\nconst _streamFeatures = require('@xmpp/stream-features');\n\nconst _iqCaller = require('@xmpp/iq/caller');\n\nconst _iqCallee = require('@xmpp/iq/callee');\n\nconst _resolve = require('@xmpp/resolve'); // Stream features - order matters and define priority\n\n\nconst _sasl = require('@xmpp/sasl');\n\nconst _resourceBinding = require('@xmpp/resource-binding');\n\nconst _sessionEstablishment = require('@xmpp/session-establishment');\n\nconst _streamManagement = require('@xmpp/stream-management'); // SASL mechanisms - order matters and define priority\n\n\nconst anonymous = require('@xmpp/sasl-anonymous');\n\nconst plain = require('@xmpp/sasl-plain');\n\nfunction client(options = {}) {\n  const {\n    resource,\n    credentials,\n    username,\n    password,\n    ...params\n  } = options;\n  const {\n    domain,\n    service\n  } = params;\n\n  if (!domain && service) {\n    params.domain = getDomain(service);\n  }\n\n  const entity = new Client(params);\n\n  const reconnect = _reconnect({\n    entity\n  });\n\n  const websocket = _websocket({\n    entity\n  });\n\n  const middleware = _middleware({\n    entity\n  });\n\n  const streamFeatures = _streamFeatures({\n    middleware\n  });\n\n  const iqCaller = _iqCaller({\n    middleware,\n    entity\n  });\n\n  const iqCallee = _iqCallee({\n    middleware,\n    entity\n  });\n\n  const resolve = _resolve({\n    entity\n  }); // Stream features - order matters and define priority\n\n\n  const sasl = _sasl({\n    streamFeatures\n  }, credentials || {\n    username,\n    password\n  });\n\n  const streamManagement = _streamManagement({\n    streamFeatures,\n    entity,\n    middleware\n  });\n\n  const resourceBinding = _resourceBinding({\n    iqCaller,\n    streamFeatures\n  }, resource);\n\n  const sessionEstablishment = _sessionEstablishment({\n    iqCaller,\n    streamFeatures\n  }); // SASL mechanisms - order matters and define priority\n\n\n  const mechanisms = Object.entries({\n    plain,\n    anonymous\n  }).map(([k, v]) => ({\n    [k]: v(sasl)\n  }));\n  return Object.assign(entity, {\n    entity,\n    reconnect,\n    websocket,\n    middleware,\n    streamFeatures,\n    iqCaller,\n    iqCallee,\n    resolve,\n    sasl,\n    resourceBinding,\n    sessionEstablishment,\n    streamManagement,\n    mechanisms\n  });\n}\n\nmodule.exports.xml = xml;\nmodule.exports.jid = jid;\nmodule.exports.client = client;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/client/browser.js"],"names":["xml","jid","Client","require","getDomain","_reconnect","_websocket","_middleware","_streamFeatures","_iqCaller","_iqCallee","_resolve","_sasl","_resourceBinding","_sessionEstablishment","_streamManagement","anonymous","plain","client","options","resource","credentials","username","password","params","domain","service","entity","reconnect","websocket","middleware","streamFeatures","iqCaller","iqCallee","resolve","sasl","streamManagement","resourceBinding","sessionEstablishment","mechanisms","Object","entries","map","k","v","assign","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst {xml, jid, Client} = require('@xmpp/client-core')\nconst getDomain = require('./lib/getDomain')\n\nconst _reconnect = require('@xmpp/reconnect')\nconst _websocket = require('@xmpp/websocket')\nconst _middleware = require('@xmpp/middleware')\nconst _streamFeatures = require('@xmpp/stream-features')\nconst _iqCaller = require('@xmpp/iq/caller')\nconst _iqCallee = require('@xmpp/iq/callee')\nconst _resolve = require('@xmpp/resolve')\n\n// Stream features - order matters and define priority\nconst _sasl = require('@xmpp/sasl')\nconst _resourceBinding = require('@xmpp/resource-binding')\nconst _sessionEstablishment = require('@xmpp/session-establishment')\nconst _streamManagement = require('@xmpp/stream-management')\n\n// SASL mechanisms - order matters and define priority\nconst anonymous = require('@xmpp/sasl-anonymous')\nconst plain = require('@xmpp/sasl-plain')\n\nfunction client(options = {}) {\n  const {resource, credentials, username, password, ...params} = options\n\n  const {domain, service} = params\n  if (!domain && service) {\n    params.domain = getDomain(service)\n  }\n\n  const entity = new Client(params)\n\n  const reconnect = _reconnect({entity})\n  const websocket = _websocket({entity})\n\n  const middleware = _middleware({entity})\n  const streamFeatures = _streamFeatures({middleware})\n  const iqCaller = _iqCaller({middleware, entity})\n  const iqCallee = _iqCallee({middleware, entity})\n  const resolve = _resolve({entity})\n  // Stream features - order matters and define priority\n  const sasl = _sasl({streamFeatures}, credentials || {username, password})\n  const streamManagement = _streamManagement({\n    streamFeatures,\n    entity,\n    middleware,\n  })\n  const resourceBinding = _resourceBinding({iqCaller, streamFeatures}, resource)\n  const sessionEstablishment = _sessionEstablishment({iqCaller, streamFeatures})\n  // SASL mechanisms - order matters and define priority\n  const mechanisms = Object.entries({plain, anonymous}).map(([k, v]) => ({\n    [k]: v(sasl),\n  }))\n\n  return Object.assign(entity, {\n    entity,\n    reconnect,\n    websocket,\n    middleware,\n    streamFeatures,\n    iqCaller,\n    iqCallee,\n    resolve,\n    sasl,\n    resourceBinding,\n    sessionEstablishment,\n    streamManagement,\n    mechanisms,\n  })\n}\n\nmodule.exports.xml = xml\nmodule.exports.jid = jid\nmodule.exports.client = client\n"]},"metadata":{},"sourceType":"script"}