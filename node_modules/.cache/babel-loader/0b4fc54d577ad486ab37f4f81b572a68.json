{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\SelectContactGroup.tsx\";\nimport React from \"react\";\nimport { Input, Label } from \"reactstrap\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport { SearchContact } from \"../helpers/SearchContact\";\nimport sortContactGroup from \"../helpers/SortContactGroup\";\n\nconst SelectContactGroup = ({\n  search,\n  handleCheckContact\n}) => {\n  const {\n    contacts\n  } = useContact();\n  const {\n    activeChat\n  } = useChat();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, sortContactGroup(SearchContact(contacts.filter(contact => {\n    var _activeChat$members;\n\n    (_activeChat$members = activeChat.members) === null || _activeChat$members === void 0 ? void 0 : _activeChat$members.forEach(element => {\n      if (contact.id === element.userId) {\n        return false;\n      }\n    });\n    return true;\n  }), search ? search : \"\")).map((contact, key) => /*#__PURE__*/React.createElement(\"div\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ml-3 pl-1 font-weight-bold text-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }\n  }, contact.group), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list-unstyled contact-list mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, contact.children.map((child, keyChild) => /*#__PURE__*/React.createElement(\"li\", {\n    key: keyChild,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"custom-control custom-checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"checkbox\",\n    className: \"custom-control-input\",\n    onChange: e => {\n      handleCheckContact(e.target.checked, child);\n    },\n    id: \"memberCheck\" + child.id,\n    value: child.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    className: \"custom-control-label\",\n    htmlFor: \"memberCheck\" + child.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }\n  }, child.name))))))));\n};\n\nexport default SelectContactGroup;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/SelectContactGroup.tsx"],"names":["React","Input","Label","useChat","useContact","SearchContact","sortContactGroup","SelectContactGroup","search","handleCheckContact","contacts","activeChat","filter","contact","members","forEach","element","id","userId","map","key","group","children","child","keyChild","e","target","checked","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,YAA7B;AAEA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;;AAOA,MAAMC,kBAAoC,GAAG,CAAC;AAC5CC,EAAAA,MAD4C;AAE5CC,EAAAA;AAF4C,CAAD,KAGvC;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAeN,UAAU,EAA/B;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAiBR,OAAO,EAA9B;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,gBAAgB,CACfD,aAAa,CACXK,QAAQ,CAACE,MAAT,CAAiBC,OAAD,IAAa;AAAA;;AAC3B,2BAAAF,UAAU,CAACG,OAAX,4EAAoBC,OAApB,CAA6BC,OAAD,IAAa;AACvC,UAAIH,OAAO,CAACI,EAAR,KAAeD,OAAO,CAACE,MAA3B,EAAmC;AACjC,eAAO,KAAP;AACD;AACF,KAJD;AAKA,WAAO,IAAP;AACD,GAPD,CADW,EASXV,MAAM,GAAGA,MAAH,GAAY,EATP,CADE,CAAhB,CAYCW,GAZD,CAYK,CAACN,OAAD,EAAUO,GAAV,kBACJ;AAAK,IAAA,GAAG,EAAEA,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,yCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,OAAO,CAACQ,KADX,CADF,eAKE;AAAI,IAAA,SAAS,EAAC,iCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,OAAO,CAACS,QAAR,CAAiBH,GAAjB,CAAqB,CAACI,KAAD,EAAQC,QAAR,kBACpB;AAAI,IAAA,GAAG,EAAEA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,SAAS,EAAC,sBAFZ;AAGE,IAAA,QAAQ,EAAGC,CAAD,IAAO;AACfhB,MAAAA,kBAAkB,CAACgB,CAAC,CAACC,MAAF,CAASC,OAAV,EAAmBJ,KAAnB,CAAlB;AACD,KALH;AAME,IAAA,EAAE,EAAE,gBAAgBA,KAAK,CAACN,EAN5B;AAOE,IAAA,KAAK,EAAEM,KAAK,CAACK,IAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAUE,oBAAC,KAAD;AACE,IAAA,SAAS,EAAC,sBADZ;AAEE,IAAA,OAAO,EAAE,gBAAgBL,KAAK,CAACN,EAFjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGM,KAAK,CAACK,IAJT,CAVF,CADF,CADD,CADH,CALF,CAbD,CADH,CADF;AA+CD,CAtDD;;AAwDA,eAAerB,kBAAf","sourcesContent":["import React from \"react\";\r\nimport { Input, Label } from \"reactstrap\";\r\nimport IContact from \"../alias/IContact\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport { SearchContact } from \"../helpers/SearchContact\";\r\nimport sortContactGroup from \"../helpers/SortContactGroup\";\r\n\r\ninterface IProps {\r\n  search?: string;\r\n  handleCheckContact(selected: boolean, contact: IContact): void;\r\n}\r\n\r\nconst SelectContactGroup: React.FC<IProps> = ({\r\n  search,\r\n  handleCheckContact,\r\n}) => {\r\n  const { contacts } = useContact();\r\n  const { activeChat } = useChat();\r\n\r\n  return (\r\n    <div className=\"mt-2\">\r\n      {sortContactGroup(\r\n        SearchContact(\r\n          contacts.filter((contact) => {\r\n            activeChat.members?.forEach((element) => {\r\n              if (contact.id === element.userId) {\r\n                return false;\r\n              }\r\n            });\r\n            return true;\r\n          }),\r\n          search ? search : \"\"\r\n        )\r\n      ).map((contact, key) => (\r\n        <div key={key}>\r\n          <div className=\"ml-3 pl-1 font-weight-bold text-primary\">\r\n            {contact.group}\r\n          </div>\r\n\r\n          <ul className=\"list-unstyled contact-list mb-2\">\r\n            {contact.children.map((child, keyChild) => (\r\n              <li key={keyChild}>\r\n                <div className=\"custom-control custom-checkbox\">\r\n                  <Input\r\n                    type=\"checkbox\"\r\n                    className=\"custom-control-input\"\r\n                    onChange={(e) => {\r\n                      handleCheckContact(e.target.checked, child);\r\n                    }}\r\n                    id={\"memberCheck\" + child.id}\r\n                    value={child.name}\r\n                  />\r\n                  <Label\r\n                    className=\"custom-control-label\"\r\n                    htmlFor={\"memberCheck\" + child.id}\r\n                  >\r\n                    {child.name}\r\n                  </Label>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectContactGroup;\r\n"]},"metadata":{},"sourceType":"module"}