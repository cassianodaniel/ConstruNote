{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport { useModal } from \"../contexts/ModalContext\";\nlet squadService;\nlet typingTimeout = new Map();\n\nconst SquadCommunicator = ({\n  children\n}) => {\n  var _squadService17;\n\n  const {\n    chats,\n    activeChat,\n    setActiveChat,\n    setChats,\n    forwardMessageList,\n    setForwardMessageList\n  } = useChat();\n  const {\n    setGroups,\n    groups\n  } = useGroup();\n  const {\n    setContacts,\n    newFavorite,\n    setNewFavorite,\n    contacts\n  } = useContact();\n  const {\n    user,\n    setUser,\n    changedUserData,\n    changedUserPassword,\n    setChangedUserPassword\n  } = useAuth();\n  const {\n    showModalForwardMessageTo,\n    setShowModalForwardMessageTo\n  } = useModal();\n\n  const init = () => {\n    var _squadService;\n\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"b4c1fa651399a3eb63aee51777d3d508\",\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      email: \"romero2@digivox.com.br\",\n      user_name: \"ZZ Romero 2\",\n      expires_in: 2592000,\n      baseUrl: \"https://app.citrussquad.com/api/v1/\"\n    }));\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\n    (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.user.get(user => {\n      setUser(user);\n    });\n  };\n\n  const clearSendFile = (chatId, messageId) => {\n    setChats(chats.map(chat => {\n      if (chat.id === chatId) {\n        chat.messages = chat.messages.map(message => {\n          if (message.id === messageId) {\n            message.deliverStatus = DeliverStatus.QUEUED;\n            message.sendFile = undefined;\n          }\n\n          return message;\n        });\n      }\n\n      return chat;\n    }));\n  };\n\n  const onChatsChange = () => {// chats.forEach((chat) => {\n    // });\n  };\n\n  const onActiveChatChange = () => {\n    checkSendMessage(activeChat);\n    checkAttachedFiles(activeChat); // checkTyping(activeChat)\n  }; // const checkTyping = (chat: IChat) => {\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\n  //     if (oldTimeoutData)\n  //       clearTimeout(oldTimeoutData.timeout)\n  //     else\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\n  //     const timeoutData = {\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\n  //       msgStr: `${chat.inputMessage}`\n  //     }\n  //     typingTimeout.set(chat.jid, timeoutData)\n  //   }\n  // }\n\n\n  const checkAttachedFiles = cht => {\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\n      var _squadService2;\n\n      (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.attachments.list(cht, attachments => {\n        if (attachments.length > 0) setActiveChat({ ...cht,\n          attachedFileList: attachments\n        });else setActiveChat({ ...cht,\n          attachedFileList: null\n        });\n      });\n    }\n  };\n\n  const checkSearchMessages = () => {\n    if (activeChat.messageLoaded) {\n      var _squadService3;\n\n      (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.messages.list(activeChat, messages => {\n        if (messages.length) {\n          setChats(chats.map(cht => {\n            if (cht.id === activeChat.id) {\n              messages.forEach(msg => {\n                if (!activeChat.messages.find(m => m.id === msg.id)) cht.messages.unshift(msg);\n              });\n              cht.messageLoaded = false;\n              setActiveChat(cht);\n            }\n\n            return cht;\n          }));\n        } else {\n          const chat = { ...activeChat,\n            messageLoaded: false\n          };\n          setActiveChat(chat);\n        }\n      });\n    }\n  };\n\n  const checkSendMessage = chat => {\n    chat.messages.forEach(msg => {\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\n        if (msg.sendFile) {\n          var _squadService4, _squadService4$chat;\n\n          const files = [msg.sendFile];\n          clearSendFile(chat.id, msg.id);\n          (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : (_squadService4$chat = _squadService4.chat) === null || _squadService4$chat === void 0 ? void 0 : _squadService4$chat.sendFiles(chat, files, data => {\n            updateMessageFiles(data, chat, msg);\n          });\n        } else {\n          if (!msg.isForwardMessage) {\n            console.log(msg);\n            sendMessage(chat, msg.message, msgId => updateMessage(msgId, chat, msg));\n          }\n        }\n      }\n    });\n  };\n\n  const updateMessageFiles = (data, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        const booleans = getUrlBooleans(data.url);\n        message.id = data.msgId;\n        message.fileUrl = data.url;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n        message.message = getFileName(data.url);\n        message.isFileMessage = booleans.isFileMessage;\n        message.isImageMessage = booleans.isImageMessage;\n        message.isVideoMessage = booleans.isVideoMessage;\n        message.isAudioMessage = booleans.isAudioMessage;\n      }\n\n      return message;\n    });\n    setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      setChats(chats.map(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n        }\n\n        return cht;\n      }));\n    }\n  };\n\n  const updateMessage = (msgId, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        message.id = msgId;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n\n        if (isUrl(message.message)) {\n          const booleans = getUrlBooleans(message.message);\n          message.isFileMessage = booleans.isFileMessage;\n          message.isImageMessage = booleans.isImageMessage;\n          message.isAudioMessage = booleans.isAudioMessage;\n          message.isVideoMessage = booleans.isVideoMessage;\n          message.fileUrl = message.message;\n        }\n      }\n\n      return message;\n    });\n    if (activeChat.jid === newChat.jid) setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      setChats(chats.map(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n        }\n\n        return cht;\n      }));\n    }\n  };\n\n  const forwardMessage = () => {\n    if (forwardMessageList && showModalForwardMessageTo) {\n      const ctcs = [...forwardMessageList];\n      const message = { ...showModalForwardMessageTo\n      };\n      setForwardMessageList(undefined);\n      setShowModalForwardMessageTo(undefined);\n      const chatsFinded = [];\n      const oldChats = [...chats.map(chat => {\n        return { ...chat\n        };\n      })];\n      ctcs === null || ctcs === void 0 ? void 0 : ctcs.forEach((ctc, i) => {\n        const cht = oldChats.find(cht => cht.jid === ctc.jid);\n\n        if (cht) {\n          var _squadService5, _squadService5$chat;\n\n          const msg = { ...message,\n            id: `${cht.messages.length + 1}`,\n            userName: user.name,\n            fromUser: user.id,\n            toUser: ctc.jid.split(\"@\")[0],\n            message: message.fileUrl || message.message,\n            deliverStatus: DeliverStatus.QUEUED,\n            isForwardMessage: true\n          };\n          (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : (_squadService5$chat = _squadService5.chat) === null || _squadService5$chat === void 0 ? void 0 : _squadService5$chat.forwardMessage(cht, msg, msgId => {\n            msg.id = msgId;\n            cht.messages.push(msg);\n            chatsFinded.push(cht);\n          });\n        }\n      });\n      const newChats = oldChats.map(chat => chatsFinded.find(cht => cht.id === chat.id) || chat);\n      const ctcsNotInChat = ctcs.filter(ctc => !newChats.find(cht => ctc.jid === cht.jid));\n      ctcsNotInChat.forEach((ctc, i) => {\n        var _squadService6, _squadService6$chat;\n\n        const chat = {\n          id: ctc.jid.split(\"@\")[0],\n          jid: ctc.jid,\n          name: ctc.name,\n          profilePicture: ctc.profilePicture,\n          status: ctc.status || undefined,\n          unRead: 0,\n          chatType: ctc.jid.includes(\"@conference.\") ? ChatType.GROUP : ChatType.USER,\n          inputMessage: \"\",\n          messageLoaded: false,\n          isTyping: false,\n          messages: [],\n          email: ctc.email || undefined,\n          favorite: ctc.favorite\n        };\n        const newMessage = { ...message,\n          id: `${1}`,\n          userName: user.name,\n          fromUser: user.id,\n          toUser: ctc.jid.split(\"@\")[0],\n          deliverStatus: DeliverStatus.QUEUED,\n          isForwardMessage: true\n        };\n        (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : (_squadService6$chat = _squadService6.chat) === null || _squadService6$chat === void 0 ? void 0 : _squadService6$chat.forwardMessage(chat, newMessage, msgId => {\n          newMessage.id = msgId;\n          chat.messages.push(newMessage);\n          newChats.unshift(chat);\n        });\n      });\n      setChats(newChats);\n    }\n  };\n\n  const onChangeStatus = () => {\n    var _squadService7, _squadService7$chat;\n\n    if (((_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : (_squadService7$chat = _squadService7.chat) === null || _squadService7$chat === void 0 ? void 0 : _squadService7$chat.chat.client.status) === \"online\") {\n      var _squadService8, _squadService8$chat;\n\n      (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : (_squadService8$chat = _squadService8.chat) === null || _squadService8$chat === void 0 ? void 0 : _squadService8$chat.changeStatus(user.status);\n    }\n  };\n\n  useEffect(onChatsChange, [chats]);\n  useEffect(onNewFavorite, [newFavorite]);\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\n  useEffect(onActiveChatChange, [activeChat]);\n  useEffect(onUserDataChange, [changedUserData]);\n  useEffect(onUserPasswordChange, [changedUserPassword]);\n  useEffect(onChangeStatus, [user.status]);\n  useEffect(forwardMessage, [forwardMessageList]);\n\n  function onUserPasswordChange() {\n    if (changedUserPassword) {\n      var _squadService9;\n\n      (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : _squadService9.user.changePassword(changedUserPassword, password => {\n        if (password) {\n          setChangedUserPassword({\n            oldPassword: \"\",\n            newPassword: \"\"\n          });\n        }\n      });\n    }\n  }\n\n  function onUserDataChange() {\n    if (changedUserData) {\n      var _squadService10;\n\n      (_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : _squadService10.user.changeUserData(changedUserData, chgd => {\n        if (chgd) {\n          setUser({ ...user,\n            email: changedUserData.email,\n            name: changedUserData.name\n          });\n        }\n      });\n    }\n  }\n\n  function onNewFavorite() {\n    if (newFavorite) {\n      var _squadService11;\n\n      const newFavoriteLoad = { ...newFavorite\n      };\n      (_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : _squadService11.contacts.setFavorite(newFavorite, favorite => {\n        if (favorite) {\n          setChats(chats.map(cht => {\n            if (cht.jid === newFavoriteLoad.jid) {\n              cht.favorite = !newFavoriteLoad.favorite;\n            }\n\n            return cht;\n          }));\n          setGroups(groups.map(grp => {\n            if (grp.jid === newFavoriteLoad.jid) {\n              return { ...grp,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return grp;\n          }));\n          setContacts(contacts.map(ctt => {\n            if (ctt.jid === newFavoriteLoad.jid) {\n              return { ...ctt,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return ctt;\n          }));\n        }\n      });\n      setNewFavorite(undefined);\n    }\n  }\n\n  function chatCommunicatorSubscribe(event, data) {\n    var _squadService12;\n\n    switch (event) {\n      case Events.ONLINE:\n        (_squadService12 = squadService) === null || _squadService12 === void 0 ? void 0 : _squadService12.chats.list(receivedChats => {\n          var _squadService13, _squadService15;\n\n          const chats = [];\n          receivedChats.forEach(cht => {\n            if (!chats.find(chat => chat.id === cht.id)) {\n              chats.push(cht);\n            }\n          });\n          setChats(chats); //populating groups\n\n          (_squadService13 = squadService) === null || _squadService13 === void 0 ? void 0 : _squadService13.groups.list(groups => {\n            var _squadService14, _squadService14$chat;\n\n            setGroups(groups); //Joining Groups Rooms in XMPP\n\n            (_squadService14 = squadService) === null || _squadService14 === void 0 ? void 0 : (_squadService14$chat = _squadService14.chat) === null || _squadService14$chat === void 0 ? void 0 : _squadService14$chat.joinGroups(groups.map(group => group.jid));\n          }); //populating contacts\n\n          (_squadService15 = squadService) === null || _squadService15 === void 0 ? void 0 : _squadService15.contacts.list(contacts => setContacts(contacts)); //populating chat's with messages\n          // receivedChats.forEach((chat) => {\n          //   squadService?.messages.list(chat, (messages) => {\n          //     const chatWithMessages = { ...chat };\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\n          //       messages\n          //     );\n          //     setChats([\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\n          //       chatWithMessages,\n          //     ]);\n          //   });\n          // });\n        });\n        break;\n\n      case Events.MESSAGE:\n        if (data.fromUser === user.jid) break;\n        let find = false;\n        let newChats = chats.map(chat => {\n          if (data.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || data.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\n            find = true;\n            if (!chat.messages.filter(msg => msg.id === data.id)[0]) chat.messages.push(data);\n\n            if (chat.id === activeChat.id) {\n              let chatTemporary = { ...chat\n              };\n              setActiveChat(chatTemporary);\n            } else {\n              chat.unRead++;\n            }\n          }\n\n          return chat;\n        });\n\n        if (!find) {\n          var _squadService16;\n\n          let newChat = {};\n          (_squadService16 = squadService) === null || _squadService16 === void 0 ? void 0 : _squadService16.contacts.list(listContacts => {\n            listContacts.forEach(c => {\n              if (c.jid === data.fromUser) {\n                newChat = {\n                  id: c.id,\n                  jid: c.jid,\n                  name: c.name,\n                  profilePicture: c.profilePicture,\n                  status: c.status,\n                  unRead: 1,\n                  chatType: ChatType.USER,\n                  inputMessage: \"\",\n                  isTyping: false,\n                  messages: [],\n                  favorite: c.favorite\n                };\n                newChat.messages.push(data);\n                newChats.unshift(newChat);\n                setChats(newChats);\n              }\n            });\n          });\n        } else {\n          setChats(newChats);\n        }\n\n        break;\n\n      case Events.RECEIVED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.deliverStatus = DeliverStatus.DELIVERED;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.DISPLAYED:\n        setChats(chats.map(chat => {\n          chat.messages = chat.messages.map(message => {\n            if (message.id === data.id) {\n              message.readStatus = ReadStatus.READ;\n            }\n\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.COMPOSING:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = true;\n            if (activeChat.jid === data) setActiveChat(chat);\n            deleteTypingTimeout(chat.jid);\n            setTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.ACTIVE:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = false;\n\n            if (activeChat.jid === data) {\n              let chatUpdate = { ...chat\n              };\n              setActiveChat(chatUpdate);\n            }\n\n            deleteTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.PRESENCE:\n        setChats(chats.map(cht => {\n          if (cht.jid === data.from.split(\"/\")[0] && !cht.jid.includes(\"@conference.\")) {\n            cht.status = data.status;\n          }\n\n          return cht;\n        }));\n        setContacts(contacts.map(ctc => {\n          if (ctc.jid === data.from.split(\"/\")[0] && !ctc.jid.includes(\"@conference.\")) {\n            ctc.status = data.status;\n          }\n\n          return ctc;\n        }));\n        break;\n    }\n  }\n\n  const deleteTypingTimeout = jid => {\n    var _typingTimeout$get;\n\n    clearTimeout(((_typingTimeout$get = typingTimeout.get(jid)) === null || _typingTimeout$get === void 0 ? void 0 : _typingTimeout$get.timeout) || setTimeout(() => {}, 1));\n    typingTimeout.delete(jid);\n  };\n\n  const setTypingTimeout = jid => {\n    const timeoutData = {\n      msgStr: \"\",\n      timeout: setTimeout(() => {\n        setChats(chats.map(cht => {\n          if (cht.jid === jid) {\n            cht.isTyping = false;\n            if (activeChat.jid === jid) setActiveChat(cht);\n          }\n\n          return cht;\n        }));\n      }, 20000)\n    };\n    typingTimeout.set(jid, timeoutData);\n  };\n\n  (_squadService17 = squadService) === null || _squadService17 === void 0 ? void 0 : _squadService17.updateSubscribeFunction(chatCommunicatorSubscribe); // Comentado para evitar warnings no console enquanto não é usado\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\n  //     squadService?.groups.list((groups) => {\n  //       setGroups(groups);\n  //       callback(true);\n  //     });\n  //   });\n  // }\n\n  function sendMessage(chat, message, callback) {\n    var _squadService18, _squadService18$chat;\n\n    (_squadService18 = squadService) === null || _squadService18 === void 0 ? void 0 : (_squadService18$chat = _squadService18.chat) === null || _squadService18$chat === void 0 ? void 0 : _squadService18$chat.chat.sendMessage(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message, callback);\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","DeliverStatus","XMPPChatType","getFileName","getUrlBooleans","isUrl","ReadStatus","useGroup","useContact","useModal","squadService","typingTimeout","Map","children","chats","activeChat","setActiveChat","setChats","forwardMessageList","setForwardMessageList","setGroups","groups","setContacts","newFavorite","setNewFavorite","contacts","user","setUser","changedUserData","changedUserPassword","setChangedUserPassword","showModalForwardMessageTo","setShowModalForwardMessageTo","init","localStorage","setItem","JSON","stringify","access_token","user_id","email","user_name","expires_in","baseUrl","getInstance","chatCommunicatorSubscribe","get","clearSendFile","chatId","messageId","map","chat","id","messages","message","deliverStatus","QUEUED","sendFile","undefined","onChatsChange","onActiveChatChange","checkSendMessage","checkAttachedFiles","cht","attachedFileList","attachments","list","length","checkSearchMessages","messageLoaded","forEach","msg","find","m","unshift","SENDING","files","sendFiles","data","updateMessageFiles","isForwardMessage","console","log","sendMessage","msgId","updateMessage","newChat","booleans","url","fileUrl","time","Date","toISOString","isFileMessage","isImageMessage","isVideoMessage","isAudioMessage","filter","newChats","jid","forwardMessage","ctcs","chatsFinded","oldChats","ctc","i","userName","name","fromUser","toUser","split","push","ctcsNotInChat","profilePicture","status","unRead","chatType","includes","GROUP","USER","inputMessage","isTyping","favorite","newMessage","onChangeStatus","client","changeStatus","onNewFavorite","onUserDataChange","onUserPasswordChange","changePassword","password","oldPassword","newPassword","changeUserData","chgd","newFavoriteLoad","setFavorite","grp","ctt","event","ONLINE","receivedChats","joinGroups","group","MESSAGE","chatTemporary","listContacts","c","RECEIVED","DELIVERED","DISPLAYED","readStatus","READ","COMPOSING","deleteTypingTimeout","setTypingTimeout","ACTIVE","chatUpdate","PRESENCE","from","clearTimeout","timeout","setTimeout","delete","timeoutData","msgStr","set","updateSubscribeFunction","callback","GROUPCHAT","CHAT"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\n\r\nimport { Events, SendImageCallbackReturn } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\r\nimport { SendMessageCallback } from \"./types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport { useModal } from \"../contexts/ModalContext\";\r\nimport IContact from \"../alias/IContact\";\r\nimport IGroup from \"../alias/IGroup\";\r\n// import IContact from \"../alias/IContact\";\r\n// Comentado para Evitar Warnings no console\r\n// interface CreateGroupCallback {\r\n//   (groupCreated: boolean): void;\r\n// }\r\ninterface TypingTimeoutData {\r\n  timeout: NodeJS.Timeout;\r\n  msgStr: string;\r\n}\r\nlet squadService: SquadService | undefined;\r\nlet typingTimeout: Map<string, TypingTimeoutData> = new Map<\r\n  string,\r\n  TypingTimeoutData\r\n>();\r\n\r\nconst SquadCommunicator: React.FC = ({ children }) => {\r\n  const {\r\n    chats,\r\n    activeChat,\r\n    setActiveChat,\r\n    setChats,\r\n    forwardMessageList,\r\n    setForwardMessageList,\r\n  } = useChat();\r\n  const { setGroups, groups } = useGroup();\r\n  const { setContacts, newFavorite, setNewFavorite, contacts } = useContact();\r\n  const {\r\n    user,\r\n    setUser,\r\n    changedUserData,\r\n    changedUserPassword,\r\n    setChangedUserPassword,\r\n  } = useAuth();\r\n  const {\r\n    showModalForwardMessageTo,\r\n    setShowModalForwardMessageTo,\r\n  } = useModal();\r\n\r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"b4c1fa651399a3eb63aee51777d3d508\",\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        email: \"romero2@digivox.com.br\",\r\n        user_name: \"ZZ Romero 2\",\r\n        expires_in: 2592000,\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n      })\r\n    );\r\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\r\n    squadService?.user.get((user: IUser) => {\r\n      setUser(user);\r\n    });\r\n  };\r\n\r\n  const clearSendFile = (chatId: string, messageId: string) => {\r\n    setChats(\r\n      chats.map((chat) => {\r\n        if (chat.id === chatId) {\r\n          chat.messages = chat.messages.map((message) => {\r\n            if (message.id === messageId) {\r\n              message.deliverStatus = DeliverStatus.QUEUED;\r\n              message.sendFile = undefined;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return chat;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onChatsChange = () => {\r\n    // chats.forEach((chat) => {\r\n    // });\r\n  };\r\n  const onActiveChatChange = () => {\r\n    checkSendMessage(activeChat);\r\n    checkAttachedFiles(activeChat);\r\n    // checkTyping(activeChat)\r\n  };\r\n  // const checkTyping = (chat: IChat) => {\r\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\r\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\r\n  //     if (oldTimeoutData)\r\n  //       clearTimeout(oldTimeoutData.timeout)\r\n  //     else\r\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\r\n  //     const timeoutData = {\r\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\r\n  //       msgStr: `${chat.inputMessage}`\r\n  //     }\r\n  //     typingTimeout.set(chat.jid, timeoutData)\r\n  //   }\r\n  // }\r\n  const checkAttachedFiles = (cht: IChat) => {\r\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\r\n      squadService?.attachments.list(cht, (attachments) => {\r\n        if (attachments.length > 0)\r\n          setActiveChat({ ...cht, attachedFileList: attachments });\r\n        else setActiveChat({ ...cht, attachedFileList: null });\r\n      });\r\n    }\r\n  };\r\n  const checkSearchMessages = () => {\r\n    if (activeChat.messageLoaded) {\r\n      squadService?.messages.list(activeChat, (messages) => {\r\n        if (messages.length) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.id === activeChat.id) {\r\n                messages.forEach((msg) => {\r\n                  if (!activeChat.messages.find((m) => m.id === msg.id))\r\n                    cht.messages.unshift(msg);\r\n                });\r\n                cht.messageLoaded = false;\r\n                setActiveChat(cht);\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n        } else {\r\n          const chat = { ...activeChat, messageLoaded: false };\r\n          setActiveChat(chat);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkSendMessage = (chat: IChat) => {\r\n    chat.messages.forEach((msg) => {\r\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\r\n        if (msg.sendFile) {\r\n          const files = [msg.sendFile];\r\n          clearSendFile(chat.id, msg.id);\r\n          squadService?.chat?.sendFiles(\r\n            chat,\r\n            files,\r\n            (data: SendImageCallbackReturn) => {\r\n              updateMessageFiles(data, chat, msg);\r\n            }\r\n          );\r\n        } else {\r\n          if (!msg.isForwardMessage) {\r\n            console.log(msg);\r\n            sendMessage(chat, msg.message, (msgId) =>\r\n              updateMessage(msgId, chat, msg)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const updateMessageFiles = (\r\n    data: SendImageCallbackReturn,\r\n    chat: IChat,\r\n    msg: IMessage\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        const booleans = getUrlBooleans(data.url);\r\n        message.id = data.msgId;\r\n        message.fileUrl = data.url;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        message.message = getFileName(data.url);\r\n        message.isFileMessage = booleans.isFileMessage;\r\n        message.isImageMessage = booleans.isImageMessage;\r\n        message.isVideoMessage = booleans.isVideoMessage;\r\n        message.isAudioMessage = booleans.isAudioMessage;\r\n      }\r\n      return message;\r\n    });\r\n    setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      setChats(\r\n        chats.map((cht) => {\r\n          if (cht.id === chat.id) {\r\n            cht.messages = newChat.messages;\r\n          }\r\n          return cht;\r\n        })\r\n      );\r\n    }\r\n  };\r\n  const updateMessage = (msgId: string, chat: IChat, msg: IMessage) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        message.id = msgId;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        if (isUrl(message.message)) {\r\n          const booleans = getUrlBooleans(message.message);\r\n          message.isFileMessage = booleans.isFileMessage;\r\n          message.isImageMessage = booleans.isImageMessage;\r\n          message.isAudioMessage = booleans.isAudioMessage;\r\n          message.isVideoMessage = booleans.isVideoMessage;\r\n          message.fileUrl = message.message;\r\n        }\r\n      }\r\n      return message;\r\n    });\r\n    if (activeChat.jid === newChat.jid) setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      setChats(\r\n        chats.map((cht) => {\r\n          if (cht.id === chat.id) {\r\n            cht.messages = newChat.messages;\r\n          }\r\n          return cht;\r\n        })\r\n      );\r\n    }\r\n  };\r\n  const forwardMessage = () => {\r\n    if (forwardMessageList && showModalForwardMessageTo) {\r\n      const ctcs = [...forwardMessageList];\r\n      const message = { ...showModalForwardMessageTo };\r\n      setForwardMessageList(undefined);\r\n      setShowModalForwardMessageTo(undefined);\r\n      const chatsFinded: IChat[] = [];\r\n      const oldChats = [\r\n        ...chats.map((chat) => {\r\n          return { ...chat };\r\n        }),\r\n      ];\r\n      ctcs?.forEach((ctc, i) => {\r\n        const cht = oldChats.find((cht) => cht.jid === ctc.jid);\r\n        if (cht) {\r\n          const msg = {\r\n            ...message,\r\n            id: `${cht.messages.length + 1}`,\r\n            userName: user.name,\r\n            fromUser: user.id,\r\n            toUser: ctc.jid.split(\"@\")[0],\r\n            message: message.fileUrl || message.message,\r\n            deliverStatus: DeliverStatus.QUEUED,\r\n            isForwardMessage: true,\r\n          };\r\n          squadService?.chat?.forwardMessage(cht, msg, (msgId) => {\r\n            msg.id = msgId;\r\n            cht.messages.push(msg);\r\n            chatsFinded.push(cht);\r\n          });\r\n        }\r\n      });\r\n      const newChats = oldChats.map(\r\n        (chat) => chatsFinded.find((cht) => cht.id === chat.id) || chat\r\n      );\r\n      const ctcsNotInChat: (IContact | IGroup)[] = ctcs.filter(\r\n        (ctc) => !newChats.find((cht) => ctc.jid === cht.jid)\r\n      );\r\n      ctcsNotInChat.forEach((ctc, i) => {\r\n        const chat = {\r\n          id: ctc.jid.split(\"@\")[0],\r\n          jid: ctc.jid,\r\n          name: ctc.name,\r\n          profilePicture: ctc.profilePicture,\r\n          status: (ctc as IContact).status || undefined,\r\n          unRead: 0,\r\n          chatType: ctc.jid.includes(\"@conference.\")\r\n            ? ChatType.GROUP\r\n            : ChatType.USER,\r\n          inputMessage: \"\",\r\n          messageLoaded: false,\r\n          isTyping: false,\r\n          messages: [] as IMessage[],\r\n          email: (ctc as IContact).email || undefined,\r\n          favorite: ctc.favorite,\r\n        };\r\n        const newMessage: IMessage = {\r\n          ...message,\r\n          id: `${1}`,\r\n          userName: user.name,\r\n          fromUser: user.id,\r\n          toUser: ctc.jid.split(\"@\")[0],\r\n          deliverStatus: DeliverStatus.QUEUED,\r\n          isForwardMessage: true,\r\n        };\r\n        squadService?.chat?.forwardMessage(chat, newMessage, (msgId) => {\r\n          newMessage.id = msgId;\r\n          chat.messages.push(newMessage);\r\n          newChats.unshift(chat);\r\n        });\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const onChangeStatus = () => {\r\n    if (squadService?.chat?.chat.client.status === \"online\") {\r\n      squadService?.chat?.changeStatus(user.status);\r\n    }\r\n  };\r\n  useEffect(onChatsChange, [chats]);\r\n  useEffect(onNewFavorite, [newFavorite]);\r\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\r\n  useEffect(onActiveChatChange, [activeChat]);\r\n  useEffect(onUserDataChange, [changedUserData]);\r\n  useEffect(onUserPasswordChange, [changedUserPassword]);\r\n  useEffect(onChangeStatus, [user.status]);\r\n  useEffect(forwardMessage, [forwardMessageList]);\r\n\r\n  function onUserPasswordChange() {\r\n    if (changedUserPassword) {\r\n      squadService?.user.changePassword(changedUserPassword, (password) => {\r\n        if (password) {\r\n          setChangedUserPassword({ oldPassword: \"\", newPassword: \"\" });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onUserDataChange() {\r\n    if (changedUserData) {\r\n      squadService?.user.changeUserData(changedUserData, (chgd) => {\r\n        if (chgd) {\r\n          setUser({\r\n            ...user,\r\n            email: changedUserData.email,\r\n            name: changedUserData.name,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onNewFavorite() {\r\n    if (newFavorite) {\r\n      const newFavoriteLoad = { ...newFavorite };\r\n      squadService?.contacts.setFavorite(newFavorite, (favorite) => {\r\n        if (favorite) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.jid === newFavoriteLoad.jid) {\r\n                cht.favorite = !newFavoriteLoad.favorite;\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n          setGroups(\r\n            groups.map((grp) => {\r\n              if (grp.jid === newFavoriteLoad.jid) {\r\n                return {\r\n                  ...grp,\r\n                  favorite: !newFavoriteLoad.favorite,\r\n                };\r\n              }\r\n              return grp;\r\n            })\r\n          );\r\n          setContacts(\r\n            contacts.map((ctt) => {\r\n              if (ctt.jid === newFavoriteLoad.jid) {\r\n                return {\r\n                  ...ctt,\r\n                  favorite: !newFavoriteLoad.favorite,\r\n                };\r\n              }\r\n              return ctt;\r\n            })\r\n          );\r\n        }\r\n      });\r\n      setNewFavorite(undefined);\r\n    }\r\n  }\r\n\r\n  function chatCommunicatorSubscribe(event: string, data: any) {\r\n    switch (event) {\r\n      case Events.ONLINE:\r\n        squadService?.chats.list((receivedChats) => {\r\n          const chats: IChat[] = [];\r\n          receivedChats.forEach((cht) => {\r\n            if (!chats.find((chat) => chat.id === cht.id)) {\r\n              chats.push(cht);\r\n            }\r\n          });\r\n          setChats(chats);\r\n          //populating groups\r\n          squadService?.groups.list((groups) => {\r\n            setGroups(groups);\r\n            //Joining Groups Rooms in XMPP\r\n            squadService?.chat?.joinGroups(groups.map((group) => group.jid));\r\n          });\r\n          //populating contacts\r\n          squadService?.contacts.list((contacts) => setContacts(contacts));\r\n          //populating chat's with messages\r\n\r\n          // receivedChats.forEach((chat) => {\r\n          //   squadService?.messages.list(chat, (messages) => {\r\n          //     const chatWithMessages = { ...chat };\r\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\r\n          //       messages\r\n          //     );\r\n          //     setChats([\r\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n          //       chatWithMessages,\r\n          //     ]);\r\n          //   });\r\n          // });\r\n        });\r\n        break;\r\n      case Events.MESSAGE:\r\n        if (data.fromUser === user.jid) break;\r\n        let find = false;\r\n\r\n        let newChats = chats.map((chat) => {\r\n          if (data.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || data.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\r\n            find = true;\r\n            if (!chat.messages.filter((msg) => msg.id === data.id)[0])\r\n              chat.messages.push(data);\r\n            if (chat.id === activeChat.id) {\r\n              let chatTemporary = { ...chat };\r\n              setActiveChat(chatTemporary);\r\n            } else {\r\n              chat.unRead++;\r\n            }\r\n          }\r\n          return chat;\r\n        });\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.contacts.list((listContacts) => {\r\n            listContacts.forEach((c) => {\r\n              if (c.jid === data.fromUser) {\r\n                newChat = {\r\n                  id: c.id,\r\n                  jid: c.jid,\r\n                  name: c.name,\r\n                  profilePicture: c.profilePicture,\r\n                  status: c.status,\r\n                  unRead: 1,\r\n                  chatType: ChatType.USER,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  messages: [],\r\n                  favorite: c.favorite,\r\n                };\r\n                newChat.messages.push(data);\r\n                newChats.unshift(newChat);\r\n                setChats(newChats);\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          setChats(newChats);\r\n        }\r\n\r\n        break;\r\n      case Events.RECEIVED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.messages.find((msg) => msg.id === data.id))\r\n              chat.messages = chat.messages.map((message) => {\r\n                message.deliverStatus = DeliverStatus.DELIVERED;\r\n                return message;\r\n              });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.DISPLAYED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            chat.messages = chat.messages.map((message) => {\r\n              if (message.id === data.id) {\r\n                message.readStatus = ReadStatus.READ;\r\n              }\r\n              return message;\r\n            });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.COMPOSING:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = true;\r\n              if (activeChat.jid === data) setActiveChat(chat);\r\n              deleteTypingTimeout(chat.jid);\r\n              setTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.ACTIVE:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = false;\r\n              if (activeChat.jid === data) {\r\n                let chatUpdate = { ...chat };\r\n                setActiveChat(chatUpdate);\r\n              }\r\n              deleteTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.PRESENCE:\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (\r\n              cht.jid === data.from.split(\"/\")[0] &&\r\n              !cht.jid.includes(\"@conference.\")\r\n            ) {\r\n              cht.status = data.status;\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n        setContacts(\r\n          contacts.map((ctc) => {\r\n            if (\r\n              ctc.jid === data.from.split(\"/\")[0] &&\r\n              !ctc.jid.includes(\"@conference.\")\r\n            ) {\r\n              ctc.status = data.status;\r\n            }\r\n            return ctc;\r\n          })\r\n        );\r\n        break;\r\n    }\r\n  }\r\n  const deleteTypingTimeout = (jid: string) => {\r\n    clearTimeout(typingTimeout.get(jid)?.timeout || setTimeout(() => {}, 1));\r\n    typingTimeout.delete(jid);\r\n  };\r\n  const setTypingTimeout = (jid: string) => {\r\n    const timeoutData: TypingTimeoutData = {\r\n      msgStr: \"\",\r\n      timeout: setTimeout(() => {\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.jid === jid) {\r\n              cht.isTyping = false;\r\n              if (activeChat.jid === jid) setActiveChat(cht);\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n      }, 20000),\r\n    };\r\n    typingTimeout.set(jid, timeoutData);\r\n  };\r\n\r\n  squadService?.updateSubscribeFunction(chatCommunicatorSubscribe);\r\n  // Comentado para evitar warnings no console enquanto não é usado\r\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\r\n  //     squadService?.groups.list((groups) => {\r\n  //       setGroups(groups);\r\n  //       callback(true);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  function sendMessage(\r\n    chat: IChat,\r\n    message: string,\r\n    callback: SendMessageCallback\r\n  ) {\r\n    squadService?.chat?.chat.sendMessage(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message,\r\n      callback\r\n    );\r\n  }\r\n\r\n  useEffect(init, []);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}