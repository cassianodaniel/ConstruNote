{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ModalEditInfo.tsx\";\nimport React from \"react\";\nimport { Formik, Form as FormFormik, Field, ErrorMessage } from \"formik\";\nimport * as yup from \"yup\";\nimport { useModal } from \"./../contexts/ModalContext\";\nimport { useAuth } from \"./../contexts/AuthContext\";\nimport { Modal, ModalHeader, ModalBody, CardBody, Button, ModalFooter } from \"reactstrap\";\nimport { useTranslation } from \"react-i18next\";\nconst {\n  t\n} = useTranslation();\nconst validations = yup.object().shape({\n  name: yup.string().required(t(\"The field is required\")).min(3, t(\"The field must be at least 3 characters long\")),\n  email: yup.string().required(t(\"The field is required\")).email(t(\"The field must be an email\"))\n});\n\nconst ModalEditInfo = () => {\n  const {\n    showModalEditInfo,\n    setShowModalEditInfo\n  } = useModal();\n  const {\n    setChangedUserData,\n    user\n  } = useAuth();\n  const initialValues = {\n    name: user.name,\n    email: user.email\n  };\n\n  const onSubmit = data => {\n    setChangedUserData({\n      name: data.name,\n      email: data.email\n    });\n    setShowModalEditInfo(false);\n  };\n\n  const close = () => setShowModalEditInfo(false);\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    backdrop: \"static\",\n    isOpen: showModalEditInfo,\n    centered: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    toggle: close,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, \"Edit personal info\"), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: onSubmit,\n    validationSchema: validations,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FormFormik, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, t(\"Name\")), /*#__PURE__*/React.createElement(Field, {\n    name: \"name\",\n    className: \"form-control\",\n    placeholder: t(\"Name\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    component: \"small\",\n    name: \"name\",\n    className: \"form-text text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, t(\"Email\")), /*#__PURE__*/React.createElement(Field, {\n    name: \"email\",\n    className: \"form-control\",\n    placeholder: t(\"Email\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    component: \"small\",\n    name: t(\"Email\"),\n    className: \"form-text text-danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(ModalFooter, {\n    className: \"border-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"default\",\n    onClick: close,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, t(\"Close\")), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, t(\"Confirm\"))))))));\n};\n\nexport default ModalEditInfo;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ModalEditInfo.tsx"],"names":["React","Formik","Form","FormFormik","Field","ErrorMessage","yup","useModal","useAuth","Modal","ModalHeader","ModalBody","CardBody","Button","ModalFooter","useTranslation","t","validations","object","shape","name","string","required","min","email","ModalEditInfo","showModalEditInfo","setShowModalEditInfo","setChangedUserData","user","initialValues","onSubmit","data","close"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Formik, Form as FormFormik, Field, ErrorMessage } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { useModal } from \"./../contexts/ModalContext\";\r\nimport { useAuth } from \"./../contexts/AuthContext\";\r\nimport {\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  CardBody,\r\n  Button,\r\n  ModalFooter,\r\n} from \"reactstrap\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst { t } = useTranslation();\r\nconst validations = yup.object().shape({\r\n  name: yup\r\n    .string()\r\n    .required(t(\"The field is required\"))\r\n    .min(3, t(\"The field must be at least 3 characters long\")),\r\n  email: yup\r\n    .string()\r\n    .required(t(\"The field is required\"))\r\n    .email(t(\"The field must be an email\")),\r\n});\r\n\r\ninterface IValue {\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\nconst ModalEditInfo: React.FC = () => {\r\n  const { showModalEditInfo, setShowModalEditInfo } = useModal();\r\n  const { setChangedUserData, user } = useAuth();\r\n\r\n  const initialValues: IValue = {\r\n    name: user.name,\r\n    email: user.email,\r\n  };\r\n\r\n  const onSubmit = (data: IValue) => {\r\n    setChangedUserData({ name: data.name, email: data.email });\r\n    setShowModalEditInfo(false);\r\n  };\r\n\r\n  const close = () => setShowModalEditInfo(false);\r\n\r\n  return (\r\n    <Modal backdrop=\"static\" isOpen={showModalEditInfo} centered>\r\n      <ModalHeader toggle={close}>Edit personal info</ModalHeader>\r\n      <ModalBody>\r\n        <CardBody>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={onSubmit}\r\n            validationSchema={validations}\r\n          >\r\n            <FormFormik>\r\n              <div className=\"form-group\">\r\n                <label>{t(\"Name\")}</label>\r\n                <Field\r\n                  name=\"name\"\r\n                  className=\"form-control\"\r\n                  placeholder={t(\"Name\")}\r\n                />\r\n                <ErrorMessage\r\n                  component=\"small\"\r\n                  name=\"name\"\r\n                  className=\"form-text text-danger\"\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>{t(\"Email\")}</label>\r\n                <Field\r\n                  name=\"email\"\r\n                  className=\"form-control\"\r\n                  placeholder={t(\"Email\")}\r\n                />\r\n                <ErrorMessage\r\n                  component=\"small\"\r\n                  name={t(\"Email\")}\r\n                  className=\"form-text text-danger\"\r\n                />\r\n              </div>\r\n              <ModalFooter className=\"border-0\">\r\n                <Button color=\"default\" onClick={close}>\r\n                {t(\"Close\")}\r\n                </Button>\r\n                <Button type=\"submit\" color=\"primary\">\r\n                  {t(\"Confirm\")}\r\n                </Button>\r\n              </ModalFooter>\r\n            </FormFormik>\r\n          </Formik>\r\n        </CardBody>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalEditInfo;\r\n"]},"metadata":{},"sourceType":"module"}