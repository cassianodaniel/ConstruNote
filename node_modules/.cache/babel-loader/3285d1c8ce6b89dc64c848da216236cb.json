{"ast":null,"code":"import { Timers } from \"../timers\";\nimport { ServerTransaction } from \"./server-transaction\";\nimport { TransactionState } from \"./transaction-state\";\n/**\n * Non-INVITE Server Transaction.\n * @remarks\n * https://tools.ietf.org/html/rfc3261#section-17.2.2\n * @public\n */\n\nexport class NonInviteServerTransaction extends ServerTransaction {\n  /**\n   * Constructor.\n   * After construction the transaction will be in the \"trying\": state and the transaction\n   * `id` will equal the branch parameter set in the Via header of the incoming request.\n   * https://tools.ietf.org/html/rfc3261#section-17.2.2\n   * @param request - Incoming Non-INVITE request from the transport.\n   * @param transport - The transport.\n   * @param user - The transaction user.\n   */\n  constructor(request, transport, user) {\n    super(request, transport, user, TransactionState.Trying, \"sip.transaction.nist\");\n  }\n  /**\n   * Destructor.\n   */\n\n\n  dispose() {\n    if (this.J) {\n      clearTimeout(this.J);\n      this.J = undefined;\n    }\n\n    super.dispose();\n  }\n  /** Transaction kind. Deprecated. */\n\n\n  get kind() {\n    return \"nist\";\n  }\n  /**\n   * Receive requests from transport matching this transaction.\n   * @param request - Request matching this transaction.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  receiveRequest(request) {\n    switch (this.state) {\n      case TransactionState.Trying:\n        // Once in the \"Trying\" state, any further request retransmissions are discarded.\n        // https://tools.ietf.org/html/rfc3261#section-17.2.2\n        break;\n\n      case TransactionState.Proceeding:\n        // If a retransmission of the request is received while in the \"Proceeding\" state,\n        // the most recently sent provisional response MUST be passed to the transport layer for retransmission.\n        // https://tools.ietf.org/html/rfc3261#section-17.2.2\n        if (!this.lastResponse) {\n          throw new Error(\"Last response undefined.\");\n        }\n\n        this.send(this.lastResponse).catch(error => {\n          this.logTransportError(error, \"Failed to send retransmission of provisional response.\");\n        });\n        break;\n\n      case TransactionState.Completed:\n        // While in the \"Completed\" state, the server transaction MUST pass the final response to the transport\n        // layer for retransmission whenever a retransmission of the request is received. Any other final responses\n        // passed by the TU to the server transaction MUST be discarded while in the \"Completed\" state.\n        // https://tools.ietf.org/html/rfc3261#section-17.2.2\n        if (!this.lastResponse) {\n          throw new Error(\"Last response undefined.\");\n        }\n\n        this.send(this.lastResponse).catch(error => {\n          this.logTransportError(error, \"Failed to send retransmission of final response.\");\n        });\n        break;\n\n      case TransactionState.Terminated:\n        break;\n\n      default:\n        throw new Error(`Invalid state ${this.state}`);\n    }\n  }\n  /**\n   * Receive responses from TU for this transaction.\n   * @param statusCode - Status code of response. 101-199 not allowed per RFC 4320.\n   * @param response - Response to send.\n   */\n\n\n  receiveResponse(statusCode, response) {\n    if (statusCode < 100 || statusCode > 699) {\n      throw new Error(`Invalid status code ${statusCode}`);\n    } // An SIP element MUST NOT send any provisional response with a\n    // Status-Code other than 100 to a non-INVITE request.\n    // An SIP element MUST NOT respond to a non-INVITE request with a\n    // Status-Code of 100 over any unreliable transport, such as UDP,\n    // before the amount of time it takes a client transaction's Timer E to be reset to T2.\n    // An SIP element MAY respond to a non-INVITE request with a\n    // Status-Code of 100 over a reliable transport at any time.\n    // https://tools.ietf.org/html/rfc4320#section-4.1\n\n\n    if (statusCode > 100 && statusCode <= 199) {\n      throw new Error(\"Provisional response other than 100 not allowed.\");\n    }\n\n    switch (this.state) {\n      case TransactionState.Trying:\n        // While in the \"Trying\" state, if the TU passes a provisional response\n        // to the server transaction, the server transaction MUST enter the \"Proceeding\" state.\n        // The response MUST be passed to the transport layer for transmission.\n        // https://tools.ietf.org/html/rfc3261#section-17.2.2\n        this.lastResponse = response;\n\n        if (statusCode >= 100 && statusCode < 200) {\n          this.stateTransition(TransactionState.Proceeding);\n          this.send(response).catch(error => {\n            this.logTransportError(error, \"Failed to send provisional response.\");\n          });\n          return;\n        }\n\n        if (statusCode >= 200 && statusCode <= 699) {\n          this.stateTransition(TransactionState.Completed);\n          this.send(response).catch(error => {\n            this.logTransportError(error, \"Failed to send final response.\");\n          });\n          return;\n        }\n\n        break;\n\n      case TransactionState.Proceeding:\n        // Any further provisional responses that are received from the TU while\n        // in the \"Proceeding\" state MUST be passed to the transport layer for transmission.\n        // If the TU passes a final response (status codes 200-699) to the server while in\n        // the \"Proceeding\" state, the transaction MUST enter the \"Completed\" state, and\n        // the response MUST be passed to the transport layer for transmission.\n        // https://tools.ietf.org/html/rfc3261#section-17.2.2\n        this.lastResponse = response;\n\n        if (statusCode >= 200 && statusCode <= 699) {\n          this.stateTransition(TransactionState.Completed);\n          this.send(response).catch(error => {\n            this.logTransportError(error, \"Failed to send final response.\");\n          });\n          return;\n        }\n\n        break;\n\n      case TransactionState.Completed:\n        // Any other final responses passed by the TU to the server\n        // transaction MUST be discarded while in the \"Completed\" state.\n        // https://tools.ietf.org/html/rfc3261#section-17.2.2\n        return;\n\n      case TransactionState.Terminated:\n        break;\n\n      default:\n        throw new Error(`Invalid state ${this.state}`);\n    }\n\n    const message = `Non-INVITE server transaction received unexpected ${statusCode} response from TU while in state ${this.state}.`;\n    this.logger.error(message);\n    throw new Error(message);\n  }\n  /**\n   * First, the procedures in [4] are followed, which attempt to deliver the response to a backup.\n   * If those should all fail, based on the definition of failure in [4], the server transaction SHOULD\n   * inform the TU that a failure has occurred, and SHOULD transition to the terminated state.\n   * https://tools.ietf.org/html/rfc3261#section-17.2.4\n   */\n\n\n  onTransportError(error) {\n    if (this.user.onTransportError) {\n      this.user.onTransportError(error);\n    }\n\n    this.stateTransition(TransactionState.Terminated, true);\n  }\n  /** For logging. */\n\n\n  typeToString() {\n    return \"non-INVITE server transaction\";\n  }\n\n  stateTransition(newState, dueToTransportError = false) {\n    // Assert valid state transitions.\n    const invalidStateTransition = () => {\n      throw new Error(`Invalid state transition from ${this.state} to ${newState}`);\n    };\n\n    switch (newState) {\n      case TransactionState.Trying:\n        invalidStateTransition();\n        break;\n\n      case TransactionState.Proceeding:\n        if (this.state !== TransactionState.Trying) {\n          invalidStateTransition();\n        }\n\n        break;\n\n      case TransactionState.Completed:\n        if (this.state !== TransactionState.Trying && this.state !== TransactionState.Proceeding) {\n          invalidStateTransition();\n        }\n\n        break;\n\n      case TransactionState.Terminated:\n        if (this.state !== TransactionState.Proceeding && this.state !== TransactionState.Completed) {\n          if (!dueToTransportError) {\n            invalidStateTransition();\n          }\n        }\n\n        break;\n\n      default:\n        invalidStateTransition();\n    } // When the server transaction enters the \"Completed\" state, it MUST set Timer J to fire\n    // in 64*T1 seconds for unreliable transports, and zero seconds for reliable transports.\n    // https://tools.ietf.org/html/rfc3261#section-17.2.2\n\n\n    if (newState === TransactionState.Completed) {\n      this.J = setTimeout(() => this.timerJ(), Timers.TIMER_J);\n    } // The server transaction MUST be destroyed the instant it enters the \"Terminated\" state.\n    // https://tools.ietf.org/html/rfc3261#section-17.2.2\n\n\n    if (newState === TransactionState.Terminated) {\n      this.dispose();\n    }\n\n    this.setState(newState);\n  }\n  /**\n   * The server transaction remains in this state until Timer J fires,\n   * at which point it MUST transition to the \"Terminated\" state.\n   * https://tools.ietf.org/html/rfc3261#section-17.2.2\n   */\n\n\n  timerJ() {\n    this.logger.debug(`Timer J expired for NON-INVITE server transaction ${this.id}.`);\n\n    if (this.state === TransactionState.Completed) {\n      this.stateTransition(TransactionState.Terminated);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/core/transactions/non-invite-server-transaction.js"],"names":["Timers","ServerTransaction","TransactionState","NonInviteServerTransaction","constructor","request","transport","user","Trying","dispose","J","clearTimeout","undefined","kind","receiveRequest","state","Proceeding","lastResponse","Error","send","catch","error","logTransportError","Completed","Terminated","receiveResponse","statusCode","response","stateTransition","message","logger","onTransportError","typeToString","newState","dueToTransportError","invalidStateTransition","setTimeout","timerJ","TIMER_J","setState","debug","id"],"mappings":"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","sourcesContent":["import { Timers } from \"../timers\";\nimport { ServerTransaction } from \"./server-transaction\";\nimport { TransactionState } from \"./transaction-state\";\n/**\n * Non-INVITE Server Transaction.\n * @remarks\n * https://tools.ietf.org/html/rfc3261#section-17.2.2\n * @public\n */\nexport class NonInviteServerTransaction extends ServerTransaction {\n    /**\n     * Constructor.\n     * After construction the transaction will be in the \"trying\": state and the transaction\n     * `id` will equal the branch parameter set in the Via header of the incoming request.\n     * https://tools.ietf.org/html/rfc3261#section-17.2.2\n     * @param request - Incoming Non-INVITE request from the transport.\n     * @param transport - The transport.\n     * @param user - The transaction user.\n     */\n    constructor(request, transport, user) {\n        super(request, transport, user, TransactionState.Trying, \"sip.transaction.nist\");\n    }\n    /**\n     * Destructor.\n     */\n    dispose() {\n        if (this.J) {\n            clearTimeout(this.J);\n            this.J = undefined;\n        }\n        super.dispose();\n    }\n    /** Transaction kind. Deprecated. */\n    get kind() {\n        return \"nist\";\n    }\n    /**\n     * Receive requests from transport matching this transaction.\n     * @param request - Request matching this transaction.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    receiveRequest(request) {\n        switch (this.state) {\n            case TransactionState.Trying:\n                // Once in the \"Trying\" state, any further request retransmissions are discarded.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                break;\n            case TransactionState.Proceeding:\n                // If a retransmission of the request is received while in the \"Proceeding\" state,\n                // the most recently sent provisional response MUST be passed to the transport layer for retransmission.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                if (!this.lastResponse) {\n                    throw new Error(\"Last response undefined.\");\n                }\n                this.send(this.lastResponse).catch((error) => {\n                    this.logTransportError(error, \"Failed to send retransmission of provisional response.\");\n                });\n                break;\n            case TransactionState.Completed:\n                // While in the \"Completed\" state, the server transaction MUST pass the final response to the transport\n                // layer for retransmission whenever a retransmission of the request is received. Any other final responses\n                // passed by the TU to the server transaction MUST be discarded while in the \"Completed\" state.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                if (!this.lastResponse) {\n                    throw new Error(\"Last response undefined.\");\n                }\n                this.send(this.lastResponse).catch((error) => {\n                    this.logTransportError(error, \"Failed to send retransmission of final response.\");\n                });\n                break;\n            case TransactionState.Terminated:\n                break;\n            default:\n                throw new Error(`Invalid state ${this.state}`);\n        }\n    }\n    /**\n     * Receive responses from TU for this transaction.\n     * @param statusCode - Status code of response. 101-199 not allowed per RFC 4320.\n     * @param response - Response to send.\n     */\n    receiveResponse(statusCode, response) {\n        if (statusCode < 100 || statusCode > 699) {\n            throw new Error(`Invalid status code ${statusCode}`);\n        }\n        // An SIP element MUST NOT send any provisional response with a\n        // Status-Code other than 100 to a non-INVITE request.\n        // An SIP element MUST NOT respond to a non-INVITE request with a\n        // Status-Code of 100 over any unreliable transport, such as UDP,\n        // before the amount of time it takes a client transaction's Timer E to be reset to T2.\n        // An SIP element MAY respond to a non-INVITE request with a\n        // Status-Code of 100 over a reliable transport at any time.\n        // https://tools.ietf.org/html/rfc4320#section-4.1\n        if (statusCode > 100 && statusCode <= 199) {\n            throw new Error(\"Provisional response other than 100 not allowed.\");\n        }\n        switch (this.state) {\n            case TransactionState.Trying:\n                // While in the \"Trying\" state, if the TU passes a provisional response\n                // to the server transaction, the server transaction MUST enter the \"Proceeding\" state.\n                // The response MUST be passed to the transport layer for transmission.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                this.lastResponse = response;\n                if (statusCode >= 100 && statusCode < 200) {\n                    this.stateTransition(TransactionState.Proceeding);\n                    this.send(response).catch((error) => {\n                        this.logTransportError(error, \"Failed to send provisional response.\");\n                    });\n                    return;\n                }\n                if (statusCode >= 200 && statusCode <= 699) {\n                    this.stateTransition(TransactionState.Completed);\n                    this.send(response).catch((error) => {\n                        this.logTransportError(error, \"Failed to send final response.\");\n                    });\n                    return;\n                }\n                break;\n            case TransactionState.Proceeding:\n                // Any further provisional responses that are received from the TU while\n                // in the \"Proceeding\" state MUST be passed to the transport layer for transmission.\n                // If the TU passes a final response (status codes 200-699) to the server while in\n                // the \"Proceeding\" state, the transaction MUST enter the \"Completed\" state, and\n                // the response MUST be passed to the transport layer for transmission.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                this.lastResponse = response;\n                if (statusCode >= 200 && statusCode <= 699) {\n                    this.stateTransition(TransactionState.Completed);\n                    this.send(response).catch((error) => {\n                        this.logTransportError(error, \"Failed to send final response.\");\n                    });\n                    return;\n                }\n                break;\n            case TransactionState.Completed:\n                // Any other final responses passed by the TU to the server\n                // transaction MUST be discarded while in the \"Completed\" state.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                return;\n            case TransactionState.Terminated:\n                break;\n            default:\n                throw new Error(`Invalid state ${this.state}`);\n        }\n        const message = `Non-INVITE server transaction received unexpected ${statusCode} response from TU while in state ${this.state}.`;\n        this.logger.error(message);\n        throw new Error(message);\n    }\n    /**\n     * First, the procedures in [4] are followed, which attempt to deliver the response to a backup.\n     * If those should all fail, based on the definition of failure in [4], the server transaction SHOULD\n     * inform the TU that a failure has occurred, and SHOULD transition to the terminated state.\n     * https://tools.ietf.org/html/rfc3261#section-17.2.4\n     */\n    onTransportError(error) {\n        if (this.user.onTransportError) {\n            this.user.onTransportError(error);\n        }\n        this.stateTransition(TransactionState.Terminated, true);\n    }\n    /** For logging. */\n    typeToString() {\n        return \"non-INVITE server transaction\";\n    }\n    stateTransition(newState, dueToTransportError = false) {\n        // Assert valid state transitions.\n        const invalidStateTransition = () => {\n            throw new Error(`Invalid state transition from ${this.state} to ${newState}`);\n        };\n        switch (newState) {\n            case TransactionState.Trying:\n                invalidStateTransition();\n                break;\n            case TransactionState.Proceeding:\n                if (this.state !== TransactionState.Trying) {\n                    invalidStateTransition();\n                }\n                break;\n            case TransactionState.Completed:\n                if (this.state !== TransactionState.Trying && this.state !== TransactionState.Proceeding) {\n                    invalidStateTransition();\n                }\n                break;\n            case TransactionState.Terminated:\n                if (this.state !== TransactionState.Proceeding && this.state !== TransactionState.Completed) {\n                    if (!dueToTransportError) {\n                        invalidStateTransition();\n                    }\n                }\n                break;\n            default:\n                invalidStateTransition();\n        }\n        // When the server transaction enters the \"Completed\" state, it MUST set Timer J to fire\n        // in 64*T1 seconds for unreliable transports, and zero seconds for reliable transports.\n        // https://tools.ietf.org/html/rfc3261#section-17.2.2\n        if (newState === TransactionState.Completed) {\n            this.J = setTimeout(() => this.timerJ(), Timers.TIMER_J);\n        }\n        // The server transaction MUST be destroyed the instant it enters the \"Terminated\" state.\n        // https://tools.ietf.org/html/rfc3261#section-17.2.2\n        if (newState === TransactionState.Terminated) {\n            this.dispose();\n        }\n        this.setState(newState);\n    }\n    /**\n     * The server transaction remains in this state until Timer J fires,\n     * at which point it MUST transition to the \"Terminated\" state.\n     * https://tools.ietf.org/html/rfc3261#section-17.2.2\n     */\n    timerJ() {\n        this.logger.debug(`Timer J expired for NON-INVITE server transaction ${this.id}.`);\n        if (this.state === TransactionState.Completed) {\n            this.stateTransition(TransactionState.Terminated);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}