{"ast":null,"code":"import { integerBetween, isLeapYear, timeObject, daysInYear, daysInMonth, weeksInWeekYear, isInteger } from \"./util.js\";\nimport Invalid from \"./invalid.js\";\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n      leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction unitOutOfRange(unit, value) {\n  return new Invalid(\"unit out of range\", `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`);\n}\n\nfunction dayOfWeek(year, month, day) {\n  const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();\n  return js === 0 ? 7 : js;\n}\n\nfunction computeOrdinal(year, month, day) {\n  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year, ordinal) {\n  const table = isLeapYear(year) ? leapLadder : nonLeapLadder,\n        month0 = table.findIndex(i => i < ordinal),\n        day = ordinal - table[month0];\n  return {\n    month: month0 + 1,\n    day\n  };\n}\n/**\n * @private\n */\n\n\nexport function gregorianToWeek(gregObj) {\n  const {\n    year,\n    month,\n    day\n  } = gregObj,\n        ordinal = computeOrdinal(year, month, day),\n        weekday = dayOfWeek(year, month, day);\n  let weekNumber = Math.floor((ordinal - weekday + 10) / 7),\n      weekYear;\n\n  if (weekNumber < 1) {\n    weekYear = year - 1;\n    weekNumber = weeksInWeekYear(weekYear);\n  } else if (weekNumber > weeksInWeekYear(year)) {\n    weekYear = year + 1;\n    weekNumber = 1;\n  } else {\n    weekYear = year;\n  }\n\n  return Object.assign({\n    weekYear,\n    weekNumber,\n    weekday\n  }, timeObject(gregObj));\n}\nexport function weekToGregorian(weekData) {\n  const {\n    weekYear,\n    weekNumber,\n    weekday\n  } = weekData,\n        weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),\n        yearInDays = daysInYear(weekYear);\n  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,\n      year;\n\n  if (ordinal < 1) {\n    year = weekYear - 1;\n    ordinal += daysInYear(year);\n  } else if (ordinal > yearInDays) {\n    year = weekYear + 1;\n    ordinal -= daysInYear(weekYear);\n  } else {\n    year = weekYear;\n  }\n\n  const {\n    month,\n    day\n  } = uncomputeOrdinal(year, ordinal);\n  return Object.assign({\n    year,\n    month,\n    day\n  }, timeObject(weekData));\n}\nexport function gregorianToOrdinal(gregData) {\n  const {\n    year,\n    month,\n    day\n  } = gregData,\n        ordinal = computeOrdinal(year, month, day);\n  return Object.assign({\n    year,\n    ordinal\n  }, timeObject(gregData));\n}\nexport function ordinalToGregorian(ordinalData) {\n  const {\n    year,\n    ordinal\n  } = ordinalData,\n        {\n    month,\n    day\n  } = uncomputeOrdinal(year, ordinal);\n  return Object.assign({\n    year,\n    month,\n    day\n  }, timeObject(ordinalData));\n}\nexport function hasInvalidWeekData(obj) {\n  const validYear = isInteger(obj.weekYear),\n        validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),\n        validWeekday = integerBetween(obj.weekday, 1, 7);\n\n  if (!validYear) {\n    return unitOutOfRange(\"weekYear\", obj.weekYear);\n  } else if (!validWeek) {\n    return unitOutOfRange(\"week\", obj.week);\n  } else if (!validWeekday) {\n    return unitOutOfRange(\"weekday\", obj.weekday);\n  } else return false;\n}\nexport function hasInvalidOrdinalData(obj) {\n  const validYear = isInteger(obj.year),\n        validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validOrdinal) {\n    return unitOutOfRange(\"ordinal\", obj.ordinal);\n  } else return false;\n}\nexport function hasInvalidGregorianData(obj) {\n  const validYear = isInteger(obj.year),\n        validMonth = integerBetween(obj.month, 1, 12),\n        validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validMonth) {\n    return unitOutOfRange(\"month\", obj.month);\n  } else if (!validDay) {\n    return unitOutOfRange(\"day\", obj.day);\n  } else return false;\n}\nexport function hasInvalidTimeData(obj) {\n  const {\n    hour,\n    minute,\n    second,\n    millisecond\n  } = obj;\n  const validHour = integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0,\n        validMinute = integerBetween(minute, 0, 59),\n        validSecond = integerBetween(second, 0, 59),\n        validMillisecond = integerBetween(millisecond, 0, 999);\n\n  if (!validHour) {\n    return unitOutOfRange(\"hour\", hour);\n  } else if (!validMinute) {\n    return unitOutOfRange(\"minute\", minute);\n  } else if (!validSecond) {\n    return unitOutOfRange(\"second\", second);\n  } else if (!validMillisecond) {\n    return unitOutOfRange(\"millisecond\", millisecond);\n  } else return false;\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/luxon/src/impl/conversions.js"],"names":["integerBetween","isLeapYear","timeObject","daysInYear","daysInMonth","weeksInWeekYear","isInteger","Invalid","nonLeapLadder","leapLadder","unitOutOfRange","unit","value","dayOfWeek","year","month","day","js","Date","UTC","getUTCDay","computeOrdinal","uncomputeOrdinal","ordinal","table","month0","findIndex","i","gregorianToWeek","gregObj","weekday","weekNumber","Math","floor","weekYear","Object","assign","weekToGregorian","weekData","weekdayOfJan4","yearInDays","gregorianToOrdinal","gregData","ordinalToGregorian","ordinalData","hasInvalidWeekData","obj","validYear","validWeek","validWeekday","week","hasInvalidOrdinalData","validOrdinal","hasInvalidGregorianData","validMonth","validDay","hasInvalidTimeData","hour","minute","second","millisecond","validHour","validMinute","validSecond","validMillisecond"],"mappings":"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","sourcesContent":["import {\n  integerBetween,\n  isLeapYear,\n  timeObject,\n  daysInYear,\n  daysInMonth,\n  weeksInWeekYear,\n  isInteger\n} from \"./util.js\";\nimport Invalid from \"./invalid.js\";\n\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction unitOutOfRange(unit, value) {\n  return new Invalid(\n    \"unit out of range\",\n    `you specified ${value} (of type ${typeof value}) as a ${unit}, which is invalid`\n  );\n}\n\nfunction dayOfWeek(year, month, day) {\n  const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();\n  return js === 0 ? 7 : js;\n}\n\nfunction computeOrdinal(year, month, day) {\n  return day + (isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year, ordinal) {\n  const table = isLeapYear(year) ? leapLadder : nonLeapLadder,\n    month0 = table.findIndex(i => i < ordinal),\n    day = ordinal - table[month0];\n  return { month: month0 + 1, day };\n}\n\n/**\n * @private\n */\n\nexport function gregorianToWeek(gregObj) {\n  const { year, month, day } = gregObj,\n    ordinal = computeOrdinal(year, month, day),\n    weekday = dayOfWeek(year, month, day);\n\n  let weekNumber = Math.floor((ordinal - weekday + 10) / 7),\n    weekYear;\n\n  if (weekNumber < 1) {\n    weekYear = year - 1;\n    weekNumber = weeksInWeekYear(weekYear);\n  } else if (weekNumber > weeksInWeekYear(year)) {\n    weekYear = year + 1;\n    weekNumber = 1;\n  } else {\n    weekYear = year;\n  }\n\n  return Object.assign({ weekYear, weekNumber, weekday }, timeObject(gregObj));\n}\n\nexport function weekToGregorian(weekData) {\n  const { weekYear, weekNumber, weekday } = weekData,\n    weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),\n    yearInDays = daysInYear(weekYear);\n\n  let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,\n    year;\n\n  if (ordinal < 1) {\n    year = weekYear - 1;\n    ordinal += daysInYear(year);\n  } else if (ordinal > yearInDays) {\n    year = weekYear + 1;\n    ordinal -= daysInYear(weekYear);\n  } else {\n    year = weekYear;\n  }\n\n  const { month, day } = uncomputeOrdinal(year, ordinal);\n\n  return Object.assign({ year, month, day }, timeObject(weekData));\n}\n\nexport function gregorianToOrdinal(gregData) {\n  const { year, month, day } = gregData,\n    ordinal = computeOrdinal(year, month, day);\n\n  return Object.assign({ year, ordinal }, timeObject(gregData));\n}\n\nexport function ordinalToGregorian(ordinalData) {\n  const { year, ordinal } = ordinalData,\n    { month, day } = uncomputeOrdinal(year, ordinal);\n\n  return Object.assign({ year, month, day }, timeObject(ordinalData));\n}\n\nexport function hasInvalidWeekData(obj) {\n  const validYear = isInteger(obj.weekYear),\n    validWeek = integerBetween(obj.weekNumber, 1, weeksInWeekYear(obj.weekYear)),\n    validWeekday = integerBetween(obj.weekday, 1, 7);\n\n  if (!validYear) {\n    return unitOutOfRange(\"weekYear\", obj.weekYear);\n  } else if (!validWeek) {\n    return unitOutOfRange(\"week\", obj.week);\n  } else if (!validWeekday) {\n    return unitOutOfRange(\"weekday\", obj.weekday);\n  } else return false;\n}\n\nexport function hasInvalidOrdinalData(obj) {\n  const validYear = isInteger(obj.year),\n    validOrdinal = integerBetween(obj.ordinal, 1, daysInYear(obj.year));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validOrdinal) {\n    return unitOutOfRange(\"ordinal\", obj.ordinal);\n  } else return false;\n}\n\nexport function hasInvalidGregorianData(obj) {\n  const validYear = isInteger(obj.year),\n    validMonth = integerBetween(obj.month, 1, 12),\n    validDay = integerBetween(obj.day, 1, daysInMonth(obj.year, obj.month));\n\n  if (!validYear) {\n    return unitOutOfRange(\"year\", obj.year);\n  } else if (!validMonth) {\n    return unitOutOfRange(\"month\", obj.month);\n  } else if (!validDay) {\n    return unitOutOfRange(\"day\", obj.day);\n  } else return false;\n}\n\nexport function hasInvalidTimeData(obj) {\n  const { hour, minute, second, millisecond } = obj;\n  const validHour =\n      integerBetween(hour, 0, 23) ||\n      (hour === 24 && minute === 0 && second === 0 && millisecond === 0),\n    validMinute = integerBetween(minute, 0, 59),\n    validSecond = integerBetween(second, 0, 59),\n    validMillisecond = integerBetween(millisecond, 0, 999);\n\n  if (!validHour) {\n    return unitOutOfRange(\"hour\", hour);\n  } else if (!validMinute) {\n    return unitOutOfRange(\"minute\", minute);\n  } else if (!validSecond) {\n    return unitOutOfRange(\"second\", second);\n  } else if (!validMillisecond) {\n    return unitOutOfRange(\"millisecond\", millisecond);\n  } else return false;\n}\n"]},"metadata":{},"sourceType":"module"}