{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\nimport { getFileName, getUrlBooleans } from \"./utils/parseUtils\";\nimport ReadStatus from \"../enuns/ReadStatus\"; // Comentado para Evitar Warnings no console\n// interface CreateGroupCallback {\n//   (groupCreated: boolean): void;\n// }\n\nlet squadService;\nlet typingTimeout = new Map();\n\nconst SquadCommunicator = ({\n  children\n}) => {\n  var _squadService12;\n\n  const {\n    chats,\n    activeChat,\n    setChats,\n    setGroups,\n    setContacts\n  } = useChat();\n  const {\n    user,\n    setUser\n  } = useAuth();\n\n  const init = () => {\n    var _squadService;\n\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"e9e34268a0adb4b4f009b508de092e2c\",\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      user_name: \"ZZ Romero 2\",\n      email: \"romero2@digivox.com.br\",\n      expires_in: 2592000,\n      baseUrl: \"https://app.citrussquad.com/api/v1/\"\n    }));\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\n    (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.user.get(user => {\n      setUser(user);\n    });\n  };\n\n  const clearSendFile = (chatId, messageId) => {\n    setChats(chats.map(chat => {\n      if (chat.id === chatId) {\n        chat.messages = chat.messages.map(message => {\n          if (message.id === messageId) {\n            message.deliverStatus = DeliverStatus.QUEUED;\n            message.sendFile = undefined;\n          }\n\n          return message;\n        });\n      }\n\n      return chat;\n    }));\n  };\n\n  const onChatsChange = () => {\n    chats.forEach(chat => {\n      checkSendMessage(chat);\n      checkSearchMessages(chat);\n      checkTyping(chat);\n    });\n  };\n\n  const onActiveChatChange = () => {\n    checkTyping(activeChat);\n  };\n\n  const checkTyping = chat => {\n    const oldTimeoutData = typingTimeout.get(chat.jid);\n\n    if (chat.inputMessage !== \"\" && (!oldTimeoutData || oldTimeoutData.msgStr !== chat.inputMessage)) {\n      var _squadService2, _squadService2$chat;\n\n      if (oldTimeoutData) clearTimeout(oldTimeoutData.timeout);else (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : (_squadService2$chat = _squadService2.chat) === null || _squadService2$chat === void 0 ? void 0 : _squadService2$chat.chat.sendTyping(chat.jid);\n      const timeoutData = {\n        timeout: setTimeout(() => {\n          var _squadService3, _squadService3$chat;\n\n          (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : (_squadService3$chat = _squadService3.chat) === null || _squadService3$chat === void 0 ? void 0 : _squadService3$chat.chat.sendActive(chat.jid);\n          typingTimeout.delete(chat.jid);\n        }, 3000),\n        msgStr: `${chat.inputMessage}`\n      };\n      typingTimeout.set(chat.jid, timeoutData);\n    }\n  };\n\n  const checkSearchMessages = chat => {\n    if (chat.messageLoaded) {\n      var _squadService4;\n\n      (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : _squadService4.messages.list(chat, messages => {\n        setChats(chats.map(cht => {\n          if (cht.id === chat.id) {\n            messages.reverse().forEach(msg => {\n              cht.messages.unshift(msg);\n            });\n            cht.messageLoaded = false;\n          }\n\n          return cht;\n        }));\n      });\n    }\n  };\n\n  const checkSendMessage = chat => {\n    chat.messages.forEach(msg => {\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\n        if (msg.sendFile) {\n          var _squadService5, _squadService5$chat;\n\n          const files = [msg.sendFile];\n          clearSendFile(chat.id, msg.id);\n          (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : (_squadService5$chat = _squadService5.chat) === null || _squadService5$chat === void 0 ? void 0 : _squadService5$chat.sendFiles(chat, files, data => {\n            updateMessageFiles(data, chat, msg);\n          });\n        } else {\n          sendMessage(chat, msg.message, msgId => updateMessage(msgId, chat, msg));\n        }\n      }\n    });\n  };\n\n  const updateMessageFiles = (data, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        const booleans = getUrlBooleans(data.url);\n        message.id = data.msgId;\n        message.fileUrl = data.url;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n        message.message = getFileName(data.url);\n        message.isFileMessage = booleans.isFileMessage;\n        message.isImageMessage = booleans.isImageMessage;\n        message.isVideoMessage = booleans.isVideoMessage;\n        message.isAudioMessage = booleans.isAudioMessage;\n      }\n\n      return message;\n    });\n    setChats(chats.map(cht => {\n      if (cht.id === chat.id) {\n        cht.messages = newChat.messages;\n      }\n\n      return cht;\n    }));\n  };\n\n  const updateMessage = (msgId, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        message.id = msgId;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n      }\n\n      return message;\n    });\n    setChats(chats.map(cht => {\n      if (cht.id === chat.id) {\n        cht.messages = newChat.messages;\n      }\n\n      return cht;\n    }));\n  };\n\n  useEffect(onChatsChange, [chats]);\n  useEffect(onActiveChatChange, [activeChat]);\n\n  function chatCommunicatorSubscribe(event, data) {\n    var _squadService6;\n\n    switch (event) {\n      case Events.ONLINE:\n        (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : _squadService6.chats.list(receivedChats => {\n          var _squadService7, _squadService9;\n\n          setChats(receivedChats); //populating groups\n\n          (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : _squadService7.groups.list(groups => {\n            var _squadService8, _squadService8$chat;\n\n            setGroups(groups); //Joining Groups Rooms in XMPP\n\n            (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : (_squadService8$chat = _squadService8.chat) === null || _squadService8$chat === void 0 ? void 0 : _squadService8$chat.joinGroups(groups.map(group => group.jid));\n          }); //populating contacts\n\n          (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : _squadService9.contacts.list(contacts => setContacts(contacts)); //populating chat's with messages\n\n          receivedChats.forEach(chat => {\n            var _squadService10;\n\n            (_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : _squadService10.messages.list(chat, messages => {\n              const chatWithMessages = { ...chat\n              };\n              chatWithMessages.messages = chatWithMessages.messages.concat(messages);\n              setChats([...receivedChats.filter(cht => chat.id !== cht.id), chatWithMessages]);\n            });\n          });\n        });\n        break;\n\n      case Events.MESSAGE:\n        if (data.fromUser === user.jid) break;\n        let find = false;\n        let newChats = chats.map(chat => {\n          if (data.fromUser === chat.jid) {\n            chat.messages.push(data);\n            find = true;\n          }\n\n          return chat;\n        });\n\n        if (!find) {\n          var _squadService11;\n\n          let newChat = {};\n          (_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : _squadService11.contacts.list(listContacts => {\n            listContacts.forEach(c => {\n              if (c.jid === data.fromUser) {\n                newChat = {\n                  id: c.id,\n                  jid: c.jid,\n                  name: c.name,\n                  profilePicture: c.profilePicture,\n                  status: c.status,\n                  unRead: 1,\n                  chatType: ChatType.USER,\n                  inputMessage: \"\",\n                  isTyping: false,\n                  messages: []\n                };\n                newChat.messages.push(data);\n                newChats.unshift(newChat);\n                setChats(newChats);\n              }\n            });\n          });\n        } else {\n          setChats(newChats);\n        }\n\n        break;\n\n      case Events.RECEIVED:\n        setChats(chats.map(chat => {\n          chat.messages = chat.messages.map(message => {\n            if (message.id === data.id) {\n              message.deliverStatus = DeliverStatus.DELIVERED;\n            }\n\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.DISPLAYED:\n        setChats(chats.map(chat => {\n          chat.messages = chat.messages.map(message => {\n            if (message.id === data.id) {\n              message.readStatus = ReadStatus.READ;\n            }\n\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.COMPOSING:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = true;\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.ACTIVE:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = false;\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.PRESENCE:\n        break;\n    }\n  }\n\n  (_squadService12 = squadService) === null || _squadService12 === void 0 ? void 0 : _squadService12.updateSubscribeFunction(chatCommunicatorSubscribe); // Comentado para evitar warnings no console enquanto não é usado\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\n  //     squadService?.groups.list((groups) => {\n  //       setGroups(groups);\n  //       callback(true);\n  //     });\n  //   });\n  // }\n\n  function sendMessage(chat, message, callback) {\n    var _squadService13, _squadService13$chat;\n\n    (_squadService13 = squadService) === null || _squadService13 === void 0 ? void 0 : (_squadService13$chat = _squadService13.chat) === null || _squadService13$chat === void 0 ? void 0 : _squadService13$chat.chat.sendMessage(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message, callback);\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","DeliverStatus","XMPPChatType","getFileName","getUrlBooleans","ReadStatus","squadService","typingTimeout","Map","children","chats","activeChat","setChats","setGroups","setContacts","user","setUser","init","localStorage","setItem","JSON","stringify","access_token","user_id","user_name","email","expires_in","baseUrl","getInstance","chatCommunicatorSubscribe","get","clearSendFile","chatId","messageId","map","chat","id","messages","message","deliverStatus","QUEUED","sendFile","undefined","onChatsChange","forEach","checkSendMessage","checkSearchMessages","checkTyping","onActiveChatChange","oldTimeoutData","jid","inputMessage","msgStr","clearTimeout","timeout","sendTyping","timeoutData","setTimeout","sendActive","delete","set","messageLoaded","list","cht","reverse","msg","unshift","SENDING","files","sendFiles","data","updateMessageFiles","sendMessage","msgId","updateMessage","newChat","booleans","url","fileUrl","time","Date","toISOString","isFileMessage","isImageMessage","isVideoMessage","isAudioMessage","event","ONLINE","receivedChats","groups","joinGroups","group","contacts","chatWithMessages","concat","filter","MESSAGE","fromUser","find","newChats","push","listContacts","c","name","profilePicture","status","unRead","chatType","USER","isTyping","RECEIVED","DELIVERED","DISPLAYED","readStatus","READ","COMPOSING","ACTIVE","PRESENCE","updateSubscribeFunction","callback","includes","GROUPCHAT","CHAT"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,iBAAiB,IAAIC,YAA9B,QAAkD,4BAAlD;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,OAAT,QAAwB,yBAAxB;AAGA,SAASC,MAAT,QAAgD,oBAAhD;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,SAASD,QAAQ,IAAIE,YAArB,QAAyC,oBAAzC;AAGA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,oBAA5C;AACA,OAAOC,UAAP,MAAuB,qBAAvB,C,CACA;AACA;AACA;AACA;;AAKA,IAAIC,YAAJ;AACA,IAAIC,aAA6C,GAAG,IAAIC,GAAJ,EAApD;;AAEA,MAAMb,iBAA2B,GAAG,CAAC;AAAEc,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACpD,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,UAAT;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA,SAA/B;AAA0CC,IAAAA;AAA1C,MAA0DjB,OAAO,EAAvE;AACA,QAAM;AAAEkB,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBlB,OAAO,EAAjC;;AAEA,QAAMmB,IAAI,GAAG,MAAM;AAAA;;AACjBC,IAAAA,YAAY,CAACC,OAAb,CACE,eADF,EAEEC,IAAI,CAACC,SAAL,CAAe;AACbC,MAAAA,YAAY,EAAE,kCADD;AAEbC,MAAAA,OAAO,EAAE,sCAFI;AAGbC,MAAAA,SAAS,EAAE,aAHE;AAIbC,MAAAA,KAAK,EAAE,wBAJM;AAKbC,MAAAA,UAAU,EAAE,OALC;AAMbC,MAAAA,OAAO,EAAE;AANI,KAAf,CAFF;AAWArB,IAAAA,YAAY,GAAGV,YAAY,CAACgC,WAAb,CAAyBC,yBAAzB,CAAf;AACA,qBAAAvB,YAAY,UAAZ,sDAAcS,IAAd,CAAmBe,GAAnB,CAAwBf,IAAD,IAAiB;AACtCC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KAFD;AAGD,GAhBD;;AAkBA,QAAMgB,aAAa,GAAG,CAACC,MAAD,EAAiBC,SAAjB,KAAuC;AAC3DrB,IAAAA,QAAQ,CAACF,KAAK,CAACwB,GAAN,CAAUC,IAAI,IAAI;AACzB,UAAIA,IAAI,CAACC,EAAL,KAAYJ,MAAhB,EAAwB;AACtBG,QAAAA,IAAI,CAACE,QAAL,GAAgBF,IAAI,CAACE,QAAL,CAAcH,GAAd,CAAkBI,OAAO,IAAI;AAC3C,cAAIA,OAAO,CAACF,EAAR,KAAeH,SAAnB,EAA8B;AAC5BK,YAAAA,OAAO,CAACC,aAAR,GAAwBtC,aAAa,CAACuC,MAAtC;AACAF,YAAAA,OAAO,CAACG,QAAR,GAAmBC,SAAnB;AACD;;AACD,iBAAOJ,OAAP;AACD,SANe,CAAhB;AAOD;;AACD,aAAOH,IAAP;AACD,KAXQ,CAAD,CAAR;AAYD,GAbD;;AAeA,QAAMQ,aAAa,GAAG,MAAM;AAC1BjC,IAAAA,KAAK,CAACkC,OAAN,CAAeT,IAAD,IAAU;AACtBU,MAAAA,gBAAgB,CAACV,IAAD,CAAhB;AACAW,MAAAA,mBAAmB,CAACX,IAAD,CAAnB;AACAY,MAAAA,WAAW,CAACZ,IAAD,CAAX;AACD,KAJD;AAKD,GAND;;AAOA,QAAMa,kBAAkB,GAAG,MAAM;AAC/BD,IAAAA,WAAW,CAACpC,UAAD,CAAX;AACD,GAFD;;AAGA,QAAMoC,WAAW,GAAIZ,IAAD,IAAiB;AACnC,UAAMc,cAAc,GAAG1C,aAAa,CAACuB,GAAd,CAAkBK,IAAI,CAACe,GAAvB,CAAvB;;AACA,QAAGf,IAAI,CAACgB,YAAL,KAAsB,EAAtB,KAA6B,CAACF,cAAD,IAAoBA,cAAc,CAACG,MAAf,KAA0BjB,IAAI,CAACgB,YAAhF,CAAH,EAAkG;AAAA;;AAChG,UAAGF,cAAH,EACEI,YAAY,CAACJ,cAAc,CAACK,OAAhB,CAAZ,CADF,KAGE,kBAAAhD,YAAY,UAAZ,+EAAc6B,IAAd,4EAAoBA,IAApB,CAAyBoB,UAAzB,CAAoCpB,IAAI,CAACe,GAAzC;AACF,YAAMM,WAAW,GAAG;AAClBF,QAAAA,OAAO,EAAEG,UAAU,CAAC,MAAM;AAAA;;AAAE,4BAAAnD,YAAY,UAAZ,+EAAc6B,IAAd,4EAAoBA,IAApB,CAAyBuB,UAAzB,CAAoCvB,IAAI,CAACe,GAAzC;AAA+C3C,UAAAA,aAAa,CAACoD,MAAd,CAAqBxB,IAAI,CAACe,GAA1B;AAAgC,SAAxF,EAA0F,IAA1F,CADD;AAElBE,QAAAA,MAAM,EAAG,GAAEjB,IAAI,CAACgB,YAAa;AAFX,OAApB;AAIA5C,MAAAA,aAAa,CAACqD,GAAd,CAAkBzB,IAAI,CAACe,GAAvB,EAA4BM,WAA5B;AACD;AACF,GAbD;;AAeA,QAAMV,mBAAmB,GAAIX,IAAD,IAAiB;AAC3C,QAAGA,IAAI,CAAC0B,aAAR,EAAuB;AAAA;;AACrB,wBAAAvD,YAAY,UAAZ,wDAAc+B,QAAd,CAAuByB,IAAvB,CAA4B3B,IAA5B,EAAmCE,QAAD,IAAc;AAC9CzB,QAAAA,QAAQ,CAACF,KAAK,CAACwB,GAAN,CAAU6B,GAAG,IAAI;AACxB,cAAGA,GAAG,CAAC3B,EAAJ,KAAWD,IAAI,CAACC,EAAnB,EAAsB;AACpBC,YAAAA,QAAQ,CAAC2B,OAAT,GAAmBpB,OAAnB,CAA2BqB,GAAG,IAAI;AAChCF,cAAAA,GAAG,CAAC1B,QAAJ,CAAa6B,OAAb,CAAqBD,GAArB;AACD,aAFD;AAGAF,YAAAA,GAAG,CAACF,aAAJ,GAAoB,KAApB;AACD;;AACD,iBAAOE,GAAP;AACD,SARQ,CAAD,CAAR;AASD,OAVD;AAWD;AACF,GAdD;;AAgBA,QAAMlB,gBAAgB,GAAIV,IAAD,IAAiB;AACxCA,IAAAA,IAAI,CAACE,QAAL,CAAcO,OAAd,CAAuBqB,GAAD,IAAS;AAC7B,UAAIA,GAAG,CAAC1B,aAAJ,KAAsBtC,aAAa,CAACkE,OAAxC,EAAiD;AAC/C,YAAIF,GAAG,CAACxB,QAAR,EAAkB;AAAA;;AAChB,gBAAM2B,KAAK,GAAG,CAACH,GAAG,CAACxB,QAAL,CAAd;AACAV,UAAAA,aAAa,CAACI,IAAI,CAACC,EAAN,EAAU6B,GAAG,CAAC7B,EAAd,CAAb;AACA,4BAAA9B,YAAY,UAAZ,+EAAc6B,IAAd,4EAAoBkC,SAApB,CAA8BlC,IAA9B,EAAoCiC,KAApC,EAA4CE,IAAD,IAAmC;AAC5EC,YAAAA,kBAAkB,CAACD,IAAD,EAAOnC,IAAP,EAAa8B,GAAb,CAAlB;AACD,WAFD;AAGD,SAND,MAMO;AACLO,UAAAA,WAAW,CAACrC,IAAD,EAAO8B,GAAG,CAAC3B,OAAX,EAAqBmC,KAAD,IAAWC,aAAa,CAACD,KAAD,EAAQtC,IAAR,EAAc8B,GAAd,CAA5C,CAAX;AACD;AACF;AACF,KAZD;AAaD,GAdD;;AAeA,QAAMM,kBAAkB,GAAG,CAACD,IAAD,EAAgCnC,IAAhC,EAA6C8B,GAA7C,KAA+D;AACxF,UAAMU,OAAO,GAAG,EAAE,GAAGxC;AAAL,KAAhB;AACAwC,IAAAA,OAAO,CAACtC,QAAR,GAAmBF,IAAI,CAACE,QAAL,CAAcH,GAAd,CAAmBI,OAAD,IAAa;AAChD,UAAI2B,GAAG,CAAC7B,EAAJ,KAAWE,OAAO,CAACF,EAAvB,EAA2B;AACzB,cAAMwC,QAAQ,GAAGxE,cAAc,CAACkE,IAAI,CAACO,GAAN,CAA/B;AACAvC,QAAAA,OAAO,CAACF,EAAR,GAAakC,IAAI,CAACG,KAAlB;AACAnC,QAAAA,OAAO,CAACwC,OAAR,GAAkBR,IAAI,CAACO,GAAvB;AACAvC,QAAAA,OAAO,CAACC,aAAR,GAAwBtC,aAAa,CAACuC,MAAtC;AACAF,QAAAA,OAAO,CAACyC,IAAR,GAAe,IAAIC,IAAJ,GAAWC,WAAX,EAAf;AACA3C,QAAAA,OAAO,CAACA,OAAR,GAAkBnC,WAAW,CAACmE,IAAI,CAACO,GAAN,CAA7B;AACAvC,QAAAA,OAAO,CAAC4C,aAAR,GAAwBN,QAAQ,CAACM,aAAjC;AACA5C,QAAAA,OAAO,CAAC6C,cAAR,GAAyBP,QAAQ,CAACO,cAAlC;AACA7C,QAAAA,OAAO,CAAC8C,cAAR,GAAyBR,QAAQ,CAACQ,cAAlC;AACA9C,QAAAA,OAAO,CAAC+C,cAAR,GAAyBT,QAAQ,CAACS,cAAlC;AAED;;AACD,aAAO/C,OAAP;AACD,KAfkB,CAAnB;AAiBA1B,IAAAA,QAAQ,CAACF,KAAK,CAACwB,GAAN,CAAW6B,GAAD,IAAS;AAC1B,UAAIA,GAAG,CAAC3B,EAAJ,KAAWD,IAAI,CAACC,EAApB,EAAwB;AACtB2B,QAAAA,GAAG,CAAC1B,QAAJ,GAAesC,OAAO,CAACtC,QAAvB;AACD;;AAAC,aAAO0B,GAAP;AACH,KAJQ,CAAD,CAAR;AAKD,GAxBD;;AAyBA,QAAMW,aAAa,GAAG,CAACD,KAAD,EAAgBtC,IAAhB,EAA6B8B,GAA7B,KAA+C;AACnE,UAAMU,OAAO,GAAG,EAAE,GAAGxC;AAAL,KAAhB;AACAwC,IAAAA,OAAO,CAACtC,QAAR,GAAmBF,IAAI,CAACE,QAAL,CAAcH,GAAd,CAAmBI,OAAD,IAAa;AAChD,UAAI2B,GAAG,CAAC7B,EAAJ,KAAWE,OAAO,CAACF,EAAvB,EAA2B;AACzBE,QAAAA,OAAO,CAACF,EAAR,GAAaqC,KAAb;AACAnC,QAAAA,OAAO,CAACC,aAAR,GAAwBtC,aAAa,CAACuC,MAAtC;AACAF,QAAAA,OAAO,CAACyC,IAAR,GAAe,IAAIC,IAAJ,GAAWC,WAAX,EAAf;AACD;;AACD,aAAO3C,OAAP;AACD,KAPkB,CAAnB;AAQA1B,IAAAA,QAAQ,CAACF,KAAK,CAACwB,GAAN,CAAW6B,GAAD,IAAS;AAC1B,UAAIA,GAAG,CAAC3B,EAAJ,KAAWD,IAAI,CAACC,EAApB,EAAwB;AACtB2B,QAAAA,GAAG,CAAC1B,QAAJ,GAAesC,OAAO,CAACtC,QAAvB;AACD;;AAAC,aAAO0B,GAAP;AACH,KAJQ,CAAD,CAAR;AAKD,GAfD;;AAiBArE,EAAAA,SAAS,CAACiD,aAAD,EAAgB,CAACjC,KAAD,CAAhB,CAAT;AACAhB,EAAAA,SAAS,CAACsD,kBAAD,EAAqB,CAACrC,UAAD,CAArB,CAAT;;AACA,WAASkB,yBAAT,CAAmCyD,KAAnC,EAAkDhB,IAAlD,EAA6D;AAAA;;AAC3D,YAAQgB,KAAR;AACE,WAAKvF,MAAM,CAACwF,MAAZ;AACE,0BAAAjF,YAAY,UAAZ,wDAAcI,KAAd,CAAoBoD,IAApB,CAA0B0B,aAAD,IAAmB;AAAA;;AAC1C5E,UAAAA,QAAQ,CAAC4E,aAAD,CAAR,CAD0C,CAE1C;;AACA,4BAAAlF,YAAY,UAAZ,wDAAcmF,MAAd,CAAqB3B,IAArB,CAA2B2B,MAAD,IAAY;AAAA;;AACpC5E,YAAAA,SAAS,CAAC4E,MAAD,CAAT,CADoC,CAEpC;;AACA,8BAAAnF,YAAY,UAAZ,+EAAc6B,IAAd,4EAAoBuD,UAApB,CAA+BD,MAAM,CAACvD,GAAP,CAAYyD,KAAD,IAAWA,KAAK,CAACzC,GAA5B,CAA/B;AACD,WAJD,EAH0C,CAQ1C;;AACA,4BAAA5C,YAAY,UAAZ,wDAAcsF,QAAd,CAAuB9B,IAAvB,CAA6B8B,QAAD,IAAc9E,WAAW,CAAC8E,QAAD,CAArD,EAT0C,CAU1C;;AAEAJ,UAAAA,aAAa,CAAC5C,OAAd,CAAuBT,IAAD,IAAU;AAAA;;AAC9B,+BAAA7B,YAAY,UAAZ,0DAAc+B,QAAd,CAAuByB,IAAvB,CAA4B3B,IAA5B,EAAmCE,QAAD,IAAc;AAC9C,oBAAMwD,gBAAgB,GAAG,EAAE,GAAG1D;AAAL,eAAzB;AACA0D,cAAAA,gBAAgB,CAACxD,QAAjB,GAA4BwD,gBAAgB,CAACxD,QAAjB,CAA0ByD,MAA1B,CAC1BzD,QAD0B,CAA5B;AAGAzB,cAAAA,QAAQ,CAAC,CACP,GAAG4E,aAAa,CAACO,MAAd,CAAsBhC,GAAD,IAAS5B,IAAI,CAACC,EAAL,KAAY2B,GAAG,CAAC3B,EAA9C,CADI,EAEPyD,gBAFO,CAAD,CAAR;AAID,aATD;AAUD,WAXD;AAYD,SAxBD;AAyBA;;AACF,WAAK9F,MAAM,CAACiG,OAAZ;AACE,YAAI1B,IAAI,CAAC2B,QAAL,KAAkBlF,IAAI,CAACmC,GAA3B,EAAgC;AAChC,YAAIgD,IAAI,GAAG,KAAX;AAEA,YAAIC,QAAQ,GAAGzF,KAAK,CAACwB,GAAN,CAAWC,IAAD,IAAU;AACjC,cAAImC,IAAI,CAAC2B,QAAL,KAAkB9D,IAAI,CAACe,GAA3B,EAAgC;AAC9Bf,YAAAA,IAAI,CAACE,QAAL,CAAc+D,IAAd,CAAmB9B,IAAnB;AACA4B,YAAAA,IAAI,GAAG,IAAP;AACD;;AACD,iBAAO/D,IAAP;AACD,SANc,CAAf;;AAQA,YAAI,CAAC+D,IAAL,EAAW;AAAA;;AACT,cAAIvB,OAAc,GAAG,EAArB;AAEA,6BAAArE,YAAY,UAAZ,0DAAcsF,QAAd,CAAuB9B,IAAvB,CAA6BuC,YAAD,IAAkB;AAE5CA,YAAAA,YAAY,CAACzD,OAAb,CAAsB0D,CAAD,IAAO;AAC1B,kBAAIA,CAAC,CAACpD,GAAF,KAAUoB,IAAI,CAAC2B,QAAnB,EAA6B;AAC3BtB,gBAAAA,OAAO,GAAG;AACRvC,kBAAAA,EAAE,EAAEkE,CAAC,CAAClE,EADE;AAERc,kBAAAA,GAAG,EAAEoD,CAAC,CAACpD,GAFC;AAGRqD,kBAAAA,IAAI,EAAED,CAAC,CAACC,IAHA;AAIRC,kBAAAA,cAAc,EAAEF,CAAC,CAACE,cAJV;AAKRC,kBAAAA,MAAM,EAAEH,CAAC,CAACG,MALF;AAMRC,kBAAAA,MAAM,EAAE,CANA;AAORC,kBAAAA,QAAQ,EAAE3G,QAAQ,CAAC4G,IAPX;AAQRzD,kBAAAA,YAAY,EAAE,EARN;AASR0D,kBAAAA,QAAQ,EAAE,KATF;AAURxE,kBAAAA,QAAQ,EAAE;AAVF,iBAAV;AAYAsC,gBAAAA,OAAO,CAACtC,QAAR,CAAiB+D,IAAjB,CAAsB9B,IAAtB;AACA6B,gBAAAA,QAAQ,CAACjC,OAAT,CAAiBS,OAAjB;AACA/D,gBAAAA,QAAQ,CAACuF,QAAD,CAAR;AACD;AACF,aAlBD;AAmBD,WArBD;AAsBD,SAzBD,MAyBO;AACLvF,UAAAA,QAAQ,CAACuF,QAAD,CAAR;AACD;;AAED;;AACF,WAAKpG,MAAM,CAAC+G,QAAZ;AACElG,QAAAA,QAAQ,CAACF,KAAK,CAACwB,GAAN,CAAUC,IAAI,IAAI;AACzBA,UAAAA,IAAI,CAACE,QAAL,GAAgBF,IAAI,CAACE,QAAL,CAAcH,GAAd,CAAkBI,OAAO,IAAI;AAC3C,gBAAGA,OAAO,CAACF,EAAR,KAAekC,IAAI,CAAClC,EAAvB,EAA0B;AACxBE,cAAAA,OAAO,CAACC,aAAR,GAAwBtC,aAAa,CAAC8G,SAAtC;AACD;;AACD,mBAAOzE,OAAP;AACD,WALe,CAAhB;AAMA,iBAAOH,IAAP;AACD,SARQ,CAAD,CAAR;AASA;;AACF,WAAKpC,MAAM,CAACiH,SAAZ;AACEpG,QAAAA,QAAQ,CAACF,KAAK,CAACwB,GAAN,CAAUC,IAAI,IAAI;AACzBA,UAAAA,IAAI,CAACE,QAAL,GAAgBF,IAAI,CAACE,QAAL,CAAcH,GAAd,CAAkBI,OAAO,IAAI;AAC3C,gBAAGA,OAAO,CAACF,EAAR,KAAekC,IAAI,CAAClC,EAAvB,EAA0B;AACxBE,cAAAA,OAAO,CAAC2E,UAAR,GAAqB5G,UAAU,CAAC6G,IAAhC;AACD;;AACD,mBAAO5E,OAAP;AACD,WALe,CAAhB;AAMA,iBAAOH,IAAP;AACD,SARQ,CAAD,CAAR;AASA;;AACF,WAAKpC,MAAM,CAACoH,SAAZ;AACEvG,QAAAA,QAAQ,CAACF,KAAK,CAACwB,GAAN,CAAWC,IAAD,IAAU;AAC3B,cAAGA,IAAI,CAACe,GAAL,KAAaoB,IAAhB,EAAqB;AACnBnC,YAAAA,IAAI,CAAC0E,QAAL,GAAgB,IAAhB;AACD;;AACD,iBAAO1E,IAAP;AACD,SALQ,CAAD,CAAR;AAMA;;AACF,WAAKpC,MAAM,CAACqH,MAAZ;AACExG,QAAAA,QAAQ,CAACF,KAAK,CAACwB,GAAN,CAAWC,IAAD,IAAU;AAC3B,cAAGA,IAAI,CAACe,GAAL,KAAaoB,IAAhB,EAAqB;AACnBnC,YAAAA,IAAI,CAAC0E,QAAL,GAAgB,KAAhB;AACD;;AACD,iBAAO1E,IAAP;AACD,SALQ,CAAD,CAAR;AAMA;;AACF,WAAKpC,MAAM,CAACsH,QAAZ;AACE;AA7GJ;AA+GD;;AAED,qBAAA/G,YAAY,UAAZ,0DAAcgH,uBAAd,CAAsCzF,yBAAtC,EA3PoD,CA4PpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAS2C,WAAT,CACErC,IADF,EAEEG,OAFF,EAGEiF,QAHF,EAIE;AAAA;;AACA,uBAAAjH,YAAY,UAAZ,kFAAc6B,IAAd,8EAAoBA,IAApB,CAAyBqC,WAAzB,CACErC,IAAI,CAACe,GADP,EAEEf,IAAI,CAACe,GAAL,CAASsE,QAAT,CAAkB,cAAlB,IACItH,YAAY,CAACuH,SADjB,GAEIvH,YAAY,CAACwH,IAJnB,EAKEpF,OALF,EAMEiF,QANF;AAQD;;AAED7H,EAAAA,SAAS,CAACuB,IAAD,EAAO,EAAP,CAAT;AAEA,sBAAO,0CAAGR,QAAH,CAAP;AACD,CAxRD;;AA0RA,eAAed,iBAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\n\r\nimport { Events, SendImageCallbackReturn } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\r\nimport { SendMessageCallback } from \"./types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport { getFileName, getUrlBooleans } from \"./utils/parseUtils\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\n// Comentado para Evitar Warnings no console\r\n// interface CreateGroupCallback {\r\n//   (groupCreated: boolean): void;\r\n// }\r\ninterface TypingTimeoutData{\r\n  timeout: NodeJS.Timeout\r\n  msgStr: string\r\n}\r\nlet squadService: SquadService | undefined;\r\nlet typingTimeout: Map<string, TypingTimeoutData> = new Map<string, TypingTimeoutData>()\r\n\r\nconst SquadCommunicator: React.FC = ({ children }) => {\r\n  const { chats, activeChat, setChats, setGroups, setContacts } = useChat();\r\n  const { user, setUser } = useAuth();\r\n\r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"e9e34268a0adb4b4f009b508de092e2c\",\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        user_name: \"ZZ Romero 2\",\r\n        email: \"romero2@digivox.com.br\",\r\n        expires_in: 2592000,\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n      })\r\n    );\r\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\r\n    squadService?.user.get((user: IUser) => {\r\n      setUser(user);\r\n    });\r\n  };\r\n\r\n  const clearSendFile = (chatId: string, messageId: string) => {\r\n    setChats(chats.map(chat => {\r\n      if (chat.id === chatId) {\r\n        chat.messages = chat.messages.map(message => {\r\n          if (message.id === messageId) {\r\n            message.deliverStatus = DeliverStatus.QUEUED\r\n            message.sendFile = undefined\r\n          }\r\n          return message\r\n        })\r\n      }\r\n      return chat\r\n    }))\r\n  }\r\n\r\n  const onChatsChange = () => {\r\n    chats.forEach((chat) => {\r\n      checkSendMessage(chat);\r\n      checkSearchMessages(chat);\r\n      checkTyping(chat);\r\n    });\r\n  };\r\n  const onActiveChatChange = () => {\r\n    checkTyping(activeChat)\r\n  }\r\n  const checkTyping = (chat: IChat) => {\r\n    const oldTimeoutData = typingTimeout.get(chat.jid)\r\n    if(chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))){\r\n      if(oldTimeoutData)\r\n        clearTimeout(oldTimeoutData.timeout)\r\n      else\r\n        squadService?.chat?.chat.sendTyping(chat.jid)\r\n      const timeoutData = {\r\n        timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\r\n        msgStr: `${chat.inputMessage}`\r\n      }\r\n      typingTimeout.set(chat.jid, timeoutData)\r\n    }\r\n  }\r\n\r\n  const checkSearchMessages = (chat: IChat) => {\r\n    if(chat.messageLoaded) {\r\n      squadService?.messages.list(chat, (messages) => {\r\n        setChats(chats.map(cht => {\r\n          if(cht.id === chat.id){\r\n            messages.reverse().forEach(msg => {\r\n              cht.messages.unshift(msg)\r\n            })\r\n            cht.messageLoaded = false;\r\n          }\r\n          return cht\r\n        }))\r\n      })\r\n    }\r\n  }\r\n\r\n  const checkSendMessage = (chat: IChat) => {\r\n    chat.messages.forEach((msg) => {\r\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\r\n        if (msg.sendFile) {\r\n          const files = [msg.sendFile];\r\n          clearSendFile(chat.id, msg.id);\r\n          squadService?.chat?.sendFiles(chat, files, (data: SendImageCallbackReturn) => {\r\n            updateMessageFiles(data, chat, msg)\r\n          });\r\n        } else {\r\n          sendMessage(chat, msg.message, (msgId) => updateMessage(msgId, chat, msg));\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const updateMessageFiles = (data: SendImageCallbackReturn, chat: IChat, msg: IMessage) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        const booleans = getUrlBooleans(data.url)\r\n        message.id = data.msgId\r\n        message.fileUrl = data.url\r\n        message.deliverStatus = DeliverStatus.QUEUED\r\n        message.time = new Date().toISOString()\r\n        message.message = getFileName(data.url)\r\n        message.isFileMessage = booleans.isFileMessage\r\n        message.isImageMessage = booleans.isImageMessage\r\n        message.isVideoMessage = booleans.isVideoMessage\r\n        message.isAudioMessage = booleans.isAudioMessage\r\n\r\n      }\r\n      return message\r\n    }\r\n    );\r\n    setChats(chats.map((cht) => {\r\n      if (cht.id === chat.id) {\r\n        cht.messages = newChat.messages\r\n      } return cht\r\n    }));\r\n  }\r\n  const updateMessage = (msgId: string, chat: IChat, msg: IMessage) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        message.id = msgId\r\n        message.deliverStatus = DeliverStatus.QUEUED\r\n        message.time = new Date().toISOString()\r\n      }\r\n      return message\r\n    });\r\n    setChats(chats.map((cht) => {\r\n      if (cht.id === chat.id) {\r\n        cht.messages = newChat.messages\r\n      } return cht\r\n    }));\r\n  }\r\n\r\n  useEffect(onChatsChange, [chats]);\r\n  useEffect(onActiveChatChange, [activeChat])\r\n  function chatCommunicatorSubscribe(event: string, data: any) {\r\n    switch (event) {\r\n      case Events.ONLINE:\r\n        squadService?.chats.list((receivedChats) => {\r\n          setChats(receivedChats);\r\n          //populating groups\r\n          squadService?.groups.list((groups) => {\r\n            setGroups(groups);\r\n            //Joining Groups Rooms in XMPP\r\n            squadService?.chat?.joinGroups(groups.map((group) => group.jid));\r\n          });\r\n          //populating contacts\r\n          squadService?.contacts.list((contacts) => setContacts(contacts));\r\n          //populating chat's with messages\r\n\r\n          receivedChats.forEach((chat) => {\r\n            squadService?.messages.list(chat, (messages) => {\r\n              const chatWithMessages = { ...chat };\r\n              chatWithMessages.messages = chatWithMessages.messages.concat(\r\n                messages\r\n              );\r\n              setChats([\r\n                ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n                chatWithMessages,\r\n              ]);\r\n            });\r\n          });\r\n        });\r\n        break;\r\n      case Events.MESSAGE:\r\n        if (data.fromUser === user.jid) break;\r\n        let find = false;\r\n\r\n        let newChats = chats.map((chat) => {\r\n          if (data.fromUser === chat.jid) {\r\n            chat.messages.push(data);\r\n            find = true;\r\n          }\r\n          return chat;\r\n        });\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.contacts.list((listContacts) => {\r\n\r\n            listContacts.forEach((c) => {\r\n              if (c.jid === data.fromUser) {\r\n                newChat = {\r\n                  id: c.id,\r\n                  jid: c.jid,\r\n                  name: c.name,\r\n                  profilePicture: c.profilePicture,\r\n                  status: c.status,\r\n                  unRead: 1,\r\n                  chatType: ChatType.USER,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  messages: [],\r\n                };\r\n                newChat.messages.push(data);\r\n                newChats.unshift(newChat);\r\n                setChats(newChats);\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          setChats(newChats);\r\n        }\r\n\r\n        break;\r\n      case Events.RECEIVED:\r\n        setChats(chats.map(chat => {\r\n          chat.messages = chat.messages.map(message => {\r\n            if(message.id === data.id){\r\n              message.deliverStatus = DeliverStatus.DELIVERED\r\n            }\r\n            return message\r\n          })\r\n          return chat\r\n        }))\r\n        break;\r\n      case Events.DISPLAYED:\r\n        setChats(chats.map(chat => {\r\n          chat.messages = chat.messages.map(message => {\r\n            if(message.id === data.id){\r\n              message.readStatus = ReadStatus.READ\r\n            }\r\n            return message\r\n          })\r\n          return chat\r\n        }))\r\n        break;\r\n      case Events.COMPOSING:\r\n        setChats(chats.map((chat) => {\r\n          if(chat.jid === data){\r\n            chat.isTyping = true\r\n          }\r\n          return chat\r\n        }))\r\n        break;\r\n      case Events.ACTIVE:\r\n        setChats(chats.map((chat) => {\r\n          if(chat.jid === data){\r\n            chat.isTyping = false\r\n          }\r\n          return chat\r\n        }))\r\n        break;\r\n      case Events.PRESENCE:\r\n        break;\r\n    }\r\n  }\r\n\r\n  squadService?.updateSubscribeFunction(chatCommunicatorSubscribe);\r\n  // Comentado para evitar warnings no console enquanto não é usado\r\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\r\n  //     squadService?.groups.list((groups) => {\r\n  //       setGroups(groups);\r\n  //       callback(true);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  function sendMessage(\r\n    chat: IChat,\r\n    message: string,\r\n    callback: SendMessageCallback\r\n  ) {\r\n    squadService?.chat?.chat.sendMessage(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message,\r\n      callback\r\n    );\r\n  }\r\n\r\n  useEffect(init, []);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}