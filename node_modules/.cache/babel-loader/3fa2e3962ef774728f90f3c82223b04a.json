{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ChatBody.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport SimpleBar from \"simplebar-react\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport ChatMessage from \"./ChatMessage\";\nimport ChatMessageIsTyping from \"./ChatMessageisTyping\";\nimport { ModalSelectUsers } from \"./ModalSelectUsers\";\n\nconst ChatBody = () => {\n  const {\n    activeChat\n  } = useChat();\n  const [showButtonBottom, setShowButtonBottom] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const scrollableNodeRef = React.createRef();\n\n  const toggle = () => {\n    setShowModal(!showModal);\n  };\n\n  const onScroll = ev => {\n    var _ev$target, _ev$target2;\n\n    if ((ev === null || ev === void 0 ? void 0 : (_ev$target = ev.target) === null || _ev$target === void 0 ? void 0 : _ev$target.scrollTop) <= (ev === null || ev === void 0 ? void 0 : (_ev$target2 = ev.target) === null || _ev$target2 === void 0 ? void 0 : _ev$target2.scrollHeight) - 1000) {\n      setShowButtonBottom(true);\n    } else {\n      setShowButtonBottom(false);\n    }\n  };\n\n  const scrolltoBottom = () => {\n    var _scrollableNodeRef$cu, _scrollableNodeRef$cu2;\n\n    if ((scrollableNodeRef === null || scrollableNodeRef === void 0 ? void 0 : (_scrollableNodeRef$cu = scrollableNodeRef.current) === null || _scrollableNodeRef$cu === void 0 ? void 0 : _scrollableNodeRef$cu.scrollTop) >= 0) scrollableNodeRef.current.scrollTop = scrollableNodeRef === null || scrollableNodeRef === void 0 ? void 0 : (_scrollableNodeRef$cu2 = scrollableNodeRef.current) === null || _scrollableNodeRef$cu2 === void 0 ? void 0 : _scrollableNodeRef$cu2.scrollHeight;\n    setShowButtonBottom(false);\n  };\n\n  const checkScroll = () => {\n    var _scrollableNodeRef$cu3, _scrollableNodeRef$cu4;\n\n    if ((scrollableNodeRef === null || scrollableNodeRef === void 0 ? void 0 : (_scrollableNodeRef$cu3 = scrollableNodeRef.current) === null || _scrollableNodeRef$cu3 === void 0 ? void 0 : _scrollableNodeRef$cu3.scrollTop) <= (scrollableNodeRef === null || scrollableNodeRef === void 0 ? void 0 : (_scrollableNodeRef$cu4 = scrollableNodeRef.current) === null || _scrollableNodeRef$cu4 === void 0 ? void 0 : _scrollableNodeRef$cu4.scrollHeight) - 1000) {\n      setShowButtonBottom(true);\n    }\n\n    if (scrollableNodeRef === null || scrollableNodeRef === void 0 ? void 0 : scrollableNodeRef.current) scrollableNodeRef.current.onscroll = onScroll;\n  };\n\n  useEffect(checkScroll);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SimpleBar, {\n    style: {\n      maxHeight: \"100%\"\n    },\n    className: \"chat-conversation p-3 p-lg-4\",\n    id: \"messages\",\n    scrollableNodeProps: {\n      ref: scrollableNodeRef\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list-unstyled mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, activeChat.messages.map((message, key) => /*#__PURE__*/React.createElement(ChatMessage, {\n    activeChat: activeChat,\n    message: message,\n    key: key,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(ChatMessageIsTyping, {\n    activeChat: activeChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(ModalSelectUsers, {\n    show: showModal,\n    toggle: toggle,\n    message: activeChat.messages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), showButtonBottom && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-chat-down\",\n    onClick: scrolltoBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"ri-arrow-down-s-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default ChatBody;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ChatBody.tsx"],"names":["React","useState","useEffect","SimpleBar","useChat","ChatMessage","ChatMessageIsTyping","ModalSelectUsers","ChatBody","activeChat","showButtonBottom","setShowButtonBottom","showModal","setShowModal","scrollableNodeRef","createRef","toggle","onScroll","ev","target","scrollTop","scrollHeight","scrolltoBottom","current","checkScroll","onscroll","maxHeight","ref","messages","map","message","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;;AAEA,MAAMC,QAAkB,GAAG,MAAM;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAiBL,OAAO,EAA9B;AACA,QAAM,CAACM,gBAAD,EAAmBC,mBAAnB,IAA0CV,QAAQ,CAAC,KAAD,CAAxD;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMa,iBAAiB,GAAGd,KAAK,CAACe,SAAN,EAA1B;;AACA,QAAMC,MAAM,GAAG,MAAM;AACnBH,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD,GAFD;;AAGA,QAAMK,QAAQ,GAAIC,EAAD,IAAa;AAAA;;AAC5B,QAAI,CAAAA,EAAE,SAAF,IAAAA,EAAE,WAAF,0BAAAA,EAAE,CAAEC,MAAJ,0DAAYC,SAAZ,KAAyB,CAAAF,EAAE,SAAF,IAAAA,EAAE,WAAF,2BAAAA,EAAE,CAAEC,MAAJ,4DAAYE,YAAZ,IAA2B,IAAxD,EAA8D;AAC5DV,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD,KAFD,MAEO;AACLA,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD;AACF,GAND;;AAOA,QAAMW,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAI,CAAAR,iBAAiB,SAAjB,IAAAA,iBAAiB,WAAjB,qCAAAA,iBAAiB,CAAES,OAAnB,gFAA4BH,SAA5B,KAAyC,CAA7C,EACEN,iBAAiB,CAACS,OAAlB,CAA0BH,SAA1B,GACEN,iBADF,aACEA,iBADF,iDACEA,iBAAiB,CAAES,OADrB,2DACE,uBAA4BF,YAD9B;AAEFV,IAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,GALD;;AAMA,QAAMa,WAAW,GAAG,MAAM;AAAA;;AACxB,QACE,CAAAV,iBAAiB,SAAjB,IAAAA,iBAAiB,WAAjB,sCAAAA,iBAAiB,CAAES,OAAnB,kFAA4BH,SAA5B,KACA,CAAAN,iBAAiB,SAAjB,IAAAA,iBAAiB,WAAjB,sCAAAA,iBAAiB,CAAES,OAAnB,kFAA4BF,YAA5B,IAA2C,IAF7C,EAGE;AACAV,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACD;;AACD,QAAIG,iBAAJ,aAAIA,iBAAJ,uBAAIA,iBAAiB,CAAES,OAAvB,EACET,iBAAiB,CAACS,OAAlB,CAA0BE,QAA1B,GAAqCR,QAArC;AACH,GATD;;AAUAf,EAAAA,SAAS,CAACsB,WAAD,CAAT;AACA,sBACE,uDACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAE;AAAEE,MAAAA,SAAS,EAAE;AAAb,KADT;AAEE,IAAA,SAAS,EAAC,8BAFZ;AAGE,IAAA,EAAE,EAAC,UAHL;AAIE,IAAA,mBAAmB,EAAE;AAAEC,MAAAA,GAAG,EAAEb;AAAP,KAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME;AAAI,IAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,UAAU,CAACmB,QAAX,CAAoBC,GAApB,CAAwB,CAACC,OAAD,EAAUC,GAAV,kBACvB,oBAAC,WAAD;AACE,IAAA,UAAU,EAAEtB,UADd;AAEE,IAAA,OAAO,EAAEqB,OAFX;AAGE,IAAA,GAAG,EAAEC,GAHP;AAIE,IAAA,MAAM,EAAEf,MAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,eASE,oBAAC,mBAAD;AAAqB,IAAA,UAAU,EAAEP,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CANF,CADF,eAmBE,oBAAC,gBAAD;AACE,IAAA,IAAI,EAAEG,SADR;AAEE,IAAA,MAAM,EAAEI,MAFV;AAGE,IAAA,OAAO,EAAEP,UAAU,CAACmB,QAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBF,EAwBGlB,gBAAgB,iBACf;AAAK,IAAA,SAAS,EAAC,eAAf;AAA+B,IAAA,OAAO,EAAEY,cAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,SAAS,EAAC,sBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAzBJ,CADF;AAgCD,CAhED;;AAkEA,eAAed,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport ChatMessage from \"./ChatMessage\";\r\nimport ChatMessageIsTyping from \"./ChatMessageisTyping\";\r\nimport { ModalSelectUsers } from \"./ModalSelectUsers\";\r\n\r\nconst ChatBody: React.FC = () => {\r\n  const { activeChat } = useChat();\r\n  const [showButtonBottom, setShowButtonBottom] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const scrollableNodeRef = React.createRef<any>();\r\n  const toggle = () => {\r\n    setShowModal(!showModal);\r\n  };\r\n  const onScroll = (ev: any) => {\r\n    if (ev?.target?.scrollTop <= ev?.target?.scrollHeight - 1000) {\r\n      setShowButtonBottom(true);\r\n    } else {\r\n      setShowButtonBottom(false);\r\n    }\r\n  };\r\n  const scrolltoBottom = () => {\r\n    if (scrollableNodeRef?.current?.scrollTop >= 0)\r\n      scrollableNodeRef.current.scrollTop =\r\n        scrollableNodeRef?.current?.scrollHeight;\r\n    setShowButtonBottom(false);\r\n  };\r\n  const checkScroll = () => {\r\n    if (\r\n      scrollableNodeRef?.current?.scrollTop <=\r\n      scrollableNodeRef?.current?.scrollHeight - 1000\r\n    ) {\r\n      setShowButtonBottom(true);\r\n    }\r\n    if (scrollableNodeRef?.current)\r\n      scrollableNodeRef.current.onscroll = onScroll;\r\n  };\r\n  useEffect(checkScroll);\r\n  return (\r\n    <>\r\n      <SimpleBar\r\n        style={{ maxHeight: \"100%\" }}\r\n        className=\"chat-conversation p-3 p-lg-4\"\r\n        id=\"messages\"\r\n        scrollableNodeProps={{ ref: scrollableNodeRef }}\r\n      >\r\n        <ul className=\"list-unstyled mb-0\">\r\n          {activeChat.messages.map((message, key) => (\r\n            <ChatMessage\r\n              activeChat={activeChat}\r\n              message={message}\r\n              key={key}\r\n              toggle={toggle}\r\n            />\r\n          ))}\r\n          <ChatMessageIsTyping activeChat={activeChat} />\r\n        </ul>\r\n      </SimpleBar>\r\n      <ModalSelectUsers\r\n        show={showModal}\r\n        toggle={toggle}\r\n        message={activeChat.messages}\r\n      />\r\n      {showButtonBottom && (\r\n        <div className=\"btn-chat-down\" onClick={scrolltoBottom}>\r\n          <i className=\"ri-arrow-down-s-line\"></i>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatBody;\r\n"]},"metadata":{},"sourceType":"module"}