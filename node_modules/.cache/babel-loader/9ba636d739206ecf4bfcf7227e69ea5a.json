{"ast":null,"code":"'use strict';\n\nconst {\n  Parser,\n  Element,\n  XMLError\n} = require('@xmpp/xml');\n\nmodule.exports = class FramedParser extends Parser {\n  onStartElement(name, attrs) {\n    const element = new Element(name, attrs);\n    const {\n      cursor\n    } = this;\n\n    if (cursor) {\n      cursor.append(element);\n    }\n\n    this.cursor = element;\n  }\n\n  onEndElement(name) {\n    const {\n      cursor\n    } = this;\n\n    if (name !== cursor.name) {\n      // <foo></bar>\n      this.emit('error', new XMLError(`${cursor.name} must be closed.`));\n      return;\n    }\n\n    if (cursor.parent) {\n      this.cursor = cursor.parent;\n      return;\n    }\n\n    if (cursor.is('open', 'urn:ietf:params:xml:ns:xmpp-framing')) {\n      this.emit('start', cursor);\n    } else if (cursor.is('close', 'urn:ietf:params:xml:ns:xmpp-framing')) {\n      this.emit('end', cursor);\n    } else {\n      this.emit('element', cursor);\n    }\n\n    this.cursor = null;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/websocket/lib/FramedParser.js"],"names":["Parser","Element","XMLError","require","module","exports","FramedParser","onStartElement","name","attrs","element","cursor","append","onEndElement","emit","parent","is"],"mappings":"AAAA;;AAEA,MAAM;AAACA,EAAAA,MAAD;AAASC,EAAAA,OAAT;AAAkBC,EAAAA;AAAlB,IAA8BC,OAAO,CAAC,WAAD,CAA3C;;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,YAAN,SAA2BN,MAA3B,CAAkC;AACjDO,EAAAA,cAAc,CAACC,IAAD,EAAOC,KAAP,EAAc;AAC1B,UAAMC,OAAO,GAAG,IAAIT,OAAJ,CAAYO,IAAZ,EAAkBC,KAAlB,CAAhB;AAEA,UAAM;AAACE,MAAAA;AAAD,QAAW,IAAjB;;AAEA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACC,MAAP,CAAcF,OAAd;AACD;;AAED,SAAKC,MAAL,GAAcD,OAAd;AACD;;AAEDG,EAAAA,YAAY,CAACL,IAAD,EAAO;AACjB,UAAM;AAACG,MAAAA;AAAD,QAAW,IAAjB;;AACA,QAAIH,IAAI,KAAKG,MAAM,CAACH,IAApB,EAA0B;AACxB;AACA,WAAKM,IAAL,CAAU,OAAV,EAAmB,IAAIZ,QAAJ,CAAc,GAAES,MAAM,CAACH,IAAK,kBAA5B,CAAnB;AACA;AACD;;AAED,QAAIG,MAAM,CAACI,MAAX,EAAmB;AACjB,WAAKJ,MAAL,GAAcA,MAAM,CAACI,MAArB;AACA;AACD;;AAED,QAAIJ,MAAM,CAACK,EAAP,CAAU,MAAV,EAAkB,qCAAlB,CAAJ,EAA8D;AAC5D,WAAKF,IAAL,CAAU,OAAV,EAAmBH,MAAnB;AACD,KAFD,MAEO,IAAIA,MAAM,CAACK,EAAP,CAAU,OAAV,EAAmB,qCAAnB,CAAJ,EAA+D;AACpE,WAAKF,IAAL,CAAU,KAAV,EAAiBH,MAAjB;AACD,KAFM,MAEA;AACL,WAAKG,IAAL,CAAU,SAAV,EAAqBH,MAArB;AACD;;AAED,SAAKA,MAAL,GAAc,IAAd;AACD;;AAnCgD,CAAnD","sourcesContent":["'use strict'\n\nconst {Parser, Element, XMLError} = require('@xmpp/xml')\n\nmodule.exports = class FramedParser extends Parser {\n  onStartElement(name, attrs) {\n    const element = new Element(name, attrs)\n\n    const {cursor} = this\n\n    if (cursor) {\n      cursor.append(element)\n    }\n\n    this.cursor = element\n  }\n\n  onEndElement(name) {\n    const {cursor} = this\n    if (name !== cursor.name) {\n      // <foo></bar>\n      this.emit('error', new XMLError(`${cursor.name} must be closed.`))\n      return\n    }\n\n    if (cursor.parent) {\n      this.cursor = cursor.parent\n      return\n    }\n\n    if (cursor.is('open', 'urn:ietf:params:xml:ns:xmpp-framing')) {\n      this.emit('start', cursor)\n    } else if (cursor.is('close', 'urn:ietf:params:xml:ns:xmpp-framing')) {\n      this.emit('end', cursor)\n    } else {\n      this.emit('element', cursor)\n    }\n\n    this.cursor = null\n  }\n}\n"]},"metadata":{},"sourceType":"script"}