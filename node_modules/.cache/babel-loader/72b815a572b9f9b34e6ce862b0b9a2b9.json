{"ast":null,"code":"import { NameAddrHeader } from \"../core\";\n/**\n * A request to establish a {@link Session} elsewhere (incoming REFER).\n * @public\n */\n\nexport class Referral {\n  /** @internal */\n  constructor(incomingReferRequest, session) {\n    this.incomingReferRequest = incomingReferRequest;\n    this.session = session;\n  }\n\n  get referTo() {\n    const referTo = this.incomingReferRequest.message.parseHeader(\"refer-to\");\n\n    if (!(referTo instanceof NameAddrHeader)) {\n      throw new Error(\"Failed to parse Refer-To header.\");\n    }\n\n    return referTo;\n  }\n\n  get referredBy() {\n    return this.incomingReferRequest.message.getHeader(\"referred-by\");\n  }\n\n  get replaces() {\n    return this.referTo.uri.getHeader(\"replaces\");\n  }\n  /** Incoming REFER request message. */\n\n\n  get request() {\n    return this.incomingReferRequest.message;\n  }\n  /** Accept the request. */\n\n\n  accept(options = {\n    statusCode: 202\n  }) {\n    this.incomingReferRequest.accept(options);\n    return Promise.resolve();\n  }\n  /** Reject the request. */\n\n\n  reject(options) {\n    this.incomingReferRequest.reject(options);\n    return Promise.resolve();\n  }\n  /**\n   * Creates an inviter which may be used to send an out of dialog INVITE request.\n   *\n   * @remarks\n   * This a helper method to create an Inviter which will execute the referral\n   * of the `Session` which was referred. The appropriate headers are set and\n   * the referred `Session` is linked to the new `Session`. Note that only a\n   * single instance of the `Inviter` will be created and returned (if called\n   * more than once a reference to the same `Inviter` will be returned every time).\n   *\n   * @param options - Options bucket.\n   * @param modifiers - Session description handler modifiers.\n   */\n\n\n  makeInviter(options) {\n    if (this.inviter) {\n      return this.inviter;\n    }\n\n    const targetURI = this.referTo.uri.clone();\n    targetURI.clearHeaders();\n    options = options || {};\n    const extraHeaders = (options.extraHeaders || []).slice();\n    const replaces = this.replaces;\n\n    if (replaces) {\n      // decodeURIComponent is a holdover from 2c086eb4. Not sure that it is actually necessary\n      extraHeaders.push(\"Replaces: \" + decodeURIComponent(replaces));\n    }\n\n    const referredBy = this.referredBy;\n\n    if (referredBy) {\n      extraHeaders.push(\"Referred-By: \" + referredBy);\n    }\n\n    options.extraHeaders = extraHeaders;\n    this.inviter = this.session.userAgent._makeInviter(targetURI, options);\n    this.inviter._referred = this.session;\n    this.session._referral = this.inviter;\n    return this.inviter;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/api/referral.js"],"names":["NameAddrHeader","Referral","constructor","incomingReferRequest","session","referTo","message","parseHeader","Error","referredBy","getHeader","replaces","uri","request","accept","options","statusCode","Promise","resolve","reject","makeInviter","inviter","targetURI","clone","clearHeaders","extraHeaders","slice","push","decodeURIComponent","userAgent","_makeInviter","_referred","_referral"],"mappings":"AAAA,SAASA,cAAT,QAA+B,SAA/B;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,QAAN,CAAe;AAClB;AACAC,EAAAA,WAAW,CAACC,oBAAD,EAAuBC,OAAvB,EAAgC;AACvC,SAAKD,oBAAL,GAA4BA,oBAA5B;AACA,SAAKC,OAAL,GAAeA,OAAf;AACH;;AACD,MAAIC,OAAJ,GAAc;AACV,UAAMA,OAAO,GAAG,KAAKF,oBAAL,CAA0BG,OAA1B,CAAkCC,WAAlC,CAA8C,UAA9C,CAAhB;;AACA,QAAI,EAAEF,OAAO,YAAYL,cAArB,CAAJ,EAA0C;AACtC,YAAM,IAAIQ,KAAJ,CAAU,kCAAV,CAAN;AACH;;AACD,WAAOH,OAAP;AACH;;AACD,MAAII,UAAJ,GAAiB;AACb,WAAO,KAAKN,oBAAL,CAA0BG,OAA1B,CAAkCI,SAAlC,CAA4C,aAA5C,CAAP;AACH;;AACD,MAAIC,QAAJ,GAAe;AACX,WAAO,KAAKN,OAAL,CAAaO,GAAb,CAAiBF,SAAjB,CAA2B,UAA3B,CAAP;AACH;AACD;;;AACA,MAAIG,OAAJ,GAAc;AACV,WAAO,KAAKV,oBAAL,CAA0BG,OAAjC;AACH;AACD;;;AACAQ,EAAAA,MAAM,CAACC,OAAO,GAAG;AAAEC,IAAAA,UAAU,EAAE;AAAd,GAAX,EAAgC;AAClC,SAAKb,oBAAL,CAA0BW,MAA1B,CAAiCC,OAAjC;AACA,WAAOE,OAAO,CAACC,OAAR,EAAP;AACH;AACD;;;AACAC,EAAAA,MAAM,CAACJ,OAAD,EAAU;AACZ,SAAKZ,oBAAL,CAA0BgB,MAA1B,CAAiCJ,OAAjC;AACA,WAAOE,OAAO,CAACC,OAAR,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,WAAW,CAACL,OAAD,EAAU;AACjB,QAAI,KAAKM,OAAT,EAAkB;AACd,aAAO,KAAKA,OAAZ;AACH;;AACD,UAAMC,SAAS,GAAG,KAAKjB,OAAL,CAAaO,GAAb,CAAiBW,KAAjB,EAAlB;AACAD,IAAAA,SAAS,CAACE,YAAV;AACAT,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,UAAMU,YAAY,GAAG,CAACV,OAAO,CAACU,YAAR,IAAwB,EAAzB,EAA6BC,KAA7B,EAArB;AACA,UAAMf,QAAQ,GAAG,KAAKA,QAAtB;;AACA,QAAIA,QAAJ,EAAc;AACV;AACAc,MAAAA,YAAY,CAACE,IAAb,CAAkB,eAAeC,kBAAkB,CAACjB,QAAD,CAAnD;AACH;;AACD,UAAMF,UAAU,GAAG,KAAKA,UAAxB;;AACA,QAAIA,UAAJ,EAAgB;AACZgB,MAAAA,YAAY,CAACE,IAAb,CAAkB,kBAAkBlB,UAApC;AACH;;AACDM,IAAAA,OAAO,CAACU,YAAR,GAAuBA,YAAvB;AACA,SAAKJ,OAAL,GAAe,KAAKjB,OAAL,CAAayB,SAAb,CAAuBC,YAAvB,CAAoCR,SAApC,EAA+CP,OAA/C,CAAf;AACA,SAAKM,OAAL,CAAaU,SAAb,GAAyB,KAAK3B,OAA9B;AACA,SAAKA,OAAL,CAAa4B,SAAb,GAAyB,KAAKX,OAA9B;AACA,WAAO,KAAKA,OAAZ;AACH;;AApEiB","sourcesContent":["import { NameAddrHeader } from \"../core\";\n/**\n * A request to establish a {@link Session} elsewhere (incoming REFER).\n * @public\n */\nexport class Referral {\n    /** @internal */\n    constructor(incomingReferRequest, session) {\n        this.incomingReferRequest = incomingReferRequest;\n        this.session = session;\n    }\n    get referTo() {\n        const referTo = this.incomingReferRequest.message.parseHeader(\"refer-to\");\n        if (!(referTo instanceof NameAddrHeader)) {\n            throw new Error(\"Failed to parse Refer-To header.\");\n        }\n        return referTo;\n    }\n    get referredBy() {\n        return this.incomingReferRequest.message.getHeader(\"referred-by\");\n    }\n    get replaces() {\n        return this.referTo.uri.getHeader(\"replaces\");\n    }\n    /** Incoming REFER request message. */\n    get request() {\n        return this.incomingReferRequest.message;\n    }\n    /** Accept the request. */\n    accept(options = { statusCode: 202 }) {\n        this.incomingReferRequest.accept(options);\n        return Promise.resolve();\n    }\n    /** Reject the request. */\n    reject(options) {\n        this.incomingReferRequest.reject(options);\n        return Promise.resolve();\n    }\n    /**\n     * Creates an inviter which may be used to send an out of dialog INVITE request.\n     *\n     * @remarks\n     * This a helper method to create an Inviter which will execute the referral\n     * of the `Session` which was referred. The appropriate headers are set and\n     * the referred `Session` is linked to the new `Session`. Note that only a\n     * single instance of the `Inviter` will be created and returned (if called\n     * more than once a reference to the same `Inviter` will be returned every time).\n     *\n     * @param options - Options bucket.\n     * @param modifiers - Session description handler modifiers.\n     */\n    makeInviter(options) {\n        if (this.inviter) {\n            return this.inviter;\n        }\n        const targetURI = this.referTo.uri.clone();\n        targetURI.clearHeaders();\n        options = options || {};\n        const extraHeaders = (options.extraHeaders || []).slice();\n        const replaces = this.replaces;\n        if (replaces) {\n            // decodeURIComponent is a holdover from 2c086eb4. Not sure that it is actually necessary\n            extraHeaders.push(\"Replaces: \" + decodeURIComponent(replaces));\n        }\n        const referredBy = this.referredBy;\n        if (referredBy) {\n            extraHeaders.push(\"Referred-By: \" + referredBy);\n        }\n        options.extraHeaders = extraHeaders;\n        this.inviter = this.session.userAgent._makeInviter(targetURI, options);\n        this.inviter._referred = this.session;\n        this.session._referral = this.inviter;\n        return this.inviter;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}