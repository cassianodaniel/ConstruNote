{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { Md5 } from \"./md5\";\nimport { createRandomToken } from \"./utils\";\n\nfunction MD5(s) {\n  return Md5.hashStr(s);\n}\n/**\n * Digest Authentication.\n * @internal\n */\n\n\nexport var DigestAuthentication = /*#__PURE__*/function () {\n  /**\n   * Constructor.\n   * @param loggerFactory - LoggerFactory.\n   * @param username - Username.\n   * @param password - Password.\n   */\n  function DigestAuthentication(loggerFactory, ha1, username, password) {\n    _classCallCheck(this, DigestAuthentication);\n\n    this.logger = loggerFactory.getLogger(\"sipjs.digestauthentication\");\n    this.username = username;\n    this.password = password;\n    this.ha1 = ha1;\n    this.nc = 0;\n    this.ncHex = \"00000000\";\n  }\n  /**\n   * Performs Digest authentication given a SIP request and the challenge\n   * received in a response to that request.\n   * @param request -\n   * @param challenge -\n   * @returns true if credentials were successfully generated, false otherwise.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  _createClass(DigestAuthentication, [{\n    key: \"authenticate\",\n    value: function authenticate(request, challenge, body) {\n      // Inspect and validate the challenge.\n      this.algorithm = challenge.algorithm;\n      this.realm = challenge.realm;\n      this.nonce = challenge.nonce;\n      this.opaque = challenge.opaque;\n      this.stale = challenge.stale;\n\n      if (this.algorithm) {\n        if (this.algorithm !== \"MD5\") {\n          this.logger.warn(\"challenge with Digest algorithm different than 'MD5', authentication aborted\");\n          return false;\n        }\n      } else {\n        this.algorithm = \"MD5\";\n      }\n\n      if (!this.realm) {\n        this.logger.warn(\"challenge without Digest realm, authentication aborted\");\n        return false;\n      }\n\n      if (!this.nonce) {\n        this.logger.warn(\"challenge without Digest nonce, authentication aborted\");\n        return false;\n      } // 'qop' can contain a list of values (Array). Let's choose just one.\n\n\n      if (challenge.qop) {\n        if (challenge.qop.indexOf(\"auth\") > -1) {\n          this.qop = \"auth\";\n        } else if (challenge.qop.indexOf(\"auth-int\") > -1) {\n          this.qop = \"auth-int\";\n        } else {\n          // Otherwise 'qop' is present but does not contain 'auth' or 'auth-int', so abort here.\n          this.logger.warn(\"challenge without Digest qop different than 'auth' or 'auth-int', authentication aborted\");\n          return false;\n        }\n      } else {\n        this.qop = undefined;\n      } // Fill other attributes.\n\n\n      this.method = request.method;\n      this.uri = request.ruri;\n      this.cnonce = createRandomToken(12);\n      this.nc += 1;\n      this.updateNcHex(); // nc-value = 8LHEX. Max value = 'FFFFFFFF'.\n\n      if (this.nc === 4294967296) {\n        this.nc = 1;\n        this.ncHex = \"00000001\";\n      } // Calculate the Digest \"response\" value.\n\n\n      this.calculateResponse(body);\n      return true;\n    }\n    /**\n     * Return the Proxy-Authorization or WWW-Authorization header value.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var authParams = [];\n\n      if (!this.response) {\n        throw new Error(\"response field does not exist, cannot generate Authorization header\");\n      }\n\n      authParams.push(\"algorithm=\" + this.algorithm);\n      authParams.push('username=\"' + this.username + '\"');\n      authParams.push('realm=\"' + this.realm + '\"');\n      authParams.push('nonce=\"' + this.nonce + '\"');\n      authParams.push('uri=\"' + this.uri + '\"');\n      authParams.push('response=\"' + this.response + '\"');\n\n      if (this.opaque) {\n        authParams.push('opaque=\"' + this.opaque + '\"');\n      }\n\n      if (this.qop) {\n        authParams.push(\"qop=\" + this.qop);\n        authParams.push('cnonce=\"' + this.cnonce + '\"');\n        authParams.push(\"nc=\" + this.ncHex);\n      }\n\n      return \"Digest \" + authParams.join(\", \");\n    }\n    /**\n     * Generate the 'nc' value as required by Digest in this.ncHex by reading this.nc.\n     */\n\n  }, {\n    key: \"updateNcHex\",\n    value: function updateNcHex() {\n      var hex = Number(this.nc).toString(16);\n      this.ncHex = \"00000000\".substr(0, 8 - hex.length) + hex;\n    }\n    /**\n     * Generate Digest 'response' value.\n     */\n\n  }, {\n    key: \"calculateResponse\",\n    value: function calculateResponse(body) {\n      var ha1, ha2; // HA1 = MD5(A1) = MD5(username:realm:password)\n\n      ha1 = this.ha1;\n\n      if (ha1 === \"\" || ha1 === undefined) {\n        ha1 = MD5(this.username + \":\" + this.realm + \":\" + this.password);\n      }\n\n      if (this.qop === \"auth\") {\n        // HA2 = MD5(A2) = MD5(method:digestURI)\n        ha2 = MD5(this.method + \":\" + this.uri); // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)`\n\n        this.response = MD5(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth:\" + ha2);\n      } else if (this.qop === \"auth-int\") {\n        // HA2 = MD5(A2) = MD5(method:digestURI:MD5(entityBody))\n        ha2 = MD5(this.method + \":\" + this.uri + \":\" + MD5(body ? body : \"\")); // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\n\n        this.response = MD5(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth-int:\" + ha2);\n      } else if (this.qop === undefined) {\n        // HA2 = MD5(A2) = MD5(method:digestURI)\n        ha2 = MD5(this.method + \":\" + this.uri); // response = MD5(HA1:nonce:HA2)\n\n        this.response = MD5(ha1 + \":\" + this.nonce + \":\" + ha2);\n      }\n    }\n  }]);\n\n  return DigestAuthentication;\n}();","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/core/messages/digest-authentication.js"],"names":["Md5","createRandomToken","MD5","s","hashStr","DigestAuthentication","loggerFactory","ha1","username","password","logger","getLogger","nc","ncHex","request","challenge","body","algorithm","realm","nonce","opaque","stale","warn","qop","indexOf","undefined","method","uri","ruri","cnonce","updateNcHex","calculateResponse","authParams","response","Error","push","join","hex","Number","toString","substr","length","ha2"],"mappings":"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","sourcesContent":["import { Md5 } from \"./md5\";\nimport { createRandomToken } from \"./utils\";\nfunction MD5(s) {\n    return Md5.hashStr(s);\n}\n/**\n * Digest Authentication.\n * @internal\n */\nexport class DigestAuthentication {\n    /**\n     * Constructor.\n     * @param loggerFactory - LoggerFactory.\n     * @param username - Username.\n     * @param password - Password.\n     */\n    constructor(loggerFactory, ha1, username, password) {\n        this.logger = loggerFactory.getLogger(\"sipjs.digestauthentication\");\n        this.username = username;\n        this.password = password;\n        this.ha1 = ha1;\n        this.nc = 0;\n        this.ncHex = \"00000000\";\n    }\n    /**\n     * Performs Digest authentication given a SIP request and the challenge\n     * received in a response to that request.\n     * @param request -\n     * @param challenge -\n     * @returns true if credentials were successfully generated, false otherwise.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    authenticate(request, challenge, body) {\n        // Inspect and validate the challenge.\n        this.algorithm = challenge.algorithm;\n        this.realm = challenge.realm;\n        this.nonce = challenge.nonce;\n        this.opaque = challenge.opaque;\n        this.stale = challenge.stale;\n        if (this.algorithm) {\n            if (this.algorithm !== \"MD5\") {\n                this.logger.warn(\"challenge with Digest algorithm different than 'MD5', authentication aborted\");\n                return false;\n            }\n        }\n        else {\n            this.algorithm = \"MD5\";\n        }\n        if (!this.realm) {\n            this.logger.warn(\"challenge without Digest realm, authentication aborted\");\n            return false;\n        }\n        if (!this.nonce) {\n            this.logger.warn(\"challenge without Digest nonce, authentication aborted\");\n            return false;\n        }\n        // 'qop' can contain a list of values (Array). Let's choose just one.\n        if (challenge.qop) {\n            if (challenge.qop.indexOf(\"auth\") > -1) {\n                this.qop = \"auth\";\n            }\n            else if (challenge.qop.indexOf(\"auth-int\") > -1) {\n                this.qop = \"auth-int\";\n            }\n            else {\n                // Otherwise 'qop' is present but does not contain 'auth' or 'auth-int', so abort here.\n                this.logger.warn(\"challenge without Digest qop different than 'auth' or 'auth-int', authentication aborted\");\n                return false;\n            }\n        }\n        else {\n            this.qop = undefined;\n        }\n        // Fill other attributes.\n        this.method = request.method;\n        this.uri = request.ruri;\n        this.cnonce = createRandomToken(12);\n        this.nc += 1;\n        this.updateNcHex();\n        // nc-value = 8LHEX. Max value = 'FFFFFFFF'.\n        if (this.nc === 4294967296) {\n            this.nc = 1;\n            this.ncHex = \"00000001\";\n        }\n        // Calculate the Digest \"response\" value.\n        this.calculateResponse(body);\n        return true;\n    }\n    /**\n     * Return the Proxy-Authorization or WWW-Authorization header value.\n     */\n    toString() {\n        const authParams = [];\n        if (!this.response) {\n            throw new Error(\"response field does not exist, cannot generate Authorization header\");\n        }\n        authParams.push(\"algorithm=\" + this.algorithm);\n        authParams.push('username=\"' + this.username + '\"');\n        authParams.push('realm=\"' + this.realm + '\"');\n        authParams.push('nonce=\"' + this.nonce + '\"');\n        authParams.push('uri=\"' + this.uri + '\"');\n        authParams.push('response=\"' + this.response + '\"');\n        if (this.opaque) {\n            authParams.push('opaque=\"' + this.opaque + '\"');\n        }\n        if (this.qop) {\n            authParams.push(\"qop=\" + this.qop);\n            authParams.push('cnonce=\"' + this.cnonce + '\"');\n            authParams.push(\"nc=\" + this.ncHex);\n        }\n        return \"Digest \" + authParams.join(\", \");\n    }\n    /**\n     * Generate the 'nc' value as required by Digest in this.ncHex by reading this.nc.\n     */\n    updateNcHex() {\n        const hex = Number(this.nc).toString(16);\n        this.ncHex = \"00000000\".substr(0, 8 - hex.length) + hex;\n    }\n    /**\n     * Generate Digest 'response' value.\n     */\n    calculateResponse(body) {\n        let ha1, ha2;\n        // HA1 = MD5(A1) = MD5(username:realm:password)\n        ha1 = this.ha1;\n        if (ha1 === \"\" || ha1 === undefined) {\n            ha1 = MD5(this.username + \":\" + this.realm + \":\" + this.password);\n        }\n        if (this.qop === \"auth\") {\n            // HA2 = MD5(A2) = MD5(method:digestURI)\n            ha2 = MD5(this.method + \":\" + this.uri);\n            // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)`\n            this.response = MD5(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth:\" + ha2);\n        }\n        else if (this.qop === \"auth-int\") {\n            // HA2 = MD5(A2) = MD5(method:digestURI:MD5(entityBody))\n            ha2 = MD5(this.method + \":\" + this.uri + \":\" + MD5(body ? body : \"\"));\n            // response = MD5(HA1:nonce:nonceCount:credentialsNonce:qop:HA2)\n            this.response = MD5(ha1 + \":\" + this.nonce + \":\" + this.ncHex + \":\" + this.cnonce + \":auth-int:\" + ha2);\n        }\n        else if (this.qop === undefined) {\n            // HA2 = MD5(A2) = MD5(method:digestURI)\n            ha2 = MD5(this.method + \":\" + this.uri);\n            // response = MD5(HA1:nonce:HA2)\n            this.response = MD5(ha1 + \":\" + this.nonce + \":\" + ha2);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}