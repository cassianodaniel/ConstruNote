{"ast":null,"code":"import SquadChatCommunicator from \"./SquadChatCommunicator\";\nimport API from \"@digivox/apicommunicator\";\nimport { getAuthorization } from \"./utils/localStorageUtils\";\nimport SettingsBusiness from \"./business/Settings\";\nimport ContactsBusiness from \"./business/Contacts\";\nimport GroupsBusiness from \"./business/Groups\";\nimport ChatsBusiness from \"./business/Chats\";\nimport MessagesBusiness from \"./business/Messages\";\nimport UserBusiness from \"./business/User\";\nimport AttachmentsBusiness from \"./business/Attachments\";\nimport SquadVoiceCommunicator from \"./SquadVoiceCommunicator\";\nimport ConferencesBusiness from \"./business/Conferences\";\nimport SquadEventsCommunicator from \"./SquadEventsCommunicator\";\nexport class SquadCommunicator {\n  static getInstance(callbacks) {\n    if (!this.instance) {\n      this.instance = new SquadCommunicator();\n      this.instance.makeAPI();\n    }\n\n    callbacks.chatCommunicatorSubscribe && this.instance.updateChatSubscribeFuncition(callbacks.chatCommunicatorSubscribe);\n    callbacks.voiceCB && this.instance.updateVoiceSubscribeFunction(callbacks.voiceCB);\n    return this.instance;\n  }\n\n  updateChatSubscribeFuncition(chatCommunicatorSubscribe) {\n    var _this$chat, _this$chat2;\n\n    (_this$chat = this.chat) === null || _this$chat === void 0 ? void 0 : _this$chat.removeAllSubscription();\n    (_this$chat2 = this.chat) === null || _this$chat2 === void 0 ? void 0 : _this$chat2.subscribe(chatCommunicatorSubscribe);\n  }\n\n  updateVoiceSubscribeFunction(voiceCB) {\n    var _this$sip, _this$sip2;\n\n    (_this$sip = this.sip) === null || _this$sip === void 0 ? void 0 : _this$sip.removeAllSubscription();\n    (_this$sip2 = this.sip) === null || _this$sip2 === void 0 ? void 0 : _this$sip2.subscribe(voiceCB);\n  } // -- Make Services --\n\n\n  makeAPI() {\n    const authorization = getAuthorization();\n\n    if (authorization) {\n      const api = new API({\n        token: authorization.access_token,\n        apiUrl: authorization.baseUrl\n      });\n      this.api = api;\n      this.makeBusiness();\n    }\n  }\n\n  makeBusiness() {\n    if (!this.api) return;\n    this.settings = new SettingsBusiness(this.api);\n    this.user = new UserBusiness(this.api, this.settings);\n    this.contacts = new ContactsBusiness(this.api, this.settings);\n    this.groups = new GroupsBusiness(this.api, this.settings, this.contacts);\n    this.conferences = new ConferencesBusiness(this.api, this.settings);\n    this.events = new SquadEventsCommunicator(this.settings);\n    this.chats = new ChatsBusiness(this.api, this.contacts, this.groups, this.user);\n    this.messages = new MessagesBusiness(this.api, this.contacts, this.groups, this.user);\n    this.attachments = new AttachmentsBusiness(this.api, this.settings);\n    this.chat = new SquadChatCommunicator(this.settings, this.contacts, this.groups, this.user, this.interfaceChatCommunicatorSubscribe);\n    this.contacts.setChat(this.chat);\n    this.groups.setChat(this.chat);\n    this.sip = new SquadVoiceCommunicator(this.settings, this.interfaceVoiceCommunicatorSubscribe);\n  }\n\n}\nSquadCommunicator.instance = void 0;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicatorService.ts"],"names":["SquadChatCommunicator","API","getAuthorization","SettingsBusiness","ContactsBusiness","GroupsBusiness","ChatsBusiness","MessagesBusiness","UserBusiness","AttachmentsBusiness","SquadVoiceCommunicator","ConferencesBusiness","SquadEventsCommunicator","SquadCommunicator","getInstance","callbacks","instance","makeAPI","chatCommunicatorSubscribe","updateChatSubscribeFuncition","voiceCB","updateVoiceSubscribeFunction","chat","removeAllSubscription","subscribe","sip","authorization","api","token","access_token","apiUrl","baseUrl","makeBusiness","settings","user","contacts","groups","conferences","events","chats","messages","attachments","interfaceChatCommunicatorSubscribe","setChat","interfaceVoiceCommunicatorSubscribe"],"mappings":"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","sourcesContent":["import SquadChatCommunicator from \"./SquadChatCommunicator\";\r\nimport API from \"@digivox/apicommunicator\";\r\nimport { SubscriptionCallBack } from \"./types\";\r\nimport { SubscriptionCallBack as VoiceCB } from \"./voice/types/types\";\r\nimport { getAuthorization } from \"./utils/localStorageUtils\";\r\nimport SettingsBusiness from \"./business/Settings\";\r\nimport ContactsBusiness from \"./business/Contacts\";\r\nimport GroupsBusiness from \"./business/Groups\";\r\nimport ChatsBusiness from \"./business/Chats\";\r\nimport MessagesBusiness from \"./business/Messages\";\r\nimport UserBusiness from \"./business/User\";\r\nimport AttachmentsBusiness from \"./business/Attachments\";\r\nimport SquadVoiceCommunicator from \"./SquadVoiceCommunicator\";\r\nimport ConferencesBusiness from \"./business/Conferences\";\r\nimport SquadEventsCommunicator from \"./SquadEventsCommunicator\";\r\ninterface CommicatorCallbacks {\r\n  chatCommunicatorSubscribe?: SubscriptionCallBack;\r\n  voiceCB?: VoiceCB;\r\n}\r\nexport interface SquadCommunicator {\r\n  interfaceChatCommunicatorSubscribe: SubscriptionCallBack;\r\n  interfaceVoiceCommunicatorSubscribe: VoiceCB;\r\n  getInstance(): SquadCommunicator;\r\n  api: API | undefined;\r\n  chat: SquadChatCommunicator | undefined;\r\n  settings: SettingsBusiness;\r\n  contacts: ContactsBusiness;\r\n  groups: GroupsBusiness;\r\n  chats: ChatsBusiness;\r\n  conferences: ConferencesBusiness;\r\n  messages: MessagesBusiness;\r\n  user: UserBusiness;\r\n  attachments: AttachmentsBusiness;\r\n  sip: SquadVoiceCommunicator;\r\n  events: SquadEventsCommunicator;\r\n}\r\nexport class SquadCommunicator {\r\n  private static instance: SquadCommunicator | undefined;\r\n  static getInstance(callbacks: CommicatorCallbacks) {\r\n    if (!this.instance) {\r\n      this.instance = new SquadCommunicator();\r\n      this.instance.makeAPI();\r\n    }\r\n    callbacks.chatCommunicatorSubscribe &&\r\n      this.instance.updateChatSubscribeFuncition(\r\n        callbacks.chatCommunicatorSubscribe\r\n      );\r\n    callbacks.voiceCB &&\r\n      this.instance.updateVoiceSubscribeFunction(callbacks.voiceCB);\r\n    return this.instance;\r\n  }\r\n  updateChatSubscribeFuncition(\r\n    chatCommunicatorSubscribe: SubscriptionCallBack\r\n  ) {\r\n    this.chat?.removeAllSubscription();\r\n    this.chat?.subscribe(chatCommunicatorSubscribe);\r\n  }\r\n  updateVoiceSubscribeFunction(voiceCB: VoiceCB) {\r\n    this.sip?.removeAllSubscription();\r\n    this.sip?.subscribe(voiceCB);\r\n  }\r\n  // -- Make Services --\r\n  makeAPI() {\r\n    const authorization = getAuthorization();\r\n    if (authorization) {\r\n      const api = new API({\r\n        token: authorization.access_token,\r\n        apiUrl: authorization.baseUrl,\r\n      });\r\n      this.api = api;\r\n      this.makeBusiness();\r\n    }\r\n  }\r\n  makeBusiness() {\r\n    if (!this.api) return;\r\n    this.settings = new SettingsBusiness(this.api);\r\n    this.user = new UserBusiness(this.api, this.settings);\r\n    this.contacts = new ContactsBusiness(this.api, this.settings);\r\n    this.groups = new GroupsBusiness(this.api, this.settings, this.contacts);\r\n    this.conferences = new ConferencesBusiness(this.api, this.settings);\r\n    this.events = new SquadEventsCommunicator(this.settings);\r\n    this.chats = new ChatsBusiness(\r\n      this.api,\r\n      this.contacts,\r\n      this.groups,\r\n      this.user\r\n    );\r\n    this.messages = new MessagesBusiness(\r\n      this.api,\r\n      this.contacts,\r\n      this.groups,\r\n      this.user\r\n    );\r\n    this.attachments = new AttachmentsBusiness(this.api, this.settings);\r\n    this.chat = new SquadChatCommunicator(\r\n      this.settings,\r\n      this.contacts,\r\n      this.groups,\r\n      this.user,\r\n      this.interfaceChatCommunicatorSubscribe\r\n    );\r\n    this.contacts.setChat(this.chat);\r\n    this.groups.setChat(this.chat);\r\n    this.sip = new SquadVoiceCommunicator(\r\n      this.settings,\r\n      this.interfaceVoiceCommunicatorSubscribe\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}