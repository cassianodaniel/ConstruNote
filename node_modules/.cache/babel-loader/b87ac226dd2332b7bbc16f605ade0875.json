{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import{parseConferences}from\"../utils/parseUtils\";export var ConferenceRoomParticipantType;(function(ConferenceRoomParticipantType){ConferenceRoomParticipantType[\"PARTICIPANT\"]=\"PARTICIPANT\";ConferenceRoomParticipantType[\"PARTICIPANT_EXTERNAL\"]=\"PARTICIPANT_EXTERNAL\";ConferenceRoomParticipantType[\"MODERATOR\"]=\"MODERATOR\";})(ConferenceRoomParticipantType||(ConferenceRoomParticipantType={}));var ConferencesBusiness=function ConferencesBusiness(api,settings){var _this=this;_classCallCheck(this,ConferencesBusiness);this.api=api;this.settings=settings;this.list=function(cb){_this.api.listConferenceRooms({},function(conferences){_this.settings.get(function(settings){cb(parseConferences(conferences.conferenceRooms,settings));});});};this.create=function(conference,cb){_this.api.createConference(conference,cb);};this.addParticipants=function(conferenceId,participants,cb){_this.api.addConferenceParticipant(conferenceId,participants,cb);};this.update=function(conferenceId,body,cb){_this.api.updateConference(conferenceId,body,cb);};this.remove=function(conferenceId,cb){_this.api.removeConference(conferenceId,cb);};};export{ConferencesBusiness as default};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Conferences.ts"],"names":["parseConferences","ConferenceRoomParticipantType","ConferencesBusiness","api","settings","list","cb","listConferenceRooms","conferences","get","conferenceRooms","create","conference","createConference","addParticipants","conferenceId","participants","addConferenceParticipant","update","body","updateConference","remove","removeConference"],"mappings":"kLAUA,OAASA,gBAAT,KAAiC,qBAAjC,CAMA,UAAYC,CAAAA,6BAAZ,C,UAAYA,6B,EAAAA,6B,8BAAAA,6B,gDAAAA,6B,6BAAAA,6B,GAAAA,6B,SAMSC,CAAAA,mB,CACnB,6BAAoBC,GAApB,CAAsCC,QAAtC,CAAkE,+DAA9CD,GAA8C,CAA9CA,GAA8C,MAA5BC,QAA4B,CAA5BA,QAA4B,MAClEC,IADkE,CAC3D,SAACC,EAAD,CAA6B,CAClC,KAAI,CAACH,GAAL,CAASI,mBAAT,CAA6B,EAA7B,CAAiC,SAACC,WAAD,CAAiB,CAChD,KAAI,CAACJ,QAAL,CAAcK,GAAd,CAAkB,SAACL,QAAD,CAAc,CAC9BE,EAAE,CAACN,gBAAgB,CAACQ,WAAW,CAACE,eAAb,CAA8BN,QAA9B,CAAjB,CAAF,CACD,CAFD,EAGD,CAJD,EAKD,CAPiE,MAQlEO,MARkE,CAQzD,SACPC,UADO,CAEPN,EAFO,CAGJ,CACH,KAAI,CAACH,GAAL,CAASU,gBAAT,CAA0BD,UAA1B,CAAsCN,EAAtC,EACD,CAbiE,MAclEQ,eAdkE,CAchD,SAChBC,YADgB,CAEhBC,YAFgB,CAGhBV,EAHgB,CAIb,CACH,KAAI,CAACH,GAAL,CAASc,wBAAT,CAAkCF,YAAlC,CAAgDC,YAAhD,CAA8DV,EAA9D,EACD,CApBiE,MAqBlEY,MArBkE,CAqBzD,SAACH,YAAD,CAAuBI,IAAvB,CAAsDb,EAAtD,CAAuF,CAC9F,KAAI,CAACH,GAAL,CAASiB,gBAAT,CAA0BL,YAA1B,CAAwCI,IAAxC,CAA8Cb,EAA9C,EACD,CAvBiE,MAwBlEe,MAxBkE,CAwBzD,SAACN,YAAD,CAAuBT,EAAvB,CAAwD,CAC/D,KAAI,CAACH,GAAL,CAASmB,gBAAT,CAA0BP,YAA1B,CAAwCT,EAAxC,EACD,CA1BiE,CAAE,C,QADjDJ,mB","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport {\r\n  AddConferenceParticipantCallback,\r\n  ConferenceRoomParticipant,\r\n  CreateConferenceCallback,\r\n  CreateConferenceRequest,\r\n  RemoveConferenceCallback,\r\n  UpdateConferenceCallback,\r\n} from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport { IConference } from \"../../alias/IConference\";\r\nimport { parseConferences } from \"../utils/parseUtils\";\r\nimport SettingsBusiness from \"./Settings\";\r\n\r\ninterface ConferencesCallback {\r\n  (contacts: IConference[]): void;\r\n}\r\nexport enum ConferenceRoomParticipantType {\r\n  PARTICIPANT = \"PARTICIPANT\",\r\n  PARTICIPANT_EXTERNAL = \"PARTICIPANT_EXTERNAL\",\r\n  MODERATOR = \"MODERATOR\",\r\n}\r\nexport default interface ConferencesBusiness {}\r\nexport default class ConferencesBusiness {\r\n  constructor(private api: API, private settings: SettingsBusiness) {}\r\n  list = (cb: ConferencesCallback) => {\r\n    this.api.listConferenceRooms({}, (conferences) => {\r\n      this.settings.get((settings) => {\r\n        cb(parseConferences(conferences.conferenceRooms, settings));\r\n      });\r\n    });\r\n  };\r\n  create = (\r\n    conference: CreateConferenceRequest,\r\n    cb: CreateConferenceCallback\r\n  ) => {\r\n    this.api.createConference(conference, cb);\r\n  };\r\n  addParticipants = (\r\n    conferenceId: string,\r\n    participants: ConferenceRoomParticipant[],\r\n    cb: AddConferenceParticipantCallback\r\n  ) => {\r\n    this.api.addConferenceParticipant(conferenceId, participants, cb);\r\n  };\r\n  update = (conferenceId: string, body: CreateConferenceRequest, cb: UpdateConferenceCallback) => {\r\n    this.api.updateConference(conferenceId, body, cb);\r\n  }\r\n  remove = (conferenceId: string, cb: RemoveConferenceCallback) => {\r\n    this.api.removeConference(conferenceId, cb);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}