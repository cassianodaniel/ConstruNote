{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\PreviewBox.tsx\";\nimport React from \"react\";\n\nconst PreviewBoxRules = props => {\n  const {\n    image,\n    width,\n    height\n  } = props;\n  const fileExtension = image[0].type.split(\"/\")[1];\n  const isImage = /(jpe?g|png|gif|ico|svg|svg\\+xml)$/i.test(fileExtension);\n  const finalFileExtension = verifyIfFileIsAllowed(fileExtension);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, isImage ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"box-preview scale-in-animation\",\n    style: {\n      width: width,\n      paddingBottom: height\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"example\",\n    className: \"image-file\",\n    style: {\n      width: \"100%\"\n    },\n    src: image[0].base64,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }\n  }), \")\") : /*#__PURE__*/React.createElement(PreviewDocument, {\n    fileExtension: finalFileExtension,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport const BigImage = props => {\n  const {\n    image\n  } = props;\n  const fileExtension = image[0].type.split(\"/\")[1];\n  const fileName = image[0].name;\n  const isImage = /(jpe?g|png|gif|ico|svg|webm|svg+xml)$/i.test(fileExtension);\n  const finalFileExtension = verifyIfFileIsAllowed(fileExtension);\n  return isImage ? /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"example\",\n    src: image[0].base64,\n    className: \"big-image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    width: \"40px\",\n    alt: \"example\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      marginTop: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, fileName));\n};\nexport const PreviewDocument = props => {\n  const {\n    fileExtension\n  } = props;\n  const finalFileExtension = verifyIfFileIsAllowed(fileExtension);\n  /**\r\n   *                     WARNING\r\n   * Não mude o nome dos arquivos na pasta .../assets/icons,\r\n   * caso contrário, isso poderá quebrar o funcionamento\r\n   * do preview de arquivos.\r\n   */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"document-preview scale-in-animation\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    width: \"40px\",\n    alt: \"example\",\n    src: require(`../../../../../assets/icons/${finalFileExtension}.svg`),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst verifyIfFileIsAllowed = fileExtension => {\n  const types = [\"3ds\", \"aac\", \"ai\", \"avi\", \"cad\", \"bmp\", \"cdr\", \"css\", \"dat\", \"dll\", \"dmg\", \"doc\", \"eps\", \"fla\", \"flv\", \"gif\", \"html\", \"indd\", \"iso\", \"jpg\", \"js\", \"midi\", \"mov\", \"mp3\", \"mpg\", \"pdf\", \"php\", \"png\", \"ps\", \"psd\", \"raw\", \"sql\", \"svg\", \"svg+xml\", \"tif\", \"txt\", \"wmv\", \"xls\", \"xml\", \"zip\"];\n  let finalFileType = \"raw\";\n\n  for (let i = 0; i < types.length; i++) {\n    if (fileExtension && fileExtension.includes(types[i])) {\n      finalFileType = types[i];\n      break;\n    }\n  }\n\n  return finalFileType;\n};\n\nexport default React.memo(PreviewBoxRules);","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/PreviewBox.tsx"],"names":["React","PreviewBoxRules","props","image","width","height","fileExtension","type","split","isImage","test","finalFileExtension","verifyIfFileIsAllowed","paddingBottom","base64","BigImage","fileName","name","marginTop","PreviewDocument","require","types","finalFileType","i","length","includes","memo"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n\r\nconst PreviewBoxRules: React.FC = (props:any) => {\r\n  const { image, width, height } = props;\r\n\r\n  const fileExtension = image[0].type.split(\"/\")[1];\r\n  const isImage = /(jpe?g|png|gif|ico|svg|svg\\+xml)$/i.test(fileExtension);\r\n\r\n  const finalFileExtension = verifyIfFileIsAllowed(fileExtension)\r\n\r\n  return (\r\n    <div>\r\n      {isImage ? (\r\n        <div\r\n          className=\"box-preview scale-in-animation\"\r\n          style={{ width: width, paddingBottom: height }}\r\n        >\r\n          <img\r\n            alt=\"example\"\r\n            className=\"image-file\"\r\n            style={{ width: \"100%\" }}\r\n            src={image[0].base64}\r\n          />\r\n          )\r\n        </div>\r\n      ) : (\r\n        <PreviewDocument fileExtension={finalFileExtension} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport const BigImage = (props: any) => {\r\n  const { image } = props;\r\n\r\n  const fileExtension = image[0].type.split(\"/\")[1];\r\n  const fileName = image[0].name;\r\n  const isImage = /(jpe?g|png|gif|ico|svg|webm|svg+xml)$/i.test(fileExtension);\r\n\r\n  const finalFileExtension = verifyIfFileIsAllowed(fileExtension);\r\n  \r\n  return isImage ? (\r\n    <img alt=\"example\" src={image[0].base64} className=\"big-image\" />\r\n  ) : (\r\n    <div>\r\n      <img\r\n        width=\"40px\"\r\n        alt=\"example\"\r\n      />\r\n      <p style={{marginTop: '10px'}} >{fileName}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const PreviewDocument = (props: any) => {\r\n  const { fileExtension } = props;\r\n\r\n  const finalFileExtension = verifyIfFileIsAllowed(fileExtension);\r\n  /**\r\n   *                     WARNING\r\n   * Não mude o nome dos arquivos na pasta .../assets/icons,\r\n   * caso contrário, isso poderá quebrar o funcionamento\r\n   * do preview de arquivos.\r\n   */\r\n\r\n  return (\r\n    <div className=\"document-preview scale-in-animation\">\r\n      <img\r\n        width=\"40px\"\r\n        alt=\"example\"\r\n        src={require(`../../../../../assets/icons/${finalFileExtension}.svg`)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst verifyIfFileIsAllowed = (fileExtension: any) => {\r\n\r\n\r\n    const types = [\r\n        \"3ds\", \"aac\", \"ai\",\r\n        \"avi\",\"cad\",\"bmp\",\r\n        \"cdr\", \"css\", \"dat\",\r\n        \"dll\", \"dmg\", \"doc\",\r\n        \"eps\", \"fla\", \"flv\",\r\n        \"gif\", \"html\", \"indd\",\r\n        \"iso\", \"jpg\", \"js\",\r\n        \"midi\", \"mov\", \"mp3\",\r\n        \"mpg\", \"pdf\", \"php\",\r\n        \"png\", \"ps\", \"psd\",\r\n        \"raw\", \"sql\", \"svg\",\r\n        \"svg+xml\", \"tif\", \"txt\",\r\n        \"wmv\", \"xls\", \"xml\", \r\n        \"zip\"\r\n    ]\r\n\r\n    let finalFileType = \"raw\"\r\n\r\n    for (let i = 0; i < types.length; i++) {\r\n        if(fileExtension && fileExtension.includes(types[i])){ \r\n            finalFileType = types[i]\r\n            break;\r\n        }  \r\n    }\r\n\r\n    return finalFileType;\r\n}\r\n\r\n\r\nexport default React.memo(PreviewBoxRules);\r\n"]},"metadata":{},"sourceType":"module"}