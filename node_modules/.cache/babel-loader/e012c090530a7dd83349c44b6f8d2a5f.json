{"ast":null,"code":"import { Levels } from \"./levels\";\nimport { Logger } from \"./logger\";\n/**\n * Logger.\n * @public\n */\n\nexport class LoggerFactory {\n  constructor() {\n    this.builtinEnabled = true;\n    this._level = Levels.log; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    this.loggers = {};\n    this.logger = this.getLogger(\"sip:loggerfactory\");\n  }\n\n  get level() {\n    return this._level;\n  }\n\n  set level(newLevel) {\n    if (newLevel >= 0 && newLevel <= 3) {\n      this._level = newLevel;\n    } else if (newLevel > 3) {\n      this._level = 3; // eslint-disable-next-line no-prototype-builtins\n    } else if (Levels.hasOwnProperty(newLevel)) {\n      this._level = newLevel;\n    } else {\n      this.logger.error(\"invalid 'level' parameter value: \" + JSON.stringify(newLevel));\n    }\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  get connector() {\n    return this._connector;\n  }\n\n  set connector(value) {\n    if (!value) {\n      this._connector = undefined;\n    } else if (typeof value === \"function\") {\n      this._connector = value;\n    } else {\n      this.logger.error(\"invalid 'connector' parameter value: \" + JSON.stringify(value));\n    }\n  }\n\n  getLogger(category, label) {\n    if (label && this.level === 3) {\n      return new Logger(this, category, label);\n    } else if (this.loggers[category]) {\n      return this.loggers[category];\n    } else {\n      const logger = new Logger(this, category);\n      this.loggers[category] = logger;\n      return logger;\n    }\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  genericLog(levelToLog, category, label, content) {\n    if (this.level >= levelToLog) {\n      if (this.builtinEnabled) {\n        this.print(levelToLog, category, label, content);\n      }\n    }\n\n    if (this.connector) {\n      this.connector(Levels[levelToLog], category, label, content);\n    }\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  print(levelToLog, category, label, content) {\n    if (typeof content === \"string\") {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const prefix = [new Date(), category];\n\n      if (label) {\n        prefix.push(label);\n      }\n\n      content = prefix.concat(content).join(\" | \");\n    }\n\n    switch (levelToLog) {\n      case Levels.error:\n        // eslint-disable-next-line no-console\n        console.error(content);\n        break;\n\n      case Levels.warn:\n        // eslint-disable-next-line no-console\n        console.warn(content);\n        break;\n\n      case Levels.log:\n        // eslint-disable-next-line no-console\n        console.log(content);\n        break;\n\n      case Levels.debug:\n        // eslint-disable-next-line no-console\n        console.debug(content);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/core/log/logger-factory.js"],"names":["Levels","Logger","LoggerFactory","constructor","builtinEnabled","_level","log","loggers","logger","getLogger","level","newLevel","hasOwnProperty","error","JSON","stringify","connector","_connector","value","undefined","category","label","genericLog","levelToLog","content","print","prefix","Date","push","concat","join","console","warn","debug"],"mappings":"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","sourcesContent":["import { Levels } from \"./levels\";\nimport { Logger } from \"./logger\";\n/**\n * Logger.\n * @public\n */\nexport class LoggerFactory {\n    constructor() {\n        this.builtinEnabled = true;\n        this._level = Levels.log;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.loggers = {};\n        this.logger = this.getLogger(\"sip:loggerfactory\");\n    }\n    get level() {\n        return this._level;\n    }\n    set level(newLevel) {\n        if (newLevel >= 0 && newLevel <= 3) {\n            this._level = newLevel;\n        }\n        else if (newLevel > 3) {\n            this._level = 3;\n            // eslint-disable-next-line no-prototype-builtins\n        }\n        else if (Levels.hasOwnProperty(newLevel)) {\n            this._level = newLevel;\n        }\n        else {\n            this.logger.error(\"invalid 'level' parameter value: \" + JSON.stringify(newLevel));\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get connector() {\n        return this._connector;\n    }\n    set connector(value) {\n        if (!value) {\n            this._connector = undefined;\n        }\n        else if (typeof value === \"function\") {\n            this._connector = value;\n        }\n        else {\n            this.logger.error(\"invalid 'connector' parameter value: \" + JSON.stringify(value));\n        }\n    }\n    getLogger(category, label) {\n        if (label && this.level === 3) {\n            return new Logger(this, category, label);\n        }\n        else if (this.loggers[category]) {\n            return this.loggers[category];\n        }\n        else {\n            const logger = new Logger(this, category);\n            this.loggers[category] = logger;\n            return logger;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    genericLog(levelToLog, category, label, content) {\n        if (this.level >= levelToLog) {\n            if (this.builtinEnabled) {\n                this.print(levelToLog, category, label, content);\n            }\n        }\n        if (this.connector) {\n            this.connector(Levels[levelToLog], category, label, content);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    print(levelToLog, category, label, content) {\n        if (typeof content === \"string\") {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const prefix = [new Date(), category];\n            if (label) {\n                prefix.push(label);\n            }\n            content = prefix.concat(content).join(\" | \");\n        }\n        switch (levelToLog) {\n            case Levels.error:\n                // eslint-disable-next-line no-console\n                console.error(content);\n                break;\n            case Levels.warn:\n                // eslint-disable-next-line no-console\n                console.warn(content);\n                break;\n            case Levels.log:\n                // eslint-disable-next-line no-console\n                console.log(content);\n                break;\n            case Levels.debug:\n                // eslint-disable-next-line no-console\n                console.debug(content);\n                break;\n            default:\n                break;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}