{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import{Input,Label}from\"reactstrap\";import{useGroup}from\"../contexts/GroupContext\";import{useChat}from\"../contexts/ChatContext\";import{useContact}from\"../contexts/ContactContext\";import{SearchContact}from\"../helpers/SearchContact\";import sortContactGroup from\"../helpers/SortContactGroup\";var SelectMember=function SelectMember(_ref){var _actualGroup$members;var search=_ref.search,handleCheckContact=_ref.handleCheckContact;var _useContact=useContact(),contacts=_useContact.contacts;var _useGroup=useGroup(),groups=_useGroup.groups;var _useChat=useChat(),activeChat=_useChat.activeChat;var actualGroup=groups.find(function(grp){return grp.groupId===activeChat.groupId;});var actualGroupMembersId=actualGroup===null||actualGroup===void 0?void 0:(_actualGroup$members=actualGroup.members)===null||_actualGroup$members===void 0?void 0:_actualGroup$members.map(function(mbrs){return mbrs.userId;});var _useState=useState([]),_useState2=_slicedToArray(_useState,2),contactStorage=_useState2[0],setContactStorage=_useState2[1];var init=function init(){setContactStorage(contacts.filter(function(ctc){if(actualGroupMembersId===null||actualGroupMembersId===void 0?void 0:actualGroupMembersId.find(function(id){return id===ctc.id;})){return false;}return true;}));};useEffect(init,[]);return/*#__PURE__*/React.createElement(\"div\",{className:\"mt-2\"},sortContactGroup(SearchContact(contactStorage,search?search:\"\")).map(function(contact,key){return/*#__PURE__*/React.createElement(\"div\",{key:key},/*#__PURE__*/React.createElement(\"div\",{className:\"ml-3 pl-1 font-weight-bold text-primary\"},contact.group),/*#__PURE__*/React.createElement(\"ul\",{className:\"list-unstyled contact-list mb-2\"},contact.children.map(function(child,keyChild){return/*#__PURE__*/React.createElement(\"li\",{key:keyChild},/*#__PURE__*/React.createElement(\"div\",{className:\"custom-control custom-checkbox\"},/*#__PURE__*/React.createElement(Input,{type:\"checkbox\",className:\"custom-control-input\",onChange:function onChange(e){handleCheckContact(e.target.checked,child);},id:\"memberCheck\"+child.id,value:child.name}),/*#__PURE__*/React.createElement(Label,{className:\"custom-control-label\",htmlFor:\"memberCheck\"+child.id},child.name)));})));}));};export default SelectMember;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/SelectMember.tsx"],"names":["React","useEffect","useState","Input","Label","useGroup","useChat","useContact","SearchContact","sortContactGroup","SelectMember","search","handleCheckContact","contacts","groups","activeChat","actualGroup","find","grp","groupId","actualGroupMembersId","members","map","mbrs","userId","contactStorage","setContactStorage","init","filter","ctc","id","contact","key","group","children","child","keyChild","e","target","checked","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Input, Label } from \"reactstrap\";\r\nimport IContact from \"../alias/IContact\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport { SearchContact } from \"../helpers/SearchContact\";\r\nimport sortContactGroup from \"../helpers/SortContactGroup\";\r\n\r\ninterface IProps {\r\n  search?: string;\r\n  handleCheckContact(selected: boolean, contact: IContact): void;\r\n}\r\n\r\nconst SelectMember: React.FC<IProps> = ({ search, handleCheckContact }) => {\r\n  const {\r\n    contacts,\r\n  } = useContact();\r\n  const { groups } = useGroup();\r\n  const { activeChat } = useChat();\r\n  \r\n  let actualGroup = groups.find((grp) => (\r\n    grp.groupId === activeChat.groupId\r\n  ));  \r\n\r\n  let actualGroupMembersId = actualGroup?.members?.map((mbrs) => {\r\n    return mbrs.userId;\r\n  });\r\n\r\n  let [contactStorage, setContactStorage] = useState<IContact[]>([]);\r\n  const init = () => {\r\n    setContactStorage(\r\n      contacts.filter((ctc) => {\r\n        if(actualGroupMembersId?.find((id) => (id === ctc.id))){\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    ));\r\n  }\r\n  \r\n  useEffect(init, []);\r\n\r\n  \r\n  return (\r\n    <div className=\"mt-2\">\r\n      {sortContactGroup(\r\n        SearchContact(contactStorage, search ? search : \"\")\r\n      ).map((contact, key) => (\r\n        <div key={key}>\r\n          <div className=\"ml-3 pl-1 font-weight-bold text-primary\">\r\n            {contact.group}\r\n          </div>\r\n\r\n          <ul className=\"list-unstyled contact-list mb-2\">\r\n            {contact.children.map((child, keyChild) => (\r\n              <li key={keyChild}>\r\n                <div className=\"custom-control custom-checkbox\">\r\n                  <Input\r\n                    type=\"checkbox\"\r\n                    className=\"custom-control-input\"\r\n                    onChange={(e) => {\r\n                      handleCheckContact(e.target.checked, child);\r\n                    }}\r\n                    id={\"memberCheck\" + child.id}\r\n                    value={child.name}\r\n                  />\r\n                  <Label\r\n                    className=\"custom-control-label\"\r\n                    htmlFor={\"memberCheck\" + child.id}\r\n                  >\r\n                    {child.name}\r\n                  </Label>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectMember;\r\n"]},"metadata":{},"sourceType":"module"}