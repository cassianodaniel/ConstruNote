{"ast":null,"code":"import { Inviter, Registerer, SessionState // SIPExtension,\n, UserAgent, Web } from \"sip.js\";\nimport MultiStreamsMixer from \"multistreamsmixer\";\nexport const tagsRange = [0, 1, 2, 3];\nexport default class SIP {\n  constructor(props) {\n    this.unRegister = () => {\n      var _this$registerer, _this$registerer2;\n\n      (_this$registerer = this.registerer) === null || _this$registerer === void 0 ? void 0 : _this$registerer.unregister();\n      (_this$registerer2 = this.registerer) === null || _this$registerer2 === void 0 ? void 0 : _this$registerer2.dispose();\n      return true;\n    };\n\n    this.onInvite = invitation => {\n      if (this.activeCalls.size < tagsRange.length) {\n        const cb = session => {\n          this.activeCalls.set(invitation.id, invitation);\n          this.onReceiveCall(session, invitation);\n        };\n\n        invitation.stateChange.addListener(cb);\n        this.onReceiveCall(SessionState.Initial, invitation);\n      } else {\n        invitation.reject();\n      }\n    };\n\n    this.remoteVideoEnabled = session => {\n      var _ref, _ref$peerConnection;\n\n      let receivingVideo = false;\n      (_ref = session.sessionDescriptionHandler) === null || _ref === void 0 ? void 0 : (_ref$peerConnection = _ref.peerConnection) === null || _ref$peerConnection === void 0 ? void 0 : _ref$peerConnection.getReceivers().forEach(receiver => {\n        if (receiver.track) {\n          if (receiver.track.kind === \"video\") receivingVideo = true;\n        }\n      });\n      return receivingVideo;\n    };\n\n    this.localVideoEnabled = session => {\n      var _ref2, _ref3;\n\n      return !!((_ref2 = (_ref3 = session) === null || _ref3 === void 0 ? void 0 : _ref3.sessionDescriptionHandlerOptions.constraints) === null || _ref2 === void 0 ? void 0 : _ref2.video);\n    };\n\n    this.muteMic = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        var _sdh$peerConnection;\n\n        const sdh = call.sessionDescriptionHandler;\n        sdh === null || sdh === void 0 ? void 0 : (_sdh$peerConnection = sdh.peerConnection) === null || _sdh$peerConnection === void 0 ? void 0 : _sdh$peerConnection.getSenders().forEach(stream => {\n          var _stream$track;\n\n          if (((_stream$track = stream.track) === null || _stream$track === void 0 ? void 0 : _stream$track.kind) === \"audio\") stream.track.enabled = false;\n        });\n      }\n    };\n\n    this.unMuteMic = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        var _sdh$peerConnection2;\n\n        const sdh = call.sessionDescriptionHandler;\n        sdh === null || sdh === void 0 ? void 0 : (_sdh$peerConnection2 = sdh.peerConnection) === null || _sdh$peerConnection2 === void 0 ? void 0 : _sdh$peerConnection2.getSenders().forEach(stream => {\n          var _stream$track2;\n\n          if (((_stream$track2 = stream.track) === null || _stream$track2 === void 0 ? void 0 : _stream$track2.kind) === \"audio\") stream.track.enabled = true;\n        });\n      }\n    };\n\n    this.disableCam = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        if (this.localVideoEnabled(call)) {\n          var _sdh$peerConnection3;\n\n          const sdh = call.sessionDescriptionHandler;\n          sdh === null || sdh === void 0 ? void 0 : (_sdh$peerConnection3 = sdh.peerConnection) === null || _sdh$peerConnection3 === void 0 ? void 0 : _sdh$peerConnection3.getSenders().forEach(stream => {\n            var _stream$track3;\n\n            if (((_stream$track3 = stream.track) === null || _stream$track3 === void 0 ? void 0 : _stream$track3.kind) === \"video\") stream.track.enabled = false;\n          });\n        } else {\n          // TODO\n          console.log(\"re-invite\");\n        }\n      }\n    };\n\n    this.enableCam = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        if (this.localVideoEnabled(call)) {\n          var _sdh$peerConnection4;\n\n          const sdh = call.sessionDescriptionHandler;\n          sdh === null || sdh === void 0 ? void 0 : (_sdh$peerConnection4 = sdh.peerConnection) === null || _sdh$peerConnection4 === void 0 ? void 0 : _sdh$peerConnection4.getSenders().forEach(stream => {\n            var _stream$track4;\n\n            if (((_stream$track4 = stream.track) === null || _stream$track4 === void 0 ? void 0 : _stream$track4.kind) === \"video\") stream.track.enabled = true;\n          });\n        } else {\n          // TODO\n          console.log(\"re-invite\");\n        }\n      }\n    };\n\n    this.holdCall = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        const options = {\n          sessionDescriptionHandlerModifiers: [Web.holdModifier]\n        };\n        return call.invite(options);\n      }\n    };\n\n    this.unHoldCall = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        const options = {\n          sessionDescriptionHandlerModifiers: []\n        };\n\n        if (call) {\n          call.invite(options);\n        }\n      }\n    };\n\n    this.mixAudios = (firstStream, secondStream) => {\n      return new MultiStreamsMixer([firstStream, secondStream]).getMixedStream();\n    };\n\n    this.mergeCalls = (firstCallId, secondCallId) => {\n      const firstCall = this.activeCalls.get(firstCallId);\n      const secondCall = this.activeCalls.get(secondCallId);\n\n      if (firstCall && secondCall) {\n        var _ref4, _ref5;\n\n        const firstPeer = (_ref4 = firstCall.sessionDescriptionHandler) === null || _ref4 === void 0 ? void 0 : _ref4.peerConnection;\n        const secondPeer = (_ref5 = firstCall.sessionDescriptionHandler) === null || _ref5 === void 0 ? void 0 : _ref5.peerConnection;\n        const firstSendedTrack = firstPeer === null || firstPeer === void 0 ? void 0 : firstPeer.getSenders().filter(str => {\n          var _str$track;\n\n          return ((_str$track = str.track) === null || _str$track === void 0 ? void 0 : _str$track.kind) === \"audio\";\n        })[0].track;\n        const secondSendedTrack = secondPeer === null || secondPeer === void 0 ? void 0 : secondPeer.getSenders().filter(str => {\n          var _str$track2;\n\n          return ((_str$track2 = str.track) === null || _str$track2 === void 0 ? void 0 : _str$track2.kind) === \"audio\";\n        })[0].track;\n        const firstReceivedStream = new MediaStream();\n        const firstReceivedTrack = firstPeer === null || firstPeer === void 0 ? void 0 : firstPeer.getReceivers().filter(str => str.track.kind === \"audio\")[0].track;\n        firstReceivedTrack && firstReceivedStream.addTrack(firstReceivedTrack);\n        const secondReceivedStream = new MediaStream();\n        const secondReceivedTrack = secondPeer === null || secondPeer === void 0 ? void 0 : secondPeer.getReceivers().filter(str => str.track.kind === \"audio\")[0].track;\n        secondReceivedTrack && secondReceivedStream.addTrack(secondReceivedTrack);\n\n        if (firstSendedTrack && secondSendedTrack && firstReceivedStream && secondReceivedStream) {\n          const firtsLocalMediaStream = new MediaStream();\n          const secondLocalMediaStream = new MediaStream();\n          firtsLocalMediaStream.addTrack(firstSendedTrack);\n          secondLocalMediaStream.addTrack(secondSendedTrack);\n          firstPeer === null || firstPeer === void 0 ? void 0 : firstPeer.getSenders().filter(str => {\n            var _str$track3;\n\n            return ((_str$track3 = str.track) === null || _str$track3 === void 0 ? void 0 : _str$track3.kind) === \"audio\";\n          })[0].replaceTrack(this.mixAudios(firtsLocalMediaStream, secondReceivedStream).getAudioTracks()[0]);\n          secondPeer === null || secondPeer === void 0 ? void 0 : secondPeer.getSenders().filter(str => {\n            var _str$track4;\n\n            return ((_str$track4 = str.track) === null || _str$track4 === void 0 ? void 0 : _str$track4.kind) === \"audio\";\n          })[0].replaceTrack(this.mixAudios(secondLocalMediaStream, firstReceivedStream).getAudioTracks()[0]);\n        }\n      }\n    };\n\n    Object.assign(this, props);\n    this.makeSIP();\n    this.activeCalls = new Map();\n    this.usedTags = new Map();\n  }\n\n  makeSIP() {\n    const transportOptions = {\n      //   server: this.wsURL,\n      server: \"wss://test.citrussquad.com:7443\"\n    };\n    const uri = UserAgent.makeURI(`sip:${this.user}@${this.domain}`);\n    const userAgentOptions = {\n      authorizationUsername: this.user,\n      authorizationPassword: this.password,\n      displayName: this.displayName,\n      transportOptions,\n      uri,\n      logBuiltinEnabled: true,\n      delegate: {\n        onInvite: this.onInvite\n      } // sipExtension100rel: SIPExtension.Required,\n\n    };\n    this.userAgent = new UserAgent(userAgentOptions);\n    this.registerer = new Registerer(this.userAgent);\n    this.userAgent.start().then(() => {\n      var _this$registerer3, _this$registerer4;\n\n      (_this$registerer3 = this.registerer) === null || _this$registerer3 === void 0 ? void 0 : _this$registerer3.register();\n      (_this$registerer4 = this.registerer) === null || _this$registerer4 === void 0 ? void 0 : _this$registerer4.stateChange.addListener(this.connectionCB);\n    });\n    this.userAgent.transport.onDisconnect = this.onDisconnect;\n    this.userAgent.transport.onConnect = this.onConnect;\n    window.addEventListener(\"unload\", ev => {\n      ev.preventDefault();\n      return this.unRegister();\n    });\n  }\n\n  invite(number, constraints = {\n    video: false,\n    audio: true\n  }) {\n    if (!(this.activeCalls.size >= tagsRange.length) && this.userAgent) {\n      const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\n      let newCall;\n\n      if (destination) {\n        newCall = new Inviter(this.userAgent, destination, {\n          sessionDescriptionHandlerOptions: {\n            constraints\n          } // inviteWithoutSdp: true,\n\n        });\n        this.activeCalls.set(newCall.id, newCall);\n      }\n\n      const currentInvite = newCall && this.activeCalls.get(newCall.id);\n\n      if (currentInvite) {\n        currentInvite.stateChange.addListener(state => {\n          if (this.activeCalls) this.onMakeCall(state, currentInvite);\n        });\n        currentInvite.invite();\n        this.onMakeCall(SessionState.Initial, currentInvite);\n      }\n    }\n  }\n\n  blindTransfer(callId, number) {\n    const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\n    const call = this.activeCalls.get(callId);\n\n    if (call && destination) {\n      call.refer(destination); // this.activeCalls.delete(callId);\n    }\n  }\n\n  attendedTransfer(firstCallId, secondCallId) {\n    const firstCall = this.activeCalls.get(firstCallId);\n    const secondCall = this.activeCalls.get(secondCallId);\n\n    if (firstCall && secondCall) {\n      firstCall.refer(secondCall);\n    }\n  }\n\n  getAvailableTag() {\n    let tagsUsing = Array.from(this.usedTags.values());\n\n    for (const tagId of tagsRange) {\n      if (!tagsUsing.find(tgId => tgId === `remote-stream-${tagId}`)) {\n        return `remote-stream-${tagId}`;\n      }\n    }\n  }\n\n  endCall(session) {\n    switch (session.state) {\n      case SessionState.Initial:\n      case SessionState.Establishing:\n        if (session instanceof Inviter) {\n          // An unestablished outgoing session\n          session.cancel();\n        } else {\n          // An unestablished incoming session\n          session.reject();\n        }\n\n        break;\n\n      case SessionState.Established:\n        // An established session\n        session.bye();\n        break;\n\n      case SessionState.Terminating:\n      case SessionState.Terminated:\n        // Cannot terminate a session that is already terminated\n        break;\n    }\n  }\n\n  setupRemoteMedia(session, speakerId = \"\") {\n    var _ref7, _ref7$peerConnection;\n\n    const tagId = this.getAvailableTag();\n\n    if (!tagId) {\n      var _ref6;\n\n      (_ref6 = session) === null || _ref6 === void 0 ? void 0 : _ref6.reject();\n      return;\n    }\n\n    const mediaElement = document.getElementById(tagId);\n    this.usedTags.set(session.id, tagId);\n    const remoteStream = new MediaStream();\n    (_ref7 = session.sessionDescriptionHandler) === null || _ref7 === void 0 ? void 0 : (_ref7$peerConnection = _ref7.peerConnection) === null || _ref7$peerConnection === void 0 ? void 0 : _ref7$peerConnection.getReceivers().forEach(receiver => {\n      if (receiver.track) {\n        remoteStream.addTrack(receiver.track);\n      }\n    });\n\n    const playAudio = async (mediaElement, remoteStream, speakerId) => {\n      if (mediaElement) {\n        if (speakerId) {\n          try {\n            await mediaElement.setSinkId(speakerId);\n          } catch {}\n        }\n\n        mediaElement.srcObject = remoteStream;\n        mediaElement.play();\n      }\n    };\n\n    playAudio(mediaElement, remoteStream, speakerId);\n    return {\n      receivingVideo: this.remoteVideoEnabled(session),\n      tagId\n    };\n  }\n\n  cleanupMedia(callId) {\n    const tag = this.usedTags.get(callId);\n    if (!tag) return;\n    const mediaElement = document.getElementById(tag);\n\n    if (mediaElement) {\n      mediaElement.srcObject = null;\n      mediaElement.pause();\n      this.usedTags.delete(callId);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/voice/voicecommunicator.ts"],"names":["Inviter","Registerer","SessionState","UserAgent","Web","MultiStreamsMixer","tagsRange","SIP","constructor","props","unRegister","registerer","unregister","dispose","onInvite","invitation","activeCalls","size","length","cb","session","set","id","onReceiveCall","stateChange","addListener","Initial","reject","remoteVideoEnabled","receivingVideo","sessionDescriptionHandler","peerConnection","getReceivers","forEach","receiver","track","kind","localVideoEnabled","sessionDescriptionHandlerOptions","constraints","video","muteMic","callID","call","get","sdh","getSenders","stream","enabled","unMuteMic","disableCam","console","log","enableCam","holdCall","options","sessionDescriptionHandlerModifiers","holdModifier","invite","unHoldCall","mixAudios","firstStream","secondStream","getMixedStream","mergeCalls","firstCallId","secondCallId","firstCall","secondCall","firstPeer","secondPeer","firstSendedTrack","filter","str","secondSendedTrack","firstReceivedStream","MediaStream","firstReceivedTrack","addTrack","secondReceivedStream","secondReceivedTrack","firtsLocalMediaStream","secondLocalMediaStream","replaceTrack","getAudioTracks","Object","assign","makeSIP","Map","usedTags","transportOptions","server","uri","makeURI","user","domain","userAgentOptions","authorizationUsername","authorizationPassword","password","displayName","logBuiltinEnabled","delegate","userAgent","start","then","register","connectionCB","transport","onDisconnect","onConnect","window","addEventListener","ev","preventDefault","number","audio","destination","newCall","currentInvite","state","onMakeCall","blindTransfer","callId","refer","attendedTransfer","getAvailableTag","tagsUsing","Array","from","values","tagId","find","tgId","endCall","Establishing","cancel","Established","bye","Terminating","Terminated","setupRemoteMedia","speakerId","mediaElement","document","getElementById","remoteStream","playAudio","setSinkId","srcObject","play","cleanupMedia","tag","pause","delete"],"mappings":"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","sourcesContent":["import {\r\n  Invitation,\r\n  Inviter,\r\n  Registerer,\r\n  RegistererState,\r\n  Session,\r\n  SessionInviteOptions,\r\n  SessionState,\r\n  // SIPExtension,\r\n  UserAgent,\r\n  UserAgentOptions,\r\n  Web,\r\n} from \"sip.js\";\r\nimport MultiStreamsMixer from \"multistreamsmixer\";\r\ninterface ConnectionListenerCallback {\r\n  (data: RegistererState): void;\r\n}\r\ninterface MakeCallCallback {\r\n  (state: SessionState, inviter: Inviter): void;\r\n}\r\ninterface ReceiveCallCallback {\r\n  (state: SessionState, invitation: Invitation): void;\r\n}\r\ninterface SIPConstructorPropeties {\r\n  user: string;\r\n  password: string;\r\n  wsURL: string;\r\n  domain: string;\r\n  displayName: string;\r\n  connectionCB: ConnectionListenerCallback;\r\n  onMakeCall: MakeCallCallback;\r\n  onReceiveCall: ReceiveCallCallback;\r\n  onDisconnect(e: Error | undefined): void;\r\n  onConnect(): void;\r\n}\r\nexport const tagsRange: number[] = [0, 1, 2, 3];\r\nexport default interface SIP {\r\n  user: string;\r\n  password: string;\r\n  wsURL: string;\r\n  domain: string;\r\n  displayName: string;\r\n  connectionCB: ConnectionListenerCallback;\r\n  onDisconnect(e: Error | undefined): void;\r\n  onConnect(): void;\r\n  onMakeCall: MakeCallCallback;\r\n  onReceiveCall: ReceiveCallCallback;\r\n  userAgent?: UserAgent;\r\n  registerer?: Registerer;\r\n  activeCalls: Map<string, Session>;\r\n  usedTags: Map<string, string>;\r\n}\r\nexport default class SIP {\r\n  constructor(props: SIPConstructorPropeties) {\r\n    Object.assign(this, props);\r\n    this.makeSIP();\r\n    this.activeCalls = new Map<string, Session>();\r\n    this.usedTags = new Map<string, string>();\r\n  }\r\n  makeSIP() {\r\n    const transportOptions = {\r\n      //   server: this.wsURL,\r\n      server: \"wss://test.citrussquad.com:7443\",\r\n    };\r\n    const uri = UserAgent.makeURI(`sip:${this.user}@${this.domain}`);\r\n    const userAgentOptions: UserAgentOptions = {\r\n      authorizationUsername: this.user,\r\n      authorizationPassword: this.password,\r\n      displayName: this.displayName,\r\n      transportOptions,\r\n      uri,\r\n      logBuiltinEnabled: true,\r\n      delegate: {\r\n        onInvite: this.onInvite,\r\n      },\r\n      // sipExtension100rel: SIPExtension.Required,\r\n    };\r\n    this.userAgent = new UserAgent(userAgentOptions);\r\n    this.registerer = new Registerer(this.userAgent);\r\n    this.userAgent.start().then(() => {\r\n      this.registerer?.register();\r\n      this.registerer?.stateChange.addListener(this.connectionCB);\r\n    });\r\n    this.userAgent.transport.onDisconnect = this.onDisconnect;\r\n    this.userAgent.transport.onConnect = this.onConnect;\r\n    window.addEventListener(\"unload\", (ev) => {\r\n      ev.preventDefault();\r\n\r\n      return this.unRegister();\r\n    });\r\n  }\r\n  unRegister = () => {\r\n    this.registerer?.unregister();\r\n    this.registerer?.dispose();\r\n    return true;\r\n  };\r\n  invite(\r\n    number: string,\r\n    constraints: MediaStreamConstraints = { video: false, audio: true }\r\n  ) {\r\n    if (!(this.activeCalls.size >= tagsRange.length) && this.userAgent) {\r\n      const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\r\n      let newCall;\r\n      if (destination) {\r\n        newCall = new Inviter(this.userAgent, destination, {\r\n          sessionDescriptionHandlerOptions: {\r\n            constraints,\r\n          },\r\n          // inviteWithoutSdp: true,\r\n        });\r\n        this.activeCalls.set(newCall.id, newCall);\r\n      }\r\n      const currentInvite =\r\n        newCall && (this.activeCalls.get(newCall.id) as Inviter);\r\n      if (currentInvite) {\r\n        currentInvite.stateChange.addListener((state) => {\r\n          if (this.activeCalls) this.onMakeCall(state, currentInvite);\r\n        });\r\n        currentInvite.invite();\r\n        this.onMakeCall(SessionState.Initial, currentInvite);\r\n      }\r\n    }\r\n  }\r\n  blindTransfer(callId: string, number: string) {\r\n    const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\r\n    const call = this.activeCalls.get(callId);\r\n    if (call && destination) {\r\n      call.refer(destination);\r\n      // this.activeCalls.delete(callId);\r\n    }\r\n  }\r\n  attendedTransfer(firstCallId: string, secondCallId: string) {\r\n    const firstCall = this.activeCalls.get(firstCallId);\r\n    const secondCall = this.activeCalls.get(secondCallId);\r\n    if (firstCall && secondCall) {\r\n      firstCall.refer(secondCall);\r\n    }\r\n  }\r\n  getAvailableTag() {\r\n    let tagsUsing = Array.from(this.usedTags.values());\r\n    for (const tagId of tagsRange) {\r\n      if (!tagsUsing.find((tgId) => tgId === `remote-stream-${tagId}`)) {\r\n        return `remote-stream-${tagId}`;\r\n      }\r\n    }\r\n  }\r\n  onInvite = (invitation: Invitation) => {\r\n    if (this.activeCalls.size < tagsRange.length) {\r\n      const cb = (session: SessionState) => {\r\n        this.activeCalls.set(invitation.id, invitation);\r\n        this.onReceiveCall(session, invitation);\r\n      };\r\n      invitation.stateChange.addListener(cb);\r\n      this.onReceiveCall(SessionState.Initial, invitation);\r\n    } else {\r\n      invitation.reject();\r\n    }\r\n  };\r\n  endCall(session: Session) {\r\n    switch (session.state) {\r\n      case SessionState.Initial:\r\n      case SessionState.Establishing:\r\n        if (session instanceof Inviter) {\r\n          // An unestablished outgoing session\r\n          session.cancel();\r\n        } else {\r\n          // An unestablished incoming session\r\n          (session as Invitation).reject();\r\n        }\r\n        break;\r\n      case SessionState.Established:\r\n        // An established session\r\n        session.bye();\r\n        break;\r\n      case SessionState.Terminating:\r\n      case SessionState.Terminated:\r\n        // Cannot terminate a session that is already terminated\r\n        break;\r\n    }\r\n  }\r\n  setupRemoteMedia(session: Session, speakerId: string = \"\") {\r\n    const tagId = this.getAvailableTag();\r\n    if (!tagId) {\r\n      (session as Invitation)?.reject();\r\n      return;\r\n    }\r\n    const mediaElement: HTMLVideoElement = document.getElementById(\r\n      tagId\r\n    ) as HTMLVideoElement;\r\n    this.usedTags.set(session.id, tagId);\r\n    const remoteStream = new MediaStream();\r\n\r\n    (session.sessionDescriptionHandler as Web.SessionDescriptionHandler)?.peerConnection\r\n      ?.getReceivers()\r\n      .forEach((receiver) => {\r\n        if (receiver.track) {\r\n          remoteStream.addTrack(receiver.track);\r\n        }\r\n      });\r\n    const playAudio = async (\r\n      mediaElement: HTMLVideoElement,\r\n      remoteStream: MediaStream,\r\n      speakerId: string\r\n    ) => {\r\n      if (mediaElement) {\r\n        if (speakerId) {\r\n          try {\r\n            await (mediaElement as any).setSinkId(speakerId);\r\n          } catch {}\r\n        }\r\n        mediaElement.srcObject = remoteStream;\r\n        mediaElement.play();\r\n      }\r\n    };\r\n    playAudio(mediaElement, remoteStream, speakerId);\r\n    return {\r\n      receivingVideo: this.remoteVideoEnabled(session),\r\n      tagId,\r\n    };\r\n  }\r\n  remoteVideoEnabled = (session: Session) => {\r\n    let receivingVideo = false;\r\n    (session.sessionDescriptionHandler as Web.SessionDescriptionHandler)?.peerConnection\r\n      ?.getReceivers()\r\n      .forEach((receiver) => {\r\n        if (receiver.track) {\r\n          if (receiver.track.kind === \"video\") receivingVideo = true;\r\n        }\r\n      });\r\n    return receivingVideo;\r\n  };\r\n  localVideoEnabled = (session: Session) => {\r\n    return !!((session as Inviter)?.sessionDescriptionHandlerOptions\r\n      .constraints as MediaStreamConstraints)?.video;\r\n  };\r\n  cleanupMedia(callId: string) {\r\n    const tag = this.usedTags.get(callId);\r\n    if (!tag) return;\r\n    const mediaElement: HTMLVideoElement = document.getElementById(\r\n      tag\r\n    ) as HTMLVideoElement;\r\n    if (mediaElement) {\r\n      mediaElement.srcObject = null;\r\n      mediaElement.pause();\r\n      this.usedTags.delete(callId);\r\n    }\r\n  }\r\n  muteMic = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      const sdh: Web.SessionDescriptionHandler = call.sessionDescriptionHandler as Web.SessionDescriptionHandler;\r\n      sdh?.peerConnection?.getSenders().forEach((stream: any) => {\r\n        if (stream.track?.kind === \"audio\") stream.track.enabled = false;\r\n      });\r\n    }\r\n  };\r\n  unMuteMic = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      const sdh: Web.SessionDescriptionHandler = call.sessionDescriptionHandler as Web.SessionDescriptionHandler;\r\n      sdh?.peerConnection?.getSenders().forEach((stream: any) => {\r\n        if (stream.track?.kind === \"audio\") stream.track.enabled = true;\r\n      });\r\n    }\r\n  };\r\n  disableCam = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      if (this.localVideoEnabled(call)) {\r\n        const sdh: Web.SessionDescriptionHandler = call.sessionDescriptionHandler as Web.SessionDescriptionHandler;\r\n        sdh?.peerConnection?.getSenders().forEach((stream) => {\r\n          if (stream.track?.kind === \"video\") stream.track.enabled = false;\r\n        });\r\n      } else {\r\n        // TODO\r\n        console.log(\"re-invite\");\r\n      }\r\n    }\r\n  };\r\n  enableCam = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      if (this.localVideoEnabled(call)) {\r\n        const sdh: Web.SessionDescriptionHandler = call.sessionDescriptionHandler as Web.SessionDescriptionHandler;\r\n        sdh?.peerConnection?.getSenders().forEach((stream: any) => {\r\n          if (stream.track?.kind === \"video\") stream.track.enabled = true;\r\n        });\r\n      } else {\r\n        // TODO\r\n        console.log(\"re-invite\");\r\n      }\r\n    }\r\n  };\r\n  holdCall = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      const options: SessionInviteOptions = {\r\n        sessionDescriptionHandlerModifiers: [Web.holdModifier],\r\n      };\r\n      return call.invite(options);\r\n    }\r\n  };\r\n  unHoldCall = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      const options: SessionInviteOptions = {\r\n        sessionDescriptionHandlerModifiers: [],\r\n      };\r\n      if (call) {\r\n        call.invite(options);\r\n      }\r\n    }\r\n  };\r\n  mixAudios = (firstStream: MediaStream, secondStream: MediaStream) => {\r\n    return new MultiStreamsMixer([firstStream, secondStream]).getMixedStream();\r\n  };\r\n  mergeCalls = (firstCallId: string, secondCallId: string) => {\r\n    const firstCall = this.activeCalls.get(firstCallId);\r\n    const secondCall = this.activeCalls.get(secondCallId);\r\n    if (firstCall && secondCall) {\r\n      const firstPeer = (firstCall.sessionDescriptionHandler as Web.SessionDescriptionHandler)\r\n        ?.peerConnection;\r\n      const secondPeer = (firstCall.sessionDescriptionHandler as Web.SessionDescriptionHandler)\r\n        ?.peerConnection;\r\n      const firstSendedTrack = firstPeer\r\n        ?.getSenders()\r\n        .filter((str) => str.track?.kind === \"audio\")[0].track;\r\n      const secondSendedTrack = secondPeer\r\n        ?.getSenders()\r\n        .filter((str) => str.track?.kind === \"audio\")[0].track;\r\n      const firstReceivedStream = new MediaStream();\r\n      const firstReceivedTrack = firstPeer\r\n        ?.getReceivers()\r\n        .filter((str) => str.track.kind === \"audio\")[0].track;\r\n      firstReceivedTrack && firstReceivedStream.addTrack(firstReceivedTrack);\r\n      const secondReceivedStream = new MediaStream();\r\n      const secondReceivedTrack = secondPeer\r\n        ?.getReceivers()\r\n        .filter((str) => str.track.kind === \"audio\")[0].track;\r\n      secondReceivedTrack && secondReceivedStream.addTrack(secondReceivedTrack);\r\n      if (\r\n        firstSendedTrack &&\r\n        secondSendedTrack &&\r\n        firstReceivedStream &&\r\n        secondReceivedStream\r\n      ) {\r\n        const firtsLocalMediaStream = new MediaStream();\r\n        const secondLocalMediaStream = new MediaStream();\r\n        firtsLocalMediaStream.addTrack(firstSendedTrack);\r\n        secondLocalMediaStream.addTrack(secondSendedTrack);\r\n        firstPeer\r\n          ?.getSenders()\r\n          .filter((str) => str.track?.kind === \"audio\")[0]\r\n          .replaceTrack(\r\n            this.mixAudios(\r\n              firtsLocalMediaStream,\r\n              secondReceivedStream\r\n            ).getAudioTracks()[0]\r\n          );\r\n        secondPeer\r\n          ?.getSenders()\r\n          .filter((str) => str.track?.kind === \"audio\")[0]\r\n          .replaceTrack(\r\n            this.mixAudios(\r\n              secondLocalMediaStream,\r\n              firstReceivedStream\r\n            ).getAudioTracks()[0]\r\n          );\r\n      }\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}