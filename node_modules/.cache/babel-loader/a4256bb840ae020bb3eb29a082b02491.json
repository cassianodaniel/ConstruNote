{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ModalSelectUsers.tsx\";\nimport React, { useState } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Collapse, CardHeader, CardBody, Alert, Card } from \"reactstrap\"; //simple bar\n\nimport SimpleBar from \"simplebar-react\"; //components\n\nimport SelectContact from \"./SelectContact\";\nimport { useTranslation } from \"react-i18next\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nimport { useAuth } from \"../contexts/AuthContext\";\nexport const ModalSelectUsers = ({\n  show,\n  toggle\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const [isOpenCollapse, setIsOpenCollapse] = useState(true);\n  const [isOpenAlert, setIsOpenAlert] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [groupName, setGroupName] = useState(\"\");\n  const [groupDescription, setGroupDescription] = useState(\"\");\n  const [selectedContact, setSelectedContact] = useState([]);\n  const {\n    chats,\n    setChats,\n    activeChat\n  } = useChat();\n  const {\n    user\n  } = useAuth();\n  const [activeChatCurrent, setActiveChatCurrent] = useState(null);\n  const [textMessage, setTextMessage] = useState(\"\"); // como armazenar a mensagem clicada pelo usuário nos três pontinhos e setar como textMessage aqui na onAddMessage?\n\n  const onAddMessage = () => {\n    if (textMessage !== \"\") {\n      setChats(chats.map(item => {\n        if (activeChat) if (item.id === (activeChat === null || activeChat === void 0 ? void 0 : activeChat.id)) {\n          item.messages.push({\n            id: `${item.messages.length + 1}`,\n            userName: user.name,\n            message: textMessage,\n            time: \"\",\n            isImageMessage: false,\n            isFileMessage: false,\n            isVideoMessage: false,\n            isAudioMessage: false,\n            fileUrl: \"\",\n            sendFile: undefined,\n            toUser: activeChat.id,\n            fromUser: user.id,\n            deliverStatus: DeliverStatus.SENDING,\n            readStatus: ReadStatus.UNREAD,\n            deliverTimestamp: \"\",\n            readTimestamp: \"\",\n            content: \"metadata\",\n            contentType: \"type\"\n          });\n        }\n        return item;\n      }));\n      setTextMessage(\"\");\n    }\n  };\n\n  const toggleCollapse = () => {\n    setIsOpenCollapse(!isOpenCollapse);\n  };\n\n  const handleCheckContact = (selected, contact) => {\n    if (selected) {\n      let selected = selectedContact;\n      selected.push(contact);\n      setSelectedContact(selected);\n    } else {\n      setSelectedContact(selectedContact.filter(sel => {\n        if (sel.id === contact.id) {\n          return false;\n        }\n\n        return true;\n      }));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: show,\n    centered: true,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    tag: \"h5\",\n    className: \"modal-title font-size-16\",\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, t(\"Forward message\")), /*#__PURE__*/React.createElement(ModalBody, {\n    className: \"p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Alert, {\n    isOpen: isOpenAlert,\n    color: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, message), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"light\",\n    size: \"sm\",\n    type: \"button\",\n    onClick: toggleCollapse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  }, t(\"Select Members\"))), /*#__PURE__*/React.createElement(Collapse, {\n    isOpen: isOpenCollapse,\n    id: \"groupmembercollapse\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"font-size-15 mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 19\n    }\n  }, t(\"Contacts\"))), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"p-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SimpleBar, {\n    style: {\n      maxHeight: \"150px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"addContacts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(SelectContact, {\n    handleCheckContact: handleCheckContact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 23\n    }\n  }))))))))), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"link\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, t(\"Close\")), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"primary\",\n    onClick: () => alert(''),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, \"Enviar\")));\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ModalSelectUsers.tsx"],"names":["React","useState","Button","Modal","ModalHeader","ModalBody","ModalFooter","Form","FormGroup","Collapse","CardHeader","CardBody","Alert","Card","SimpleBar","SelectContact","useTranslation","useChat","DeliverStatus","ReadStatus","useAuth","ModalSelectUsers","show","toggle","t","isOpenCollapse","setIsOpenCollapse","isOpenAlert","setIsOpenAlert","message","setMessage","groupName","setGroupName","groupDescription","setGroupDescription","selectedContact","setSelectedContact","chats","setChats","activeChat","user","activeChatCurrent","setActiveChatCurrent","textMessage","setTextMessage","onAddMessage","map","item","id","messages","push","length","userName","name","time","isImageMessage","isFileMessage","isVideoMessage","isAudioMessage","fileUrl","sendFile","undefined","toUser","fromUser","deliverStatus","SENDING","readStatus","UNREAD","deliverTimestamp","readTimestamp","content","contentType","toggleCollapse","handleCheckContact","selected","contact","filter","sel","maxHeight","alert"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Collapse,\r\n  CardHeader,\r\n  CardBody,\r\n  Alert,\r\n  Card,\r\n} from \"reactstrap\";\r\n\r\n//simple bar\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\n//components\r\nimport SelectContact from \"./SelectContact\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\nimport IContact from \"../alias/IContact\";\r\n\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport IChat from \"../alias/IChat\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\n\r\ninterface IProps {\r\n  show: boolean;\r\n  toggle(): void;\r\n}\r\n\r\nexport const ModalSelectUsers: React.FC<IProps> = ({ show, toggle }) => {\r\n  const { t } = useTranslation();\r\n\r\n  const [isOpenCollapse, setIsOpenCollapse] = useState(true);\r\n  const [isOpenAlert, setIsOpenAlert] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [groupDescription, setGroupDescription] = useState(\"\");\r\n  const [selectedContact, setSelectedContact] = useState<IContact[]>([]);\r\n\r\n  const { chats, setChats, activeChat } = useChat();\r\n  const { user } = useAuth();\r\n  const [activeChatCurrent, setActiveChatCurrent] = useState<IChat | null>(\r\n    null\r\n  );\r\n  const [textMessage, setTextMessage] = useState(\"\");\r\n\r\n  // como armazenar a mensagem clicada pelo usuário nos três pontinhos e setar como textMessage aqui na onAddMessage?\r\n  \r\n  const onAddMessage = () => {\r\n    if (textMessage !== \"\") {\r\n      setChats(\r\n        chats.map((item) => {\r\n          if (activeChat)\r\n            if (item.id === activeChat?.id) {\r\n              item.messages.push({\r\n                id: `${item.messages.length + 1}`,\r\n                userName: user.name,\r\n                message: textMessage,\r\n                time: \"\",\r\n                isImageMessage: false,\r\n                isFileMessage: false,\r\n                isVideoMessage: false,\r\n                isAudioMessage: false,\r\n                fileUrl: \"\",\r\n                sendFile: undefined,\r\n                toUser: activeChat.id,\r\n                fromUser: user.id,\r\n                deliverStatus: DeliverStatus.SENDING,\r\n                readStatus: ReadStatus.UNREAD,\r\n                deliverTimestamp: \"\",\r\n                readTimestamp: \"\",\r\n                content: \"metadata\",\r\n                contentType: \"type\",\r\n              });\r\n            }\r\n          return item;\r\n        })\r\n      );\r\n      setTextMessage(\"\");\r\n    }\r\n  };\r\n\r\n  const toggleCollapse = () => {\r\n    setIsOpenCollapse(!isOpenCollapse);\r\n  };\r\n\r\n  const handleCheckContact = (selected: boolean, contact: IContact) => {\r\n    if (selected) {\r\n      let selected = selectedContact;\r\n      selected.push(contact);\r\n      setSelectedContact(selected);\r\n    } else {\r\n      setSelectedContact(\r\n        selectedContact.filter((sel) => {\r\n          if (sel.id === contact.id) {\r\n            return false;\r\n          }\r\n          return true;\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal isOpen={show} centered toggle={toggle}>\r\n      <ModalHeader\r\n        tag=\"h5\"\r\n        className=\"modal-title font-size-16\"\r\n        toggle={toggle}\r\n      >\r\n        {t(\"Forward message\")}\r\n      </ModalHeader>\r\n      <ModalBody className=\"p-4\">\r\n        <Form>\r\n          \r\n          <FormGroup className=\"mb-4\">\r\n            <Alert isOpen={isOpenAlert} color=\"danger\">\r\n              {message}\r\n            </Alert>\r\n            <div className=\"mb-3\">\r\n              <Button\r\n                color=\"light\"\r\n                size=\"sm\"\r\n                type=\"button\"\r\n                onClick={toggleCollapse}\r\n              >\r\n                {t(\"Select Members\")}\r\n              </Button>\r\n            </div>\r\n\r\n            <Collapse isOpen={isOpenCollapse} id=\"groupmembercollapse\">\r\n              <Card className=\"border\">\r\n                <CardHeader>\r\n                  <h5 className=\"font-size-15 mb-0\">{t(\"Contacts\")}</h5>\r\n                </CardHeader>\r\n                <CardBody className=\"p-2\">\r\n                  <SimpleBar style={{ maxHeight: \"150px\" }}>\r\n                    <div id=\"addContacts\">\r\n                      <SelectContact handleCheckContact={handleCheckContact} />\r\n                    </div>\r\n                  </SimpleBar>\r\n                </CardBody>\r\n              </Card>\r\n            </Collapse>\r\n          </FormGroup>\r\n          \r\n        </Form>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button type=\"button\" color=\"link\" onClick={toggle}>\r\n          {t(\"Close\")}\r\n        </Button>\r\n        <Button type=\"button\" color=\"primary\" onClick={() => alert('')}>\r\n          Enviar\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}