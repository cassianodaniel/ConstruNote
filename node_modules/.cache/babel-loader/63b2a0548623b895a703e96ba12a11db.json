{"ast":null,"code":"import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { invariantIntlContext } from '../utils';\nimport { Context } from './injectIntl';\nvar DisplayName;\n\n(function (DisplayName) {\n  DisplayName[\"formatDate\"] = \"FormattedDate\";\n  DisplayName[\"formatTime\"] = \"FormattedTime\";\n  DisplayName[\"formatNumber\"] = \"FormattedNumber\";\n  DisplayName[\"formatList\"] = \"FormattedList\"; // Note that this DisplayName is the locale display name, not to be confused with\n  // the name of the enum, which is for React component display name in dev tools.\n\n  DisplayName[\"formatDisplayName\"] = \"FormattedDisplayName\";\n})(DisplayName || (DisplayName = {}));\n\nvar DisplayNameParts;\n\n(function (DisplayNameParts) {\n  DisplayNameParts[\"formatDate\"] = \"FormattedDateParts\";\n  DisplayNameParts[\"formatTime\"] = \"FormattedTimeParts\";\n  DisplayNameParts[\"formatNumber\"] = \"FormattedNumberParts\";\n  DisplayNameParts[\"formatList\"] = \"FormattedListParts\";\n})(DisplayNameParts || (DisplayNameParts = {}));\n\nexport var FormattedNumberParts = function (props) {\n  return React.createElement(Context.Consumer, null, function (intl) {\n    invariantIntlContext(intl);\n\n    var value = props.value,\n        children = props.children,\n        formatProps = __rest(props, [\"value\", \"children\"]);\n\n    return children(intl.formatNumberToParts(value, formatProps));\n  });\n};\nFormattedNumberParts.displayName = 'FormattedNumberParts';\nexport function createFormattedDateTimePartsComponent(name) {\n  var ComponentParts = function (props) {\n    return React.createElement(Context.Consumer, null, function (intl) {\n      invariantIntlContext(intl);\n\n      var value = props.value,\n          children = props.children,\n          formatProps = __rest(props, [\"value\", \"children\"]);\n\n      var date = typeof value === 'string' ? new Date(value || 0) : value;\n      var formattedParts = name === 'formatDate' ? intl.formatDateToParts(date, formatProps) : intl.formatTimeToParts(date, formatProps);\n      return children(formattedParts);\n    });\n  };\n\n  ComponentParts.displayName = DisplayNameParts[name];\n  return ComponentParts;\n}\nexport function createFormattedComponent(name) {\n  var Component = function (props) {\n    return React.createElement(Context.Consumer, null, function (intl) {\n      invariantIntlContext(intl);\n\n      var value = props.value,\n          children = props.children,\n          formatProps = __rest(props, [\"value\", \"children\"]); // TODO: fix TS type definition for localeMatcher upstream\n\n\n      var formattedValue = intl[name](value, formatProps);\n\n      if (typeof children === 'function') {\n        return children(formattedValue);\n      }\n\n      var Text = intl.textComponent || React.Fragment;\n      return React.createElement(Text, null, formattedValue);\n    });\n  };\n\n  Component.displayName = DisplayName[name];\n  return Component;\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/react-intl/lib/src/components/createFormattedComponent.js"],"names":["__rest","React","invariantIntlContext","Context","DisplayName","DisplayNameParts","FormattedNumberParts","props","createElement","Consumer","intl","value","children","formatProps","formatNumberToParts","displayName","createFormattedDateTimePartsComponent","name","ComponentParts","date","Date","formattedParts","formatDateToParts","formatTimeToParts","createFormattedComponent","Component","formattedValue","Text","textComponent","Fragment"],"mappings":"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","sourcesContent":["import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport { invariantIntlContext } from '../utils';\nimport { Context } from './injectIntl';\nvar DisplayName;\n(function (DisplayName) {\n    DisplayName[\"formatDate\"] = \"FormattedDate\";\n    DisplayName[\"formatTime\"] = \"FormattedTime\";\n    DisplayName[\"formatNumber\"] = \"FormattedNumber\";\n    DisplayName[\"formatList\"] = \"FormattedList\";\n    // Note that this DisplayName is the locale display name, not to be confused with\n    // the name of the enum, which is for React component display name in dev tools.\n    DisplayName[\"formatDisplayName\"] = \"FormattedDisplayName\";\n})(DisplayName || (DisplayName = {}));\nvar DisplayNameParts;\n(function (DisplayNameParts) {\n    DisplayNameParts[\"formatDate\"] = \"FormattedDateParts\";\n    DisplayNameParts[\"formatTime\"] = \"FormattedTimeParts\";\n    DisplayNameParts[\"formatNumber\"] = \"FormattedNumberParts\";\n    DisplayNameParts[\"formatList\"] = \"FormattedListParts\";\n})(DisplayNameParts || (DisplayNameParts = {}));\nexport var FormattedNumberParts = function (props) { return (React.createElement(Context.Consumer, null, function (intl) {\n    invariantIntlContext(intl);\n    var value = props.value, children = props.children, formatProps = __rest(props, [\"value\", \"children\"]);\n    return children(intl.formatNumberToParts(value, formatProps));\n})); };\nFormattedNumberParts.displayName = 'FormattedNumberParts';\nexport function createFormattedDateTimePartsComponent(name) {\n    var ComponentParts = function (props) { return (React.createElement(Context.Consumer, null, function (intl) {\n        invariantIntlContext(intl);\n        var value = props.value, children = props.children, formatProps = __rest(props, [\"value\", \"children\"]);\n        var date = typeof value === 'string' ? new Date(value || 0) : value;\n        var formattedParts = name === 'formatDate'\n            ? intl.formatDateToParts(date, formatProps)\n            : intl.formatTimeToParts(date, formatProps);\n        return children(formattedParts);\n    })); };\n    ComponentParts.displayName = DisplayNameParts[name];\n    return ComponentParts;\n}\nexport function createFormattedComponent(name) {\n    var Component = function (props) { return (React.createElement(Context.Consumer, null, function (intl) {\n        invariantIntlContext(intl);\n        var value = props.value, children = props.children, formatProps = __rest(props, [\"value\", \"children\"]);\n        // TODO: fix TS type definition for localeMatcher upstream\n        var formattedValue = intl[name](value, formatProps);\n        if (typeof children === 'function') {\n            return children(formattedValue);\n        }\n        var Text = intl.textComponent || React.Fragment;\n        return React.createElement(Text, null, formattedValue);\n    })); };\n    Component.displayName = DisplayName[name];\n    return Component;\n}\n"]},"metadata":{},"sourceType":"module"}