{"ast":null,"code":"var sortContactAndGroup=function sortContactAndGroup(data){var list=[];// cria os grupos das letras\ndata.forEach(function(item){var letter=item.name.substring(0,1).toUpperCase();var foundLetter=false;list.forEach(function(li){if(li.group===letter&&!foundLetter){foundLetter=true;}});if(!foundLetter){list.push({group:letter,children:[]});}});// adiciona os contatos nas suas respectivas letras\ndata.forEach(function(item){var letter=item.name.substring(0,1).toUpperCase();list=list.map(function(li){if(li.group===letter){li.children.push(item);}return li;});});return list.sort(function(a,b){var nameA=a.group.toUpperCase();// ignore upper and lowercase\nvar nameB=b.group.toUpperCase();// ignore upper and lowercase\nif(nameA<nameB){return-1;}if(nameA>nameB){return 1;}return 0;});};export default sortContactAndGroup;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/helpers/SortContactAndGroup.ts"],"names":["sortContactAndGroup","data","list","forEach","item","letter","name","substring","toUpperCase","foundLetter","li","group","push","children","map","sort","a","b","nameA","nameB"],"mappings":"AAIA,GAAMA,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,IAAD,CAAiC,CAC3D,GAAIC,CAAAA,IAA4B,CAAG,EAAnC,CAEA;AACAD,IAAI,CAACE,OAAL,CAAa,SAACC,IAAD,CAAU,CACrB,GAAIC,CAAAA,MAAM,CAAGD,IAAI,CAACE,IAAL,CAAUC,SAAV,CAAoB,CAApB,CAAuB,CAAvB,EAA0BC,WAA1B,EAAb,CACA,GAAIC,CAAAA,WAAW,CAAG,KAAlB,CAEAP,IAAI,CAACC,OAAL,CAAa,SAACO,EAAD,CAAQ,CACnB,GAAIA,EAAE,CAACC,KAAH,GAAaN,MAAb,EAAuB,CAACI,WAA5B,CAAyC,CACvCA,WAAW,CAAG,IAAd,CACD,CACF,CAJD,EAMA,GAAI,CAACA,WAAL,CAAkB,CAChBP,IAAI,CAACU,IAAL,CAAU,CAAED,KAAK,CAAEN,MAAT,CAAiBQ,QAAQ,CAAE,EAA3B,CAAV,EACD,CACF,CAbD,EAeA;AACAZ,IAAI,CAACE,OAAL,CAAa,SAACC,IAAD,CAAU,CACrB,GAAIC,CAAAA,MAAM,CAAGD,IAAI,CAACE,IAAL,CAAUC,SAAV,CAAoB,CAApB,CAAuB,CAAvB,EAA0BC,WAA1B,EAAb,CAEAN,IAAI,CAAGA,IAAI,CAACY,GAAL,CAAS,SAACJ,EAAD,CAAQ,CACtB,GAAIA,EAAE,CAACC,KAAH,GAAaN,MAAjB,CAAyB,CACvBK,EAAE,CAACG,QAAH,CAAYD,IAAZ,CAAiBR,IAAjB,EACD,CACD,MAAOM,CAAAA,EAAP,CACD,CALM,CAAP,CAMD,CATD,EAWA,MAAOR,CAAAA,IAAI,CAACa,IAAL,CAAU,SAAUC,CAAV,CAAmCC,CAAnC,CAA4D,CAC3E,GAAIC,CAAAA,KAAK,CAAGF,CAAC,CAACL,KAAF,CAAQH,WAAR,EAAZ,CAAmC;AACnC,GAAIW,CAAAA,KAAK,CAAGF,CAAC,CAACN,KAAF,CAAQH,WAAR,EAAZ,CAAmC;AACnC,GAAIU,KAAK,CAAGC,KAAZ,CAAmB,CACjB,MAAO,CAAC,CAAR,CACD,CACD,GAAID,KAAK,CAAGC,KAAZ,CAAmB,CACjB,MAAO,EAAP,CACD,CACD,MAAO,EAAP,CACD,CAVM,CAAP,CAWD,CA1CD,CA4CA,cAAenB,CAAAA,mBAAf","sourcesContent":["import IContact from \"../alias/IContact\";\r\nimport IContactAndGroupList from \"../alias/IContactAndGroupList\";\r\nimport IGroup from \"../alias/IGroup\";\r\n\r\nconst sortContactAndGroup = (data: (IContact | IGroup)[]) => {\r\n  let list: IContactAndGroupList[] = [];\r\n\r\n  // cria os grupos das letras\r\n  data.forEach((item) => {\r\n    let letter = item.name.substring(0, 1).toUpperCase();\r\n    let foundLetter = false;\r\n\r\n    list.forEach((li) => {\r\n      if (li.group === letter && !foundLetter) {\r\n        foundLetter = true;\r\n      }\r\n    });\r\n\r\n    if (!foundLetter) {\r\n      list.push({ group: letter, children: [] });\r\n    }\r\n  });\r\n\r\n  // adiciona os contatos nas suas respectivas letras\r\n  data.forEach((item) => {\r\n    let letter = item.name.substring(0, 1).toUpperCase();\r\n\r\n    list = list.map((li) => {\r\n      if (li.group === letter) {\r\n        li.children.push(item);\r\n      }\r\n      return li;\r\n    });\r\n  });\r\n\r\n  return list.sort(function (a: IContactAndGroupList, b: IContactAndGroupList) {\r\n    var nameA = a.group.toUpperCase(); // ignore upper and lowercase\r\n    var nameB = b.group.toUpperCase(); // ignore upper and lowercase\r\n    if (nameA < nameB) {\r\n      return -1;\r\n    }\r\n    if (nameA > nameB) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n};\r\n\r\nexport default sortContactAndGroup;\r\n"]},"metadata":{},"sourceType":"module"}