{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { EmitterImpl } from \"./emitter\";\nimport { SubscriptionState } from \"./subscription-state\";\n/**\n * A subscription provides {@link Notification} of events.\n *\n * @remarks\n * See {@link Subscriber} for details on establishing a subscription.\n *\n * @public\n */\n\nexport var Subscription = /*#__PURE__*/function () {\n  /**\n   * Constructor.\n   * @param userAgent - User agent. See {@link UserAgent} for details.\n   * @internal\n   */\n  function Subscription(userAgent) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Subscription);\n\n    this._disposed = false;\n    this._state = SubscriptionState.Initial;\n    this._logger = userAgent.getLogger(\"sip.Subscription\");\n    this._stateEventEmitter = new EmitterImpl();\n    this._userAgent = userAgent;\n    this.delegate = options.delegate;\n  }\n  /**\n   * Destructor.\n   */\n\n\n  _createClass(Subscription, [{\n    key: \"dispose\",\n    value: function dispose() {\n      if (this._disposed) {\n        return Promise.resolve();\n      }\n\n      this._disposed = true;\n\n      this._stateEventEmitter.removeAllListeners();\n\n      return Promise.resolve();\n    }\n    /**\n     * The subscribed subscription dialog.\n     */\n\n  }, {\n    key: \"stateTransition\",\n\n    /** @internal */\n    value: function stateTransition(newState) {\n      var _this = this;\n\n      var invalidTransition = function invalidTransition() {\n        throw new Error(\"Invalid state transition from \".concat(_this._state, \" to \").concat(newState));\n      }; // Validate transition\n\n\n      switch (this._state) {\n        case SubscriptionState.Initial:\n          if (newState !== SubscriptionState.NotifyWait && newState !== SubscriptionState.Terminated) {\n            invalidTransition();\n          }\n\n          break;\n\n        case SubscriptionState.NotifyWait:\n          if (newState !== SubscriptionState.Subscribed && newState !== SubscriptionState.Terminated) {\n            invalidTransition();\n          }\n\n          break;\n\n        case SubscriptionState.Subscribed:\n          if (newState !== SubscriptionState.Terminated) {\n            invalidTransition();\n          }\n\n          break;\n\n        case SubscriptionState.Terminated:\n          invalidTransition();\n          break;\n\n        default:\n          throw new Error(\"Unrecognized state.\");\n      } // Guard against duplicate transition\n\n\n      if (this._state === newState) {\n        return;\n      } // Transition\n\n\n      this._state = newState;\n\n      this._logger.log(\"Subscription \".concat(this._dialog ? this._dialog.id : undefined, \" transitioned to \").concat(this._state));\n\n      this._stateEventEmitter.emit(this._state); // Dispose\n\n\n      if (newState === SubscriptionState.Terminated) {\n        this.dispose();\n      }\n    }\n  }, {\n    key: \"dialog\",\n    get: function get() {\n      return this._dialog;\n    }\n    /**\n     * True if disposed.\n     * @internal\n     */\n\n  }, {\n    key: \"disposed\",\n    get: function get() {\n      return this._disposed;\n    }\n    /**\n     * Subscription state. See {@link SubscriptionState} for details.\n     */\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._state;\n    }\n    /**\n     * Emits when the subscription `state` property changes.\n     */\n\n  }, {\n    key: \"stateChange\",\n    get: function get() {\n      return this._stateEventEmitter;\n    }\n  }]);\n\n  return Subscription;\n}();","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/api/subscription.js"],"names":["EmitterImpl","SubscriptionState","Subscription","userAgent","options","_disposed","_state","Initial","_logger","getLogger","_stateEventEmitter","_userAgent","delegate","Promise","resolve","removeAllListeners","newState","invalidTransition","Error","NotifyWait","Terminated","Subscribed","log","_dialog","id","undefined","emit","dispose"],"mappings":"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","sourcesContent":["import { EmitterImpl } from \"./emitter\";\nimport { SubscriptionState } from \"./subscription-state\";\n/**\n * A subscription provides {@link Notification} of events.\n *\n * @remarks\n * See {@link Subscriber} for details on establishing a subscription.\n *\n * @public\n */\nexport class Subscription {\n    /**\n     * Constructor.\n     * @param userAgent - User agent. See {@link UserAgent} for details.\n     * @internal\n     */\n    constructor(userAgent, options = {}) {\n        this._disposed = false;\n        this._state = SubscriptionState.Initial;\n        this._logger = userAgent.getLogger(\"sip.Subscription\");\n        this._stateEventEmitter = new EmitterImpl();\n        this._userAgent = userAgent;\n        this.delegate = options.delegate;\n    }\n    /**\n     * Destructor.\n     */\n    dispose() {\n        if (this._disposed) {\n            return Promise.resolve();\n        }\n        this._disposed = true;\n        this._stateEventEmitter.removeAllListeners();\n        return Promise.resolve();\n    }\n    /**\n     * The subscribed subscription dialog.\n     */\n    get dialog() {\n        return this._dialog;\n    }\n    /**\n     * True if disposed.\n     * @internal\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Subscription state. See {@link SubscriptionState} for details.\n     */\n    get state() {\n        return this._state;\n    }\n    /**\n     * Emits when the subscription `state` property changes.\n     */\n    get stateChange() {\n        return this._stateEventEmitter;\n    }\n    /** @internal */\n    stateTransition(newState) {\n        const invalidTransition = () => {\n            throw new Error(`Invalid state transition from ${this._state} to ${newState}`);\n        };\n        // Validate transition\n        switch (this._state) {\n            case SubscriptionState.Initial:\n                if (newState !== SubscriptionState.NotifyWait && newState !== SubscriptionState.Terminated) {\n                    invalidTransition();\n                }\n                break;\n            case SubscriptionState.NotifyWait:\n                if (newState !== SubscriptionState.Subscribed && newState !== SubscriptionState.Terminated) {\n                    invalidTransition();\n                }\n                break;\n            case SubscriptionState.Subscribed:\n                if (newState !== SubscriptionState.Terminated) {\n                    invalidTransition();\n                }\n                break;\n            case SubscriptionState.Terminated:\n                invalidTransition();\n                break;\n            default:\n                throw new Error(\"Unrecognized state.\");\n        }\n        // Guard against duplicate transition\n        if (this._state === newState) {\n            return;\n        }\n        // Transition\n        this._state = newState;\n        this._logger.log(`Subscription ${this._dialog ? this._dialog.id : undefined} transitioned to ${this._state}`);\n        this._stateEventEmitter.emit(this._state);\n        // Dispose\n        if (newState === SubscriptionState.Terminated) {\n            this.dispose();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}