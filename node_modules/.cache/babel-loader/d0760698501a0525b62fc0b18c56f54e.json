{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { C, Grammar } from \"../core\";\n/**\n * A messager sends a {@link Message} (outgoing MESSAGE).\n * @public\n */\n\nexport var Messager = /*#__PURE__*/function () {\n  /**\n   * Constructs a new instance of the `Messager` class.\n   * @param userAgent - User agent. See {@link UserAgent} for details.\n   * @param targetURI - Request URI identifying the target of the message.\n   * @param content - Content for the body of the message.\n   * @param contentType - Content type of the body of the message.\n   * @param options - Options bucket. See {@link MessagerOptions} for details.\n   */\n  function Messager(userAgent, targetURI, content) {\n    var contentType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"text/plain\";\n    var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n\n    _classCallCheck(this, Messager);\n\n    // Logger\n    this.logger = userAgent.getLogger(\"sip.Messager\"); // Default options params\n\n    options.params = options.params || {}; // URIs\n\n    var fromURI = userAgent.userAgentCore.configuration.aor;\n\n    if (options.params.fromUri) {\n      fromURI = typeof options.params.fromUri === \"string\" ? Grammar.URIParse(options.params.fromUri) : options.params.fromUri;\n    }\n\n    if (!fromURI) {\n      throw new TypeError(\"Invalid from URI: \" + options.params.fromUri);\n    }\n\n    var toURI = targetURI;\n\n    if (options.params.toUri) {\n      toURI = typeof options.params.toUri === \"string\" ? Grammar.URIParse(options.params.toUri) : options.params.toUri;\n    }\n\n    if (!toURI) {\n      throw new TypeError(\"Invalid to URI: \" + options.params.toUri);\n    } // Message params\n\n\n    var params = options.params ? Object.assign({}, options.params) : {}; // Extra headers\n\n    var extraHeaders = (options.extraHeaders || []).slice(); // Body\n\n    var contentDisposition = \"render\";\n    var body = {\n      contentDisposition: contentDisposition,\n      contentType: contentType,\n      content: content\n    }; // Build the request\n\n    this.request = userAgent.userAgentCore.makeOutgoingRequestMessage(C.MESSAGE, targetURI, fromURI, toURI, params, extraHeaders, body); // User agent\n\n    this.userAgent = userAgent;\n  }\n  /**\n   * Send the message.\n   */\n\n\n  _createClass(Messager, [{\n    key: \"message\",\n    value: function message() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.userAgent.userAgentCore.request(this.request, options.requestDelegate);\n      return Promise.resolve();\n    }\n  }]);\n\n  return Messager;\n}();","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/api/messager.js"],"names":["C","Grammar","Messager","userAgent","targetURI","content","contentType","options","logger","getLogger","params","fromURI","userAgentCore","configuration","aor","fromUri","URIParse","TypeError","toURI","toUri","Object","assign","extraHeaders","slice","contentDisposition","body","request","makeOutgoingRequestMessage","MESSAGE","requestDelegate","Promise","resolve"],"mappings":";;AAAA,SAASA,CAAT,EAAYC,OAAZ,QAA2B,SAA3B;AACA;AACA;AACA;AACA;;AACA,WAAaC,QAAb;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI,oBAAYC,SAAZ,EAAuBC,SAAvB,EAAkCC,OAAlC,EAAqF;AAAA,QAA1CC,WAA0C,uEAA5B,YAA4B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACjF;AACA,SAAKC,MAAL,GAAcL,SAAS,CAACM,SAAV,CAAoB,cAApB,CAAd,CAFiF,CAGjF;;AACAF,IAAAA,OAAO,CAACG,MAAR,GAAiBH,OAAO,CAACG,MAAR,IAAkB,EAAnC,CAJiF,CAKjF;;AACA,QAAIC,OAAO,GAAGR,SAAS,CAACS,aAAV,CAAwBC,aAAxB,CAAsCC,GAApD;;AACA,QAAIP,OAAO,CAACG,MAAR,CAAeK,OAAnB,EAA4B;AACxBJ,MAAAA,OAAO,GACH,OAAOJ,OAAO,CAACG,MAAR,CAAeK,OAAtB,KAAkC,QAAlC,GAA6Cd,OAAO,CAACe,QAAR,CAAiBT,OAAO,CAACG,MAAR,CAAeK,OAAhC,CAA7C,GAAwFR,OAAO,CAACG,MAAR,CAAeK,OAD3G;AAEH;;AACD,QAAI,CAACJ,OAAL,EAAc;AACV,YAAM,IAAIM,SAAJ,CAAc,uBAAuBV,OAAO,CAACG,MAAR,CAAeK,OAApD,CAAN;AACH;;AACD,QAAIG,KAAK,GAAGd,SAAZ;;AACA,QAAIG,OAAO,CAACG,MAAR,CAAeS,KAAnB,EAA0B;AACtBD,MAAAA,KAAK,GAAG,OAAOX,OAAO,CAACG,MAAR,CAAeS,KAAtB,KAAgC,QAAhC,GAA2ClB,OAAO,CAACe,QAAR,CAAiBT,OAAO,CAACG,MAAR,CAAeS,KAAhC,CAA3C,GAAoFZ,OAAO,CAACG,MAAR,CAAeS,KAA3G;AACH;;AACD,QAAI,CAACD,KAAL,EAAY;AACR,YAAM,IAAID,SAAJ,CAAc,qBAAqBV,OAAO,CAACG,MAAR,CAAeS,KAAlD,CAAN;AACH,KApBgF,CAqBjF;;;AACA,QAAMT,MAAM,GAAGH,OAAO,CAACG,MAAR,GAAiBU,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBd,OAAO,CAACG,MAA1B,CAAjB,GAAqD,EAApE,CAtBiF,CAuBjF;;AACA,QAAMY,YAAY,GAAG,CAACf,OAAO,CAACe,YAAR,IAAwB,EAAzB,EAA6BC,KAA7B,EAArB,CAxBiF,CAyBjF;;AACA,QAAMC,kBAAkB,GAAG,QAA3B;AACA,QAAMC,IAAI,GAAG;AACTD,MAAAA,kBAAkB,EAAlBA,kBADS;AAETlB,MAAAA,WAAW,EAAXA,WAFS;AAGTD,MAAAA,OAAO,EAAPA;AAHS,KAAb,CA3BiF,CAgCjF;;AACA,SAAKqB,OAAL,GAAevB,SAAS,CAACS,aAAV,CAAwBe,0BAAxB,CAAmD3B,CAAC,CAAC4B,OAArD,EAA8DxB,SAA9D,EAAyEO,OAAzE,EAAkFO,KAAlF,EAAyFR,MAAzF,EAAiGY,YAAjG,EAA+GG,IAA/G,CAAf,CAjCiF,CAkCjF;;AACA,SAAKtB,SAAL,GAAiBA,SAAjB;AACH;AACD;AACJ;AACA;;;AAhDA;AAAA;AAAA,8BAiD0B;AAAA,UAAdI,OAAc,uEAAJ,EAAI;AAClB,WAAKJ,SAAL,CAAeS,aAAf,CAA6Bc,OAA7B,CAAqC,KAAKA,OAA1C,EAAmDnB,OAAO,CAACsB,eAA3D;AACA,aAAOC,OAAO,CAACC,OAAR,EAAP;AACH;AApDL;;AAAA;AAAA","sourcesContent":["import { C, Grammar } from \"../core\";\n/**\n * A messager sends a {@link Message} (outgoing MESSAGE).\n * @public\n */\nexport class Messager {\n    /**\n     * Constructs a new instance of the `Messager` class.\n     * @param userAgent - User agent. See {@link UserAgent} for details.\n     * @param targetURI - Request URI identifying the target of the message.\n     * @param content - Content for the body of the message.\n     * @param contentType - Content type of the body of the message.\n     * @param options - Options bucket. See {@link MessagerOptions} for details.\n     */\n    constructor(userAgent, targetURI, content, contentType = \"text/plain\", options = {}) {\n        // Logger\n        this.logger = userAgent.getLogger(\"sip.Messager\");\n        // Default options params\n        options.params = options.params || {};\n        // URIs\n        let fromURI = userAgent.userAgentCore.configuration.aor;\n        if (options.params.fromUri) {\n            fromURI =\n                typeof options.params.fromUri === \"string\" ? Grammar.URIParse(options.params.fromUri) : options.params.fromUri;\n        }\n        if (!fromURI) {\n            throw new TypeError(\"Invalid from URI: \" + options.params.fromUri);\n        }\n        let toURI = targetURI;\n        if (options.params.toUri) {\n            toURI = typeof options.params.toUri === \"string\" ? Grammar.URIParse(options.params.toUri) : options.params.toUri;\n        }\n        if (!toURI) {\n            throw new TypeError(\"Invalid to URI: \" + options.params.toUri);\n        }\n        // Message params\n        const params = options.params ? Object.assign({}, options.params) : {};\n        // Extra headers\n        const extraHeaders = (options.extraHeaders || []).slice();\n        // Body\n        const contentDisposition = \"render\";\n        const body = {\n            contentDisposition,\n            contentType,\n            content\n        };\n        // Build the request\n        this.request = userAgent.userAgentCore.makeOutgoingRequestMessage(C.MESSAGE, targetURI, fromURI, toURI, params, extraHeaders, body);\n        // User agent\n        this.userAgent = userAgent;\n    }\n    /**\n     * Send the message.\n     */\n    message(options = {}) {\n        this.userAgent.userAgentCore.request(this.request, options.requestDelegate);\n        return Promise.resolve();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}