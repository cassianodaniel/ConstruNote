{"ast":null,"code":"module.exports = function hexToRgb(hex) {\n  if (hex.charAt && hex.charAt(0) === '#') {\n    hex = removeHash(hex);\n  }\n\n  if (hex.length === 3) {\n    hex = expand(hex);\n  }\n\n  var bigint = parseInt(hex, 16);\n  var r = bigint >> 16 & 255;\n  var g = bigint >> 8 & 255;\n  var b = bigint & 255;\n  return [r, g, b];\n};\n\nfunction removeHash(hex) {\n  var arr = hex.split('');\n  arr.shift();\n  return arr.join('');\n}\n\nfunction expand(hex) {\n  return hex.split('').reduce(function (accum, value) {\n    return accum.concat([value, value]);\n  }, []).join('');\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/hex-to-rgb/index.js"],"names":["module","exports","hexToRgb","hex","charAt","removeHash","length","expand","bigint","parseInt","r","g","b","arr","split","shift","join","reduce","accum","value","concat"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAmBC,GAAnB,EAAwB;AAEvC,MAAIA,GAAG,CAACC,MAAJ,IAAcD,GAAG,CAACC,MAAJ,CAAW,CAAX,MAAkB,GAApC,EAAyC;AACvCD,IAAAA,GAAG,GAAGE,UAAU,CAACF,GAAD,CAAhB;AACD;;AAED,MAAIA,GAAG,CAACG,MAAJ,KAAe,CAAnB,EAAsB;AACpBH,IAAAA,GAAG,GAAGI,MAAM,CAACJ,GAAD,CAAZ;AACD;;AAED,MAAIK,MAAM,GAAGC,QAAQ,CAACN,GAAD,EAAM,EAAN,CAArB;AACA,MAAIO,CAAC,GAAIF,MAAM,IAAI,EAAX,GAAiB,GAAzB;AACA,MAAIG,CAAC,GAAIH,MAAM,IAAI,CAAX,GAAgB,GAAxB;AACA,MAAII,CAAC,GAAGJ,MAAM,GAAG,GAAjB;AAEA,SAAO,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAP;AACD,CAhBD;;AAkBA,SAASP,UAAT,CAAqBF,GAArB,EAA0B;AAExB,MAAIU,GAAG,GAAGV,GAAG,CAACW,KAAJ,CAAU,EAAV,CAAV;AACAD,EAAAA,GAAG,CAACE,KAAJ;AACA,SAAOF,GAAG,CAACG,IAAJ,CAAS,EAAT,CAAP;AACD;;AAED,SAAST,MAAT,CAAiBJ,GAAjB,EAAsB;AAEpB,SAAOA,GAAG,CACPW,KADI,CACE,EADF,EAEJG,MAFI,CAEG,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AAE9B,WAAOD,KAAK,CAACE,MAAN,CAAa,CAACD,KAAD,EAAQA,KAAR,CAAb,CAAP;AACD,GALI,EAKF,EALE,EAMJH,IANI,CAMC,EAND,CAAP;AAOD","sourcesContent":["module.exports = function hexToRgb (hex) {\n\n  if (hex.charAt && hex.charAt(0) === '#') {\n    hex = removeHash(hex)\n  }\n\n  if (hex.length === 3) {\n    hex = expand(hex)\n  }\n\n  var bigint = parseInt(hex, 16)\n  var r = (bigint >> 16) & 255\n  var g = (bigint >> 8) & 255\n  var b = bigint & 255\n\n  return [r, g, b]\n}\n\nfunction removeHash (hex) {\n\n  var arr = hex.split('')\n  arr.shift()\n  return arr.join('')\n}\n\nfunction expand (hex) {\n\n  return hex\n    .split('')\n    .reduce(function (accum, value) {\n\n      return accum.concat([value, value])\n    }, [])\n    .join('')\n}\n"]},"metadata":{},"sourceType":"script"}