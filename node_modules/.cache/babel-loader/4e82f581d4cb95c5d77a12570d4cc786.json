{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ModalChangePassword.tsx\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input } from \"reactstrap\";\nimport { useTranslation } from \"react-i18next\";\nimport { useModal } from \"./../contexts/ModalContext\";\nimport { useAuth } from \"./../contexts/AuthContext\";\nexport const ModalChangePassword = () => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    setChangedUserPassword\n  } = useAuth();\n  const {\n    showModalChangePassword,\n    setShowModalChangePassword\n  } = useModal();\n  const [currentPassword, setCurrentPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmNewPassword, setConfirmNewPassword] = useState(\"\");\n\n  const toggle = () => {\n    setShowModalChangePassword(!showModalChangePassword);\n  };\n\n  const clearPasswords = () => {\n    setCurrentPassword(\"\");\n    setNewPassword(\"\");\n    setConfirmNewPassword(\"\");\n  };\n\n  const handleCheckPassword = () => {\n    if (currentPassword.length >= 3) {\n      if (currentPassword === newPassword) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  };\n\n  const handleCheckNewPassword = () => {\n    if (confirmNewPassword.length >= 3) {\n      if (newPassword !== confirmNewPassword) {\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false;\n    }\n  };\n\n  const handleCheckAllPasswords = () => {\n    if (confirmNewPassword.length >= 3 && newPassword.length >= 3 && currentPassword.length >= 1) {\n      if (currentPassword !== newPassword) {\n        if (newPassword === confirmNewPassword) {\n          return true;\n        }\n      }\n    } else {\n      return false;\n    }\n  };\n\n  const inputCurrentPassword = useRef(null);\n  useEffect(() => {\n    setTimeout(() => {\n      var _inputCurrentPassword;\n\n      return (_inputCurrentPassword = inputCurrentPassword.current) === null || _inputCurrentPassword === void 0 ? void 0 : _inputCurrentPassword.focus();\n    }, 500);\n  }, [showModalChangePassword]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: showModalChangePassword,\n    centered: true,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    tag: \"h5\",\n    className: \"modal-title font-size-13\",\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, t(\"Change password\")), /*#__PURE__*/React.createElement(ModalBody, {\n    className: \"p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"current-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, t(\"Current password\")), /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputCurrentPassword,\n    type: \"password\",\n    className: \"form-control\",\n    id: \"current-input\",\n    defaultValue: \"\",\n    onChange: e => setCurrentPassword(e.target.value),\n    placeholder: t(\"Current password\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"new-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, t(\"New password\")), /*#__PURE__*/React.createElement(Input, {\n    type: \"password\",\n    className: \"form-control\",\n    id: \"new-input\",\n    defaultValue: \"\",\n    onChange: e => setNewPassword(e.target.value),\n    placeholder: t(\"New password\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"red\",\n      fontSize: 12,\n      marginTop: 5,\n      marginLeft: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, handleCheckPassword() ? \"\" : \"A senha atual corresponde à nova solicitada!\", newPassword.length < 3 && newPassword.length > 0 ? \"Mínimo de 3 caracteres\" : \"\")), /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"confirm-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, t(\"Confirm new password\")), /*#__PURE__*/React.createElement(Input, {\n    type: \"password\",\n    className: \"form-control\",\n    id: \"confirm-input\",\n    defaultValue: \"\",\n    onChange: e => setConfirmNewPassword(e.target.value),\n    placeholder: t(\"Confirm new password\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      color: \"red\",\n      fontSize: 12,\n      marginTop: 5,\n      marginLeft: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, confirmNewPassword.length > 0 && handleCheckNewPassword() ? \"A confirmação da nova senha não corresponde!\" : \"\", confirmNewPassword.length < 3 && confirmNewPassword.length > 0 ? \" Mínimo de 3 caracteres.\" : \"\")))), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"link\",\n    onClick: () => setShowModalChangePassword(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, t(\"Close\")), handleCheckAllPasswords() ? /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    className: handleCheckAllPasswords() ? \"\" : \"disabled\",\n    color: \"primary\",\n    onClick: () => {\n      setChangedUserPassword({\n        oldPassword: currentPassword,\n        newPassword: newPassword\n      });\n      setShowModalChangePassword(false);\n      clearPasswords();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }, t(\"Change password\")) : /*#__PURE__*/React.createElement(Button, {\n    disabled: true,\n    type: \"button\",\n    className: handleCheckAllPasswords() ? \"\" : \"disabled\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }, t(\"Change password\"))));\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ModalChangePassword.tsx"],"names":["React","useEffect","useState","useRef","Button","Modal","ModalHeader","ModalBody","ModalFooter","Form","FormGroup","Label","Input","useTranslation","useModal","useAuth","ModalChangePassword","t","setChangedUserPassword","showModalChangePassword","setShowModalChangePassword","currentPassword","setCurrentPassword","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","toggle","clearPasswords","handleCheckPassword","length","handleCheckNewPassword","handleCheckAllPasswords","inputCurrentPassword","setTimeout","current","focus","e","target","value","color","fontSize","marginTop","marginLeft","oldPassword"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n} from \"reactstrap\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useModal } from \"./../contexts/ModalContext\";\r\nimport { useAuth } from \"./../contexts/AuthContext\";\r\n\r\nexport const ModalChangePassword: React.FC = () => {\r\n  const { t } = useTranslation();\r\n\r\n  const { setChangedUserPassword } = useAuth();\r\n  const { showModalChangePassword, setShowModalChangePassword } = useModal();\r\n  const [currentPassword, setCurrentPassword] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [confirmNewPassword, setConfirmNewPassword] = useState(\"\");\r\n\r\n  const toggle = () => {\r\n    setShowModalChangePassword(!showModalChangePassword);\r\n  };\r\n\r\n  const clearPasswords = () => {\r\n    setCurrentPassword(\"\");\r\n    setNewPassword(\"\");\r\n    setConfirmNewPassword(\"\");\r\n  };\r\n\r\n  const handleCheckPassword = () => {\r\n    if (currentPassword.length >= 3) {\r\n      if (currentPassword === newPassword) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  const handleCheckNewPassword = () => {\r\n    if (confirmNewPassword.length >= 3) {\r\n      if (newPassword !== confirmNewPassword) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const handleCheckAllPasswords = () => {\r\n    if (\r\n      confirmNewPassword.length >= 3 &&\r\n      newPassword.length >= 3 &&\r\n      currentPassword.length >= 1\r\n    ) {\r\n      if (currentPassword !== newPassword) {\r\n        if (newPassword === confirmNewPassword) {\r\n          return true;\r\n        }\r\n      }\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const inputCurrentPassword = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => inputCurrentPassword.current?.focus(), 500);\r\n  }, [showModalChangePassword]);\r\n\r\n  return (\r\n    <Modal isOpen={showModalChangePassword} centered toggle={toggle}>\r\n      <ModalHeader\r\n        tag=\"h5\"\r\n        className=\"modal-title font-size-13\"\r\n        toggle={toggle}\r\n      >\r\n        {t(\"Change password\")}\r\n      </ModalHeader>\r\n      <ModalBody className=\"p-4\">\r\n        <Form>\r\n          <FormGroup className=\"mb-4\">\r\n            <Label htmlFor=\"current-input\">{t(\"Current password\")}</Label>\r\n            <input\r\n              ref={inputCurrentPassword}\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"current-input\"\r\n              defaultValue={\"\"}\r\n              onChange={(e) => setCurrentPassword(e.target.value)}\r\n              placeholder={t(\"Current password\")}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup className=\"mb-4\">\r\n            <Label htmlFor=\"new-input\">{t(\"New password\")}</Label>\r\n            <Input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"new-input\"\r\n              defaultValue={\"\"}\r\n              onChange={(e) => setNewPassword(e.target.value)}\r\n              placeholder={t(\"New password\")}\r\n            />\r\n            <p\r\n              style={{\r\n                color: \"red\",\r\n                fontSize: 12,\r\n                marginTop: 5,\r\n                marginLeft: 2,\r\n              }}\r\n            >\r\n              {handleCheckPassword()\r\n                ? \"\"\r\n                : \"A senha atual corresponde à nova solicitada!\"}\r\n              {newPassword.length < 3 && newPassword.length > 0\r\n                ? \"Mínimo de 3 caracteres\"\r\n                : \"\"}\r\n            </p>\r\n          </FormGroup>\r\n          <FormGroup className=\"mb-4\">\r\n            <Label htmlFor=\"confirm-input\">{t(\"Confirm new password\")}</Label>\r\n            <Input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"confirm-input\"\r\n              defaultValue={\"\"}\r\n              onChange={(e) => setConfirmNewPassword(e.target.value)}\r\n              placeholder={t(\"Confirm new password\")}\r\n            />\r\n            <p\r\n              style={{\r\n                color: \"red\",\r\n                fontSize: 12,\r\n                marginTop: 5,\r\n                marginLeft: 2,\r\n              }}\r\n            >\r\n              {confirmNewPassword.length > 0 && handleCheckNewPassword()\r\n                ? \"A confirmação da nova senha não corresponde!\"\r\n                : \"\"}\r\n              {confirmNewPassword.length < 3 && confirmNewPassword.length > 0\r\n                ? \" Mínimo de 3 caracteres.\"\r\n                : \"\"}\r\n            </p>\r\n          </FormGroup>\r\n        </Form>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button\r\n          type=\"button\"\r\n          color=\"link\"\r\n          onClick={() => setShowModalChangePassword(false)}\r\n        >\r\n          {t(\"Close\")}\r\n        </Button>\r\n        {handleCheckAllPasswords() ? (\r\n          <Button\r\n            type=\"button\"\r\n            className={handleCheckAllPasswords() ? \"\" : \"disabled\"}\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              setChangedUserPassword({\r\n                oldPassword: currentPassword,\r\n                newPassword: newPassword,\r\n              });\r\n              setShowModalChangePassword(false);\r\n              clearPasswords();\r\n            }}\r\n          >\r\n            {t(\"Change password\")}\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            disabled\r\n            type=\"button\"\r\n            className={handleCheckAllPasswords() ? \"\" : \"disabled\"}\r\n            color=\"primary\"\r\n          >\r\n            {t(\"Change password\")}\r\n          </Button>\r\n        )}\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}