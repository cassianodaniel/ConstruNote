{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _get = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar Connection = require('@xmpp/connection');\n\nvar Client = /*#__PURE__*/function (_Connection) {\n  _inherits(Client, _Connection);\n\n  var _super = _createSuper(Client);\n\n  function Client(options) {\n    var _this;\n\n    _classCallCheck(this, Client);\n\n    _this = _super.call(this, options);\n    _this.transports = [];\n    return _this;\n  }\n\n  _createClass(Client, [{\n    key: \"send\",\n    value: function send(element) {\n      var _this$Transport$proto;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return (_this$Transport$proto = this.Transport.prototype.send).call.apply(_this$Transport$proto, [this, element].concat(args));\n    }\n  }, {\n    key: \"_findTransport\",\n    value: function _findTransport(service) {\n      return this.transports.find(function (Transport) {\n        try {\n          return Transport.prototype.socketParameters(service) !== undefined; // eslint-disable-next-line no-unused-vars\n        } catch (err) {\n          return false;\n        }\n      });\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(service) {\n      var Transport = this._findTransport(service);\n\n      if (!Transport) {\n        throw new Error('No compatible connection method found.');\n      }\n\n      this.Transport = Transport;\n      this.Socket = Transport.prototype.Socket;\n      this.Parser = Transport.prototype.Parser;\n      return _get(_getPrototypeOf(Client.prototype), \"connect\", this).call(this, service);\n    }\n  }, {\n    key: \"socketParameters\",\n    value: function socketParameters() {\n      var _this$Transport$proto2;\n\n      return (_this$Transport$proto2 = this.Transport.prototype).socketParameters.apply(_this$Transport$proto2, arguments);\n    }\n  }, {\n    key: \"header\",\n    value: function header() {\n      var _this$Transport$proto3;\n\n      return (_this$Transport$proto3 = this.Transport.prototype).header.apply(_this$Transport$proto3, arguments);\n    }\n  }, {\n    key: \"headerElement\",\n    value: function headerElement() {\n      var _this$Transport$proto4;\n\n      return (_this$Transport$proto4 = this.Transport.prototype).headerElement.apply(_this$Transport$proto4, arguments);\n    }\n  }, {\n    key: \"footer\",\n    value: function footer() {\n      var _this$Transport$proto5;\n\n      return (_this$Transport$proto5 = this.Transport.prototype).footer.apply(_this$Transport$proto5, arguments);\n    }\n  }, {\n    key: \"footerElement\",\n    value: function footerElement() {\n      var _this$Transport$proto6;\n\n      return (_this$Transport$proto6 = this.Transport.prototype).footerElement.apply(_this$Transport$proto6, arguments);\n    }\n  }]);\n\n  return Client;\n}(Connection);\n\nClient.prototype.NS = 'jabber:client';\nmodule.exports = Client;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/client-core/lib/Client.js"],"names":["Connection","require","Client","options","transports","element","args","Transport","prototype","send","call","service","find","socketParameters","undefined","err","_findTransport","Error","Socket","Parser","header","headerElement","footer","footerElement","NS","module","exports"],"mappings":"AAAA;;;;;;;;;;;;;;AAEA,IAAMA,UAAU,GAAGC,OAAO,CAAC,kBAAD,CAA1B;;IAEMC,M;;;;;AACJ,kBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB,8BAAMA,OAAN;AACA,UAAKC,UAAL,GAAkB,EAAlB;AAFmB;AAGpB;;;;yBAEIC,O,EAAkB;AAAA;;AAAA,wCAANC,IAAM;AAANA,QAAAA,IAAM;AAAA;;AACrB,aAAO,8BAAKC,SAAL,CAAeC,SAAf,CAAyBC,IAAzB,EAA8BC,IAA9B,+BAAmC,IAAnC,EAAyCL,OAAzC,SAAqDC,IAArD,EAAP;AACD;;;mCAEcK,O,EAAS;AACtB,aAAO,KAAKP,UAAL,CAAgBQ,IAAhB,CAAqB,UAAAL,SAAS,EAAI;AACvC,YAAI;AACF,iBAAOA,SAAS,CAACC,SAAV,CAAoBK,gBAApB,CAAqCF,OAArC,MAAkDG,SAAzD,CADE,CAEF;AACD,SAHD,CAGE,OAAOC,GAAP,EAAY;AACZ,iBAAO,KAAP;AACD;AACF,OAPM,CAAP;AAQD;;;4BAEOJ,O,EAAS;AACf,UAAMJ,SAAS,GAAG,KAAKS,cAAL,CAAoBL,OAApB,CAAlB;;AAEA,UAAI,CAACJ,SAAL,EAAgB;AACd,cAAM,IAAIU,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,WAAKV,SAAL,GAAiBA,SAAjB;AACA,WAAKW,MAAL,GAAcX,SAAS,CAACC,SAAV,CAAoBU,MAAlC;AACA,WAAKC,MAAL,GAAcZ,SAAS,CAACC,SAAV,CAAoBW,MAAlC;AAEA,iFAAqBR,OAArB;AACD;;;uCAEyB;AAAA;;AACxB,aAAO,+BAAKJ,SAAL,CAAeC,SAAf,EAAyBK,gBAAzB,yCAAP;AACD;;;6BAEe;AAAA;;AACd,aAAO,+BAAKN,SAAL,CAAeC,SAAf,EAAyBY,MAAzB,yCAAP;AACD;;;oCAEsB;AAAA;;AACrB,aAAO,+BAAKb,SAAL,CAAeC,SAAf,EAAyBa,aAAzB,yCAAP;AACD;;;6BAEe;AAAA;;AACd,aAAO,+BAAKd,SAAL,CAAeC,SAAf,EAAyBc,MAAzB,yCAAP;AACD;;;oCAEsB;AAAA;;AACrB,aAAO,+BAAKf,SAAL,CAAeC,SAAf,EAAyBe,aAAzB,yCAAP;AACD;;;;EArDkBvB,U;;AAwDrBE,MAAM,CAACM,SAAP,CAAiBgB,EAAjB,GAAsB,eAAtB;AAEAC,MAAM,CAACC,OAAP,GAAiBxB,MAAjB","sourcesContent":["'use strict'\n\nconst Connection = require('@xmpp/connection')\n\nclass Client extends Connection {\n  constructor(options) {\n    super(options)\n    this.transports = []\n  }\n\n  send(element, ...args) {\n    return this.Transport.prototype.send.call(this, element, ...args)\n  }\n\n  _findTransport(service) {\n    return this.transports.find(Transport => {\n      try {\n        return Transport.prototype.socketParameters(service) !== undefined\n        // eslint-disable-next-line no-unused-vars\n      } catch (err) {\n        return false\n      }\n    })\n  }\n\n  connect(service) {\n    const Transport = this._findTransport(service)\n\n    if (!Transport) {\n      throw new Error('No compatible connection method found.')\n    }\n\n    this.Transport = Transport\n    this.Socket = Transport.prototype.Socket\n    this.Parser = Transport.prototype.Parser\n\n    return super.connect(service)\n  }\n\n  socketParameters(...args) {\n    return this.Transport.prototype.socketParameters(...args)\n  }\n\n  header(...args) {\n    return this.Transport.prototype.header(...args)\n  }\n\n  headerElement(...args) {\n    return this.Transport.prototype.headerElement(...args)\n  }\n\n  footer(...args) {\n    return this.Transport.prototype.footer(...args)\n  }\n\n  footerElement(...args) {\n    return this.Transport.prototype.footerElement(...args)\n  }\n}\n\nClient.prototype.NS = 'jabber:client'\n\nmodule.exports = Client\n"]},"metadata":{},"sourceType":"script"}