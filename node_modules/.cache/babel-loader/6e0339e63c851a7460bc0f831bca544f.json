{"ast":null,"code":"import { parseConferences } from \"../utils/parseUtils\";\nexport let ConferenceRoomParticipantType;\n\n(function (ConferenceRoomParticipantType) {\n  ConferenceRoomParticipantType[\"PARTICIPANT\"] = \"PARTICIPANT\";\n  ConferenceRoomParticipantType[\"PARTICIPANT_EXTERNAL\"] = \"PARTICIPANT_EXTERNAL\";\n  ConferenceRoomParticipantType[\"MODERATOR\"] = \"MODERATOR\";\n})(ConferenceRoomParticipantType || (ConferenceRoomParticipantType = {}));\n\nexport default class ConferencesBusiness {\n  constructor(api, settings) {\n    this.api = api;\n    this.settings = settings;\n\n    this.list = cb => {\n      this.api.listConferenceRooms({}, conferences => {\n        this.settings.get(settings => {\n          cb(parseConferences(conferences.conferenceRooms, settings));\n        });\n      });\n    };\n\n    this.create = (conference, cb) => {\n      this.api.createConference(conference, cb);\n    };\n\n    this.addParticipants = (conferenceId, participants, cb) => {\n      this.api.addConferenceParticipant(conferenceId, participants, cb);\n    };\n\n    this.update = (conferenceId, body, cb) => {\n      this.api.updateConference(conferenceId, body, cb);\n    };\n\n    this.remove = (conferenceId, cb) => {\n      this.api.removeConference(conferenceId, cb);\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Conferences.ts"],"names":["parseConferences","ConferenceRoomParticipantType","ConferencesBusiness","constructor","api","settings","list","cb","listConferenceRooms","conferences","get","conferenceRooms","create","conference","createConference","addParticipants","conferenceId","participants","addConferenceParticipant","update","body","updateConference","remove","removeConference"],"mappings":"AAUA,SAASA,gBAAT,QAAiC,qBAAjC;AAMA,WAAYC,6BAAZ;;WAAYA,6B;AAAAA,EAAAA,6B;AAAAA,EAAAA,6B;AAAAA,EAAAA,6B;GAAAA,6B,KAAAA,6B;;AAMZ,eAAe,MAAMC,mBAAN,CAA0B;AACvCC,EAAAA,WAAW,CAASC,GAAT,EAA2BC,QAA3B,EAAuD;AAAA,SAA9CD,GAA8C,GAA9CA,GAA8C;AAAA,SAA5BC,QAA4B,GAA5BA,QAA4B;;AAAA,SAClEC,IADkE,GAC1DC,EAAD,IAA6B;AAClC,WAAKH,GAAL,CAASI,mBAAT,CAA6B,EAA7B,EAAkCC,WAAD,IAAiB;AAChD,aAAKJ,QAAL,CAAcK,GAAd,CAAmBL,QAAD,IAAc;AAC9BE,UAAAA,EAAE,CAACP,gBAAgB,CAACS,WAAW,CAACE,eAAb,EAA8BN,QAA9B,CAAjB,CAAF;AACD,SAFD;AAGD,OAJD;AAKD,KAPiE;;AAAA,SAQlEO,MARkE,GAQzD,CACPC,UADO,EAEPN,EAFO,KAGJ;AACH,WAAKH,GAAL,CAASU,gBAAT,CAA0BD,UAA1B,EAAsCN,EAAtC;AACD,KAbiE;;AAAA,SAclEQ,eAdkE,GAchD,CAChBC,YADgB,EAEhBC,YAFgB,EAGhBV,EAHgB,KAIb;AACH,WAAKH,GAAL,CAASc,wBAAT,CAAkCF,YAAlC,EAAgDC,YAAhD,EAA8DV,EAA9D;AACD,KApBiE;;AAAA,SAqBlEY,MArBkE,GAqBzD,CAACH,YAAD,EAAuBI,IAAvB,EAAsDb,EAAtD,KAAuF;AAC9F,WAAKH,GAAL,CAASiB,gBAAT,CAA0BL,YAA1B,EAAwCI,IAAxC,EAA8Cb,EAA9C;AACD,KAvBiE;;AAAA,SAwBlEe,MAxBkE,GAwBzD,CAACN,YAAD,EAAuBT,EAAvB,KAAwD;AAC/D,WAAKH,GAAL,CAASmB,gBAAT,CAA0BP,YAA1B,EAAwCT,EAAxC;AACD,KA1BiE;AAAE;;AAD7B","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport {\r\n  AddConferenceParticipantCallback,\r\n  ConferenceRoomParticipant,\r\n  CreateConferenceCallback,\r\n  CreateConferenceRequest,\r\n  RemoveConferenceCallback,\r\n  UpdateConferenceCallback,\r\n} from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport { IConference } from \"../../alias/IConference\";\r\nimport { parseConferences } from \"../utils/parseUtils\";\r\nimport SettingsBusiness from \"./Settings\";\r\n\r\ninterface ConferencesCallback {\r\n  (contacts: IConference[]): void;\r\n}\r\nexport enum ConferenceRoomParticipantType {\r\n  PARTICIPANT = \"PARTICIPANT\",\r\n  PARTICIPANT_EXTERNAL = \"PARTICIPANT_EXTERNAL\",\r\n  MODERATOR = \"MODERATOR\",\r\n}\r\nexport default interface ConferencesBusiness {}\r\nexport default class ConferencesBusiness {\r\n  constructor(private api: API, private settings: SettingsBusiness) {}\r\n  list = (cb: ConferencesCallback) => {\r\n    this.api.listConferenceRooms({}, (conferences) => {\r\n      this.settings.get((settings) => {\r\n        cb(parseConferences(conferences.conferenceRooms, settings));\r\n      });\r\n    });\r\n  };\r\n  create = (\r\n    conference: CreateConferenceRequest,\r\n    cb: CreateConferenceCallback\r\n  ) => {\r\n    this.api.createConference(conference, cb);\r\n  };\r\n  addParticipants = (\r\n    conferenceId: string,\r\n    participants: ConferenceRoomParticipant[],\r\n    cb: AddConferenceParticipantCallback\r\n  ) => {\r\n    this.api.addConferenceParticipant(conferenceId, participants, cb);\r\n  };\r\n  update = (conferenceId: string, body: CreateConferenceRequest, cb: UpdateConferenceCallback) => {\r\n    this.api.updateConference(conferenceId, body, cb);\r\n  }\r\n  remove = (conferenceId: string, cb: RemoveConferenceCallback) => {\r\n    this.api.removeConference(conferenceId, cb);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}