{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\contexts\\\\ContactContext.tsx\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport { useChat } from \"./ChatContext\"; //alias\n\nimport ChatType from \"../enuns/ChatType\";\nexport const ContactContext = createContext({});\nexport const ContactProvider = ({\n  children\n}) => {\n  const [contacts, setContacts] = useState([]);\n  const [contactsOutsideUserContacts, setContactsOutsideUserContacts] = useState([]);\n  const [checkedContacts, setCheckedContacts] = useState([]);\n  const [toggleAddingContacts, setToggleAddingContacts] = useState(false);\n  const {\n    chats,\n    setChats,\n    setActiveChat,\n    setShowChat\n  } = useChat();\n  const [newFavorite, setNewFavorite] = useState();\n  const [contactsSearch, setContactsSearch] = useState(\"\");\n  const [contactsSearched, setContactsSearched] = useState();\n\n  const openContact = obj => {\n    let find = false;\n    setChats(chats.map(item => {\n      if (item.jid === obj.jid) {\n        item.unRead = 0;\n        item.messageLoaded = true;\n        setActiveChat(item);\n        find = true;\n      }\n\n      return item;\n    }));\n\n    if (!find) {\n      let newChat = {\n        id: obj.id,\n        jid: obj.jid,\n        name: obj.name,\n        email: obj.email,\n        department: obj.department,\n        profilePicture: obj.profilePicture,\n        status: obj.status,\n        messageLoaded: true,\n        unRead: 1,\n        chatType: ChatType.USER,\n        inputMessage: \"\",\n        isTyping: false,\n        messages: [],\n        favorite: obj.favorite,\n        added: obj.added\n      };\n      setShowChat(true);\n      setActiveChat(newChat);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ContactContext.Provider, {\n    value: {\n      openContact,\n      contacts,\n      setContacts,\n      newFavorite,\n      setNewFavorite,\n      contactsSearch,\n      setContactsSearch,\n      contactsSearched,\n      setContactsSearched,\n      contactsOutsideUserContacts,\n      setContactsOutsideUserContacts,\n      toggleAddingContacts,\n      setToggleAddingContacts,\n      checkedContacts,\n      setCheckedContacts\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport function useContact() {\n  return useContext(ContactContext);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/contexts/ContactContext.tsx"],"names":["React","createContext","useContext","useState","useChat","ChatType","ContactContext","ContactProvider","children","contacts","setContacts","contactsOutsideUserContacts","setContactsOutsideUserContacts","checkedContacts","setCheckedContacts","toggleAddingContacts","setToggleAddingContacts","chats","setChats","setActiveChat","setShowChat","newFavorite","setNewFavorite","contactsSearch","setContactsSearch","contactsSearched","setContactsSearched","openContact","obj","find","map","item","jid","unRead","messageLoaded","newChat","id","name","email","department","profilePicture","status","chatType","USER","inputMessage","isTyping","messages","favorite","added","useContact"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport { useChat } from \"./ChatContext\";\r\n\r\n//alias\r\nimport IChat from \"../alias/IChat\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport IContact from \"./../alias/IContact\";\r\nimport ChatType from \"../enuns/ChatType\";\r\n\r\ninterface IContactContextData {\r\n  openContact(value: IContact): void;\r\n  contacts: IContact[];\r\n  setContacts(value: IContact[]): void;\r\n  newFavorite: IChat | IGroup | IContact | undefined;\r\n  setNewFavorite(favorited: IChat | IGroup | IContact | undefined): void;\r\n  contactsSearch: string;\r\n  setContactsSearch(value: string): void;\r\n  contactsSearched: IContact[] | undefined;\r\n  setContactsSearched(val: IContact[] | undefined): void;\r\n  contactsOutsideUserContacts: IContact[];\r\n  setContactsOutsideUserContacts(value: IContact[]): void;\r\n  toggleAddingContacts: boolean;\r\n  setToggleAddingContacts(value: boolean): void;\r\n  checkedContacts: IContact[];\r\n  setCheckedContacts(value: IContact[]): void;\r\n}\r\n\r\nexport const ContactContext = createContext<IContactContextData>(\r\n  {} as IContactContextData\r\n);\r\n\r\nexport const ContactProvider: React.FC = ({ children }) => {\r\n  const [contacts, setContacts] = useState<IContact[]>([]);\r\n  const [contactsOutsideUserContacts, setContactsOutsideUserContacts] = useState<IContact[]>([]);\r\n\r\n  const [checkedContacts, setCheckedContacts] = useState<IContact[]>([]);\r\n  const [toggleAddingContacts, setToggleAddingContacts] = useState(false);\r\n  \r\n  const { chats, setChats, setActiveChat, setShowChat } = useChat();\r\n  const [newFavorite, setNewFavorite] = useState<\r\n    IChat | IGroup | IContact | undefined\r\n  >();\r\n  const [contactsSearch, setContactsSearch] = useState<string>(\"\");\r\n  const [contactsSearched, setContactsSearched] = useState<\r\n    IContact[] | undefined\r\n  >();\r\n\r\n  const openContact = (obj: IContact) => {\r\n    let find = false;\r\n\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.jid === obj.jid) {\r\n          item.unRead = 0;\r\n          item.messageLoaded = true;\r\n          setActiveChat(item);\r\n          find = true;\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n\r\n    if (!find) {\r\n      let newChat: IChat = {\r\n        id: obj.id,\r\n        jid: obj.jid,\r\n        name: obj.name,\r\n        email: obj.email,\r\n        department: obj.department,\r\n        profilePicture: obj.profilePicture,\r\n        status: obj.status,\r\n        messageLoaded: true,\r\n        unRead: 1,\r\n        chatType: ChatType.USER,\r\n        inputMessage: \"\",\r\n        isTyping: false,\r\n        messages: [],\r\n        favorite: obj.favorite,\r\n        added: obj.added,\r\n      };\r\n      setShowChat(true);\r\n      setActiveChat(newChat);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ContactContext.Provider\r\n      value={{\r\n        openContact,\r\n        contacts,\r\n        setContacts,\r\n        newFavorite,\r\n        setNewFavorite,\r\n        contactsSearch,\r\n        setContactsSearch,\r\n        contactsSearched,\r\n        setContactsSearched,\r\n        contactsOutsideUserContacts,\r\n        setContactsOutsideUserContacts,\r\n        toggleAddingContacts,\r\n        setToggleAddingContacts,\r\n        checkedContacts,\r\n        setCheckedContacts\r\n      }}\r\n    >\r\n      {children}\r\n    </ContactContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useContact() {\r\n  return useContext(ContactContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}