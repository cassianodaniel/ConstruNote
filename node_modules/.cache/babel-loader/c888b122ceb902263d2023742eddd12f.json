{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useContact } from \"../contexts/ContactContext\"; // import IContact from \"../alias/IContact\";\n// Comentado para Evitar Warnings no console\n// interface CreateGroupCallback {\n//   (groupCreated: boolean): void;\n// }\n\nlet squadService;\nlet typingTimeout = new Map();\n\nconst SquadCommunicator = ({\n  children\n}) => {\n  var _squadService12;\n\n  const {\n    chats,\n    activeChat,\n    // groups,\n    setActiveChat,\n    setChats\n  } = useChat();\n  const {\n    setGroups,\n    groups\n  } = useGroup();\n  const {\n    setContacts,\n    newFavorite,\n    setNewFavorite,\n    contacts\n  } = useContact();\n  const {\n    user,\n    setUser,\n    changedUserData,\n    setChangedUserData\n  } = useAuth();\n\n  const init = () => {\n    var _squadService;\n\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"b4c1fa651399a3eb63aee51777d3d508\",\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      email: \"romero2@digivox.com.br\",\n      user_name: \"ZZ Romero 2\",\n      expires_in: 2592000,\n      baseUrl: \"https://app.citrussquad.com/api/v1/\"\n    }));\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\n    (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.user.get(user => {\n      setUser(user);\n    });\n  };\n\n  const clearSendFile = (chatId, messageId) => {\n    setChats(chats.map(chat => {\n      if (chat.id === chatId) {\n        chat.messages = chat.messages.map(message => {\n          if (message.id === messageId) {\n            message.deliverStatus = DeliverStatus.QUEUED;\n            message.sendFile = undefined;\n          }\n\n          return message;\n        });\n      }\n\n      return chat;\n    }));\n  };\n\n  const onChatsChange = () => {\n    /* chats.forEach((chat) => {\r\n    //   // checkTyping(chat);\r\n    // });\r\n    } */\n  };\n\n  const onActiveChatChange = () => {\n    checkSendMessage(activeChat);\n    checkAttachedFiles(activeChat); // checkTyping(activeChat)\n  }; // const checkTyping = (chat: IChat) => {\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\n  //     if (oldTimeoutData)\n  //       clearTimeout(oldTimeoutData.timeout)\n  //     else\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\n  //     const timeoutData = {\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\n  //       msgStr: `${chat.inputMessage}`\n  //     }\n  //     typingTimeout.set(chat.jid, timeoutData)\n  //   }\n  // }\n\n\n  const checkAttachedFiles = cht => {\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\n      var _squadService2;\n\n      (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.attachments.list(cht, attachments => {\n        if (attachments.length > 0) setActiveChat({ ...cht,\n          attachedFileList: attachments\n        });else setActiveChat({ ...cht,\n          attachedFileList: null\n        });\n      });\n    }\n  };\n\n  const checkSearchMessages = () => {\n    if (activeChat.messageLoaded) {\n      var _squadService3;\n\n      (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.messages.list(activeChat, messages => {\n        if (messages.length) {\n          setChats(chats.map(cht => {\n            if (cht.id === activeChat.id) {\n              messages.forEach(msg => {\n                if (!activeChat.messages.find(m => m.id === msg.id)) cht.messages.unshift(msg);\n              });\n              cht.messageLoaded = false;\n              setActiveChat(cht);\n            }\n\n            return cht;\n          }));\n        } else {\n          const chat = { ...activeChat,\n            messageLoaded: false\n          };\n          setActiveChat(chat);\n        }\n      });\n    }\n  };\n\n  const checkSendMessage = chat => {\n    chat.messages.forEach(msg => {\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\n        if (msg.sendFile) {\n          var _squadService4, _squadService4$chat;\n\n          const files = [msg.sendFile];\n          clearSendFile(chat.id, msg.id);\n          (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : (_squadService4$chat = _squadService4.chat) === null || _squadService4$chat === void 0 ? void 0 : _squadService4$chat.sendFiles(chat, files, data => {\n            updateMessageFiles(data, chat, msg);\n          });\n        } else {\n          sendMessage(chat, msg.message, msgId => updateMessage(msgId, chat, msg));\n        }\n      }\n    });\n  };\n\n  const updateMessageFiles = (data, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        const booleans = getUrlBooleans(data.url);\n        message.id = data.msgId;\n        message.fileUrl = data.url;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n        message.message = getFileName(data.url);\n        message.isFileMessage = booleans.isFileMessage;\n        message.isImageMessage = booleans.isImageMessage;\n        message.isVideoMessage = booleans.isVideoMessage;\n        message.isAudioMessage = booleans.isAudioMessage;\n      }\n\n      return message;\n    });\n    setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      setChats(chats.map(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n        }\n\n        return cht;\n      }));\n    }\n  };\n\n  const updateMessage = (msgId, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        message.id = msgId;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n\n        if (isUrl(message.message)) {\n          const booleans = getUrlBooleans(message.message);\n          message.isFileMessage = booleans.isFileMessage;\n          message.isImageMessage = booleans.isImageMessage;\n          message.isAudioMessage = booleans.isAudioMessage;\n          message.isVideoMessage = booleans.isVideoMessage;\n          message.fileUrl = message.message;\n        }\n      }\n\n      return message;\n    });\n    setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      setChats(chats.map(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n        }\n\n        return cht;\n      }));\n    }\n  }; // const forwardMessages = (ctcs: IContact[], message: IMessage) => {\n  //   const chatsFinded: IChat[] = [];\n  //   ctcs.forEach((ctc) => {\n  //     const cht = chats.find((cht) => cht.id === ctc.id);\n  //     if (cht) {\n  //       cht.messages.push({\n  //         ...message,\n  //         message: message.fileUrl || message.message,\n  //         deliverStatus: DeliverStatus.SENDING,\n  //       });\n  //       chatsFinded.push(cht);\n  //     }\n  //   });\n  //   const newChats = chats.map(\n  //     (chat) => chatsFinded.find((cht) => cht.id === chat.id) || chat\n  //   );\n  //   const ctcsNotInChat: IContact[] = ctcs.filter(\n  //     (ctc) => !chatsFinded.find((cht) => ctc.id === cht.id)\n  //   );\n  //   ctcsNotInChat.forEach((ctc) => {\n  //     newChats.push({\n  //       id: ctc.id,\n  //       jid: ctc.jid,\n  //       name: ctc.name,\n  //       profilePicture: ctc.profilePicture,\n  //       status: ctc.status,\n  //       unRead: 0,\n  //       chatType: ChatType.USER,\n  //       inputMessage: \"\",\n  //       messageLoaded: false,\n  //       isTyping: false,\n  //       messages: [{ ...message, deliverStatus: DeliverStatus.SENDING }],\n  //       email: ctc.email,\n  //     });\n  //   });\n  //   setChats(newChats);\n  // };\n\n\n  useEffect(onChatsChange, [chats]);\n  useEffect(onNewFavorite, [newFavorite]);\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\n  useEffect(onActiveChatChange, [activeChat]);\n  useEffect(onUserDataChange, [changedUserData]);\n\n  function onUserDataChange() {\n    if (changedUserData) {\n      var _squadService5;\n\n      (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.user.changeUserData(changedUserData, chgd => {\n        if (chgd) {\n          setUser({ ...user,\n            email: changedUserData.email,\n            name: changedUserData.name\n          });\n        }\n      });\n    }\n  }\n\n  function onNewFavorite() {\n    if (newFavorite) {\n      var _squadService6;\n\n      const newFavoriteLoad = { ...newFavorite\n      };\n      (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : _squadService6.contacts.setFavorite(newFavorite, favorite => {\n        if (favorite) {\n          setChats(chats.map(cht => {\n            if (cht.jid === newFavoriteLoad.jid) {\n              cht.favorite = !newFavoriteLoad.favorite;\n            }\n\n            return cht;\n          }));\n          setGroups(groups.map(grp => {\n            if (grp.jid === newFavoriteLoad.jid) {\n              return { ...grp,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return grp;\n          }));\n          setContacts(contacts.map(ctt => {\n            if (ctt.jid === newFavoriteLoad.jid) {\n              return { ...ctt,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return ctt;\n          }));\n        }\n      });\n      setNewFavorite(undefined);\n    }\n  }\n\n  function chatCommunicatorSubscribe(event, data) {\n    var _squadService7;\n\n    switch (event) {\n      case Events.ONLINE:\n        (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : _squadService7.chats.list(receivedChats => {\n          var _squadService8, _squadService10;\n\n          const chats = [];\n          receivedChats.forEach(cht => {\n            if (!chats.find(chat => chat.id === cht.id)) {\n              chats.push(cht);\n            }\n          });\n          setChats(chats); //populating groups\n\n          (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : _squadService8.groups.list(groups => {\n            var _squadService9, _squadService9$chat;\n\n            setGroups(groups); //Joining Groups Rooms in XMPP\n\n            (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : (_squadService9$chat = _squadService9.chat) === null || _squadService9$chat === void 0 ? void 0 : _squadService9$chat.joinGroups(groups.map(group => group.jid));\n          }); //populating contacts\n\n          (_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : _squadService10.contacts.list(contacts => setContacts(contacts)); //populating chat's with messages\n          // receivedChats.forEach((chat) => {\n          //   squadService?.messages.list(chat, (messages) => {\n          //     const chatWithMessages = { ...chat };\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\n          //       messages\n          //     );\n          //     setChats([\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\n          //       chatWithMessages,\n          //     ]);\n          //   });\n          // });\n        });\n        break;\n\n      case Events.MESSAGE:\n        if (data.fromUser === user.jid) break;\n        let find = false;\n        let newChats = chats.map(chat => {\n          if (data.fromUser === chat.jid) {\n            find = true;\n            if (!chat.messages.filter(msg => msg.id === data.id)[0]) chat.messages.push(data);\n\n            if (chat.id === activeChat.id) {\n              let chatTemporary = { ...chat\n              };\n              setActiveChat(chatTemporary);\n            } else {\n              chat.unRead++;\n            }\n          }\n\n          return chat;\n        });\n\n        if (!find) {\n          var _squadService11;\n\n          let newChat = {};\n          (_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : _squadService11.contacts.list(listContacts => {\n            listContacts.forEach(c => {\n              if (c.jid === data.fromUser) {\n                newChat = {\n                  id: c.id,\n                  jid: c.jid,\n                  name: c.name,\n                  profilePicture: c.profilePicture,\n                  status: c.status,\n                  unRead: 1,\n                  chatType: ChatType.USER,\n                  inputMessage: \"\",\n                  isTyping: false,\n                  messages: [],\n                  favorite: c.favorite\n                };\n                newChat.messages.push(data);\n                newChats.unshift(newChat);\n                setChats(newChats);\n              }\n            });\n          });\n        } else {\n          setChats(newChats);\n        }\n\n        break;\n\n      case Events.RECEIVED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.deliverStatus = DeliverStatus.DELIVERED;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.DISPLAYED:\n        setChats(chats.map(chat => {\n          chat.messages = chat.messages.map(message => {\n            if (message.id === data.id) {\n              message.readStatus = ReadStatus.READ;\n            }\n\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.COMPOSING:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = true;\n            if (activeChat.jid === data) setActiveChat(chat);\n            deleteTypingTimeout(chat.jid);\n            setTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.ACTIVE:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = false;\n\n            if (activeChat.jid === data) {\n              let chatUpdate = { ...chat\n              };\n              setActiveChat(chatUpdate);\n            }\n\n            deleteTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.PRESENCE:\n        setChats(chats.map(cht => {\n          if (cht.jid === data.from.split(\"/\")[0] && !cht.jid.includes(\"@conference.\")) {\n            cht.status = data.status;\n          }\n\n          return cht;\n        }));\n        setContacts(contacts.map(ctc => {\n          if (ctc.jid === data.from.split(\"/\")[0] && !ctc.jid.includes(\"@conference.\")) {\n            ctc.status = data.status;\n          }\n\n          return ctc;\n        }));\n        break;\n    }\n  }\n\n  const deleteTypingTimeout = jid => {\n    var _typingTimeout$get;\n\n    clearTimeout(((_typingTimeout$get = typingTimeout.get(jid)) === null || _typingTimeout$get === void 0 ? void 0 : _typingTimeout$get.timeout) || setTimeout(() => {}, 1));\n    typingTimeout.delete(jid);\n  };\n\n  const setTypingTimeout = jid => {\n    const timeoutData = {\n      msgStr: \"\",\n      timeout: setTimeout(() => {\n        setChats(chats.map(cht => {\n          if (cht.jid === jid) {\n            cht.isTyping = false;\n            if (activeChat.jid === jid) setActiveChat(cht);\n          }\n\n          return cht;\n        }));\n      }, 20000)\n    };\n    typingTimeout.set(jid, timeoutData);\n  };\n\n  (_squadService12 = squadService) === null || _squadService12 === void 0 ? void 0 : _squadService12.updateSubscribeFunction(chatCommunicatorSubscribe); // Comentado para evitar warnings no console enquanto não é usado\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\n  //     squadService?.groups.list((groups) => {\n  //       setGroups(groups);\n  //       callback(true);\n  //     });\n  //   });\n  // }\n\n  function sendMessage(chat, message, callback) {\n    var _squadService13, _squadService13$chat;\n\n    (_squadService13 = squadService) === null || _squadService13 === void 0 ? void 0 : (_squadService13$chat = _squadService13.chat) === null || _squadService13$chat === void 0 ? void 0 : _squadService13$chat.chat.sendMessage(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message, callback);\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","DeliverStatus","XMPPChatType","getFileName","getUrlBooleans","isUrl","ReadStatus","useGroup","useContact","squadService","typingTimeout","Map","children","chats","activeChat","setActiveChat","setChats","setGroups","groups","setContacts","newFavorite","setNewFavorite","contacts","user","setUser","changedUserData","setChangedUserData","init","localStorage","setItem","JSON","stringify","access_token","user_id","email","user_name","expires_in","baseUrl","getInstance","chatCommunicatorSubscribe","get","clearSendFile","chatId","messageId","map","chat","id","messages","message","deliverStatus","QUEUED","sendFile","undefined","onChatsChange","onActiveChatChange","checkSendMessage","checkAttachedFiles","cht","attachedFileList","attachments","list","length","checkSearchMessages","messageLoaded","forEach","msg","find","m","unshift","SENDING","files","sendFiles","data","updateMessageFiles","sendMessage","msgId","updateMessage","newChat","booleans","url","fileUrl","time","Date","toISOString","isFileMessage","isImageMessage","isVideoMessage","isAudioMessage","filter","newChats","onNewFavorite","onUserDataChange","changeUserData","chgd","name","newFavoriteLoad","setFavorite","favorite","jid","grp","ctt","event","ONLINE","receivedChats","push","joinGroups","group","MESSAGE","fromUser","chatTemporary","unRead","listContacts","c","profilePicture","status","chatType","USER","inputMessage","isTyping","RECEIVED","DELIVERED","DISPLAYED","readStatus","READ","COMPOSING","deleteTypingTimeout","setTypingTimeout","ACTIVE","chatUpdate","PRESENCE","from","split","includes","ctc","clearTimeout","timeout","setTimeout","delete","timeoutData","msgStr","set","updateSubscribeFunction","callback","GROUPCHAT","CHAT"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\n\r\nimport { Events, SendImageCallbackReturn } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\r\nimport { SendMessageCallback } from \"./types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport FavoriteUsers from \"../components/FavoriteUsers\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\n// import IContact from \"../alias/IContact\";\r\n// Comentado para Evitar Warnings no console\r\n// interface CreateGroupCallback {\r\n//   (groupCreated: boolean): void;\r\n// }\r\ninterface TypingTimeoutData {\r\n  timeout: NodeJS.Timeout;\r\n  msgStr: string;\r\n}\r\nlet squadService: SquadService | undefined;\r\nlet typingTimeout: Map<string, TypingTimeoutData> = new Map<\r\n  string,\r\n  TypingTimeoutData\r\n>();\r\n\r\nconst SquadCommunicator: React.FC = ({ children }) => {\r\n  const {\r\n    chats,\r\n    activeChat,\r\n    // groups,\r\n    setActiveChat,\r\n    setChats\r\n  } = useChat();\r\n  const { setGroups, groups } = useGroup();\r\n  const { setContacts, newFavorite, setNewFavorite, contacts} = useContact();\r\n  const { user, setUser, changedUserData, setChangedUserData } = useAuth();\r\n\r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"b4c1fa651399a3eb63aee51777d3d508\",\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        email: \"romero2@digivox.com.br\",\r\n        user_name: \"ZZ Romero 2\",\r\n        expires_in: 2592000,\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n      })\r\n    );\r\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\r\n    squadService?.user.get((user: IUser) => {\r\n      setUser(user);\r\n    });\r\n  };\r\n\r\n  const clearSendFile = (chatId: string, messageId: string) => {\r\n    setChats(\r\n      chats.map((chat) => {\r\n        if (chat.id === chatId) {\r\n          chat.messages = chat.messages.map((message) => {\r\n            if (message.id === messageId) {\r\n              message.deliverStatus = DeliverStatus.QUEUED;\r\n              message.sendFile = undefined;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return chat;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onChatsChange = () => {\r\n    /* chats.forEach((chat) => {\r\n    //   // checkTyping(chat);\r\n    // });\r\n    } */\r\n  };\r\n  const onActiveChatChange = () => {\r\n    checkSendMessage(activeChat);\r\n    checkAttachedFiles(activeChat);\r\n    // checkTyping(activeChat)\r\n  };\r\n  // const checkTyping = (chat: IChat) => {\r\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\r\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\r\n  //     if (oldTimeoutData)\r\n  //       clearTimeout(oldTimeoutData.timeout)\r\n  //     else\r\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\r\n  //     const timeoutData = {\r\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\r\n  //       msgStr: `${chat.inputMessage}`\r\n  //     }\r\n  //     typingTimeout.set(chat.jid, timeoutData)\r\n  //   }\r\n  // }\r\n  const checkAttachedFiles = (cht: IChat) => {\r\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\r\n      squadService?.attachments.list(cht, (attachments) => {\r\n        if (attachments.length > 0)\r\n          setActiveChat({ ...cht, attachedFileList: attachments });\r\n        else setActiveChat({ ...cht, attachedFileList: null });\r\n      });\r\n    }\r\n  };\r\n  const checkSearchMessages = () => {\r\n    if (activeChat.messageLoaded) {\r\n      squadService?.messages.list(activeChat, (messages) => {\r\n        if (messages.length) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.id === activeChat.id) {\r\n                messages.forEach((msg) => {\r\n                  if (!activeChat.messages.find((m) => m.id === msg.id))\r\n                    cht.messages.unshift(msg);\r\n                });\r\n                cht.messageLoaded = false;\r\n                setActiveChat(cht);\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n        } else {\r\n          const chat = { ...activeChat, messageLoaded: false };\r\n          setActiveChat(chat);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkSendMessage = (chat: IChat) => {\r\n    chat.messages.forEach((msg) => {\r\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\r\n        if (msg.sendFile) {\r\n          const files = [msg.sendFile];\r\n          clearSendFile(chat.id, msg.id);\r\n          squadService?.chat?.sendFiles(\r\n            chat,\r\n            files,\r\n            (data: SendImageCallbackReturn) => {\r\n              updateMessageFiles(data, chat, msg);\r\n            }\r\n          );\r\n        } else {\r\n          sendMessage(chat, msg.message, (msgId) =>\r\n            updateMessage(msgId, chat, msg)\r\n          );\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const updateMessageFiles = (\r\n    data: SendImageCallbackReturn,\r\n    chat: IChat,\r\n    msg: IMessage\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        const booleans = getUrlBooleans(data.url);\r\n        message.id = data.msgId;\r\n        message.fileUrl = data.url;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        message.message = getFileName(data.url);\r\n        message.isFileMessage = booleans.isFileMessage;\r\n        message.isImageMessage = booleans.isImageMessage;\r\n        message.isVideoMessage = booleans.isVideoMessage;\r\n        message.isAudioMessage = booleans.isAudioMessage;\r\n      }\r\n      return message;\r\n    });\r\n    setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      setChats(\r\n        chats.map((cht) => {\r\n          if (cht.id === chat.id) {\r\n            cht.messages = newChat.messages;\r\n          }\r\n          return cht;\r\n        })\r\n      );\r\n    }\r\n  };\r\n  const updateMessage = (msgId: string, chat: IChat, msg: IMessage) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        message.id = msgId;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        if (isUrl(message.message)) {\r\n          const booleans = getUrlBooleans(message.message);\r\n          message.isFileMessage = booleans.isFileMessage;\r\n          message.isImageMessage = booleans.isImageMessage;\r\n          message.isAudioMessage = booleans.isAudioMessage;\r\n          message.isVideoMessage = booleans.isVideoMessage;\r\n          message.fileUrl = message.message;\r\n        }\r\n      }\r\n      return message;\r\n    });\r\n    setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      setChats(\r\n        chats.map((cht) => {\r\n          if (cht.id === chat.id) {\r\n            cht.messages = newChat.messages;\r\n          }\r\n          return cht;\r\n        })\r\n      );\r\n    }\r\n  };\r\n  // const forwardMessages = (ctcs: IContact[], message: IMessage) => {\r\n  //   const chatsFinded: IChat[] = [];\r\n  //   ctcs.forEach((ctc) => {\r\n  //     const cht = chats.find((cht) => cht.id === ctc.id);\r\n  //     if (cht) {\r\n  //       cht.messages.push({\r\n  //         ...message,\r\n  //         message: message.fileUrl || message.message,\r\n  //         deliverStatus: DeliverStatus.SENDING,\r\n  //       });\r\n  //       chatsFinded.push(cht);\r\n  //     }\r\n  //   });\r\n  //   const newChats = chats.map(\r\n  //     (chat) => chatsFinded.find((cht) => cht.id === chat.id) || chat\r\n  //   );\r\n  //   const ctcsNotInChat: IContact[] = ctcs.filter(\r\n  //     (ctc) => !chatsFinded.find((cht) => ctc.id === cht.id)\r\n  //   );\r\n  //   ctcsNotInChat.forEach((ctc) => {\r\n  //     newChats.push({\r\n  //       id: ctc.id,\r\n  //       jid: ctc.jid,\r\n  //       name: ctc.name,\r\n  //       profilePicture: ctc.profilePicture,\r\n  //       status: ctc.status,\r\n  //       unRead: 0,\r\n  //       chatType: ChatType.USER,\r\n  //       inputMessage: \"\",\r\n  //       messageLoaded: false,\r\n  //       isTyping: false,\r\n  //       messages: [{ ...message, deliverStatus: DeliverStatus.SENDING }],\r\n  //       email: ctc.email,\r\n  //     });\r\n  //   });\r\n  //   setChats(newChats);\r\n  // };\r\n  useEffect(onChatsChange, [chats]);\r\n  useEffect(onNewFavorite, [newFavorite]);\r\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\r\n  useEffect(onActiveChatChange, [activeChat]);\r\n  useEffect(onUserDataChange, [changedUserData]);\r\n\r\n  function onUserDataChange(){\r\n    if(changedUserData){\r\n      squadService?.user.changeUserData(changedUserData, (chgd) => {\r\n        if(chgd){\r\n          setUser({...user, email: changedUserData.email, name: changedUserData.name});\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function onNewFavorite(){\r\n    if(newFavorite){\r\n      const newFavoriteLoad = {...newFavorite}\r\n      squadService?.contacts.setFavorite(newFavorite, (favorite) => {\r\n        if(favorite){\r\n          setChats(chats.map((cht) => {\r\n            if(cht.jid === newFavoriteLoad.jid){\r\n              cht.favorite = !newFavoriteLoad.favorite;\r\n            }\r\n            return cht;\r\n          }));\r\n          setGroups(groups.map((grp) => {\r\n            if(grp.jid === newFavoriteLoad.jid){\r\n              return({\r\n                ...grp, favorite: !newFavoriteLoad.favorite\r\n              })\r\n            }\r\n            return grp;\r\n          }));\r\n          setContacts(contacts.map((ctt) => {\r\n            if(ctt.jid === newFavoriteLoad.jid){\r\n              return({\r\n                ...ctt, favorite: !newFavoriteLoad.favorite\r\n              })\r\n            }\r\n            return ctt;\r\n          }));\r\n        }\r\n      });\r\n      setNewFavorite(undefined);\r\n    }\r\n  }\r\n\r\n  function chatCommunicatorSubscribe(event: string, data: any) {\r\n    switch (event) {\r\n      case Events.ONLINE:\r\n        squadService?.chats.list((receivedChats) => {\r\n          const chats: IChat[] = [];\r\n          receivedChats.forEach((cht) => {\r\n            if (!chats.find((chat) => chat.id === cht.id)) {\r\n              chats.push(cht);\r\n            }\r\n          });\r\n          setChats(chats);\r\n          //populating groups\r\n          squadService?.groups.list((groups) => {\r\n            setGroups(groups);\r\n            //Joining Groups Rooms in XMPP\r\n            squadService?.chat?.joinGroups(groups.map((group) => group.jid));\r\n          });\r\n          //populating contacts\r\n          squadService?.contacts.list((contacts) => setContacts(contacts));\r\n          //populating chat's with messages\r\n\r\n          // receivedChats.forEach((chat) => {\r\n          //   squadService?.messages.list(chat, (messages) => {\r\n          //     const chatWithMessages = { ...chat };\r\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\r\n          //       messages\r\n          //     );\r\n          //     setChats([\r\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n          //       chatWithMessages,\r\n          //     ]);\r\n          //   });\r\n          // });\r\n        });\r\n        break;\r\n      case Events.MESSAGE:\r\n        if (data.fromUser === user.jid) break;\r\n        let find = false;\r\n\r\n        let newChats = chats.map((chat) => {\r\n          if (data.fromUser === chat.jid) {\r\n            find = true;\r\n            if (!chat.messages.filter((msg) => msg.id === data.id)[0])\r\n              chat.messages.push(data);\r\n            if (chat.id === activeChat.id) {\r\n              let chatTemporary = { ...chat };\r\n              setActiveChat(chatTemporary);\r\n            } else {\r\n              chat.unRead++;\r\n            }\r\n          }\r\n          return chat;\r\n        });\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.contacts.list((listContacts) => {\r\n            listContacts.forEach((c) => {\r\n              if (c.jid === data.fromUser) {\r\n                newChat = {\r\n                  id: c.id,\r\n                  jid: c.jid,\r\n                  name: c.name,\r\n                  profilePicture: c.profilePicture,\r\n                  status: c.status,\r\n                  unRead: 1,\r\n                  chatType: ChatType.USER,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  messages: [],\r\n                  favorite: c.favorite,\r\n                };\r\n                newChat.messages.push(data);\r\n                newChats.unshift(newChat);\r\n                setChats(newChats);\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          setChats(newChats);\r\n        }\r\n\r\n        break;\r\n      case Events.RECEIVED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.messages.find((msg) => msg.id === data.id))\r\n              chat.messages = chat.messages.map((message) => {\r\n                message.deliverStatus = DeliverStatus.DELIVERED;\r\n                return message;\r\n              });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.DISPLAYED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            chat.messages = chat.messages.map((message) => {\r\n              if (message.id === data.id) {\r\n                message.readStatus = ReadStatus.READ;\r\n              }\r\n              return message;\r\n            });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.COMPOSING:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = true;\r\n              if (activeChat.jid === data) setActiveChat(chat);\r\n              deleteTypingTimeout(chat.jid);\r\n              setTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.ACTIVE:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = false;\r\n              if (activeChat.jid === data) {\r\n                let chatUpdate = { ...chat };\r\n                setActiveChat(chatUpdate);\r\n              }\r\n              deleteTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.PRESENCE:\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (\r\n              cht.jid === data.from.split(\"/\")[0] &&\r\n              !cht.jid.includes(\"@conference.\")\r\n            ) {\r\n              cht.status = data.status;\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n        setContacts(\r\n          contacts.map((ctc) => {\r\n            if (\r\n              ctc.jid === data.from.split(\"/\")[0] &&\r\n              !ctc.jid.includes(\"@conference.\")\r\n            ) {\r\n              ctc.status = data.status;\r\n            }\r\n            return ctc;\r\n          })\r\n        );\r\n        break;\r\n    }\r\n  }\r\n  const deleteTypingTimeout = (jid: string) => {\r\n    clearTimeout(typingTimeout.get(jid)?.timeout || setTimeout(() => {}, 1));\r\n    typingTimeout.delete(jid);\r\n  };\r\n  const setTypingTimeout = (jid: string) => {\r\n    const timeoutData: TypingTimeoutData = {\r\n      msgStr: \"\",\r\n      timeout: setTimeout(() => {\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.jid === jid) {\r\n              cht.isTyping = false;\r\n              if (activeChat.jid === jid) setActiveChat(cht);\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n      }, 20000),\r\n    };\r\n    typingTimeout.set(jid, timeoutData);\r\n  };\r\n\r\n  squadService?.updateSubscribeFunction(chatCommunicatorSubscribe);\r\n  // Comentado para evitar warnings no console enquanto não é usado\r\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\r\n  //     squadService?.groups.list((groups) => {\r\n  //       setGroups(groups);\r\n  //       callback(true);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  function sendMessage(\r\n    chat: IChat,\r\n    message: string,\r\n    callback: SendMessageCallback\r\n  ) {\r\n    squadService?.chat?.chat.sendMessage(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message,\r\n      callback\r\n    );\r\n  }\r\n\r\n  useEffect(init, []);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}