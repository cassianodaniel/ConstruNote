{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ModalSelectUsers.tsx\";\nimport React, { useState } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input, Collapse, CardHeader, CardBody, Alert, Card } from \"reactstrap\"; //simple bar\n\nimport SimpleBar from \"simplebar-react\"; //components\n\nimport SelectContact from \"./SelectContact\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ModalSelectUsers = ({\n  show,\n  toggle\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const [isOpenCollapse, setIsOpenCollapse] = useState(false);\n  const [isOpenAlert, setIsOpenAlert] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [groupName, setGroupName] = useState(\"\");\n  const [groupDescription, setGroupDescription] = useState(\"\");\n  const [selectedContact, setSelectedContact] = useState([]);\n\n  const handleCreateGroup = () => {\n    /*\r\n    createGroup(\r\n      {\r\n        contacts: selectedContact,\r\n        description: groupDescription,\r\n        name: groupName,\r\n      },\r\n      (groupCreated) => {\r\n        console.log(groupCreated);\r\n      }\r\n      \r\n    );*/\n    console.log(\"revisar essa linha\");\n    setIsOpenAlert(true);\n    setMessage(\"testando...\");\n    setTimeout(() => {\n      setIsOpenAlert(false);\n      setMessage(\"\");\n    }, 2000);\n  };\n\n  const toggleCollapse = () => {\n    setIsOpenCollapse(!isOpenCollapse);\n  };\n\n  const handleCheckContact = (selected, contact) => {\n    if (selected) {\n      let selected = selectedContact;\n      selected.push(contact);\n      setSelectedContact(selected);\n    } else {\n      setSelectedContact(selectedContact.filter(sel => {\n        if (sel.id === contact.id) {\n          return false;\n        }\n\n        return true;\n      }));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: show,\n    centered: true,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    tag: \"h5\",\n    className: \"modal-title font-size-16\",\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, t(\"Create New Group\")), /*#__PURE__*/React.createElement(ModalBody, {\n    className: \"p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"addgroupname-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, t(\"Group Name\")), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"addgroupname-input\",\n    value: groupName,\n    onChange: e => setGroupName(e.target.value),\n    placeholder: \"Enter Group Name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, t(\"Group Members\")), /*#__PURE__*/React.createElement(Alert, {\n    isOpen: isOpenAlert,\n    color: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, message), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"light\",\n    size: \"sm\",\n    type: \"button\",\n    onClick: toggleCollapse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }, t(\"Select Members\"))), /*#__PURE__*/React.createElement(Collapse, {\n    isOpen: isOpenCollapse,\n    id: \"groupmembercollapse\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"font-size-15 mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 19\n    }\n  }, t(\"Contacts\"))), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"p-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SimpleBar, {\n    style: {\n      maxHeight: \"150px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"addContacts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(SelectContact, {\n    handleCheckContact: handleCheckContact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 23\n    }\n  }))))))), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"addgroupdescription-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, \"Description\"), /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"form-control\",\n    id: \"addgroupdescription-input\",\n    value: groupDescription,\n    onChange: e => setGroupDescription(e.target.value),\n    rows: 3,\n    placeholder: \"Enter Description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"link\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, t(\"Close\")), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"primary\",\n    onClick: handleCreateGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, \"Create Group\")));\n};\n\nexport default ModalSelectUsers;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ModalSelectUsers.tsx"],"names":["React","useState","Button","Modal","ModalHeader","ModalBody","ModalFooter","Form","FormGroup","Label","Input","Collapse","CardHeader","CardBody","Alert","Card","SimpleBar","SelectContact","useTranslation","ModalSelectUsers","show","toggle","t","isOpenCollapse","setIsOpenCollapse","isOpenAlert","setIsOpenAlert","message","setMessage","groupName","setGroupName","groupDescription","setGroupDescription","selectedContact","setSelectedContact","handleCreateGroup","console","log","setTimeout","toggleCollapse","handleCheckContact","selected","contact","push","filter","sel","id","e","target","value","maxHeight"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Collapse,\r\n  CardHeader,\r\n  CardBody,\r\n  Alert,\r\n  Card,\r\n} from \"reactstrap\";\r\n\r\n//simple bar\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\n//components\r\nimport SelectContact from \"./SelectContact\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\nimport IContact from \"../alias/IContact\";\r\n\r\ninterface IProps {\r\n  show: boolean;\r\n  toggle(): void;\r\n}\r\n\r\nconst ModalSelectUsers: React.FC<IProps> = ({ show, toggle }) => {\r\n  const { t } = useTranslation();\r\n\r\n  const [isOpenCollapse, setIsOpenCollapse] = useState(false);\r\n  const [isOpenAlert, setIsOpenAlert] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [groupDescription, setGroupDescription] = useState(\"\");\r\n  const [selectedContact, setSelectedContact] = useState<IContact[]>([]);\r\n\r\n  const handleCreateGroup = () => {\r\n    /*\r\n    createGroup(\r\n      {\r\n        contacts: selectedContact,\r\n        description: groupDescription,\r\n        name: groupName,\r\n      },\r\n      (groupCreated) => {\r\n        console.log(groupCreated);\r\n      }\r\n      \r\n    );*/\r\n\r\n    console.log(\"revisar essa linha\");\r\n\r\n    setIsOpenAlert(true);\r\n    setMessage(\"testando...\");\r\n\r\n    setTimeout(() => {\r\n      setIsOpenAlert(false);\r\n      setMessage(\"\");\r\n    }, 2000);\r\n  };\r\n\r\n  const toggleCollapse = () => {\r\n    setIsOpenCollapse(!isOpenCollapse);\r\n  };\r\n\r\n  const handleCheckContact = (selected: boolean, contact: IContact) => {\r\n    if (selected) {\r\n      let selected = selectedContact;\r\n      selected.push(contact);\r\n      setSelectedContact(selected);\r\n    } else {\r\n      setSelectedContact(\r\n        selectedContact.filter((sel) => {\r\n          if (sel.id === contact.id) {\r\n            return false;\r\n          }\r\n          return true;\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal isOpen={show} centered toggle={toggle}>\r\n      <ModalHeader\r\n        tag=\"h5\"\r\n        className=\"modal-title font-size-16\"\r\n        toggle={toggle}\r\n      >\r\n        {t(\"Create New Group\")}\r\n      </ModalHeader>\r\n      <ModalBody className=\"p-4\">\r\n        <Form>\r\n          <FormGroup className=\"mb-4\">\r\n            <Label htmlFor=\"addgroupname-input\">{t(\"Group Name\")}</Label>\r\n            <Input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"addgroupname-input\"\r\n              value={groupName}\r\n              onChange={(e) => setGroupName(e.target.value)}\r\n              placeholder=\"Enter Group Name\"\r\n            />\r\n          </FormGroup>\r\n          <FormGroup className=\"mb-4\">\r\n            <Label>{t(\"Group Members\")}</Label>\r\n            <Alert isOpen={isOpenAlert} color=\"danger\">\r\n              {message}\r\n            </Alert>\r\n            <div className=\"mb-3\">\r\n              <Button\r\n                color=\"light\"\r\n                size=\"sm\"\r\n                type=\"button\"\r\n                onClick={toggleCollapse}\r\n              >\r\n                {t(\"Select Members\")}\r\n              </Button>\r\n            </div>\r\n\r\n            <Collapse isOpen={isOpenCollapse} id=\"groupmembercollapse\">\r\n              <Card className=\"border\">\r\n                <CardHeader>\r\n                  <h5 className=\"font-size-15 mb-0\">{t(\"Contacts\")}</h5>\r\n                </CardHeader>\r\n                <CardBody className=\"p-2\">\r\n                  <SimpleBar style={{ maxHeight: \"150px\" }}>\r\n                    <div id=\"addContacts\">\r\n                      <SelectContact handleCheckContact={handleCheckContact} />\r\n                    </div>\r\n                  </SimpleBar>\r\n                </CardBody>\r\n              </Card>\r\n            </Collapse>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label htmlFor=\"addgroupdescription-input\">Description</Label>\r\n            <textarea\r\n              className=\"form-control\"\r\n              id=\"addgroupdescription-input\"\r\n              value={groupDescription}\r\n              onChange={(e) => setGroupDescription(e.target.value)}\r\n              rows={3}\r\n              placeholder=\"Enter Description\"\r\n            ></textarea>\r\n          </FormGroup>\r\n        </Form>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button type=\"button\" color=\"link\" onClick={toggle}>\r\n          {t(\"Close\")}\r\n        </Button>\r\n        <Button type=\"button\" color=\"primary\" onClick={handleCreateGroup}>\r\n          Create Group\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default ModalSelectUsers;\r\n"]},"metadata":{},"sourceType":"module"}