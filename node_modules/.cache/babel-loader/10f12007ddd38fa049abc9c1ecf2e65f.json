{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\contexts\\\\ChatContext.tsx\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport { activeChat as activeChatData } from \"./../data/chat\"; //alias\n\nimport { useMainBox } from \"./MainBoxContext\";\nimport ScreenType from \"../enuns/ScreenType\";\nexport const ChatContext = createContext({});\nexport const ChatProvider = ({\n  children\n}) => {\n  const [activeChat, setActiveChat] = useState(activeChatData);\n  const [chats, setChats] = useState([]);\n  const [flagToLoadFavoriteMessages, setFlagToLoadFavoriteMessages] = useState(undefined);\n  const [showChatProfileSidebar, setShowChatProfileSidebar] = useState(false);\n  const [forwardMessageList, setForwardMessageList] = useState();\n  const [replyMsg, setReplyMsg] = useState();\n  const [favoriteMessagePayload, setFavoriteMessagePayload] = useState(undefined);\n  const [favoriteMessages, setFavoriteMessages] = useState(null);\n  const [deleteFavoriteMessage, setDeleteFavoriteMessage] = useState(undefined);\n  const [readMessagePayload, setReadMessagePayload] = useState(undefined);\n  const {\n    setScreen\n  } = useMainBox();\n\n  const openChat = obj => {\n    if ((activeChat === null || activeChat === void 0 ? void 0 : activeChat.jid) === obj.jid) return;\n    setScreen(ScreenType.CHAT);\n    setChats(chats.map(item => {\n      if (item.jid === obj.jid) {\n        item.unRead = 0;\n        item.mencioned = 0;\n        item.messageLoaded = item.messages.length >= 20 ? false : true;\n        setActiveChat(item);\n      }\n\n      return item;\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(ChatContext.Provider, {\n    value: {\n      activeChat,\n      setActiveChat,\n      openChat,\n      chats,\n      setChats,\n      forwardMessageList,\n      setForwardMessageList,\n      replyMsg,\n      setReplyMsg,\n      showChatProfileSidebar,\n      setShowChatProfileSidebar,\n      favoriteMessagePayload,\n      setFavoriteMessagePayload,\n      flagToLoadFavoriteMessages,\n      setFlagToLoadFavoriteMessages,\n      favoriteMessages,\n      setFavoriteMessages,\n      deleteFavoriteMessage,\n      setDeleteFavoriteMessage,\n      readMessagePayload,\n      setReadMessagePayload\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport function useChat() {\n  return useContext(ChatContext);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/contexts/ChatContext.tsx"],"names":["React","createContext","useContext","useState","activeChat","activeChatData","useMainBox","ScreenType","ChatContext","ChatProvider","children","setActiveChat","chats","setChats","flagToLoadFavoriteMessages","setFlagToLoadFavoriteMessages","undefined","showChatProfileSidebar","setShowChatProfileSidebar","forwardMessageList","setForwardMessageList","replyMsg","setReplyMsg","favoriteMessagePayload","setFavoriteMessagePayload","favoriteMessages","setFavoriteMessages","deleteFavoriteMessage","setDeleteFavoriteMessage","readMessagePayload","setReadMessagePayload","setScreen","openChat","obj","jid","CHAT","map","item","unRead","mencioned","messageLoaded","messages","length","useChat"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport { activeChat as activeChatData } from \"./../data/chat\";\r\n\r\n//alias\r\nimport IChat from \"../alias/IChat\";\r\nimport IContact from \"../alias/IContact\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport {\r\n  FavoriteMessagePayload,\r\n  ListFavoriteMessagesPayload,\r\n  FavoriteMessage,\r\n} from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport { useMainBox } from \"./MainBoxContext\";\r\nimport ScreenType from \"../enuns/ScreenType\";\r\n\r\ninterface IChatContextData {\r\n  activeChat: IChat;\r\n  setActiveChat(value: IChat): void;\r\n  openChat(obj: IChat): void;\r\n  chats: IChat[];\r\n  setChats(value: IChat[]): void;\r\n  forwardMessageList: (IContact | IGroup)[] | undefined;\r\n  setForwardMessageList(value: (IContact | IGroup)[] | undefined): void;\r\n  replyMsg: IMessage | undefined;\r\n  setReplyMsg(msg: IMessage | undefined): void;\r\n  showChatProfileSidebar: boolean;\r\n  setShowChatProfileSidebar(value: boolean): void;\r\n  favoriteMessagePayload: FavoriteMessagePayload | undefined;\r\n  setFavoriteMessagePayload(value: FavoriteMessagePayload | undefined): void;\r\n  flagToLoadFavoriteMessages: ListFavoriteMessagesPayload | undefined;\r\n  setFlagToLoadFavoriteMessages(\r\n    value: ListFavoriteMessagesPayload | undefined\r\n  ): void;\r\n  favoriteMessages: FavoriteMessage[] | null;\r\n  setFavoriteMessages(value: FavoriteMessage[]): void;\r\n  deleteFavoriteMessage: IDeleteMessage | undefined;\r\n  setDeleteFavoriteMessage(value: IDeleteMessage | undefined): void;\r\n  readMessagePayload: IReadMessagePayload | undefined;\r\n  setReadMessagePayload(value: IReadMessagePayload | undefined): void;\r\n}\r\n\r\ninterface IDeleteMessage {\r\n  messageId: string;\r\n  contactType: string;\r\n  id: string;\r\n}\r\n\r\ninterface IReadMessagePayload{\r\n  authUser: string;\r\n  between: string;\r\n  id: string;\r\n  chatType: string;\r\n}\r\n\r\nexport const ChatContext = createContext<IChatContextData>(\r\n  {} as IChatContextData\r\n);\r\n\r\nexport const ChatProvider: React.FC = ({ children }) => {\r\n  const [activeChat, setActiveChat] = useState(activeChatData);\r\n  const [chats, setChats] = useState<IChat[]>([]);\r\n  const [flagToLoadFavoriteMessages, setFlagToLoadFavoriteMessages] = useState<\r\n    ListFavoriteMessagesPayload | undefined\r\n  >(undefined);\r\n  const [showChatProfileSidebar, setShowChatProfileSidebar] = useState(false);\r\n  const [forwardMessageList, setForwardMessageList] = useState<\r\n    (IContact | IGroup)[] | undefined\r\n  >();\r\n  const [replyMsg, setReplyMsg] = useState<IMessage | undefined>();\r\n  const [favoriteMessagePayload, setFavoriteMessagePayload] = useState<\r\n    FavoriteMessagePayload | undefined\r\n  >(undefined);\r\n  const [favoriteMessages, setFavoriteMessages] = useState<\r\n    FavoriteMessage[] | null\r\n  >(null);\r\n  const [deleteFavoriteMessage, setDeleteFavoriteMessage] = useState<\r\n    IDeleteMessage | undefined\r\n  >(undefined);\r\n  const [readMessagePayload, setReadMessagePayload] = useState<IReadMessagePayload | undefined>(undefined);\r\n  const { setScreen } = useMainBox();\r\n\r\n  const openChat = (obj: IChat) => {\r\n    if (activeChat?.jid === obj.jid) return;\r\n    setScreen(ScreenType.CHAT);\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.jid === obj.jid) {\r\n          item.unRead = 0;\r\n          item.mencioned = 0;\r\n          item.messageLoaded = item.messages.length >= 20 ? false : true;\r\n          setActiveChat(item);\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        activeChat,\r\n        setActiveChat,\r\n        openChat,\r\n        chats,\r\n        setChats,\r\n        forwardMessageList,\r\n        setForwardMessageList,\r\n        replyMsg,\r\n        setReplyMsg,\r\n        showChatProfileSidebar,\r\n        setShowChatProfileSidebar,\r\n        favoriteMessagePayload,\r\n        setFavoriteMessagePayload,\r\n        flagToLoadFavoriteMessages,\r\n        setFlagToLoadFavoriteMessages,\r\n        favoriteMessages,\r\n        setFavoriteMessages,\r\n        deleteFavoriteMessage,\r\n        setDeleteFavoriteMessage,\r\n        readMessagePayload, \r\n        setReadMessagePayload\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useChat() {\r\n  return useContext(ChatContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}