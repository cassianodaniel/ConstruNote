{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\SelectParticipant.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { Input, Label } from \"reactstrap\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useConference } from \"../contexts/ConferenceContext\";\nimport { SearchParticipants } from \"../helpers/SearchParticipants\";\nimport sortParticipantGroup from \"../helpers/SortParticipantGroup\";\nimport { useContact } from \"../contexts/ContactContext\";\n\nconst SelectMember = ({\n  search,\n  handleCheckParticipant,\n  checkedParticipants\n}) => {\n  const {\n    conferenceList\n  } = useConference();\n  const {\n    activeChat\n  } = useChat();\n  const {\n    contacts\n  } = useContact();\n  let actualConference = conferenceList.find(cfr => cfr.id === activeChat.id);\n  let actualParticipantMembersId = actualConference === null || actualConference === void 0 ? void 0 : actualConference.conferenceRoomParticipants.map(mbrs => {\n    return mbrs.userUuid;\n  });\n  let [contactStorage, setContactStorage] = useState([]);\n\n  const init = () => {\n    setContactStorage(contacts.filter(ctc => {\n      if (actualParticipantMembersId === null || actualParticipantMembersId === void 0 ? void 0 : actualParticipantMembersId.find(id => id === ctc.id)) {\n        return false;\n      }\n\n      return true;\n    }));\n  };\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, sortParticipantGroup(SearchParticipants(contactStorage, search ? search : \"\")).map((participant, key) => /*#__PURE__*/React.createElement(\"div\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ml-3 pl-1 font-weight-bold text-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, participant.group), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list-unstyled participant-list mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, participant.children.map(child => /*#__PURE__*/React.createElement(\"li\", {\n    key: child.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"custom-control custom-checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"checkbox\",\n    className: \"custom-control-input\",\n    onChange: e => {\n      handleCheckParticipant(e.target.checked, child);\n    },\n    id: \"participantCheck\" + child.id,\n    checked: checkedParticipants.find(item => item.userUuid === child.id) ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    className: \"custom-control-label\",\n    htmlFor: \"participantCheck\" + child.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 19\n    }\n  }, child.name))))))));\n};\n\nexport default SelectMember;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/SelectParticipant.tsx"],"names":["React","useEffect","useState","Input","Label","useChat","useConference","SearchParticipants","sortParticipantGroup","useContact","SelectMember","search","handleCheckParticipant","checkedParticipants","conferenceList","activeChat","contacts","actualConference","find","cfr","id","actualParticipantMembersId","conferenceRoomParticipants","map","mbrs","userUuid","contactStorage","setContactStorage","init","filter","ctc","participant","key","group","children","child","e","target","checked","item","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Input, Label } from \"reactstrap\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useConference } from \"../contexts/ConferenceContext\";\r\nimport { SearchParticipants } from \"../helpers/SearchParticipants\";\r\nimport sortParticipantGroup from \"../helpers/SortParticipantGroup\";\r\nimport { IConference } from \"../alias/IConference\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport IContact from \"../alias/IContact\";\r\nimport IParticipant from \"../alias/IParticipant\";\r\n\r\ninterface IProps {\r\n  search?: string;\r\n  handleCheckParticipant(selected: boolean, participant: IContact): void;\r\n  checkedParticipants: IParticipant[];\r\n}\r\n\r\nconst SelectMember: React.FC<IProps> = ({ search, handleCheckParticipant, checkedParticipants }) => {\r\n  const {\r\n    conferenceList,\r\n  } = useConference();\r\n  const { activeChat } = useChat();\r\n\r\n  const { contacts } = useContact();\r\n  \r\n  let actualConference = conferenceList.find((cfr: IConference) => (\r\n    cfr.id === activeChat.id\r\n  ));  \r\n\r\n  let actualParticipantMembersId = actualConference?.conferenceRoomParticipants.map((mbrs: IParticipant) => {\r\n    return mbrs.userUuid;\r\n  });\r\n\r\n  let [contactStorage, setContactStorage] = useState<IContact[]>([]);\r\n  \r\n  const init = () => {\r\n    setContactStorage(\r\n      contacts.filter((ctc: IContact) => {\r\n        if(actualParticipantMembersId?.find((id) => (id === ctc.id))){\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n    ));\r\n  }\r\n  \r\n  useEffect(init, []);\r\n\r\n  \r\n  return (\r\n    <div className=\"mt-2\">\r\n      {sortParticipantGroup(\r\n       SearchParticipants(contactStorage, search ? search : \"\")\r\n      ).map((participant: any, key: any) => (\r\n        <div key={key}>\r\n          <div className=\"ml-3 pl-1 font-weight-bold text-primary\">\r\n            {participant.group}\r\n          </div>\r\n\r\n          <ul className=\"list-unstyled participant-list mb-2\">\r\n            {participant.children.map((child: any) => (\r\n              <li key={child.id}>\r\n                <div className=\"custom-control custom-checkbox\">\r\n                  <Input\r\n                    type=\"checkbox\"\r\n                    className=\"custom-control-input\"\r\n                    onChange={(e) => {\r\n                      handleCheckParticipant(e.target.checked, child);\r\n                    }}\r\n                    id={\"participantCheck\" + child.id}\r\n                    checked={ checkedParticipants.find((item) => item.userUuid === child.id) ? true : false }\r\n                  />\r\n                  <Label\r\n                    className=\"custom-control-label\"\r\n                    htmlFor={\"participantCheck\" + child.id}\r\n                  >\r\n                    {child.name}\r\n                  </Label>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectMember;\r\n"]},"metadata":{},"sourceType":"module"}