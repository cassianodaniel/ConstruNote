{"ast":null,"code":"import { RegistererState, SessionState } from \"sip.js\";\nimport { Events } from \"./voice/types/types\";\nimport SIP from \"./voice/voicecommunicator\";\nexport default class SquadVoiceCommunicator {\n  constructor(settings, cb, constraints = {}) {\n    this.settings = settings;\n    this.constraints = constraints;\n\n    this.onMakeCall = (state, inviter) => {\n      console.log(`Session state changed to ${state}`);\n\n      switch (state) {\n        case SessionState.Initial:\n          this.notify(Events.MAKE_CALL, inviter);\n          break;\n\n        case SessionState.Establishing:\n          break;\n\n        case SessionState.Established:\n          const {\n            receivingVideo,\n            tagId\n          } = this.sip.setupRemoteMedia(inviter, this.getSpeakerId()) || {};\n          this.notify(Events.CALL_ON_GOING, {\n            inviter,\n            receivingVideo,\n            tagId\n          });\n          break;\n\n        case SessionState.Terminating: // fall through\n\n        case SessionState.Terminated:\n          this.notify(Events.CALL_HANGUP, inviter);\n          this.sip.activeCalls.delete(inviter.id);\n          this.sip.cleanupMedia(inviter.id);\n          break;\n\n        default:\n          throw new Error(\"Unknown session state.\");\n      }\n    };\n\n    this.acceptCall = (call, useVideo) => {\n      const acceptedCall = {\n        callId: call.id,\n        useVideo\n      };\n      this.updateConstraintsParams({\n        useVideo\n      });\n      call.accept({\n        sessionDescriptionHandlerOptions: {\n          constraints: this.getConstraints()\n        }\n      });\n      this.notify(Events.ACCEPTED_CALL, acceptedCall);\n    };\n\n    this.onReceiveCall = (state, invitation) => {\n      console.log(`Session state changed to ${state}`);\n\n      switch (state) {\n        case SessionState.Initial:\n          this.notify(Events.RECEIVED_CALL, invitation);\n          break;\n\n        case SessionState.Establishing:\n          break;\n\n        case SessionState.Established:\n          const {\n            receivingVideo,\n            tagId\n          } = this.sip.setupRemoteMedia(invitation, this.getSpeakerId()) || {};\n          this.notify(Events.CALL_ON_GOING, {\n            invitation,\n            receivingVideo,\n            tagId\n          });\n          break;\n\n        case SessionState.Terminating: // fall through\n\n        case SessionState.Terminated:\n          this.notify(Events.CALL_HANGUP, invitation);\n          this.sip.activeCalls.delete(invitation.id);\n          this.sip.cleanupMedia(invitation.id);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.muteMic = callId => {\n      this.notify(Events.MUTE_MIC, {\n        callId,\n        status: true\n      });\n      this.sip.muteMic(callId);\n    };\n\n    this.unMuteMic = callId => {\n      this.notify(Events.MUTE_MIC, {\n        callId,\n        status: false\n      });\n      this.sip.unMuteMic(callId);\n    };\n\n    this.disableCam = callId => {\n      this.notify(Events.MUTE_CAM, {\n        callId,\n        status: true\n      });\n      this.sip.disableCam(callId);\n    };\n\n    this.enableCam = callId => {\n      this.notify(Events.MUTE_CAM, {\n        callId,\n        status: false\n      });\n      this.sip.enableCam(callId);\n    };\n\n    this.holdCall = callId => {\n      this.notify(Events.HOLD_CALL, {\n        callId,\n        status: true\n      });\n      this.sip.holdCall(callId);\n    };\n\n    this.unHoldCall = callId => {\n      Array.from(this.sip.activeCalls.values()).filter(cl => cl.id !== callId).forEach(call => {\n        this.sip.holdCall(call.id);\n        this.notify(Events.HOLD_CALL, {\n          callId: call.id,\n          status: true\n        });\n      });\n      this.notify(Events.HOLD_CALL, {\n        callId,\n        status: false\n      });\n      this.sip.unHoldCall(callId);\n    };\n\n    this.nextSubscriptionId = 0;\n    this.subscriptions = new Map();\n    this.makeSIP();\n  }\n\n  makeSIP() {\n    this.settings.get(settings => {\n      this.sip = new SIP({\n        user: settings.sipUser,\n        password: settings.sipPw,\n        domain: settings.sipDomain,\n        wsURL: \"\",\n        connectionCB: this.connectionListener.bind(this),\n        onMakeCall: this.onMakeCall.bind(this),\n        onReceiveCall: this.onReceiveCall.bind(this)\n      });\n    });\n  }\n\n  getConstraints() {\n    const newConstraints = {\n      video: this.constraints.useVideo && this.constraints.videoId ? {\n        deviceId: this.constraints.videoId\n      } : this.constraints.useVideo || false,\n      audio: this.constraints.audioId ? {\n        deviceId: this.constraints.audioId\n      } : true\n    };\n    return newConstraints;\n  }\n\n  getSpeakerId() {\n    return this.constraints.speakerId;\n  }\n\n  updateConstraintsParams(params) {\n    this.constraints = { ...this.constraints,\n      ...params\n    };\n  }\n\n  connectionListener(data) {\n    switch (data) {\n      case RegistererState.Initial:\n        break;\n\n      case RegistererState.Registered:\n        this.notify(Events.CONNECTED);\n        break;\n\n      case RegistererState.Terminated:\n        this.notify(Events.DISCONNECTED);\n        break;\n\n      case RegistererState.Unregistered:\n        this.notify(Events.UNREGISTERED);\n        break;\n    }\n  }\n\n  makeCall(number, constraints = this.constraints) {\n    this.updateConstraintsParams(constraints);\n    this.sip.invite(number, this.getConstraints());\n  }\n\n  // < -- Observer Pattern https://refactoring.guru/pt-br/design-patterns/observer\n  subscribe(subscribeCallback) {\n    var _this$subscriptions;\n\n    (_this$subscriptions = this.subscriptions) === null || _this$subscriptions === void 0 ? void 0 : _this$subscriptions.set(this.nextSubscriptionId || 0, subscribeCallback);\n    if (this.nextSubscriptionId) this.nextSubscriptionId += 1;\n  }\n\n  removeSubscription(id) {\n    var _this$subscriptions2;\n\n    (_this$subscriptions2 = this.subscriptions) === null || _this$subscriptions2 === void 0 ? void 0 : _this$subscriptions2.delete(id);\n  }\n\n  removeAllSubscription() {\n    this.subscriptions = new Map();\n  }\n\n  notify(event, data = null) {\n    if (this.subscriptions) {\n      this.subscriptions.forEach(subscribeCallback => {\n        if (subscribeCallback) subscribeCallback(event, data);\n      });\n    }\n  } // -- >\n\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadVoiceCommunicator.ts"],"names":["RegistererState","SessionState","Events","SIP","SquadVoiceCommunicator","constructor","settings","cb","constraints","onMakeCall","state","inviter","console","log","Initial","notify","MAKE_CALL","Establishing","Established","receivingVideo","tagId","sip","setupRemoteMedia","getSpeakerId","CALL_ON_GOING","Terminating","Terminated","CALL_HANGUP","activeCalls","delete","id","cleanupMedia","Error","acceptCall","call","useVideo","acceptedCall","callId","updateConstraintsParams","accept","sessionDescriptionHandlerOptions","getConstraints","ACCEPTED_CALL","onReceiveCall","invitation","RECEIVED_CALL","muteMic","MUTE_MIC","status","unMuteMic","disableCam","MUTE_CAM","enableCam","holdCall","HOLD_CALL","unHoldCall","Array","from","values","filter","cl","forEach","nextSubscriptionId","subscriptions","Map","makeSIP","get","user","sipUser","password","sipPw","domain","sipDomain","wsURL","connectionCB","connectionListener","bind","newConstraints","video","videoId","deviceId","audio","audioId","speakerId","params","data","Registered","CONNECTED","DISCONNECTED","Unregistered","UNREGISTERED","makeCall","number","invite","subscribe","subscribeCallback","set","removeSubscription","removeAllSubscription","event"],"mappings":"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","sourcesContent":["import {\r\n  Invitation,\r\n  Inviter,\r\n  RegistererState,\r\n  Session,\r\n  SessionState,\r\n} from \"sip.js\";\r\nimport SettingsBusiness from \"./business/Settings\";\r\nimport { Events, SubscriptionCallBack } from \"./voice/types/types\";\r\nimport SIP from \"./voice/voicecommunicator\";\r\nexport interface UpdateConstraintsParams {\r\n  useVideo?: boolean;\r\n  videoId?: string;\r\n  audioId?: string;\r\n  speakerId?: string;\r\n}\r\nexport default interface SquadVoiceCommunicator {\r\n  sip: SIP;\r\n  nextSubscriptionId?: number;\r\n  subscriptions?: Map<number, SubscriptionCallBack>;\r\n}\r\nexport default class SquadVoiceCommunicator {\r\n  constructor(\r\n    private settings: SettingsBusiness,\r\n    cb: SubscriptionCallBack,\r\n    private constraints: UpdateConstraintsParams = {}\r\n  ) {\r\n    this.nextSubscriptionId = 0;\r\n    this.subscriptions = new Map<number, SubscriptionCallBack>();\r\n    this.makeSIP();\r\n  }\r\n  makeSIP() {\r\n    this.settings.get((settings) => {\r\n      this.sip = new SIP({\r\n        user: settings.sipUser,\r\n        password: settings.sipPw,\r\n        domain: settings.sipDomain,\r\n        wsURL: \"\",\r\n        connectionCB: this.connectionListener.bind(this),\r\n        onMakeCall: this.onMakeCall.bind(this),\r\n        onReceiveCall: this.onReceiveCall.bind(this),\r\n      });\r\n    });\r\n  }\r\n  getConstraints() {\r\n    const newConstraints: MediaStreamConstraints = {\r\n      video:\r\n        this.constraints.useVideo && this.constraints.videoId\r\n          ? {\r\n              deviceId: this.constraints.videoId,\r\n            }\r\n          : this.constraints.useVideo || false,\r\n      audio: this.constraints.audioId\r\n        ? {\r\n            deviceId: this.constraints.audioId,\r\n          }\r\n        : true,\r\n    };\r\n    return newConstraints;\r\n  }\r\n  getSpeakerId() {\r\n    return this.constraints.speakerId;\r\n  }\r\n  updateConstraintsParams(params: UpdateConstraintsParams) {\r\n    this.constraints = { ...this.constraints, ...params };\r\n  }\r\n  connectionListener(data: RegistererState) {\r\n    switch (data) {\r\n      case RegistererState.Initial:\r\n        break;\r\n      case RegistererState.Registered:\r\n        this.notify(Events.CONNECTED);\r\n        break;\r\n      case RegistererState.Terminated:\r\n        this.notify(Events.DISCONNECTED);\r\n        break;\r\n      case RegistererState.Unregistered:\r\n        this.notify(Events.UNREGISTERED);\r\n        break;\r\n    }\r\n  }\r\n  makeCall(\r\n    number: string,\r\n    constraints: UpdateConstraintsParams = this.constraints\r\n  ) {\r\n    this.updateConstraintsParams(constraints);\r\n    this.sip.invite(number, this.getConstraints());\r\n  }\r\n  onMakeCall = (state: SessionState, inviter: Inviter) => {\r\n    console.log(`Session state changed to ${state}`);\r\n    switch (state) {\r\n      case SessionState.Initial:\r\n        this.notify(Events.MAKE_CALL, inviter);\r\n        break;\r\n      case SessionState.Establishing:\r\n        break;\r\n      case SessionState.Established:\r\n        const { receivingVideo, tagId } =\r\n          this.sip.setupRemoteMedia(inviter, this.getSpeakerId()) || {};\r\n        this.notify(Events.CALL_ON_GOING, { inviter, receivingVideo, tagId });\r\n        break;\r\n      case SessionState.Terminating:\r\n      // fall through\r\n      case SessionState.Terminated:\r\n        this.notify(Events.CALL_HANGUP, inviter);\r\n        this.sip.activeCalls.delete(inviter.id);\r\n        this.sip.cleanupMedia(inviter.id);\r\n        break;\r\n      default:\r\n        throw new Error(\"Unknown session state.\");\r\n    }\r\n  };\r\n  acceptCall = (call: Session, useVideo: boolean) => {\r\n    const acceptedCall = { callId: call.id, useVideo };\r\n    this.updateConstraintsParams({ useVideo });\r\n    (call as Invitation).accept({\r\n      sessionDescriptionHandlerOptions: {\r\n        constraints: this.getConstraints(),\r\n      },\r\n    });\r\n    this.notify(Events.ACCEPTED_CALL, acceptedCall);\r\n  };\r\n  onReceiveCall = (state: SessionState, invitation: Invitation) => {\r\n    console.log(`Session state changed to ${state}`);\r\n    switch (state) {\r\n      case SessionState.Initial:\r\n        this.notify(Events.RECEIVED_CALL, invitation);\r\n        break;\r\n      case SessionState.Establishing:\r\n        break;\r\n      case SessionState.Established:\r\n        const { receivingVideo, tagId } =\r\n          this.sip.setupRemoteMedia(invitation, this.getSpeakerId()) || {};\r\n        this.notify(Events.CALL_ON_GOING, {\r\n          invitation,\r\n          receivingVideo,\r\n          tagId,\r\n        });\r\n        break;\r\n      case SessionState.Terminating:\r\n      // fall through\r\n      case SessionState.Terminated:\r\n        this.notify(Events.CALL_HANGUP, invitation);\r\n        this.sip.activeCalls.delete(invitation.id);\r\n        this.sip.cleanupMedia(invitation.id);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  muteMic = (callId: string) => {\r\n    this.notify(Events.MUTE_MIC, { callId, status: true });\r\n    this.sip.muteMic(callId);\r\n  };\r\n  unMuteMic = (callId: string) => {\r\n    this.notify(Events.MUTE_MIC, { callId, status: false });\r\n    this.sip.unMuteMic(callId);\r\n  };\r\n  disableCam = (callId: string) => {\r\n    this.notify(Events.MUTE_CAM, { callId, status: true });\r\n    this.sip.disableCam(callId);\r\n  };\r\n  enableCam = (callId: string) => {\r\n    this.notify(Events.MUTE_CAM, { callId, status: false });\r\n    this.sip.enableCam(callId);\r\n  };\r\n  holdCall = (callId: string) => {\r\n    this.notify(Events.HOLD_CALL, { callId, status: true });\r\n    this.sip.holdCall(callId);\r\n  };\r\n  unHoldCall = (callId: string) => {\r\n    Array.from(this.sip.activeCalls.values())\r\n      .filter((cl) => cl.id !== callId)\r\n      .forEach((call) => {\r\n        this.sip.holdCall(call.id);\r\n        this.notify(Events.HOLD_CALL, { callId: call.id, status: true });\r\n      });\r\n    this.notify(Events.HOLD_CALL, { callId, status: false });\r\n    this.sip.unHoldCall(callId);\r\n  };\r\n\r\n  // < -- Observer Pattern https://refactoring.guru/pt-br/design-patterns/observer\r\n  subscribe(subscribeCallback: SubscriptionCallBack) {\r\n    this.subscriptions?.set(this.nextSubscriptionId || 0, subscribeCallback);\r\n    if (this.nextSubscriptionId) this.nextSubscriptionId += 1;\r\n  }\r\n  removeSubscription(id: number) {\r\n    this.subscriptions?.delete(id);\r\n  }\r\n  removeAllSubscription() {\r\n    this.subscriptions = new Map<number, SubscriptionCallBack>();\r\n  }\r\n  notify(event: Events, data: any = null) {\r\n    if (this.subscriptions) {\r\n      this.subscriptions.forEach((subscribeCallback) => {\r\n        if (subscribeCallback) subscribeCallback(event, data);\r\n      });\r\n    }\r\n  }\r\n  // -- >\r\n}\r\n"]},"metadata":{},"sourceType":"module"}