{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\Video.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport hark from \"hark\";\nexport const Video = ({\n  audioId,\n  videoId,\n  speakerId,\n  stream,\n  speakerVolume,\n  speaking,\n  modalOpen,\n  setStream,\n  setSpeakerVolume,\n  setSpeaking\n}) => {\n  const [speechEvents, setSpeechEvents] = useState();\n  const [usedVideo, setUsedVideo] = useState();\n  const [usedAudio, setUsedAudio] = useState();\n  const [usedSpeaker, setUsedSpeaker] = useState();\n  const [videoEl, setVideoEl] = useState();\n\n  const startStream = (idVideo, idAudio, speakerId) => {\n    try {\n      if (stream) {\n        stream.getTracks().forEach(track => {\n          track.stop();\n        });\n      }\n\n      let videoTag = videoEl;\n\n      if (!videoTag) {\n        videoTag = document.querySelector(\"video.video\");\n      }\n\n      const constraints = {\n        audio: {\n          deviceId: idAudio ? {\n            exact: idAudio\n          } : undefined\n        },\n        video: {\n          deviceId: idVideo ? {\n            exact: idVideo\n          } : undefined,\n          width: {\n            min: 1280,\n            max: 1920\n          },\n          height: {\n            min: 720,\n            max: 1080\n          }\n        }\n      };\n      navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n        setStream(stream);\n        setUsedVideo(videoId);\n        setUsedAudio(audioId);\n        setUsedSpeaker(speakerId);\n\n        if (videoTag) {\n          // const streamConstraints = {\n          //     width: { min: 640, ideal: 1280, max: 1920 },\n          //     height: { min: 400, ideal: 720, max: 1080 },\n          // }\n          // const track = stream.getVideoTracks()[0];\n          // track.applyConstraints(streamConstraints);\n          const harkOptions = {};\n          const speech = hark(stream, harkOptions);\n\n          if (speechEvents) {\n            speechEvents.stop();\n          }\n\n          setSpeechEvents(speech);\n          speech.on(\"speaking\", () => {\n            setSpeaking(true);\n          });\n          speech.on(\"stopped_speaking\", () => {\n            setSpeaking(false);\n          });\n          speech.on(\"volume_change\", volume => {\n            setSpeakerVolume(volume);\n          });\n          videoTag.srcObject = stream;\n          if (typeof videoTag.setSinkId == \"function\") videoTag.setSinkId(speakerId).then(_ => console.log(\"Speaker Changed to - \" + speakerId)).catch(_ => console.log(\"error\"));\n        }\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const unMount = () => {\n    return () => {\n      if (!modalOpen) {\n        if (stream) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n        }\n\n        if (speechEvents) {\n          speechEvents.stop();\n        }\n      }\n    };\n  };\n\n  const init = () => {\n    if (!stream) {\n      const el = document.querySelector(\"#deviceConfigTag\");\n\n      if (el && !videoEl) {\n        setVideoEl(el);\n        startStream(videoId, audioId, speakerId);\n      }\n    }\n  };\n\n  const update = () => {\n    if (videoId !== usedVideo || audioId !== usedAudio || speakerId !== usedSpeaker) {\n      if (stream) {\n        stream.getTracks().forEach(track => {\n          track.stop();\n        });\n      }\n\n      startStream(videoId, audioId, speakerId);\n    }\n  };\n\n  useEffect(unMount, [modalOpen]);\n  useEffect(init, []);\n  useEffect(update, [videoId, audioId, speakerId]);\n  return /*#__PURE__*/React.createElement(\"video\", {\n    style: {\n      maxWidth: \"498px\"\n    },\n    id: \"deviceConfigTag\",\n    className: \"video\",\n    autoPlay: true,\n    playsInline: true,\n    muted: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/Video.tsx"],"names":["React","useEffect","useState","hark","Video","audioId","videoId","speakerId","stream","speakerVolume","speaking","modalOpen","setStream","setSpeakerVolume","setSpeaking","speechEvents","setSpeechEvents","usedVideo","setUsedVideo","usedAudio","setUsedAudio","usedSpeaker","setUsedSpeaker","videoEl","setVideoEl","startStream","idVideo","idAudio","getTracks","forEach","track","stop","videoTag","document","querySelector","constraints","audio","deviceId","exact","undefined","video","width","min","max","height","navigator","mediaDevices","getUserMedia","then","harkOptions","speech","on","volume","srcObject","setSinkId","_","console","log","catch","e","unMount","init","el","update","maxWidth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAaA,OAAO,MAAMC,KAAsB,GAAG,CAAC;AACrCC,EAAAA,OADqC;AAErCC,EAAAA,OAFqC;AAGrCC,EAAAA,SAHqC;AAIrCC,EAAAA,MAJqC;AAKrCC,EAAAA,aALqC;AAMrCC,EAAAA,QANqC;AAOrCC,EAAAA,SAPqC;AAQrCC,EAAAA,SARqC;AASrCC,EAAAA,gBATqC;AAUrCC,EAAAA;AAVqC,CAAD,KAWhC;AACJ,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,EAAhD;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,EAA1C;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,EAA1C;AACA,QAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,EAA9C;AACA,QAAM,CAACqB,OAAD,EAAUC,UAAV,IAAwBtB,QAAQ,EAAtC;;AACA,QAAMuB,WAAW,GAAG,CAClBC,OADkB,EAElBC,OAFkB,EAGlBpB,SAHkB,KAIf;AACH,QAAI;AACF,UAAIC,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACoB,SAAP,GAAmBC,OAAnB,CAA4BC,KAAD,IAAW;AACpCA,UAAAA,KAAK,CAACC,IAAN;AACD,SAFD;AAGD;;AACD,UAAIC,QAAa,GAAGT,OAApB;;AACA,UAAI,CAACS,QAAL,EAAe;AACbA,QAAAA,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,aAAvB,CAAX;AACD;;AACD,YAAMC,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,QAAQ,EAAEV,OAAO,GAAG;AAAEW,YAAAA,KAAK,EAAEX;AAAT,WAAH,GAAwBY;AAA3C,SADW;AAElBC,QAAAA,KAAK,EAAE;AACLH,UAAAA,QAAQ,EAAEX,OAAO,GAAG;AAAEY,YAAAA,KAAK,EAAEZ;AAAT,WAAH,GAAwBa,SADpC;AAELE,UAAAA,KAAK,EAAE;AAAEC,YAAAA,GAAG,EAAE,IAAP;AAAaC,YAAAA,GAAG,EAAE;AAAlB,WAFF;AAGLC,UAAAA,MAAM,EAAE;AAAEF,YAAAA,GAAG,EAAE,GAAP;AAAYC,YAAAA,GAAG,EAAE;AAAjB;AAHH;AAFW,OAApB;AAQAE,MAAAA,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCZ,WAApC,EAAiDa,IAAjD,CAAuDxC,MAAD,IAAY;AAChEI,QAAAA,SAAS,CAACJ,MAAD,CAAT;AACAU,QAAAA,YAAY,CAACZ,OAAD,CAAZ;AACAc,QAAAA,YAAY,CAACf,OAAD,CAAZ;AACAiB,QAAAA,cAAc,CAACf,SAAD,CAAd;;AACA,YAAIyB,QAAJ,EAAc;AACZ;AACA;AACA;AACA;AACA;AACA;AAEA,gBAAMiB,WAAW,GAAG,EAApB;AACA,gBAAMC,MAAM,GAAG/C,IAAI,CAACK,MAAD,EAASyC,WAAT,CAAnB;;AACA,cAAIlC,YAAJ,EAAkB;AAChBA,YAAAA,YAAY,CAACgB,IAAb;AACD;;AACDf,UAAAA,eAAe,CAACkC,MAAD,CAAf;AACAA,UAAAA,MAAM,CAACC,EAAP,CAAU,UAAV,EAAsB,MAAM;AAC1BrC,YAAAA,WAAW,CAAC,IAAD,CAAX;AACD,WAFD;AAIAoC,UAAAA,MAAM,CAACC,EAAP,CAAU,kBAAV,EAA8B,MAAM;AAClCrC,YAAAA,WAAW,CAAC,KAAD,CAAX;AACD,WAFD;AAIAoC,UAAAA,MAAM,CAACC,EAAP,CAAU,eAAV,EAA4BC,MAAD,IAAY;AACrCvC,YAAAA,gBAAgB,CAACuC,MAAD,CAAhB;AACD,WAFD;AAIApB,UAAAA,QAAQ,CAACqB,SAAT,GAAqB7C,MAArB;AACA,cAAI,OAAOwB,QAAQ,CAACsB,SAAhB,IAA6B,UAAjC,EACEtB,QAAQ,CACLsB,SADH,CACa/C,SADb,EAEGyC,IAFH,CAESO,CAAD,IACJC,OAAO,CAACC,GAAR,CAAY,0BAA0BlD,SAAtC,CAHJ,EAKGmD,KALH,CAKUH,CAAD,IAAYC,OAAO,CAACC,GAAR,CAAY,OAAZ,CALrB;AAMH;AACF,OAxCD;AAyCD,KA3DD,CA2DE,OAAOE,CAAP,EAAU;AACVH,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACD;AACF,GAnED;;AAoEA,QAAMC,OAAO,GAAG,MAAM;AACpB,WAAO,MAAM;AACX,UAAI,CAACjD,SAAL,EAAgB;AACd,YAAIH,MAAJ,EAAY;AACVA,UAAAA,MAAM,CAACoB,SAAP,GAAmBC,OAAnB,CAA4BC,KAAD,IAAW;AACpCA,YAAAA,KAAK,CAACC,IAAN;AACD,WAFD;AAGD;;AACD,YAAIhB,YAAJ,EAAkB;AAChBA,UAAAA,YAAY,CAACgB,IAAb;AACD;AACF;AACF,KAXD;AAYD,GAbD;;AAcA,QAAM8B,IAAI,GAAG,MAAM;AACjB,QAAI,CAACrD,MAAL,EAAa;AACX,YAAMsD,EAAE,GAAG7B,QAAQ,CAACC,aAAT,CAAuB,kBAAvB,CAAX;;AACA,UAAI4B,EAAE,IAAI,CAACvC,OAAX,EAAoB;AAClBC,QAAAA,UAAU,CAACsC,EAAD,CAAV;AACArC,QAAAA,WAAW,CAACnB,OAAD,EAAUD,OAAV,EAAmBE,SAAnB,CAAX;AACD;AACF;AACF,GARD;;AASA,QAAMwD,MAAM,GAAG,MAAM;AACnB,QACEzD,OAAO,KAAKW,SAAZ,IACAZ,OAAO,KAAKc,SADZ,IAEAZ,SAAS,KAAKc,WAHhB,EAIE;AACA,UAAIb,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACoB,SAAP,GAAmBC,OAAnB,CAA4BC,KAAD,IAAW;AACpCA,UAAAA,KAAK,CAACC,IAAN;AACD,SAFD;AAGD;;AACDN,MAAAA,WAAW,CAACnB,OAAD,EAAUD,OAAV,EAAmBE,SAAnB,CAAX;AACD;AACF,GAbD;;AAcAN,EAAAA,SAAS,CAAC2D,OAAD,EAAU,CAACjD,SAAD,CAAV,CAAT;AACAV,EAAAA,SAAS,CAAC4D,IAAD,EAAO,EAAP,CAAT;AACA5D,EAAAA,SAAS,CAAC8D,MAAD,EAAS,CAACzD,OAAD,EAAUD,OAAV,EAAmBE,SAAnB,CAAT,CAAT;AACA,sBACE;AACE,IAAA,KAAK,EAAE;AAAEyD,MAAAA,QAAQ,EAAE;AAAZ,KADT;AAEE,IAAA,EAAE,EAAC,iBAFL;AAGE,IAAA,SAAS,EAAC,OAHZ;AAIE,IAAA,QAAQ,MAJV;AAKE,IAAA,WAAW,MALb;AAME,IAAA,KAAK,MANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAUD,CAvIM","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport hark from \"hark\";\r\nexport interface Video {\r\n  audioId: string | undefined;\r\n  videoId: string | undefined;\r\n  speakerId: string | undefined;\r\n  speakerVolume: number | undefined;\r\n  speaking: boolean | undefined;\r\n  stream: MediaStream | undefined;\r\n  setStream(val: MediaStream | undefined): void;\r\n  modalOpen: boolean;\r\n  setSpeakerVolume(val: number): void;\r\n  setSpeaking(val: boolean): void;\r\n}\r\nexport const Video: React.FC<Video> = ({\r\n  audioId,\r\n  videoId,\r\n  speakerId,\r\n  stream,\r\n  speakerVolume,\r\n  speaking,\r\n  modalOpen,\r\n  setStream,\r\n  setSpeakerVolume,\r\n  setSpeaking,\r\n}) => {\r\n  const [speechEvents, setSpeechEvents] = useState<hark.Harker>();\r\n  const [usedVideo, setUsedVideo] = useState<string>();\r\n  const [usedAudio, setUsedAudio] = useState<string>();\r\n  const [usedSpeaker, setUsedSpeaker] = useState<string>();\r\n  const [videoEl, setVideoEl] = useState<HTMLVideoElement>();\r\n  const startStream = (\r\n    idVideo: string | undefined,\r\n    idAudio: string | undefined,\r\n    speakerId: string | undefined\r\n  ) => {\r\n    try {\r\n      if (stream) {\r\n        stream.getTracks().forEach((track) => {\r\n          track.stop();\r\n        });\r\n      }\r\n      let videoTag: any = videoEl;\r\n      if (!videoTag) {\r\n        videoTag = document.querySelector(\"video.video\") as HTMLVideoElement;\r\n      }\r\n      const constraints = {\r\n        audio: { deviceId: idAudio ? { exact: idAudio } : undefined },\r\n        video: {\r\n          deviceId: idVideo ? { exact: idVideo } : undefined,\r\n          width: { min: 1280, max: 1920 },\r\n          height: { min: 720, max: 1080 },\r\n        },\r\n      };\r\n      navigator.mediaDevices.getUserMedia(constraints).then((stream) => {\r\n        setStream(stream);\r\n        setUsedVideo(videoId);\r\n        setUsedAudio(audioId);\r\n        setUsedSpeaker(speakerId);\r\n        if (videoTag) {\r\n          // const streamConstraints = {\r\n          //     width: { min: 640, ideal: 1280, max: 1920 },\r\n          //     height: { min: 400, ideal: 720, max: 1080 },\r\n          // }\r\n          // const track = stream.getVideoTracks()[0];\r\n          // track.applyConstraints(streamConstraints);\r\n\r\n          const harkOptions = {};\r\n          const speech = hark(stream, harkOptions);\r\n          if (speechEvents) {\r\n            speechEvents.stop();\r\n          }\r\n          setSpeechEvents(speech);\r\n          speech.on(\"speaking\", () => {\r\n            setSpeaking(true);\r\n          });\r\n\r\n          speech.on(\"stopped_speaking\", () => {\r\n            setSpeaking(false);\r\n          });\r\n\r\n          speech.on(\"volume_change\", (volume) => {\r\n            setSpeakerVolume(volume);\r\n          });\r\n\r\n          videoTag.srcObject = stream;\r\n          if (typeof videoTag.setSinkId == \"function\")\r\n            videoTag\r\n              .setSinkId(speakerId)\r\n              .then((_: any) =>\r\n                console.log(\"Speaker Changed to - \" + speakerId)\r\n              )\r\n              .catch((_: any) => console.log(\"error\"));\r\n        }\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  const unMount = () => {\r\n    return () => {\r\n      if (!modalOpen) {\r\n        if (stream) {\r\n          stream.getTracks().forEach((track) => {\r\n            track.stop();\r\n          });\r\n        }\r\n        if (speechEvents) {\r\n          speechEvents.stop();\r\n        }\r\n      }\r\n    };\r\n  };\r\n  const init = () => {\r\n    if (!stream) {\r\n      const el = document.querySelector(\"#deviceConfigTag\") as HTMLVideoElement;\r\n      if (el && !videoEl) {\r\n        setVideoEl(el);\r\n        startStream(videoId, audioId, speakerId);\r\n      }\r\n    }\r\n  };\r\n  const update = () => {\r\n    if (\r\n      videoId !== usedVideo ||\r\n      audioId !== usedAudio ||\r\n      speakerId !== usedSpeaker\r\n    ) {\r\n      if (stream) {\r\n        stream.getTracks().forEach((track) => {\r\n          track.stop();\r\n        });\r\n      }\r\n      startStream(videoId, audioId, speakerId);\r\n    }\r\n  };\r\n  useEffect(unMount, [modalOpen]);\r\n  useEffect(init, []);\r\n  useEffect(update, [videoId, audioId, speakerId]);\r\n  return (\r\n    <video\r\n      style={{ maxWidth: \"498px\" }}\r\n      id=\"deviceConfigTag\"\r\n      className=\"video\"\r\n      autoPlay\r\n      playsInline\r\n      muted\r\n    />\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}