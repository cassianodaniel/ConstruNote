{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { TransactionStateError } from \"../exceptions\";\nimport { constructOutgoingResponse } from \"../messages\";\nimport { newTag } from \"../messages/utils\";\nimport { InviteServerTransaction, NonInviteServerTransaction, TransactionState } from \"../transactions\";\n/**\n * User Agent Server (UAS).\n * @remarks\n * A user agent server is a logical entity\n * that generates a response to a SIP request.  The response\n * accepts, rejects, or redirects the request.  This role lasts\n * only for the duration of that transaction.  In other words, if\n * a piece of software responds to a request, it acts as a UAS for\n * the duration of that transaction.  If it generates a request\n * later, it assumes the role of a user agent client for the\n * processing of that transaction.\n * https://tools.ietf.org/html/rfc3261#section-6\n * @public\n */\n\nexport var UserAgentServer = /*#__PURE__*/function () {\n  function UserAgentServer(transactionConstructor, core, message, delegate) {\n    _classCallCheck(this, UserAgentServer);\n\n    this.transactionConstructor = transactionConstructor;\n    this.core = core;\n    this.message = message;\n    this.delegate = delegate;\n    this.logger = this.loggerFactory.getLogger(\"sip.user-agent-server\");\n    this.toTag = message.toTag ? message.toTag : newTag();\n    this.init();\n  }\n\n  _createClass(UserAgentServer, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this.transaction.dispose();\n    }\n  }, {\n    key: \"accept\",\n    value: function accept() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        statusCode: 200\n      };\n\n      if (!this.acceptable) {\n        throw new TransactionStateError(\"\".concat(this.message.method, \" not acceptable in state \").concat(this.transaction.state, \".\"));\n      }\n\n      var statusCode = options.statusCode;\n\n      if (statusCode < 200 || statusCode > 299) {\n        throw new TypeError(\"Invalid statusCode: \".concat(statusCode));\n      }\n\n      var response = this.reply(options);\n      return response;\n    }\n  }, {\n    key: \"progress\",\n    value: function progress() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        statusCode: 180\n      };\n\n      if (!this.progressable) {\n        throw new TransactionStateError(\"\".concat(this.message.method, \" not progressable in state \").concat(this.transaction.state, \".\"));\n      }\n\n      var statusCode = options.statusCode;\n\n      if (statusCode < 101 || statusCode > 199) {\n        throw new TypeError(\"Invalid statusCode: \".concat(statusCode));\n      }\n\n      var response = this.reply(options);\n      return response;\n    }\n  }, {\n    key: \"redirect\",\n    value: function redirect(contacts) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        statusCode: 302\n      };\n\n      if (!this.redirectable) {\n        throw new TransactionStateError(\"\".concat(this.message.method, \" not redirectable in state \").concat(this.transaction.state, \".\"));\n      }\n\n      var statusCode = options.statusCode;\n\n      if (statusCode < 300 || statusCode > 399) {\n        throw new TypeError(\"Invalid statusCode: \".concat(statusCode));\n      }\n\n      var contactHeaders = new Array();\n      contacts.forEach(function (contact) {\n        return contactHeaders.push(\"Contact: \".concat(contact.toString()));\n      });\n      options.extraHeaders = (options.extraHeaders || []).concat(contactHeaders);\n      var response = this.reply(options);\n      return response;\n    }\n  }, {\n    key: \"reject\",\n    value: function reject() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        statusCode: 480\n      };\n\n      if (!this.rejectable) {\n        throw new TransactionStateError(\"\".concat(this.message.method, \" not rejectable in state \").concat(this.transaction.state, \".\"));\n      }\n\n      var statusCode = options.statusCode;\n\n      if (statusCode < 400 || statusCode > 699) {\n        throw new TypeError(\"Invalid statusCode: \".concat(statusCode));\n      }\n\n      var response = this.reply(options);\n      return response;\n    } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"trying\",\n    value: function trying(options) {\n      if (!this.tryingable) {\n        throw new TransactionStateError(\"\".concat(this.message.method, \" not tryingable in state \").concat(this.transaction.state, \".\"));\n      }\n\n      var response = this.reply({\n        statusCode: 100\n      });\n      return response;\n    }\n    /**\n     * If the UAS did not find a matching transaction for the CANCEL\n     * according to the procedure above, it SHOULD respond to the CANCEL\n     * with a 481 (Call Leg/Transaction Does Not Exist).  If the transaction\n     * for the original request still exists, the behavior of the UAS on\n     * receiving a CANCEL request depends on whether it has already sent a\n     * final response for the original request.  If it has, the CANCEL\n     * request has no effect on the processing of the original request, no\n     * effect on any session state, and no effect on the responses generated\n     * for the original request.  If the UAS has not issued a final response\n     * for the original request, its behavior depends on the method of the\n     * original request.  If the original request was an INVITE, the UAS\n     * SHOULD immediately respond to the INVITE with a 487 (Request\n     * Terminated).  A CANCEL request has no impact on the processing of\n     * transactions with any other method defined in this specification.\n     * https://tools.ietf.org/html/rfc3261#section-9.2\n     * @param request - Incoming CANCEL request.\n     */\n\n  }, {\n    key: \"receiveCancel\",\n    value: function receiveCancel(message) {\n      // Note: Currently CANCEL is being handled as a special case.\n      // No UAS is created to handle the CANCEL and the response to\n      // it CANCEL is being handled statelessly by the user agent core.\n      // As such, there is currently no way to externally impact the\n      // response to the a CANCEL request.\n      if (this.delegate && this.delegate.onCancel) {\n        this.delegate.onCancel(message);\n      }\n    }\n  }, {\n    key: \"reply\",\n\n    /**\n     * When a UAS wishes to construct a response to a request, it follows\n     * the general procedures detailed in the following subsections.\n     * Additional behaviors specific to the response code in question, which\n     * are not detailed in this section, may also be required.\n     *\n     * Once all procedures associated with the creation of a response have\n     * been completed, the UAS hands the response back to the server\n     * transaction from which it received the request.\n     * https://tools.ietf.org/html/rfc3261#section-8.2.6\n     * @param statusCode - Status code to reply with.\n     * @param options - Reply options bucket.\n     */\n    value: function reply(options) {\n      if (!options.toTag && options.statusCode !== 100) {\n        options.toTag = this.toTag;\n      }\n\n      options.userAgent = options.userAgent || this.core.configuration.userAgentHeaderFieldValue;\n      options.supported = options.supported || this.core.configuration.supportedOptionTagsResponse;\n      var response = constructOutgoingResponse(this.message, options);\n      this.transaction.receiveResponse(options.statusCode, response.message);\n      return response;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this = this;\n\n      // We are the transaction user.\n      var user = {\n        loggerFactory: this.loggerFactory,\n        onStateChange: function onStateChange(newState) {\n          if (newState === TransactionState.Terminated) {\n            // Remove the terminated transaction from the core.\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            _this.core.userAgentServers.delete(userAgentServerId);\n\n            _this.dispose();\n          }\n        },\n        onTransportError: function onTransportError(error) {\n          _this.logger.error(error.message);\n\n          if (_this.delegate && _this.delegate.onTransportError) {\n            _this.delegate.onTransportError(error);\n          } else {\n            _this.logger.error(\"User agent server response transport error.\");\n          }\n        }\n      }; // Create a new transaction with us as the user.\n\n      var transaction = new this.transactionConstructor(this.message, this.core.transport, user);\n      this._transaction = transaction; // Add the new transaction to the core.\n\n      var userAgentServerId = transaction.id;\n      this.core.userAgentServers.set(transaction.id, this);\n    }\n  }, {\n    key: \"loggerFactory\",\n    get: function get() {\n      return this.core.loggerFactory;\n    }\n    /** The transaction associated with this request. */\n\n  }, {\n    key: \"transaction\",\n    get: function get() {\n      if (!this._transaction) {\n        throw new Error(\"Transaction undefined.\");\n      }\n\n      return this._transaction;\n    }\n  }, {\n    key: \"acceptable\",\n    get: function get() {\n      if (this.transaction instanceof InviteServerTransaction) {\n        return this.transaction.state === TransactionState.Proceeding || this.transaction.state === TransactionState.Accepted;\n      }\n\n      if (this.transaction instanceof NonInviteServerTransaction) {\n        return this.transaction.state === TransactionState.Trying || this.transaction.state === TransactionState.Proceeding;\n      }\n\n      throw new Error(\"Unknown transaction type.\");\n    }\n  }, {\n    key: \"progressable\",\n    get: function get() {\n      if (this.transaction instanceof InviteServerTransaction) {\n        return this.transaction.state === TransactionState.Proceeding;\n      }\n\n      if (this.transaction instanceof NonInviteServerTransaction) {\n        return false; // https://tools.ietf.org/html/rfc4320#section-4.1\n      }\n\n      throw new Error(\"Unknown transaction type.\");\n    }\n  }, {\n    key: \"redirectable\",\n    get: function get() {\n      if (this.transaction instanceof InviteServerTransaction) {\n        return this.transaction.state === TransactionState.Proceeding;\n      }\n\n      if (this.transaction instanceof NonInviteServerTransaction) {\n        return this.transaction.state === TransactionState.Trying || this.transaction.state === TransactionState.Proceeding;\n      }\n\n      throw new Error(\"Unknown transaction type.\");\n    }\n  }, {\n    key: \"rejectable\",\n    get: function get() {\n      if (this.transaction instanceof InviteServerTransaction) {\n        return this.transaction.state === TransactionState.Proceeding;\n      }\n\n      if (this.transaction instanceof NonInviteServerTransaction) {\n        return this.transaction.state === TransactionState.Trying || this.transaction.state === TransactionState.Proceeding;\n      }\n\n      throw new Error(\"Unknown transaction type.\");\n    }\n  }, {\n    key: \"tryingable\",\n    get: function get() {\n      if (this.transaction instanceof InviteServerTransaction) {\n        return this.transaction.state === TransactionState.Proceeding;\n      }\n\n      if (this.transaction instanceof NonInviteServerTransaction) {\n        return this.transaction.state === TransactionState.Trying;\n      }\n\n      throw new Error(\"Unknown transaction type.\");\n    }\n  }]);\n\n  return UserAgentServer;\n}();","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/core/user-agents/user-agent-server.js"],"names":["TransactionStateError","constructOutgoingResponse","newTag","InviteServerTransaction","NonInviteServerTransaction","TransactionState","UserAgentServer","transactionConstructor","core","message","delegate","logger","loggerFactory","getLogger","toTag","init","transaction","dispose","options","statusCode","acceptable","method","state","TypeError","response","reply","progressable","contacts","redirectable","contactHeaders","Array","forEach","contact","push","toString","extraHeaders","concat","rejectable","tryingable","onCancel","userAgent","configuration","userAgentHeaderFieldValue","supported","supportedOptionTagsResponse","receiveResponse","user","onStateChange","newState","Terminated","userAgentServers","delete","userAgentServerId","onTransportError","error","transport","_transaction","id","set","Error","Proceeding","Accepted","Trying"],"mappings":"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","sourcesContent":["import { TransactionStateError } from \"../exceptions\";\nimport { constructOutgoingResponse } from \"../messages\";\nimport { newTag } from \"../messages/utils\";\nimport { InviteServerTransaction, NonInviteServerTransaction, TransactionState } from \"../transactions\";\n/**\n * User Agent Server (UAS).\n * @remarks\n * A user agent server is a logical entity\n * that generates a response to a SIP request.  The response\n * accepts, rejects, or redirects the request.  This role lasts\n * only for the duration of that transaction.  In other words, if\n * a piece of software responds to a request, it acts as a UAS for\n * the duration of that transaction.  If it generates a request\n * later, it assumes the role of a user agent client for the\n * processing of that transaction.\n * https://tools.ietf.org/html/rfc3261#section-6\n * @public\n */\nexport class UserAgentServer {\n    constructor(transactionConstructor, core, message, delegate) {\n        this.transactionConstructor = transactionConstructor;\n        this.core = core;\n        this.message = message;\n        this.delegate = delegate;\n        this.logger = this.loggerFactory.getLogger(\"sip.user-agent-server\");\n        this.toTag = message.toTag ? message.toTag : newTag();\n        this.init();\n    }\n    dispose() {\n        this.transaction.dispose();\n    }\n    get loggerFactory() {\n        return this.core.loggerFactory;\n    }\n    /** The transaction associated with this request. */\n    get transaction() {\n        if (!this._transaction) {\n            throw new Error(\"Transaction undefined.\");\n        }\n        return this._transaction;\n    }\n    accept(options = { statusCode: 200 }) {\n        if (!this.acceptable) {\n            throw new TransactionStateError(`${this.message.method} not acceptable in state ${this.transaction.state}.`);\n        }\n        const statusCode = options.statusCode;\n        if (statusCode < 200 || statusCode > 299) {\n            throw new TypeError(`Invalid statusCode: ${statusCode}`);\n        }\n        const response = this.reply(options);\n        return response;\n    }\n    progress(options = { statusCode: 180 }) {\n        if (!this.progressable) {\n            throw new TransactionStateError(`${this.message.method} not progressable in state ${this.transaction.state}.`);\n        }\n        const statusCode = options.statusCode;\n        if (statusCode < 101 || statusCode > 199) {\n            throw new TypeError(`Invalid statusCode: ${statusCode}`);\n        }\n        const response = this.reply(options);\n        return response;\n    }\n    redirect(contacts, options = { statusCode: 302 }) {\n        if (!this.redirectable) {\n            throw new TransactionStateError(`${this.message.method} not redirectable in state ${this.transaction.state}.`);\n        }\n        const statusCode = options.statusCode;\n        if (statusCode < 300 || statusCode > 399) {\n            throw new TypeError(`Invalid statusCode: ${statusCode}`);\n        }\n        const contactHeaders = new Array();\n        contacts.forEach((contact) => contactHeaders.push(`Contact: ${contact.toString()}`));\n        options.extraHeaders = (options.extraHeaders || []).concat(contactHeaders);\n        const response = this.reply(options);\n        return response;\n    }\n    reject(options = { statusCode: 480 }) {\n        if (!this.rejectable) {\n            throw new TransactionStateError(`${this.message.method} not rejectable in state ${this.transaction.state}.`);\n        }\n        const statusCode = options.statusCode;\n        if (statusCode < 400 || statusCode > 699) {\n            throw new TypeError(`Invalid statusCode: ${statusCode}`);\n        }\n        const response = this.reply(options);\n        return response;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    trying(options) {\n        if (!this.tryingable) {\n            throw new TransactionStateError(`${this.message.method} not tryingable in state ${this.transaction.state}.`);\n        }\n        const response = this.reply({ statusCode: 100 });\n        return response;\n    }\n    /**\n     * If the UAS did not find a matching transaction for the CANCEL\n     * according to the procedure above, it SHOULD respond to the CANCEL\n     * with a 481 (Call Leg/Transaction Does Not Exist).  If the transaction\n     * for the original request still exists, the behavior of the UAS on\n     * receiving a CANCEL request depends on whether it has already sent a\n     * final response for the original request.  If it has, the CANCEL\n     * request has no effect on the processing of the original request, no\n     * effect on any session state, and no effect on the responses generated\n     * for the original request.  If the UAS has not issued a final response\n     * for the original request, its behavior depends on the method of the\n     * original request.  If the original request was an INVITE, the UAS\n     * SHOULD immediately respond to the INVITE with a 487 (Request\n     * Terminated).  A CANCEL request has no impact on the processing of\n     * transactions with any other method defined in this specification.\n     * https://tools.ietf.org/html/rfc3261#section-9.2\n     * @param request - Incoming CANCEL request.\n     */\n    receiveCancel(message) {\n        // Note: Currently CANCEL is being handled as a special case.\n        // No UAS is created to handle the CANCEL and the response to\n        // it CANCEL is being handled statelessly by the user agent core.\n        // As such, there is currently no way to externally impact the\n        // response to the a CANCEL request.\n        if (this.delegate && this.delegate.onCancel) {\n            this.delegate.onCancel(message);\n        }\n    }\n    get acceptable() {\n        if (this.transaction instanceof InviteServerTransaction) {\n            return (this.transaction.state === TransactionState.Proceeding || this.transaction.state === TransactionState.Accepted);\n        }\n        if (this.transaction instanceof NonInviteServerTransaction) {\n            return (this.transaction.state === TransactionState.Trying || this.transaction.state === TransactionState.Proceeding);\n        }\n        throw new Error(\"Unknown transaction type.\");\n    }\n    get progressable() {\n        if (this.transaction instanceof InviteServerTransaction) {\n            return this.transaction.state === TransactionState.Proceeding;\n        }\n        if (this.transaction instanceof NonInviteServerTransaction) {\n            return false; // https://tools.ietf.org/html/rfc4320#section-4.1\n        }\n        throw new Error(\"Unknown transaction type.\");\n    }\n    get redirectable() {\n        if (this.transaction instanceof InviteServerTransaction) {\n            return this.transaction.state === TransactionState.Proceeding;\n        }\n        if (this.transaction instanceof NonInviteServerTransaction) {\n            return (this.transaction.state === TransactionState.Trying || this.transaction.state === TransactionState.Proceeding);\n        }\n        throw new Error(\"Unknown transaction type.\");\n    }\n    get rejectable() {\n        if (this.transaction instanceof InviteServerTransaction) {\n            return this.transaction.state === TransactionState.Proceeding;\n        }\n        if (this.transaction instanceof NonInviteServerTransaction) {\n            return (this.transaction.state === TransactionState.Trying || this.transaction.state === TransactionState.Proceeding);\n        }\n        throw new Error(\"Unknown transaction type.\");\n    }\n    get tryingable() {\n        if (this.transaction instanceof InviteServerTransaction) {\n            return this.transaction.state === TransactionState.Proceeding;\n        }\n        if (this.transaction instanceof NonInviteServerTransaction) {\n            return this.transaction.state === TransactionState.Trying;\n        }\n        throw new Error(\"Unknown transaction type.\");\n    }\n    /**\n     * When a UAS wishes to construct a response to a request, it follows\n     * the general procedures detailed in the following subsections.\n     * Additional behaviors specific to the response code in question, which\n     * are not detailed in this section, may also be required.\n     *\n     * Once all procedures associated with the creation of a response have\n     * been completed, the UAS hands the response back to the server\n     * transaction from which it received the request.\n     * https://tools.ietf.org/html/rfc3261#section-8.2.6\n     * @param statusCode - Status code to reply with.\n     * @param options - Reply options bucket.\n     */\n    reply(options) {\n        if (!options.toTag && options.statusCode !== 100) {\n            options.toTag = this.toTag;\n        }\n        options.userAgent = options.userAgent || this.core.configuration.userAgentHeaderFieldValue;\n        options.supported = options.supported || this.core.configuration.supportedOptionTagsResponse;\n        const response = constructOutgoingResponse(this.message, options);\n        this.transaction.receiveResponse(options.statusCode, response.message);\n        return response;\n    }\n    init() {\n        // We are the transaction user.\n        const user = {\n            loggerFactory: this.loggerFactory,\n            onStateChange: (newState) => {\n                if (newState === TransactionState.Terminated) {\n                    // Remove the terminated transaction from the core.\n                    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n                    this.core.userAgentServers.delete(userAgentServerId);\n                    this.dispose();\n                }\n            },\n            onTransportError: (error) => {\n                this.logger.error(error.message);\n                if (this.delegate && this.delegate.onTransportError) {\n                    this.delegate.onTransportError(error);\n                }\n                else {\n                    this.logger.error(\"User agent server response transport error.\");\n                }\n            }\n        };\n        // Create a new transaction with us as the user.\n        const transaction = new this.transactionConstructor(this.message, this.core.transport, user);\n        this._transaction = transaction;\n        // Add the new transaction to the core.\n        const userAgentServerId = transaction.id;\n        this.core.userAgentServers.set(transaction.id, this);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}