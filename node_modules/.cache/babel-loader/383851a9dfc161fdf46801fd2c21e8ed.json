{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport { Events as VoiceEvents } from \"./voice/types/types\";\nimport { useCall } from \"../contexts/CallContext\";\nimport CallStatus from \"../enuns/CallStatus\";\nimport { useConference } from \"../contexts/ConferenceContext\";\nimport { ConferenceEvents } from \"./SquadEventsCommunicator\";\n//import { callbackify } from \"util\";\n// import IContact from \"../alias/IContact\";\n// Comentado para Evitar Warnings no console\n// interface CreateGroupCallback {\n//   (groupCreated: boolean): void;\n// }\nlet squadService;\n\nconst SquadSipCommunicator = () => {\n  const {\n    contacts\n  } = useContact();\n  const {\n    currentCalls,\n    setCurrentCalls,\n    callNumber,\n    setCallNumber,\n    updateConstraints,\n    setUpdateConstraints,\n    blindTransfer,\n    setBlindTransfer,\n    assistedTransfer,\n    setAssistedTransfer\n  } = useCall();\n  const {\n    groups\n  } = useGroup();\n  const {\n    conferenceList\n  } = useConference();\n\n  const init = () => {\n    squadService = SquadService.getInstance({\n      voiceCB: voiceCommuncatorSubscribe\n    });\n  };\n\n  const setNewCall = call => {\n    const cc = new Map(currentCalls);\n    cc.set(call.callId, call);\n    setCurrentCalls(cc);\n  };\n\n  const removeCall = call => {\n    if (call.interval) clearTimeout(call.interval);\n    const cc = new Map(currentCalls);\n    cc.delete(call.callId);\n    setCurrentCalls(cc);\n  };\n\n  const onMakeCall = () => {\n    if (callNumber === null || callNumber === void 0 ? void 0 : callNumber.number) {\n      var _squadService, _squadService$sip;\n\n      if (currentCalls) {\n        Array.from(currentCalls.values()).forEach(call => {\n          if (!call.hold) {\n            call.holdCall();\n          }\n        });\n      }\n\n      const constraints = {\n        useAudio: callNumber === null || callNumber === void 0 ? void 0 : callNumber.useAudio,\n        useVideo: callNumber === null || callNumber === void 0 ? void 0 : callNumber.useVideo\n      };\n      (_squadService = squadService) === null || _squadService === void 0 ? void 0 : (_squadService$sip = _squadService.sip) === null || _squadService$sip === void 0 ? void 0 : _squadService$sip.makeCall(callNumber === null || callNumber === void 0 ? void 0 : callNumber.number, constraints);\n      setCallNumber(undefined);\n    }\n  };\n\n  const onUpdateConstraints = () => {\n    if (updateConstraints) {\n      var _squadService2;\n\n      (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.sip.updateConstraintsParams(updateConstraints);\n      setUpdateConstraints(undefined);\n    }\n  };\n\n  const onBlindTransfer = () => {\n    if (blindTransfer) {\n      var _squadService3;\n\n      (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.sip.sip.blindTransfer(blindTransfer.callId, blindTransfer.number);\n      setBlindTransfer(undefined);\n    }\n  };\n\n  const onAttendedTransfer = () => {\n    if (assistedTransfer) {\n      var _squadService4;\n\n      (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : _squadService4.sip.sip.attendedTransfer(assistedTransfer.firstCallId, assistedTransfer.secondCallId);\n      setAssistedTransfer(undefined);\n    }\n  };\n\n  const onCallHoldChange = (callId, status) => {\n    const currentCallsCopy = new Map(currentCalls);\n    let cpc = currentCallsCopy.get(callId);\n\n    if (cpc) {\n      cpc = { ...cpc\n      };\n      cpc.hold = status;\n      currentCallsCopy.set(cpc.callId, cpc);\n      setCurrentCalls(currentCallsCopy);\n    }\n  };\n\n  const onAcceptCall = (callId, useVideo) => {\n    const currentCallsCopy = new Map(currentCalls);\n    Array.from(currentCalls.values()).filter(cl => cl.callId !== callId).forEach(cl => {\n      var _squadService5;\n\n      (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.sip.holdCall(cl.callId);\n      cl.hold = true;\n      currentCallsCopy.set(cl.callId, cl);\n    });\n    let callCopy = currentCallsCopy.get(callId);\n\n    if (callCopy) {\n      callCopy = { ...callCopy\n      };\n      callCopy.callStatus = CallStatus.CONNECTING;\n      callCopy.sendingVideo = useVideo;\n      currentCallsCopy.set(callCopy.callId, callCopy);\n      setCurrentCalls(currentCallsCopy);\n    }\n  };\n\n  const setConferenceParticipants = data => {\n    const conferenceCall = Array.from(currentCalls.values()).find(c => {\n      var _ref, _data$members$;\n\n      return ((_ref = c.callerObject) === null || _ref === void 0 ? void 0 : _ref.id) === ((_data$members$ = data.members[0]) === null || _data$members$ === void 0 ? void 0 : _data$members$.Conference_Name);\n    });\n\n    if (conferenceCall) {\n      if (!conferenceCall.conferenceParticipants) conferenceCall.conferenceParticipants = data.members.map(m => {\n        return {\n          memberId: m[\"Member-ID\"],\n          callerName: m.Caller_Caller_ID_Name,\n          floor: m.Floor,\n          hear: m.Hear,\n          hold: m.Hold,\n          memberGhost: m[\"Member-Ghost\"],\n          memberType: m[\"Member-Type\"],\n          mute: m.Speak,\n          muteDetect: m[\"Mute-Detect\"],\n          see: m.See,\n          talking: m.Talking,\n          video: m.Video\n        };\n      });\n      setNewCall({ ...conferenceCall\n      });\n    }\n  };\n\n  const setConferenceEvents = call => {\n    var _squadService6;\n\n    if (!call.callerObject.participantPin) return;\n    const callName = call.callerObject.id;\n    (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : _squadService6.events.connect(callName, conferenceEventsSubscribe);\n  };\n\n  const hangupEvents = call => {\n    if (call.remoteIdentity.uri.aor.includes(\"citrus-conference-authenticated-\") || call.remoteIdentity.uri.aor.includes(\"citrus-conference_\")) {\n      var _squadService7;\n\n      (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : _squadService7.events.disconnect();\n    }\n  };\n\n  function voiceCommuncatorSubscribe(event, data) {\n    var _invitation$remoteIde, _invitation$remoteIde2, _ref2, _ref3, _ref4, _inviter$sessionDescr, _inviter$remoteIdenti, _inviter$remoteIdenti2, _ref5, _ref6, _ref7, _data$invitation, _data$inviter;\n\n    let endCall;\n\n    switch (event) {\n      case VoiceEvents.CONNECTED:\n        // squadService?.sip.sip.invite(\"2045\");\n        console.log(\"connected\");\n        break;\n\n      case VoiceEvents.RECEIVED_CALL:\n        const invitation = data;\n        const invitation_caller_id_number = (_invitation$remoteIde = invitation.remoteIdentity.uri.aor) === null || _invitation$remoteIde === void 0 ? void 0 : (_invitation$remoteIde2 = _invitation$remoteIde.split(\"@\")[0]) === null || _invitation$remoteIde2 === void 0 ? void 0 : _invitation$remoteIde2.replace(\"sip:\", \"\").replace(\"citrus-conference-authenticated-\", \"\").replace(\"citrus-conference_\", \"\").split(\"_\")[0];\n        const invitation_ctct_of_number = contacts.find(ctc => ctc.number === invitation_caller_id_number) || groups.find(grp => grp.groupId === invitation_caller_id_number) || conferenceList.find(conf => conf.id === invitation_caller_id_number);\n        let receivedCall;\n\n        endCall = () => {\n          var _squadService8;\n\n          (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : _squadService8.sip.sip.endCall(invitation);\n        };\n\n        receivedCall = {\n          callId: invitation.id,\n          callStatus: CallStatus.RINGING,\n          callerNumber: invitation_caller_id_number,\n          callerObject: invitation_ctct_of_number,\n          callerId: ((_ref2 = invitation_ctct_of_number) === null || _ref2 === void 0 ? void 0 : _ref2.id) || ((_ref3 = invitation_ctct_of_number) === null || _ref3 === void 0 ? void 0 : _ref3.groupId),\n          callerName: invitation_ctct_of_number === null || invitation_ctct_of_number === void 0 ? void 0 : invitation_ctct_of_number.name,\n          callerProfilePicture: invitation_ctct_of_number === null || invitation_ctct_of_number === void 0 ? void 0 : invitation_ctct_of_number.profilePicture,\n          session: invitation,\n          isGroup: !!((_ref4 = invitation_ctct_of_number) === null || _ref4 === void 0 ? void 0 : _ref4.groupId),\n          accept: (useVideo = false) => {\n            var _squadService9;\n\n            return (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : _squadService9.sip.acceptCall(invitation, useVideo);\n          },\n          endCall,\n          micMuted: false,\n          videoMuted: false,\n          hold: false,\n          muteMic: () => {\n            var _squadService10;\n\n            return (_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : _squadService10.sip.muteMic(invitation.id);\n          },\n          unMuteMic: () => {\n            var _squadService11;\n\n            return (_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : _squadService11.sip.unMuteMic(invitation.id);\n          },\n          disableCam: () => {\n            var _squadService12;\n\n            return (_squadService12 = squadService) === null || _squadService12 === void 0 ? void 0 : _squadService12.sip.disableCam(invitation.id);\n          },\n          enableCam: () => {\n            var _squadService13;\n\n            return (_squadService13 = squadService) === null || _squadService13 === void 0 ? void 0 : _squadService13.sip.enableCam(invitation.id);\n          },\n          holdCall: () => {\n            var _squadService14;\n\n            return (_squadService14 = squadService) === null || _squadService14 === void 0 ? void 0 : _squadService14.sip.holdCall(invitation.id);\n          },\n          unHoldCall: () => {\n            var _squadService15;\n\n            return (_squadService15 = squadService) === null || _squadService15 === void 0 ? void 0 : _squadService15.sip.unHoldCall(invitation.id);\n          }\n        };\n        setConferenceEvents(receivedCall);\n        setNewCall(receivedCall);\n        break;\n\n      case VoiceEvents.MAKE_CALL:\n        const inviter = data;\n        const localConstraints = inviter === null || inviter === void 0 ? void 0 : (_inviter$sessionDescr = inviter.sessionDescriptionHandlerOptions) === null || _inviter$sessionDescr === void 0 ? void 0 : _inviter$sessionDescr.constraints;\n        const inviter_caller_id_number = (_inviter$remoteIdenti = inviter.remoteIdentity.uri.aor) === null || _inviter$remoteIdenti === void 0 ? void 0 : (_inviter$remoteIdenti2 = _inviter$remoteIdenti.split(\"@\")[0]) === null || _inviter$remoteIdenti2 === void 0 ? void 0 : _inviter$remoteIdenti2.replace(\"sip:\", \"\").replace(\"citrus-conference-authenticated-\", \"\").replace(\"citrus-conference_\", \"\").split(\"_\")[0];\n        const inviter_ctct_of_number = contacts.find(ctc => ctc.number === inviter_caller_id_number) || groups.find(grp => grp.groupId === inviter_caller_id_number) || conferenceList.find(conf => conf.id === inviter_caller_id_number);\n\n        endCall = () => {\n          var _squadService16;\n\n          (_squadService16 = squadService) === null || _squadService16 === void 0 ? void 0 : _squadService16.sip.sip.endCall(inviter);\n        };\n\n        const sendCall = {\n          callId: inviter.id,\n          callStatus: CallStatus.CALLING,\n          callerNumber: inviter_caller_id_number,\n          callerObject: inviter_ctct_of_number,\n          callerId: ((_ref5 = inviter_ctct_of_number) === null || _ref5 === void 0 ? void 0 : _ref5.id) || ((_ref6 = inviter_ctct_of_number) === null || _ref6 === void 0 ? void 0 : _ref6.groupId),\n          callerName: inviter_ctct_of_number === null || inviter_ctct_of_number === void 0 ? void 0 : inviter_ctct_of_number.name,\n          callerProfilePicture: inviter_ctct_of_number === null || inviter_ctct_of_number === void 0 ? void 0 : inviter_ctct_of_number.profilePicture,\n          session: inviter,\n          isGroup: !!((_ref7 = inviter_ctct_of_number) === null || _ref7 === void 0 ? void 0 : _ref7.groupId),\n          sendingVideo: (localConstraints === null || localConstraints === void 0 ? void 0 : localConstraints.video) !== false,\n          endCall,\n          muteMic: () => {\n            var _squadService17;\n\n            return (_squadService17 = squadService) === null || _squadService17 === void 0 ? void 0 : _squadService17.sip.muteMic(inviter.id);\n          },\n          unMuteMic: () => {\n            var _squadService18;\n\n            return (_squadService18 = squadService) === null || _squadService18 === void 0 ? void 0 : _squadService18.sip.unMuteMic(inviter.id);\n          },\n          disableCam: () => {\n            var _squadService19;\n\n            return (_squadService19 = squadService) === null || _squadService19 === void 0 ? void 0 : _squadService19.sip.disableCam(inviter.id);\n          },\n          enableCam: () => {\n            var _squadService20;\n\n            return (_squadService20 = squadService) === null || _squadService20 === void 0 ? void 0 : _squadService20.sip.enableCam(inviter.id);\n          },\n          holdCall: () => {\n            var _squadService21;\n\n            return (_squadService21 = squadService) === null || _squadService21 === void 0 ? void 0 : _squadService21.sip.holdCall(inviter.id);\n          },\n          unHoldCall: () => {\n            var _squadService22;\n\n            return (_squadService22 = squadService) === null || _squadService22 === void 0 ? void 0 : _squadService22.sip.unHoldCall(inviter.id);\n          }\n        };\n        setConferenceEvents(sendCall);\n        setNewCall(sendCall);\n        console.log(\"make_call\");\n        break;\n\n      case VoiceEvents.CALL_ON_GOING:\n        const callOnGoing = currentCalls.get(data === null || data === void 0 ? void 0 : (_data$invitation = data.invitation) === null || _data$invitation === void 0 ? void 0 : _data$invitation.id) || currentCalls.get(data === null || data === void 0 ? void 0 : (_data$inviter = data.inviter) === null || _data$inviter === void 0 ? void 0 : _data$inviter.id);\n\n        if (callOnGoing) {\n          const cc = { ...callOnGoing\n          };\n          cc.callStatus = CallStatus.ON_GOING;\n          cc.receivingVideo = data.receivingVideo;\n          cc.tagId = data.tagId;\n          setNewCall(cc);\n        }\n\n        break;\n\n      case VoiceEvents.CALL_HANGUP:\n        const hangupCall = currentCalls.get(data.id);\n\n        if (hangupCall) {\n          hangupEvents(hangupCall.session);\n          removeCall(hangupCall);\n        }\n\n        break;\n\n      case VoiceEvents.MUTE_MIC:\n        const currentCallsCopy = new Map(currentCalls);\n        let cc = currentCallsCopy.get(data.callId);\n\n        if (cc) {\n          cc = { ...cc\n          };\n          cc.micMuted = data.status;\n          currentCallsCopy.set(cc.callId, cc);\n          setCurrentCalls(currentCallsCopy);\n        }\n\n        break;\n\n      case VoiceEvents.MUTE_CAM:\n        const currentCallsCp = new Map(currentCalls);\n        let ccp = currentCallsCp.get(data.callId);\n\n        if (ccp) {\n          ccp = { ...ccp\n          };\n          ccp.videoMuted = data.status;\n          currentCallsCp.set(ccp.callId, ccp);\n          setCurrentCalls(currentCallsCp);\n        }\n\n        break;\n\n      case VoiceEvents.HOLD_CALL:\n        onCallHoldChange(data.callId, data.status);\n        break;\n\n      case VoiceEvents.ACCEPTED_CALL:\n        onAcceptCall(data.callId, data.useVideo);\n        break;\n\n      default:\n        console.log(event);\n        break;\n    }\n  }\n\n  const conferenceEventsSubscribe = (event, data) => {\n    switch (event) {\n      case ConferenceEvents.UPDATE:\n        setConferenceParticipants(data);\n        break;\n\n      default:\n        console.error(\"EVENT NOT MAPPED\");\n        console.log(event, data);\n        break;\n    }\n  };\n\n  const updateFunction = () => {\n    var _squadService23;\n\n    (_squadService23 = squadService) === null || _squadService23 === void 0 ? void 0 : _squadService23.updateVoiceSubscribeFunction(voiceCommuncatorSubscribe);\n  };\n\n  useEffect(init, []);\n  useEffect(updateFunction, [contacts, groups, currentCalls, callNumber]);\n  useEffect(onMakeCall, [callNumber]);\n  useEffect(onUpdateConstraints, [updateConstraints]);\n  useEffect(onBlindTransfer, [blindTransfer]);\n  useEffect(onAttendedTransfer, [assistedTransfer]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n\nexport default SquadSipCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadSipCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useGroup","useContact","Events","VoiceEvents","useCall","CallStatus","useConference","ConferenceEvents","squadService","SquadSipCommunicator","contacts","currentCalls","setCurrentCalls","callNumber","setCallNumber","updateConstraints","setUpdateConstraints","blindTransfer","setBlindTransfer","assistedTransfer","setAssistedTransfer","groups","conferenceList","init","getInstance","voiceCB","voiceCommuncatorSubscribe","setNewCall","call","cc","Map","set","callId","removeCall","interval","clearTimeout","delete","onMakeCall","number","Array","from","values","forEach","hold","holdCall","constraints","useAudio","useVideo","sip","makeCall","undefined","onUpdateConstraints","updateConstraintsParams","onBlindTransfer","onAttendedTransfer","attendedTransfer","firstCallId","secondCallId","onCallHoldChange","status","currentCallsCopy","cpc","get","onAcceptCall","filter","cl","callCopy","callStatus","CONNECTING","sendingVideo","setConferenceParticipants","data","conferenceCall","find","c","callerObject","id","members","Conference_Name","conferenceParticipants","map","m","memberId","callerName","Caller_Caller_ID_Name","floor","Floor","hear","Hear","Hold","memberGhost","memberType","mute","Speak","muteDetect","see","See","talking","Talking","video","Video","setConferenceEvents","participantPin","callName","events","connect","conferenceEventsSubscribe","hangupEvents","remoteIdentity","uri","aor","includes","disconnect","event","endCall","CONNECTED","console","log","RECEIVED_CALL","invitation","invitation_caller_id_number","split","replace","invitation_ctct_of_number","ctc","grp","groupId","conf","receivedCall","RINGING","callerNumber","callerId","name","callerProfilePicture","profilePicture","session","isGroup","accept","acceptCall","micMuted","videoMuted","muteMic","unMuteMic","disableCam","enableCam","unHoldCall","MAKE_CALL","inviter","localConstraints","sessionDescriptionHandlerOptions","inviter_caller_id_number","inviter_ctct_of_number","sendCall","CALLING","CALL_ON_GOING","callOnGoing","ON_GOING","receivingVideo","tagId","CALL_HANGUP","hangupCall","MUTE_MIC","MUTE_CAM","currentCallsCp","ccp","HOLD_CALL","ACCEPTED_CALL","UPDATE","error","updateFunction","updateVoiceSubscribeFunction"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport IContact from \"../alias/IContact\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport { Events as VoiceEvents } from \"./voice/types/types\";\r\nimport { useCall } from \"../contexts/CallContext\";\r\nimport ICall from \"../alias/ICall\";\r\nimport { Invitation, Inviter, Session } from \"sip.js\";\r\nimport CallStatus from \"../enuns/CallStatus\";\r\nimport { useConference } from \"../contexts/ConferenceContext\";\r\nimport { ConferenceEvent, ConferenceEvents } from \"./SquadEventsCommunicator\";\r\nimport { IConference } from \"../alias/IConference\";\r\n//import { callbackify } from \"util\";\r\n\r\n// import IContact from \"../alias/IContact\";\r\n// Comentado para Evitar Warnings no console\r\n// interface CreateGroupCallback {\r\n//   (groupCreated: boolean): void;\r\n// }\r\n\r\nlet squadService: SquadService | undefined;\r\n\r\nconst SquadSipCommunicator: React.FC = () => {\r\n  const { contacts } = useContact();\r\n  const {\r\n    currentCalls,\r\n    setCurrentCalls,\r\n    callNumber,\r\n    setCallNumber,\r\n    updateConstraints,\r\n    setUpdateConstraints,\r\n    blindTransfer,\r\n    setBlindTransfer,\r\n    assistedTransfer,\r\n    setAssistedTransfer,\r\n  } = useCall();\r\n  const { groups } = useGroup();\r\n  const { conferenceList } = useConference();\r\n  const init = () => {\r\n    squadService = SquadService.getInstance({\r\n      voiceCB: voiceCommuncatorSubscribe,\r\n    });\r\n  };\r\n  const setNewCall = (call: ICall) => {\r\n    const cc = new Map<string, ICall>(currentCalls);\r\n    cc.set(call.callId, call);\r\n    setCurrentCalls(cc);\r\n  };\r\n  const removeCall = (call: ICall) => {\r\n    if (call.interval) clearTimeout(call.interval);\r\n    const cc = new Map<string, ICall>(currentCalls);\r\n    cc.delete(call.callId);\r\n    setCurrentCalls(cc);\r\n  };\r\n  const onMakeCall = () => {\r\n    if (callNumber?.number) {\r\n      if (currentCalls) {\r\n        Array.from(currentCalls.values()).forEach((call) => {\r\n          if (!call.hold) {\r\n            call.holdCall();\r\n          }\r\n        });\r\n      }\r\n      const constraints = {\r\n        useAudio: callNumber?.useAudio,\r\n        useVideo: callNumber?.useVideo,\r\n      };\r\n      squadService?.sip?.makeCall(callNumber?.number, constraints);\r\n      setCallNumber(undefined);\r\n    }\r\n  };\r\n  const onUpdateConstraints = () => {\r\n    if (updateConstraints) {\r\n      squadService?.sip.updateConstraintsParams(updateConstraints);\r\n      setUpdateConstraints(undefined);\r\n    }\r\n  };\r\n  const onBlindTransfer = () => {\r\n    if (blindTransfer) {\r\n      squadService?.sip.sip.blindTransfer(\r\n        blindTransfer.callId,\r\n        blindTransfer.number\r\n      );\r\n      setBlindTransfer(undefined);\r\n    }\r\n  };\r\n  const onAttendedTransfer = () => {\r\n    if (assistedTransfer) {\r\n      squadService?.sip.sip.attendedTransfer(\r\n        assistedTransfer.firstCallId,\r\n        assistedTransfer.secondCallId\r\n      );\r\n      setAssistedTransfer(undefined);\r\n    }\r\n  };\r\n  const onCallHoldChange = (callId: string, status: boolean) => {\r\n    const currentCallsCopy = new Map(currentCalls);\r\n    let cpc = currentCallsCopy.get(callId);\r\n    if (cpc) {\r\n      cpc = { ...cpc };\r\n      cpc.hold = status;\r\n      currentCallsCopy.set(cpc.callId, cpc);\r\n      setCurrentCalls(currentCallsCopy);\r\n    }\r\n  };\r\n  const onAcceptCall = (callId: string, useVideo: boolean) => {\r\n    const currentCallsCopy = new Map(currentCalls);\r\n    Array.from(currentCalls.values())\r\n      .filter((cl) => cl.callId !== callId)\r\n      .forEach((cl) => {\r\n        squadService?.sip.holdCall(cl.callId);\r\n        cl.hold = true;\r\n        currentCallsCopy.set(cl.callId, cl);\r\n      });\r\n    let callCopy = currentCallsCopy.get(callId);\r\n    if (callCopy) {\r\n      callCopy = { ...callCopy };\r\n      callCopy.callStatus = CallStatus.CONNECTING;\r\n      callCopy.sendingVideo = useVideo;\r\n      currentCallsCopy.set(callCopy.callId, callCopy);\r\n      setCurrentCalls(currentCallsCopy);\r\n    }\r\n  };\r\n  const setConferenceParticipants = (data: ConferenceEvent) => {\r\n    const conferenceCall = Array.from(currentCalls.values()).find(\r\n      (c) =>\r\n        (c.callerObject as IConference)?.id === data.members[0]?.Conference_Name\r\n    );\r\n    if (conferenceCall) {\r\n      if (!conferenceCall.conferenceParticipants)\r\n        conferenceCall.conferenceParticipants = data.members.map((m) => {\r\n          return {\r\n            memberId: m[\"Member-ID\"],\r\n            callerName: m.Caller_Caller_ID_Name,\r\n            floor: m.Floor,\r\n            hear: m.Hear,\r\n            hold: m.Hold,\r\n            memberGhost: m[\"Member-Ghost\"],\r\n            memberType: m[\"Member-Type\"],\r\n            mute: m.Speak,\r\n            muteDetect: m[\"Mute-Detect\"],\r\n            see: m.See,\r\n            talking: m.Talking,\r\n            video: m.Video,\r\n          };\r\n        });\r\n\r\n      setNewCall({ ...conferenceCall });\r\n    }\r\n  };\r\n  const setConferenceEvents = (call: ICall) => {\r\n    if (!(call.callerObject as IConference).participantPin) return;\r\n    const callName = (call.callerObject as IConference).id;\r\n    squadService?.events.connect(callName, conferenceEventsSubscribe);\r\n  };\r\n  const hangupEvents = (call: Session) => {\r\n    if (\r\n      call.remoteIdentity.uri.aor.includes(\r\n        \"citrus-conference-authenticated-\"\r\n      ) ||\r\n      call.remoteIdentity.uri.aor.includes(\"citrus-conference_\")\r\n    ) {\r\n      squadService?.events.disconnect();\r\n    }\r\n  };\r\n  function voiceCommuncatorSubscribe(event: VoiceEvents, data: any) {\r\n    let endCall;\r\n    switch (event) {\r\n      case VoiceEvents.CONNECTED:\r\n        // squadService?.sip.sip.invite(\"2045\");\r\n        console.log(\"connected\");\r\n        break;\r\n      case VoiceEvents.RECEIVED_CALL:\r\n        const invitation = data as Invitation;\r\n        const invitation_caller_id_number = invitation.remoteIdentity.uri.aor\r\n          ?.split(\"@\")[0]\r\n          ?.replace(\"sip:\", \"\")\r\n          .replace(\"citrus-conference-authenticated-\", \"\")\r\n          .replace(\"citrus-conference_\", \"\")\r\n          .split(\"_\")[0];\r\n        const invitation_ctct_of_number =\r\n          contacts.find((ctc) => ctc.number === invitation_caller_id_number) ||\r\n          groups.find((grp) => grp.groupId === invitation_caller_id_number) ||\r\n          conferenceList.find(\r\n            (conf) => conf.id === invitation_caller_id_number\r\n          );\r\n        let receivedCall: ICall;\r\n        endCall = () => {\r\n          squadService?.sip.sip.endCall(invitation);\r\n        };\r\n        receivedCall = {\r\n          callId: invitation.id,\r\n          callStatus: CallStatus.RINGING,\r\n          callerNumber: invitation_caller_id_number,\r\n          callerObject: invitation_ctct_of_number,\r\n          callerId:\r\n            (invitation_ctct_of_number as IContact)?.id ||\r\n            (invitation_ctct_of_number as IGroup)?.groupId,\r\n          callerName: invitation_ctct_of_number?.name,\r\n          callerProfilePicture: invitation_ctct_of_number?.profilePicture,\r\n          session: invitation,\r\n          isGroup: !!(invitation_ctct_of_number as IGroup)?.groupId,\r\n          accept: (useVideo = false) =>\r\n            squadService?.sip.acceptCall(invitation, useVideo),\r\n          endCall,\r\n          micMuted: false,\r\n          videoMuted: false,\r\n          hold: false,\r\n          muteMic: () => squadService?.sip.muteMic(invitation.id),\r\n          unMuteMic: () => squadService?.sip.unMuteMic(invitation.id),\r\n          disableCam: () => squadService?.sip.disableCam(invitation.id),\r\n          enableCam: () => squadService?.sip.enableCam(invitation.id),\r\n          holdCall: () => squadService?.sip.holdCall(invitation.id),\r\n          unHoldCall: () => squadService?.sip.unHoldCall(invitation.id),\r\n        };\r\n        setConferenceEvents(receivedCall);\r\n        setNewCall(receivedCall);\r\n        break;\r\n      case VoiceEvents.MAKE_CALL:\r\n        const inviter = data as Inviter;\r\n        const localConstraints = inviter?.sessionDescriptionHandlerOptions\r\n          ?.constraints as MediaStreamConstraints;\r\n        const inviter_caller_id_number = inviter.remoteIdentity.uri.aor\r\n          ?.split(\"@\")[0]\r\n          ?.replace(\"sip:\", \"\")\r\n          .replace(\"citrus-conference-authenticated-\", \"\")\r\n          .replace(\"citrus-conference_\", \"\")\r\n          .split(\"_\")[0];\r\n        const inviter_ctct_of_number =\r\n          contacts.find((ctc) => ctc.number === inviter_caller_id_number) ||\r\n          groups.find((grp) => grp.groupId === inviter_caller_id_number) ||\r\n          conferenceList.find((conf) => conf.id === inviter_caller_id_number);\r\n\r\n        endCall = () => {\r\n          squadService?.sip.sip.endCall(inviter);\r\n        };\r\n        const sendCall: ICall = {\r\n          callId: inviter.id,\r\n          callStatus: CallStatus.CALLING,\r\n          callerNumber: inviter_caller_id_number,\r\n          callerObject: inviter_ctct_of_number,\r\n          callerId:\r\n            (inviter_ctct_of_number as IContact)?.id ||\r\n            (inviter_ctct_of_number as IGroup)?.groupId,\r\n          callerName: inviter_ctct_of_number?.name,\r\n          callerProfilePicture: inviter_ctct_of_number?.profilePicture,\r\n          session: inviter,\r\n          isGroup: !!(inviter_ctct_of_number as IGroup)?.groupId,\r\n          sendingVideo: localConstraints?.video !== false,\r\n          endCall,\r\n          muteMic: () => squadService?.sip.muteMic(inviter.id),\r\n          unMuteMic: () => squadService?.sip.unMuteMic(inviter.id),\r\n          disableCam: () => squadService?.sip.disableCam(inviter.id),\r\n          enableCam: () => squadService?.sip.enableCam(inviter.id),\r\n          holdCall: () => squadService?.sip.holdCall(inviter.id),\r\n          unHoldCall: () => squadService?.sip.unHoldCall(inviter.id),\r\n        };\r\n        setConferenceEvents(sendCall);\r\n        setNewCall(sendCall);\r\n        console.log(\"make_call\");\r\n        break;\r\n      case VoiceEvents.CALL_ON_GOING:\r\n        const callOnGoing =\r\n          currentCalls.get(data?.invitation?.id) ||\r\n          currentCalls.get(data?.inviter?.id);\r\n        if (callOnGoing) {\r\n          const cc = { ...callOnGoing };\r\n          cc.callStatus = CallStatus.ON_GOING;\r\n          cc.receivingVideo = data.receivingVideo;\r\n          cc.tagId = data.tagId;\r\n          setNewCall(cc);\r\n        }\r\n        break;\r\n      case VoiceEvents.CALL_HANGUP:\r\n        const hangupCall = currentCalls.get(data.id);\r\n        if (hangupCall) {\r\n          hangupEvents(hangupCall.session);\r\n          removeCall(hangupCall);\r\n        }\r\n        break;\r\n      case VoiceEvents.MUTE_MIC:\r\n        const currentCallsCopy = new Map(currentCalls);\r\n        let cc = currentCallsCopy.get(data.callId);\r\n        if (cc) {\r\n          cc = { ...cc };\r\n          cc.micMuted = data.status;\r\n          currentCallsCopy.set(cc.callId, cc);\r\n          setCurrentCalls(currentCallsCopy);\r\n        }\r\n        break;\r\n      case VoiceEvents.MUTE_CAM:\r\n        const currentCallsCp = new Map(currentCalls);\r\n        let ccp = currentCallsCp.get(data.callId);\r\n        if (ccp) {\r\n          ccp = { ...ccp };\r\n          ccp.videoMuted = data.status;\r\n          currentCallsCp.set(ccp.callId, ccp);\r\n          setCurrentCalls(currentCallsCp);\r\n        }\r\n        break;\r\n      case VoiceEvents.HOLD_CALL:\r\n        onCallHoldChange(data.callId, data.status);\r\n        break;\r\n      case VoiceEvents.ACCEPTED_CALL:\r\n        onAcceptCall(data.callId, data.useVideo);\r\n        break;\r\n      default:\r\n        console.log(event);\r\n        break;\r\n    }\r\n  }\r\n  const conferenceEventsSubscribe = (\r\n    event: ConferenceEvents,\r\n    data: ConferenceEvent\r\n  ) => {\r\n    switch (event) {\r\n      case ConferenceEvents.UPDATE:\r\n        setConferenceParticipants(data);\r\n        break;\r\n      default:\r\n        console.error(\"EVENT NOT MAPPED\");\r\n        console.log(event, data);\r\n        break;\r\n    }\r\n  };\r\n  const updateFunction = () => {\r\n    squadService?.updateVoiceSubscribeFunction(voiceCommuncatorSubscribe);\r\n  };\r\n\r\n  useEffect(init, []);\r\n  useEffect(updateFunction, [contacts, groups, currentCalls, callNumber]);\r\n  useEffect(onMakeCall, [callNumber]);\r\n  useEffect(onUpdateConstraints, [updateConstraints]);\r\n  useEffect(onBlindTransfer, [blindTransfer]);\r\n  useEffect(onAttendedTransfer, [assistedTransfer]);\r\n  return <></>;\r\n};\r\n\r\nexport default SquadSipCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}