{"ast":null,"code":"import { parseMessage } from \"../utils/parseUtils\";\nexport default class MessagesBusiness {\n  constructor(api, contacts, groups, user) {\n    this.api = api;\n    this.contacts = contacts;\n    this.groups = groups;\n    this.user = user;\n\n    this.list = (chat, callback) => {\n      var _chat$messages$;\n\n      if (!this.api) return;\n      const lastMessageId = (_chat$messages$ = chat.messages[0]) === null || _chat$messages$ === void 0 ? void 0 : _chat$messages$.id;\n      this.api.getMessages(chat.id, chat.jid.includes(\"@conference.\") ? \"groupchat\" : \"chat\", {\n        paramsUrl: {\n          startingByMessageId: lastMessageId\n        }\n      }, data => {\n        if (data) this.user.get(user => {\n          callback(data.messages.map(msg => parseMessage(msg, this.contacts.getContacts(), this.groups.getGroups(), user)));\n        });else return;\n      });\n    };\n\n    this.save = (payload, callback) => {\n      if (!this.api) return;\n      this.api.favoriteMessage(payload, callback);\n    };\n\n    this.listFavorites = (payload, callback) => {\n      if (!this.api) return;\n      this.api.listFavoriteMessages({\n        paramsUrl: {\n          contactType: payload.contactType\n        }\n      }, callback);\n    };\n\n    this.deleteFavorite = (payload, callback) => {\n      if (!this.api) return;\n      this.api.deleteMessage({\n        messageId: payload.messageId\n      }, callback);\n    };\n\n    this.read = (options, callback) => {\n      if (!this.api) return;\n      this.api.readMessage(options, callback);\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Messages.ts"],"names":["parseMessage","MessagesBusiness","constructor","api","contacts","groups","user","list","chat","callback","lastMessageId","messages","id","getMessages","jid","includes","paramsUrl","startingByMessageId","data","get","map","msg","getContacts","getGroups","save","payload","favoriteMessage","listFavorites","listFavoriteMessages","contactType","deleteFavorite","deleteMessage","messageId","read","options","readMessage"],"mappings":"AAIA,SAASA,YAAT,QAA6B,qBAA7B;AAQA,eAAe,MAAMC,gBAAN,CAAuB;AACpCC,EAAAA,WAAW,CACDC,GADC,EAEDC,QAFC,EAGDC,MAHC,EAIDC,IAJC,EAKT;AAAA,SAJQH,GAIR,GAJQA,GAIR;AAAA,SAHQC,QAGR,GAHQA,QAGR;AAAA,SAFQC,MAER,GAFQA,MAER;AAAA,SADQC,IACR,GADQA,IACR;;AAAA,SACFC,IADE,GACK,CAACC,IAAD,EAAcC,QAAd,KAAgD;AAAA;;AACrD,UAAI,CAAC,KAAKN,GAAV,EAAe;AACf,YAAMO,aAAa,sBAAGF,IAAI,CAACG,QAAL,CAAc,CAAd,CAAH,oDAAG,gBAAkBC,EAAxC;AACA,WAAKT,GAAL,CAASU,WAAT,CACEL,IAAI,CAACI,EADP,EAEEJ,IAAI,CAACM,GAAL,CAASC,QAAT,CAAkB,cAAlB,IAAoC,WAApC,GAAkD,MAFpD,EAGE;AAAEC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,mBAAmB,EAAEP;AAAvB;AAAb,OAHF,EAIGQ,IAAD,IAAU;AACR,YAAIA,IAAJ,EACE,KAAKZ,IAAL,CAAUa,GAAV,CAAeb,IAAD,IAAU;AACtBG,UAAAA,QAAQ,CACNS,IAAI,CAACP,QAAL,CAAcS,GAAd,CAAmBC,GAAD,IAChBrB,YAAY,CACVqB,GADU,EAEV,KAAKjB,QAAL,CAAckB,WAAd,EAFU,EAGV,KAAKjB,MAAL,CAAYkB,SAAZ,EAHU,EAIVjB,IAJU,CADd,CADM,CAAR;AAUD,SAXD,EADF,KAaK;AACN,OAnBH;AAqBD,KAzBC;;AAAA,SA0BFkB,IA1BE,GA0BK,CAACC,OAAD,EAAkChB,QAAlC,KAAwE;AAC7E,UAAG,CAAC,KAAKN,GAAT,EAAc;AACd,WAAKA,GAAL,CAASuB,eAAT,CAAyBD,OAAzB,EAAkChB,QAAlC;AACD,KA7BC;;AAAA,SA8BFkB,aA9BE,GA8Bc,CAACF,OAAD,EAAkChB,QAAlC,KAA6E;AAC3F,UAAG,CAAC,KAAKN,GAAT,EAAc;AACd,WAAKA,GAAL,CAASyB,oBAAT,CAA8B;AAACZ,QAAAA,SAAS,EAAE;AAACa,UAAAA,WAAW,EAAEJ,OAAO,CAACI;AAAtB;AAAZ,OAA9B,EAA+EpB,QAA/E;AACD,KAjCC;;AAAA,SAkCFqB,cAlCE,GAkCe,CAACL,OAAD,EAAgChB,QAAhC,KAAoE;AACnF,UAAG,CAAC,KAAKN,GAAT,EAAc;AACd,WAAKA,GAAL,CAAS4B,aAAT,CAAuB;AAACC,QAAAA,SAAS,EAAEP,OAAO,CAACO;AAApB,OAAvB,EAAuDvB,QAAvD;AACD,KArCC;;AAAA,SAsCFwB,IAtCE,GAsCK,CAACC,OAAD,EAAsBzB,QAAtB,KAAwD;AAC7D,UAAG,CAAC,KAAKN,GAAT,EAAc;AACd,WAAKA,GAAL,CAASgC,WAAT,CAAqBD,OAArB,EAA8BzB,QAA9B;AACD,KAzCC;AAAE;;AANgC","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport { ApiOptions, CreateGroupCallback, DeleteMessageCallback, DeleteMessagePayload, FavoriteMessageCallback, FavoriteMessagePayload, ListFavoriteMessagesCallback } from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport IChat from \"../../alias/IChat\";\r\nimport IMessage from \"../../alias/IMessage\";\r\nimport { parseMessage } from \"../utils/parseUtils\";\r\nimport ContactsBusiness from \"./Contacts\";\r\nimport GroupsBusiness from \"./Groups\";\r\nimport UserBusiness from \"./User\";\r\n\r\ninterface GetMessagesCallback {\r\n  (messages: IMessage[]): void;\r\n}\r\nexport default class MessagesBusiness {\r\n  constructor(\r\n    private api: API,\r\n    private contacts: ContactsBusiness,\r\n    private groups: GroupsBusiness,\r\n    private user: UserBusiness\r\n  ) {}\r\n  list = (chat: IChat, callback: GetMessagesCallback) => {\r\n    if (!this.api) return;\r\n    const lastMessageId = chat.messages[0]?.id;\r\n    this.api.getMessages(\r\n      chat.id,\r\n      chat.jid.includes(\"@conference.\") ? \"groupchat\" : \"chat\",\r\n      { paramsUrl: { startingByMessageId: lastMessageId } },\r\n      (data) => {\r\n        if (data)\r\n          this.user.get((user) => {\r\n            callback(\r\n              data.messages.map((msg) =>\r\n                parseMessage(\r\n                  msg,\r\n                  this.contacts.getContacts(),\r\n                  this.groups.getGroups(),\r\n                  user\r\n                )\r\n              )\r\n            );\r\n          });\r\n        else return;\r\n      }\r\n    );\r\n  };\r\n  save = (payload: FavoriteMessagePayload, callback: FavoriteMessageCallback) => {\r\n    if(!this.api) return;\r\n    this.api.favoriteMessage(payload, callback);\r\n  }\r\n  listFavorites = (payload: FavoriteMessagePayload, callback: ListFavoriteMessagesCallback) => {\r\n    if(!this.api) return;\r\n    this.api.listFavoriteMessages({paramsUrl: {contactType: payload.contactType}}, callback);\r\n  }\r\n  deleteFavorite = (payload: DeleteMessagePayload, callback: DeleteMessageCallback) => {\r\n    if(!this.api) return;\r\n    this.api.deleteMessage({messageId: payload.messageId}, callback);\r\n  }\r\n  read = (options: ApiOptions, callback: CreateGroupCallback) => {\r\n    if(!this.api) return;\r\n    this.api.readMessage(options, callback);\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}