{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\contexts\\\\ChatContext.tsx\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport { activeChat as activeChatData } from \"./../data/chat\"; //alias\n\nexport const ChatContext = createContext({});\nexport const ChatProvider = ({\n  children\n}) => {\n  const [showChat, setShowChat] = useState(false);\n  const [activeChat, setActiveChat] = useState(activeChatData);\n  const [chats, setChats] = useState([]);\n  const [flagToLoadFavoriteMessages, setFlagToLoadFavoriteMessages] = useState(undefined);\n  const [showChatProfileSidebar, setShowChatProfileSidebar] = useState(false);\n  const [forwardMessageList, setForwardMessageList] = useState();\n  const [unreadSum, setUnreadSum] = useState(0);\n  const [replyMsg, setReplyMsg] = useState();\n  const [favoriteMessagePayload, setFavoriteMessagePayload] = useState(undefined);\n  const [favoriteMessages, setFavoriteMessages] = useState(null);\n  const [deleteFavoriteMessage, setDeleteFavoriteMessage] = useState(undefined);\n\n  const openChat = obj => {\n    if ((activeChat === null || activeChat === void 0 ? void 0 : activeChat.jid) === obj.jid) return;\n    setShowChat(true);\n    setChats(chats.map(item => {\n      if (item.jid === obj.jid) {\n        setUnreadSum(unreadSum - item.unRead);\n        item.unRead = 0;\n        item.messageLoaded = item.messages.length >= 20 ? false : true;\n        setActiveChat(item);\n      }\n\n      return item;\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(ChatContext.Provider, {\n    value: {\n      showChat,\n      setShowChat,\n      activeChat,\n      setActiveChat,\n      openChat,\n      chats,\n      setChats,\n      forwardMessageList,\n      setForwardMessageList,\n      replyMsg,\n      setReplyMsg,\n      showChatProfileSidebar,\n      setShowChatProfileSidebar,\n      favoriteMessagePayload,\n      setFavoriteMessagePayload,\n      flagToLoadFavoriteMessages,\n      setFlagToLoadFavoriteMessages,\n      favoriteMessages,\n      setFavoriteMessages,\n      deleteFavoriteMessage,\n      setDeleteFavoriteMessage,\n      unreadSum,\n      setUnreadSum\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport function useChat() {\n  return useContext(ChatContext);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/contexts/ChatContext.tsx"],"names":["React","createContext","useContext","useState","activeChat","activeChatData","ChatContext","ChatProvider","children","showChat","setShowChat","setActiveChat","chats","setChats","flagToLoadFavoriteMessages","setFlagToLoadFavoriteMessages","undefined","showChatProfileSidebar","setShowChatProfileSidebar","forwardMessageList","setForwardMessageList","unreadSum","setUnreadSum","replyMsg","setReplyMsg","favoriteMessagePayload","setFavoriteMessagePayload","favoriteMessages","setFavoriteMessages","deleteFavoriteMessage","setDeleteFavoriteMessage","openChat","obj","jid","map","item","unRead","messageLoaded","messages","length","useChat"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport { activeChat as activeChatData } from \"./../data/chat\";\r\n\r\n//alias\r\nimport IChat from \"../alias/IChat\";\r\nimport IContact from \"../alias/IContact\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport {\r\n  FavoriteMessagePayload,\r\n  ListFavoriteMessagesPayload,\r\n  FavoriteMessage,\r\n} from \"@digivox/apicommunicator/dist/types/types/types\";\r\n\r\ninterface IChatContextData {\r\n  showChat: boolean;\r\n  setShowChat(value: boolean): void;\r\n  activeChat: IChat;\r\n  setActiveChat(value: IChat): void;\r\n  openChat(obj: IChat): void;\r\n  chats: IChat[];\r\n  setChats(value: IChat[]): void;\r\n  forwardMessageList: (IContact | IGroup)[] | undefined;\r\n  setForwardMessageList(value: (IContact | IGroup)[] | undefined): void;\r\n  replyMsg: IMessage | undefined;\r\n  setReplyMsg(msg: IMessage | undefined): void;\r\n  showChatProfileSidebar: boolean;\r\n  setShowChatProfileSidebar(value: boolean): void;\r\n  favoriteMessagePayload: FavoriteMessagePayload | undefined;\r\n  setFavoriteMessagePayload(value: FavoriteMessagePayload | undefined): void;\r\n  flagToLoadFavoriteMessages: ListFavoriteMessagesPayload | undefined;\r\n  setFlagToLoadFavoriteMessages(\r\n    value: ListFavoriteMessagesPayload | undefined\r\n  ): void;\r\n  favoriteMessages: FavoriteMessage[] | null;\r\n  setFavoriteMessages(value: FavoriteMessage[]): void;\r\n  deleteFavoriteMessage: IDeleteMessage | undefined;\r\n  setDeleteFavoriteMessage(value: IDeleteMessage | undefined): void;\r\n  setUnreadSum(value: number): void;\r\n  unreadSum: number;\r\n}\r\n\r\ninterface IDeleteMessage {\r\n  messageId: string;\r\n  contactType: string;\r\n  id: string;\r\n}\r\n\r\nexport const ChatContext = createContext<IChatContextData>(\r\n  {} as IChatContextData\r\n);\r\n\r\nexport const ChatProvider: React.FC = ({ children }) => {\r\n  const [showChat, setShowChat] = useState(false);\r\n  const [activeChat, setActiveChat] = useState(activeChatData);\r\n  const [chats, setChats] = useState<IChat[]>([]);\r\n  const [flagToLoadFavoriteMessages, setFlagToLoadFavoriteMessages] = useState<\r\n    ListFavoriteMessagesPayload | undefined\r\n  >(undefined);\r\n  const [showChatProfileSidebar, setShowChatProfileSidebar] = useState(false);\r\n  const [forwardMessageList, setForwardMessageList] = useState<\r\n    (IContact | IGroup)[] | undefined\r\n  >();\r\n  const [unreadSum, setUnreadSum] = useState(0);\r\n  const [replyMsg, setReplyMsg] = useState<IMessage | undefined>();\r\n  const [favoriteMessagePayload, setFavoriteMessagePayload] = useState<\r\n    FavoriteMessagePayload | undefined\r\n  >(undefined);\r\n  const [favoriteMessages, setFavoriteMessages] = useState<\r\n  FavoriteMessage[] | null\r\n  >(null);\r\n  const [deleteFavoriteMessage, setDeleteFavoriteMessage] = useState<\r\n    IDeleteMessage | undefined\r\n  >(undefined);\r\n  const openChat = (obj: IChat) => {\r\n    if (activeChat?.jid === obj.jid) return;\r\n    setShowChat(true);\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.jid === obj.jid) {\r\n          setUnreadSum(unreadSum - item.unRead);\r\n          item.unRead = 0;\r\n          item.messageLoaded = item.messages.length >= 20 ? false : true;\r\n          setActiveChat(item);\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        showChat,\r\n        setShowChat,\r\n        activeChat,\r\n        setActiveChat,\r\n        openChat,\r\n        chats,\r\n        setChats,\r\n        forwardMessageList,\r\n        setForwardMessageList,\r\n        replyMsg,\r\n        setReplyMsg,\r\n        showChatProfileSidebar,\r\n        setShowChatProfileSidebar,\r\n        favoriteMessagePayload,\r\n        setFavoriteMessagePayload,\r\n        flagToLoadFavoriteMessages,\r\n        setFlagToLoadFavoriteMessages,\r\n        favoriteMessages,\r\n        setFavoriteMessages,\r\n        deleteFavoriteMessage,\r\n        setDeleteFavoriteMessage,\r\n        unreadSum,\r\n        setUnreadSum\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useChat() {\r\n  return useContext(ChatContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}