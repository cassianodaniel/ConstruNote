{"ast":null,"code":"'use strict';\n/**\n * References\n * https://xmpp.org/rfcs/rfc6120.html#streams-negotiation Stream Negotiation\n * https://xmpp.org/extensions/xep-0170.html XEP-0170: Recommended Order of Stream Feature Negotiation\n * https://xmpp.org/registrar/stream-features.html XML Stream Features\n */\n\nvar route = require('./route');\n\nmodule.exports = function (_ref) {\n  var middleware = _ref.middleware;\n  middleware.use(route());\n\n  function use(name, xmlns, handler) {\n    return middleware.use(function (ctx, next) {\n      var stanza = ctx.stanza;\n      if (!stanza.is('features', 'http://etherx.jabber.org/streams')) return next();\n      var feature = stanza.getChild(name, xmlns);\n      if (!feature) return next();\n      return handler(ctx, next, feature);\n    });\n  }\n\n  return {\n    use: use\n  };\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/stream-features/index.js"],"names":["route","require","module","exports","middleware","use","name","xmlns","handler","ctx","next","stanza","is","feature","getChild"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,gBAAuB;AAAA,MAAbC,UAAa,QAAbA,UAAa;AACtCA,EAAAA,UAAU,CAACC,GAAX,CAAeL,KAAK,EAApB;;AAEA,WAASK,GAAT,CAAaC,IAAb,EAAmBC,KAAnB,EAA0BC,OAA1B,EAAmC;AACjC,WAAOJ,UAAU,CAACC,GAAX,CAAe,UAACI,GAAD,EAAMC,IAAN,EAAe;AAAA,UAC5BC,MAD4B,GAClBF,GADkB,CAC5BE,MAD4B;AAEnC,UAAI,CAACA,MAAM,CAACC,EAAP,CAAU,UAAV,EAAsB,kCAAtB,CAAL,EACE,OAAOF,IAAI,EAAX;AACF,UAAMG,OAAO,GAAGF,MAAM,CAACG,QAAP,CAAgBR,IAAhB,EAAsBC,KAAtB,CAAhB;AACA,UAAI,CAACM,OAAL,EAAc,OAAOH,IAAI,EAAX;AACd,aAAOF,OAAO,CAACC,GAAD,EAAMC,IAAN,EAAYG,OAAZ,CAAd;AACD,KAPM,CAAP;AAQD;;AAED,SAAO;AACLR,IAAAA,GAAG,EAAHA;AADK,GAAP;AAGD,CAjBD","sourcesContent":["'use strict'\n\n/**\n * References\n * https://xmpp.org/rfcs/rfc6120.html#streams-negotiation Stream Negotiation\n * https://xmpp.org/extensions/xep-0170.html XEP-0170: Recommended Order of Stream Feature Negotiation\n * https://xmpp.org/registrar/stream-features.html XML Stream Features\n */\n\nconst route = require('./route')\n\nmodule.exports = function({middleware}) {\n  middleware.use(route())\n\n  function use(name, xmlns, handler) {\n    return middleware.use((ctx, next) => {\n      const {stanza} = ctx\n      if (!stanza.is('features', 'http://etherx.jabber.org/streams'))\n        return next()\n      const feature = stanza.getChild(name, xmlns)\n      if (!feature) return next()\n      return handler(ctx, next, feature)\n    })\n  }\n\n  return {\n    use,\n  }\n}\n"]},"metadata":{},"sourceType":"script"}