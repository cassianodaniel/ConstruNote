{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import SimpleBar from\"simplebar-react\";import{Spinner}from\"reactstrap\";import{useChat}from\"../contexts/ChatContext\";import ChatMessage from\"./ChatMessage\";import\"./../assets/css/reply-msg.scss\";var scrollableNodeRef=React.createRef();var ChatBody=function ChatBody(){var _useChat=useChat(),activeChat=_useChat.activeChat,replyMsg=_useChat.replyMsg;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),showButtonBottom=_useState2[0],setShowButtonBottom=_useState2[1];var onScroll=function onScroll(ev){var _ev$target,_ev$target2;if((ev===null||ev===void 0?void 0:(_ev$target=ev.target)===null||_ev$target===void 0?void 0:_ev$target.scrollTop)<=(ev===null||ev===void 0?void 0:(_ev$target2=ev.target)===null||_ev$target2===void 0?void 0:_ev$target2.scrollHeight)-1000){setShowButtonBottom(true);}else{setShowButtonBottom(false);}};var scrolltoBottom=function scrolltoBottom(){var _scrollableNodeRef$cu;(_scrollableNodeRef$cu=scrollableNodeRef.current)===null||_scrollableNodeRef$cu===void 0?void 0:_scrollableNodeRef$cu.scrollTo({top:99999999});setShowButtonBottom(false);};var checkScroll=function checkScroll(){scrolltoBottom();if(scrollableNodeRef===null||scrollableNodeRef===void 0?void 0:scrollableNodeRef.current){scrollableNodeRef.current.onscroll=onScroll;}};var checkLoading=function checkLoading(){if(!activeChat.messageLoaded){scrolltoBottom();}};useEffect(checkLoading,[activeChat.messageLoaded]);useEffect(checkScroll,[activeChat]);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(SimpleBar,{className:\"chat-conversation \".concat(replyMsg?\"reply\":\"\",\" p-3 p-lg-4\"),id:\"messages\",scrollableNodeProps:{ref:scrollableNodeRef}},/*#__PURE__*/React.createElement(\"div\",{className:\"d-flex justify-content-center\"},/*#__PURE__*/React.createElement(Spinner,{color:\"primary\",className:\"\".concat(activeChat.messageLoaded?\"\":\"d-none\")})),/*#__PURE__*/React.createElement(\"ul\",{className:\"list-unstyled mb-0 \".concat(activeChat.messageLoaded?\"d-none\":\"\")},activeChat.messages.map(function(message,key){return/*#__PURE__*/React.createElement(ChatMessage,{activeChat:activeChat,message:message,key:key});}))),showButtonBottom&&/*#__PURE__*/React.createElement(\"div\",{className:\"btn-chat-down\",style:replyMsg?{bottom:\"190px\"}:{},onClick:scrolltoBottom},/*#__PURE__*/React.createElement(\"i\",{className:\"ri-arrow-down-s-line\"})));};export default ChatBody;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ChatBody.tsx"],"names":["React","useState","useEffect","SimpleBar","Spinner","useChat","ChatMessage","scrollableNodeRef","createRef","ChatBody","activeChat","replyMsg","showButtonBottom","setShowButtonBottom","onScroll","ev","target","scrollTop","scrollHeight","scrolltoBottom","current","scrollTo","top","checkScroll","onscroll","checkLoading","messageLoaded","ref","messages","map","message","key","bottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport ChatMessage from \"./ChatMessage\";\r\n\r\nimport \"./../assets/css/reply-msg.scss\";\r\n\r\nconst scrollableNodeRef = React.createRef<HTMLDivElement>();\r\n\r\nconst ChatBody: React.FC = () => {\r\n  const { activeChat, replyMsg } = useChat();\r\n  const [showButtonBottom, setShowButtonBottom] = useState(false);\r\n\r\n  const onScroll = (ev: any) => {\r\n    if (ev?.target?.scrollTop <= ev?.target?.scrollHeight - 1000) {\r\n      setShowButtonBottom(true);\r\n    } else {\r\n      setShowButtonBottom(false);\r\n    }\r\n  };\r\n\r\n  const scrolltoBottom = () => {\r\n    scrollableNodeRef.current?.scrollTo({\r\n      top: 99999999,\r\n    });\r\n    setShowButtonBottom(false);\r\n  };\r\n\r\n  const checkScroll = () => {\r\n    scrolltoBottom();\r\n    if (scrollableNodeRef?.current) {\r\n      scrollableNodeRef.current.onscroll = onScroll;\r\n    }\r\n  };\r\n\r\n  const checkLoading = () => {\r\n    if (!activeChat.messageLoaded) {\r\n      scrolltoBottom();\r\n    }\r\n  };\r\n\r\n  useEffect(checkLoading, [activeChat.messageLoaded]);\r\n  useEffect(checkScroll, [activeChat]);\r\n\r\n  return (\r\n    <>\r\n      {/* <DragNDropCaller /> */}\r\n      <SimpleBar\r\n        className={`chat-conversation ${replyMsg ? \"reply\" : \"\"} p-3 p-lg-4`}\r\n        id=\"messages\"\r\n        scrollableNodeProps={{ ref: scrollableNodeRef }}\r\n      >\r\n        <div className={`d-flex justify-content-center`}>\r\n          <Spinner\r\n            color=\"primary\"\r\n            className={`${activeChat.messageLoaded ? \"\" : \"d-none\"}`}\r\n          />\r\n        </div>\r\n        <ul\r\n          className={`list-unstyled mb-0 ${\r\n            activeChat.messageLoaded ? \"d-none\" : \"\"\r\n          }`}\r\n        >\r\n          {activeChat.messages.map((message, key) => (\r\n            <ChatMessage activeChat={activeChat} message={message} key={key} />\r\n          ))}\r\n        </ul>\r\n      </SimpleBar>\r\n      {showButtonBottom && (\r\n        <div\r\n          className=\"btn-chat-down\"\r\n          style={replyMsg ? { bottom: \"190px\" } : {}}\r\n          onClick={scrolltoBottom}\r\n        >\r\n          <i className=\"ri-arrow-down-s-line\"></i>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatBody;\r\n"]},"metadata":{},"sourceType":"module"}