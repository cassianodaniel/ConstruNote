{"ast":null,"code":"'use strict';\n\nfunction parseURI(URI) {\n  let {\n    port,\n    hostname,\n    protocol\n  } = new URL(URI); // https://github.com/nodejs/node/issues/12410#issuecomment-294138912\n\n  if (hostname === '[::1]') {\n    hostname = '::1';\n  }\n\n  return {\n    port,\n    hostname,\n    protocol\n  };\n}\n\nfunction parseHost(host) {\n  const {\n    port,\n    hostname\n  } = parseURI(`http://${host}`);\n  return {\n    port,\n    hostname\n  };\n}\n\nfunction parseService(service) {\n  return service.includes('://') ? parseURI(service) : parseHost(service);\n}\n\nObject.assign(module.exports, {\n  parseURI,\n  parseHost,\n  parseService\n});","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/connection/lib/util.js"],"names":["parseURI","URI","port","hostname","protocol","URL","parseHost","host","parseService","service","includes","Object","assign","module","exports"],"mappings":"AAAA;;AAEA,SAASA,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,MAAI;AAACC,IAAAA,IAAD;AAAOC,IAAAA,QAAP;AAAiBC,IAAAA;AAAjB,MAA6B,IAAIC,GAAJ,CAAQJ,GAAR,CAAjC,CADqB,CAErB;;AACA,MAAIE,QAAQ,KAAK,OAAjB,EAA0B;AACxBA,IAAAA,QAAQ,GAAG,KAAX;AACD;;AAED,SAAO;AAACD,IAAAA,IAAD;AAAOC,IAAAA,QAAP;AAAiBC,IAAAA;AAAjB,GAAP;AACD;;AAED,SAASE,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,QAAM;AAACL,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAmBH,QAAQ,CAAE,UAASO,IAAK,EAAhB,CAAjC;AACA,SAAO;AAACL,IAAAA,IAAD;AAAOC,IAAAA;AAAP,GAAP;AACD;;AAED,SAASK,YAAT,CAAsBC,OAAtB,EAA+B;AAC7B,SAAOA,OAAO,CAACC,QAAR,CAAiB,KAAjB,IAA0BV,QAAQ,CAACS,OAAD,CAAlC,GAA8CH,SAAS,CAACG,OAAD,CAA9D;AACD;;AAEDE,MAAM,CAACC,MAAP,CAAcC,MAAM,CAACC,OAArB,EAA8B;AAACd,EAAAA,QAAD;AAAWM,EAAAA,SAAX;AAAsBE,EAAAA;AAAtB,CAA9B","sourcesContent":["'use strict'\n\nfunction parseURI(URI) {\n  let {port, hostname, protocol} = new URL(URI)\n  // https://github.com/nodejs/node/issues/12410#issuecomment-294138912\n  if (hostname === '[::1]') {\n    hostname = '::1'\n  }\n\n  return {port, hostname, protocol}\n}\n\nfunction parseHost(host) {\n  const {port, hostname} = parseURI(`http://${host}`)\n  return {port, hostname}\n}\n\nfunction parseService(service) {\n  return service.includes('://') ? parseURI(service) : parseHost(service)\n}\n\nObject.assign(module.exports, {parseURI, parseHost, parseService})\n"]},"metadata":{},"sourceType":"script"}