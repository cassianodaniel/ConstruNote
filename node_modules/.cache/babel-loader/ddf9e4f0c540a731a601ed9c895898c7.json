{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\contexts\\\\ConferenceContext.tsx\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport ChatType from \"../enuns/ChatType\";\nimport ScreenType from \"../enuns/ScreenType\";\nimport { useChat } from \"./ChatContext\";\nimport { useMainBox } from \"./MainBoxContext\";\nexport const ConferenceContext = createContext({});\nexport const ConferenceProvider = ({\n  children\n}) => {\n  const [listRooms, setListRooms] = useState(false);\n  const [conferenceList, setConferenceList] = useState([]);\n  const [createConference, setCreateConference] = useState();\n  const [editConference, setEditConference] = useState();\n  const [deleteConference, setDeleteConference] = useState();\n  const [conferenceToUpdate, setConferenceToUpdate] = useState();\n  const [conferenceToRemove, setConferenceToRemove] = useState();\n  const [checkedParticipants, setCheckedParticipants] = useState();\n  const [conferenceToInsertMember, setConferenceToInsertMember] = useState();\n  const [addingParticipantsPayload, setAddingParticipantsPayload] = useState(undefined);\n  const [removingParticipantsPayload, setRemovingParticipantsPayload] = useState(undefined);\n  const {\n    activeChat,\n    chats,\n    setChats,\n    setActiveChat\n  } = useChat();\n  const {\n    setScreen\n  } = useMainBox();\n\n  const openConference = obj => {\n    if ((activeChat === null || activeChat === void 0 ? void 0 : activeChat.jid) === obj.jid) return;\n    let find = false;\n    setChats(chats.map(item => {\n      if (item.jid === obj.jid) {\n        item.unRead = 0;\n        item.mencioned = 0;\n        item.messageLoaded = item.messages.length >= 20 ? false : true;\n        setScreen(ScreenType.CHAT);\n        setActiveChat(item);\n        find = true;\n      }\n\n      return item;\n    }));\n\n    if (!find) {\n      let newChat = {\n        id: obj.jid.split(\"@\")[0],\n        jid: obj.jid,\n        name: obj.name,\n        messageLoaded: true,\n        unRead: 0,\n        chatType: ChatType.CONFERENCE,\n        inputMessage: \"\",\n        isTyping: false,\n        messages: [],\n        favorite: false,\n        added: true,\n        conferenceRoomParticipants: obj.conferenceRoomParticipants,\n        mencioned: 0\n      };\n      setScreen(ScreenType.CHAT);\n      setActiveChat(newChat);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ConferenceContext.Provider, {\n    value: {\n      createConference,\n      setCreateConference,\n      editConference,\n      setEditConference,\n      deleteConference,\n      setDeleteConference,\n      conferenceList,\n      setConferenceList,\n      listRooms,\n      setListRooms,\n      openConference,\n      conferenceToUpdate,\n      setConferenceToUpdate,\n      conferenceToRemove,\n      setConferenceToRemove,\n      checkedParticipants,\n      setCheckedParticipants,\n      conferenceToInsertMember,\n      setConferenceToInsertMember,\n      addingParticipantsPayload,\n      setAddingParticipantsPayload,\n      removingParticipantsPayload,\n      setRemovingParticipantsPayload\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport function useConference() {\n  return useContext(ConferenceContext);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/contexts/ConferenceContext.tsx"],"names":["React","createContext","useContext","useState","ChatType","ScreenType","useChat","useMainBox","ConferenceContext","ConferenceProvider","children","listRooms","setListRooms","conferenceList","setConferenceList","createConference","setCreateConference","editConference","setEditConference","deleteConference","setDeleteConference","conferenceToUpdate","setConferenceToUpdate","conferenceToRemove","setConferenceToRemove","checkedParticipants","setCheckedParticipants","conferenceToInsertMember","setConferenceToInsertMember","addingParticipantsPayload","setAddingParticipantsPayload","undefined","removingParticipantsPayload","setRemovingParticipantsPayload","activeChat","chats","setChats","setActiveChat","setScreen","openConference","obj","jid","find","map","item","unRead","mencioned","messageLoaded","messages","length","CHAT","newChat","id","split","name","chatType","CONFERENCE","inputMessage","isTyping","favorite","added","conferenceRoomParticipants","useConference"],"mappings":"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","sourcesContent":["import { ConferenceRoomParticipant } from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport React, { createContext, useContext, useState } from \"react\";\r\nimport IChat from \"../alias/IChat\";\r\nimport { IConference } from \"../alias/IConference\";\r\nimport ICreateConference from \"../alias/ICreateConference\";\r\nimport ChatType from \"../enuns/ChatType\";\r\nimport ScreenType from \"../enuns/ScreenType\";\r\nimport { useChat } from \"./ChatContext\";\r\nimport { useMainBox } from \"./MainBoxContext\";\r\n\r\ninterface IAddingParticipantsPayload {\r\n  conferenceId: string;\r\n  data: ConferenceRoomParticipant[];\r\n}\r\n\r\ninterface IRemovingParticipantsPayload {\r\n  conferenceId: string;\r\n  participantId: string;\r\n}\r\n\r\ninterface IConferenceContextData {\r\n  createConference: ICreateConference | undefined;\r\n  setCreateConference(value: ICreateConference | undefined): void;\r\n  editConference: IConference | undefined;\r\n  setEditConference(value: IConference | undefined): void;\r\n  deleteConference: IConference | undefined;\r\n  setDeleteConference(value: IConference | undefined): void;\r\n  listRooms: boolean;\r\n  setListRooms(val: boolean): void;\r\n  conferenceList: IConference[];\r\n  setConferenceList(list: IConference[]): void;\r\n  openConference(value: IConference): void;\r\n  conferenceToUpdate: IConference | undefined;\r\n  setConferenceToUpdate(value: IConference | undefined): void;\r\n  conferenceToRemove: IConference | undefined;\r\n  setConferenceToRemove(value: IConference | undefined): void;\r\n  checkedParticipants: any;\r\n  setCheckedParticipants(value: any): void;\r\n  conferenceToInsertMember: any;\r\n  setConferenceToInsertMember(value: any): void;\r\n  addingParticipantsPayload: IAddingParticipantsPayload | undefined;\r\n  setAddingParticipantsPayload(\r\n    value: IAddingParticipantsPayload | undefined\r\n  ): void;\r\n  removingParticipantsPayload: IRemovingParticipantsPayload | undefined;\r\n  setRemovingParticipantsPayload(\r\n    value: IRemovingParticipantsPayload | undefined\r\n  ): void;\r\n}\r\n\r\nexport const ConferenceContext = createContext<IConferenceContextData>(\r\n  {} as IConferenceContextData\r\n);\r\n\r\nexport const ConferenceProvider: React.FC = ({ children }) => {\r\n  const [listRooms, setListRooms] = useState<boolean>(false);\r\n  const [conferenceList, setConferenceList] = useState<IConference[]>([]);\r\n  const [createConference, setCreateConference] = useState<ICreateConference>();\r\n  const [editConference, setEditConference] = useState<IConference>();\r\n  const [deleteConference, setDeleteConference] = useState<IConference>();\r\n  const [conferenceToUpdate, setConferenceToUpdate] = useState<IConference>();\r\n  const [conferenceToRemove, setConferenceToRemove] = useState<IConference>();\r\n  const [checkedParticipants, setCheckedParticipants] = useState();\r\n  const [conferenceToInsertMember, setConferenceToInsertMember] = useState();\r\n  const [addingParticipantsPayload, setAddingParticipantsPayload] = useState<\r\n    IAddingParticipantsPayload | undefined\r\n  >(undefined);\r\n  const [\r\n    removingParticipantsPayload,\r\n    setRemovingParticipantsPayload,\r\n  ] = useState<IRemovingParticipantsPayload | undefined>(undefined);\r\n  const { activeChat, chats, setChats, setActiveChat } = useChat();\r\n  const { setScreen } = useMainBox();\r\n\r\n  const openConference = (obj: IConference) => {\r\n    if (activeChat?.jid === obj.jid) return;\r\n    let find = false;\r\n\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.jid === obj.jid) {\r\n          item.unRead = 0;\r\n          item.mencioned = 0;\r\n          item.messageLoaded = item.messages.length >= 20 ? false : true;\r\n          setScreen(ScreenType.CHAT);\r\n          setActiveChat(item);\r\n          find = true;\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n\r\n    if (!find) {\r\n      let newChat: IChat = {\r\n        id: obj.jid.split(\"@\")[0],\r\n        jid: obj.jid,\r\n        name: obj.name,\r\n        messageLoaded: true,\r\n        unRead: 0,\r\n        chatType: ChatType.CONFERENCE,\r\n        inputMessage: \"\",\r\n        isTyping: false,\r\n        messages: [],\r\n        favorite: false,\r\n        added: true,\r\n        conferenceRoomParticipants: obj.conferenceRoomParticipants,\r\n        mencioned: 0,\r\n      };\r\n      setScreen(ScreenType.CHAT);\r\n      setActiveChat(newChat);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ConferenceContext.Provider\r\n      value={{\r\n        createConference,\r\n        setCreateConference,\r\n        editConference,\r\n        setEditConference,\r\n        deleteConference,\r\n        setDeleteConference,\r\n        conferenceList,\r\n        setConferenceList,\r\n        listRooms,\r\n        setListRooms,\r\n        openConference,\r\n        conferenceToUpdate,\r\n        setConferenceToUpdate,\r\n        conferenceToRemove,\r\n        setConferenceToRemove,\r\n        checkedParticipants,\r\n        setCheckedParticipants,\r\n        conferenceToInsertMember,\r\n        setConferenceToInsertMember,\r\n        addingParticipantsPayload,\r\n        setAddingParticipantsPayload,\r\n        removingParticipantsPayload,\r\n        setRemovingParticipantsPayload,\r\n      }}\r\n    >\r\n      {children}\r\n    </ConferenceContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useConference() {\r\n  return useContext(ConferenceContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}