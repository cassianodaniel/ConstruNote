{"ast":null,"code":"import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration, { friendlyDuration } from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\nconst INVALID = \"Invalid Interval\"; // checks if the start is equal to or before the end\n\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\"end before start\", `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`);\n  } else {\n    return null;\n  }\n}\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.\n * * **Accessors** Use {@link start} and {@link end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.\n * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}.\n * * **Output** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toISODate}, {@link toISOTime}, {@link toFormat}, and {@link toDuration}.\n */\n\n\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n\n    this.e = config.end;\n    /**\n     * @access private\n     */\n\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n\n    this.isLuxonInterval = true;\n  }\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n\n\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({\n        invalid\n      });\n    }\n  }\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n\n\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n          builtEnd = friendlyDateTime(end);\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd\n      });\n    } else {\n      return validateError;\n    }\n  }\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n\n\n  static after(start, duration) {\n    const dur = friendlyDuration(duration),\n          dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n\n\n  static before(end, duration) {\n    const dur = friendlyDuration(duration),\n          dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n\n\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n\n    if (s && e) {\n      let start, startIsValid;\n\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n\n\n  static isInterval(o) {\n    return o && o.isLuxonInterval || false;\n  }\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n\n\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n\n\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n  /**\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n\n\n  get isValid() {\n    return this.invalidReason === null;\n  }\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n\n\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n\n\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n\n\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n\n\n  count(unit = \"milliseconds\") {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n          end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n\n\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n\n\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n\n\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n\n\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n\n\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n\n\n  set({\n    start,\n    end\n  } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...[DateTime]} dateTimes - the unit of time to count.\n   * @return {[Interval]}\n   */\n\n\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes.map(friendlyDateTime).filter(d => this.contains(d)).sort(),\n          results = [];\n    let {\n      s\n    } = this,\n        i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n            next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {[Interval]}\n   */\n\n\n  splitBy(duration) {\n    const dur = friendlyDuration(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let {\n      s\n    } = this,\n        added,\n        next;\n    const results = [];\n\n    while (s < this.e) {\n      added = s.plus(dur);\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n    }\n\n    return results;\n  }\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {[Interval]}\n   */\n\n\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n\n\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n\n\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n\n\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n\n\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n\n\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n\n\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n          e = this.e < other.e ? this.e : other.e;\n\n    if (s > e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n\n\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n          e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n\n\n  static merge(intervals) {\n    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(([sofar, current], item) => {\n      if (!current) {\n        return [sofar, item];\n      } else if (current.overlaps(item) || current.abutsStart(item)) {\n        return [sofar, current.union(item)];\n      } else {\n        return [sofar.concat([current]), item];\n      }\n    }, [[], null]);\n\n    if (final) {\n      found.push(final);\n    }\n\n    return found;\n  }\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n\n\n  static xor(intervals) {\n    let start = null,\n        currentCount = 0;\n    const results = [],\n          ends = intervals.map(i => [{\n      time: i.s,\n      type: \"s\"\n    }, {\n      time: i.e,\n      type: \"e\"\n    }]),\n          flattened = Array.prototype.concat(...ends),\n          arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {[Interval]}\n   */\n\n\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals)).map(i => this.intersection(i)).filter(i => i && !i.isEmpty());\n  }\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n\n\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime.toISO}\n   * @return {string}\n   */\n\n\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n\n\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime.toISO}\n   * @return {string}\n   */\n\n\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.\n   * @param {Object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n\n\n  toFormat(dateFormat, {\n    separator = \" – \"\n  } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n\n\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n\n    return this.e.diff(this.s, unit, opts);\n  }\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n\n\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/luxon/src/interval.js"],"names":["DateTime","friendlyDateTime","Duration","friendlyDuration","Settings","InvalidArgumentError","InvalidIntervalError","Invalid","INVALID","validateStartEnd","start","end","isValid","Interval","invalid","toISO","constructor","config","s","e","isLuxonInterval","reason","explanation","throwOnInvalid","fromDateTimes","builtStart","builtEnd","validateError","after","duration","dur","dt","plus","before","minus","fromISO","text","opts","split","startIsValid","endIsValid","isInterval","o","invalidReason","invalidExplanation","length","unit","toDuration","get","NaN","count","startOf","Math","floor","diff","hasSame","isEmpty","valueOf","isAfter","dateTime","isBefore","contains","set","splitAt","dateTimes","sorted","map","filter","d","sort","results","i","added","next","push","splitBy","as","divideEqually","numberOfParts","slice","overlaps","other","abutsStart","abutsEnd","engulfs","equals","intersection","union","merge","intervals","found","final","a","b","reduce","sofar","current","item","concat","xor","currentCount","ends","time","type","flattened","Array","prototype","arr","difference","toString","toISODate","toISOTime","toFormat","dateFormat","separator","mapEndpoints","mapFn"],"mappings":"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","sourcesContent":["import DateTime, { friendlyDateTime } from \"./datetime.js\";\nimport Duration, { friendlyDuration } from \"./duration.js\";\nimport Settings from \"./settings.js\";\nimport { InvalidArgumentError, InvalidIntervalError } from \"./errors.js\";\nimport Invalid from \"./impl/invalid.js\";\n\nconst INVALID = \"Invalid Interval\";\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  if (!start || !start.isValid) {\n    return Interval.invalid(\"missing or invalid start\");\n  } else if (!end || !end.isValid) {\n    return Interval.invalid(\"missing or invalid end\");\n  } else if (end < start) {\n    return Interval.invalid(\n      \"end before start\",\n      `The end of an interval must be after its start, but you had start=${start.toISO()} and end=${end.toISO()}`\n    );\n  } else {\n    return null;\n  }\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.\n * * **Accessors** Use {@link start} and {@link end} to get the start and end.\n * * **Interrogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.\n * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}.\n * * **Output** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toISODate}, {@link toISOTime}, {@link toFormat}, and {@link toDuration}.\n */\nexport default class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalid || null;\n    /**\n     * @access private\n     */\n    this.isLuxonInterval = true;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent\n   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information\n   * @return {Interval}\n   */\n  static invalid(reason, explanation = null) {\n    if (!reason) {\n      throw new InvalidArgumentError(\"need to specify a reason the Interval is invalid\");\n    }\n\n    const invalid = reason instanceof Invalid ? reason : new Invalid(reason, explanation);\n\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(invalid);\n    } else {\n      return new Interval({ invalid });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|Date|Object} start\n   * @param {DateTime|Date|Object} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = friendlyDateTime(start),\n      builtEnd = friendlyDateTime(end);\n\n    const validateError = validateStartEnd(builtStart, builtEnd);\n\n    if (validateError == null) {\n      return new Interval({\n        start: builtStart,\n        end: builtEnd\n      });\n    } else {\n      return validateError;\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|Date|Object} start\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = friendlyDuration(duration),\n      dt = friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|Date|Object} end\n   * @param {Duration|Object|number} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = friendlyDuration(duration),\n      dt = friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string.\n   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.\n   * @param {string} text - the ISO string to parse\n   * @param {Object} [opts] - options to pass {@link DateTime.fromISO} and optionally {@link Duration.fromISO}\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {Interval}\n   */\n  static fromISO(text, opts) {\n    const [s, e] = (text || \"\").split(\"/\", 2);\n    if (s && e) {\n      let start, startIsValid;\n      try {\n        start = DateTime.fromISO(s, opts);\n        startIsValid = start.isValid;\n      } catch (e) {\n        startIsValid = false;\n      }\n\n      let end, endIsValid;\n      try {\n        end = DateTime.fromISO(e, opts);\n        endIsValid = end.isValid;\n      } catch (e) {\n        endIsValid = false;\n      }\n\n      if (startIsValid && endIsValid) {\n        return Interval.fromDateTimes(start, end);\n      }\n\n      if (startIsValid) {\n        const dur = Duration.fromISO(e, opts);\n        if (dur.isValid) {\n          return Interval.after(start, dur);\n        }\n      } else if (endIsValid) {\n        const dur = Duration.fromISO(s, opts);\n        if (dur.isValid) {\n          return Interval.before(end, dur);\n        }\n      }\n    }\n    return Interval.invalid(\"unparsable\", `the input \"${text}\" can't be parsed as ISO 8601`);\n  }\n\n  /**\n   * Check if an object is an Interval. Works across context boundaries\n   * @param {object} o\n   * @return {boolean}\n   */\n  static isInterval(o) {\n    return (o && o.isLuxonInterval) || false;\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @type {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @type {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, meaning that the Interval isn't 'backwards'.\n   * @type {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an error code if this Interval is invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidReason() {\n    return this.invalid ? this.invalid.reason : null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @type {string}\n   */\n  get invalidExplanation() {\n    return this.invalid ? this.invalid.explanation : null;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = \"milliseconds\") {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = \"milliseconds\") {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e <= dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {Object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...[DateTime]} dateTimes - the unit of time to count.\n   * @return {[Interval]}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes\n        .map(friendlyDateTime)\n        .filter(d => this.contains(d))\n        .sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|Object|number} duration - The length of each resulting interval.\n   * @return {[Interval]}\n   */\n  splitBy(duration) {\n    const dur = friendlyDuration(duration);\n\n    if (!this.isValid || !dur.isValid || dur.as(\"milliseconds\") === 0) {\n      return [];\n    }\n\n    let { s } = this,\n      added,\n      next;\n\n    const results = [];\n    while (s < this.e) {\n      added = s.plus(dur);\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {[Interval]}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * Returns null if the intersection is empty, meaning, the intervals don't intersect.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s > e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(\n      ([sofar, current], item) => {\n        if (!current) {\n          return [sofar, item];\n        } else if (current.overlaps(item) || current.abutsStart(item)) {\n          return [sofar, current.union(item)];\n        } else {\n          return [sofar.concat([current]), item];\n        }\n      },\n      [[], null]\n    );\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map(i => [{ time: i.s, type: \"s\" }, { time: i.e, type: \"e\" }]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === \"s\" ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {[Interval]}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map(i => this.intersection(i))\n      .filter(i => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime.toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of date of this Interval.\n   * The time components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @return {string}\n   */\n  toISODate() {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISODate()}/${this.e.toISODate()}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of time of this Interval.\n   * The date components are ignored.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {Object} opts - The same options as {@link DateTime.toISO}\n   * @return {string}\n   */\n  toISOTime(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISOTime(opts)}/${this.e.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.\n   * @param {Object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = \" – \" } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n\n  /**\n   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes\n   * @param {function} mapFn\n   * @return {Interval}\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())\n   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))\n   */\n  mapEndpoints(mapFn) {\n    return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}