{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport { useModal } from \"../contexts/ModalContext\";\nlet squadService;\nlet typingTimeout = new Map();\n\nconst SquadCommunicator = ({\n  children\n}) => {\n  var _squadService32;\n\n  const {\n    chats,\n    setChats,\n    activeChat,\n    replyMsg,\n    setReplyMsg,\n    setActiveChat,\n    forwardMessageList,\n    setForwardMessageList,\n    setShowChat\n  } = useChat();\n  const {\n    contactsSearch,\n    setContactsSearched,\n    newFavorite,\n    setNewFavorite,\n    contacts,\n    setContacts,\n    setContactsOutsideUserContacts,\n    setToggleAddingContacts,\n    toggleAddingContacts,\n    checkedContacts,\n    setCheckedContacts,\n    removedContact,\n    setRemovedContact\n  } = useContact();\n  const {\n    user,\n    setUser,\n    changedUserData,\n    changedUserPassword,\n    setChangedUserPassword\n  } = useAuth();\n  const {\n    showModalForwardMessageTo,\n    setShowModalForwardMessageTo,\n    showModalAddContact\n  } = useModal();\n  const {\n    setGroups,\n    groups,\n    memberQuit,\n    groupIdOfLeaveRequest,\n    setGroupIdOfLeaveRequest,\n    setMemberQuit,\n    groupToRemoveContact,\n    setGroupToRemoveContact,\n    removedMember,\n    setRemovedMember\n  } = useGroup();\n\n  const init = () => {\n    var _squadService;\n\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"b4c1fa651399a3eb63aee51777d3d508\",\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      email: \"romero2@digivox.com.br\",\n      user_name: \"ZZ Romero 2\",\n      expires_in: 2592000,\n      baseUrl: \"https://app.citrussquad.com/api/v1/\"\n    }));\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\n    (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.user.get(user => {\n      setUser(user);\n    });\n  };\n\n  const clearSendFile = (chatId, messageId) => {\n    setChats(chats.map(chat => {\n      if (chat.id === chatId) {\n        chat.messages = chat.messages.map(message => {\n          if (message.id === messageId) {\n            message.deliverStatus = DeliverStatus.QUEUED;\n            message.sendFile = undefined;\n          }\n\n          return message;\n        });\n      }\n\n      return chat;\n    }));\n  };\n\n  const onChatsChange = () => {// chats.forEach((chat) => {\n    // });\n  };\n\n  const onActiveChatChange = () => {\n    checkSendMessage(activeChat);\n    checkAttachedFiles(activeChat);\n    checkNewContact(activeChat); // checkTyping(activeChat)\n  }; // const checkTyping = (chat: IChat) => {\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\n  //     if (oldTimeoutData)\n  //       clearTimeout(oldTimeoutData.timeout)\n  //     else\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\n  //     const timeoutData = {\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\n  //       msgStr: `${chat.inputMessage}`\n  //     }\n  //     typingTimeout.set(chat.jid, timeoutData)\n  //   }\n  // }\n\n\n  const checkNewContact = cht => {\n    if (!cht.added) {\n      var _squadService2;\n\n      (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.contacts.add(cht, success => {\n        if (success) {\n          var _squadService3;\n\n          setChats(chats.map(chat => {\n            if (chat.jid === cht.jid) {\n              chat.added = true;\n            }\n\n            if (activeChat.jid === chat.jid) setActiveChat(chat);\n            return chat;\n          }));\n          (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.contacts.list(ctcs => {\n            setContacts(ctcs);\n          });\n        }\n      });\n    }\n  };\n\n  const onAddingContacts = () => {\n    let asynchronousFlag = 0;\n\n    if (checkedContacts && toggleAddingContacts) {\n      checkedContacts.forEach(ctt => {\n        if (!ctt.added) {\n          var _squadService4;\n\n          (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : _squadService4.contacts.addContacts(ctt, success => {\n            if (success) {\n              asynchronousFlag++;\n\n              if (checkedContacts.length === asynchronousFlag) {\n                var _squadService5;\n\n                (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.contacts.list(contacts => {\n                  setContacts(contacts);\n                  setCheckedContacts(undefined);\n                  setToggleAddingContacts(false);\n                });\n              }\n            }\n          });\n        }\n      });\n    }\n  };\n\n  const checkAttachedFiles = cht => {\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\n      var _squadService6;\n\n      (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : _squadService6.attachments.list(cht, attachments => {\n        if (attachments.length > 0) setActiveChat({ ...cht,\n          attachedFileList: attachments\n        });else setActiveChat({ ...cht,\n          attachedFileList: null\n        });\n      });\n    }\n  };\n  /* getMessageUserProfilePicture = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.profilePicture;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])\r\n        ?.profilePicture;\r\n    }\r\n  }; */\n\n\n  const checkSearchMessages = () => {\n    if (activeChat.messageLoaded) {\n      var _squadService7;\n\n      (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : _squadService7.messages.list(activeChat, messages => {\n        if (messages.length) {\n          setChats(chats.map(cht => {\n            if (cht.id === activeChat.id) {\n              messages.forEach(msg => {\n                if (!activeChat.messages.find(m => m.id === msg.id)) cht.messages.unshift(msg);\n              });\n              cht.messageLoaded = false;\n              setActiveChat(cht);\n            }\n\n            return cht;\n          }));\n        } else {\n          const chat = { ...activeChat,\n            messageLoaded: false\n          };\n          setActiveChat(chat);\n        }\n      });\n    }\n  };\n\n  const checkSendMessage = chat => {\n    chat.messages.forEach(msg => {\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\n        if (msg.sendFile && !replyMsg) {\n          var _squadService8, _squadService8$chat;\n\n          const files = [msg.sendFile];\n          clearSendFile(chat.id, msg.id);\n          (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : (_squadService8$chat = _squadService8.chat) === null || _squadService8$chat === void 0 ? void 0 : _squadService8$chat.sendFiles(chat, files, data => {\n            updateMessageFiles(data, chat, msg);\n          });\n        } else {\n          if (!msg.isForwardMessage && !replyMsg) {\n            sendMessage(chat, msg.message, msgId => updateMessage(msgId, chat, msg));\n          } else if (replyMsg) {\n            var _squadService9, _squadService9$chat;\n\n            const replyMsgCopy = { ...replyMsg\n            };\n            setReplyMsg(undefined);\n            (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : (_squadService9$chat = _squadService9.chat) === null || _squadService9$chat === void 0 ? void 0 : _squadService9$chat.replyMsg(chat, msg, replyMsgCopy, msgId => {\n              updateMessage(msgId, chat, msg, replyMsgCopy);\n            });\n          }\n        }\n      }\n    });\n  };\n\n  const updateMessageFiles = (data, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        const booleans = getUrlBooleans(data.url);\n        message.id = data.msgId;\n        message.fileUrl = data.url;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n        message.message = getFileName(data.url);\n        message.isFileMessage = booleans.isFileMessage;\n        message.isImageMessage = booleans.isImageMessage;\n        message.isVideoMessage = booleans.isVideoMessage;\n        message.isAudioMessage = booleans.isAudioMessage;\n      }\n\n      return message;\n    });\n    setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      const newChats = [];\n      chats.forEach(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n          newChats.unshift(cht);\n        } else {\n          newChats.push(cht);\n        }\n      });\n      setChats(newChats);\n    }\n  };\n\n  const updateMessage = (msgId, chat, msg, replyedMsg = undefined) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        message.id = msgId;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n\n        if (replyedMsg) {\n          var _squadService10, _squadService10$conta, _squadService11, _squadService11$user, _squadService11$user$, _squadService12, _squadService12$user, _squadService12$user$;\n\n          message.isReplyMessage = true;\n          message.replyedMessage = replyedMsg.message || replyedMsg.fileUrl;\n          message.replyedMessageId = replyedMsg.id;\n          message.replyedMessageTo = ((_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : (_squadService10$conta = _squadService10.contacts.getContacts().get(replyedMsg.fromUser.split(\"@\")[0])) === null || _squadService10$conta === void 0 ? void 0 : _squadService10$conta.name) || ((_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : (_squadService11$user = _squadService11.user) === null || _squadService11$user === void 0 ? void 0 : (_squadService11$user$ = _squadService11$user.user) === null || _squadService11$user$ === void 0 ? void 0 : _squadService11$user$.id) === replyedMsg.fromUser.split(\"@\")[0] ? (_squadService12 = squadService) === null || _squadService12 === void 0 ? void 0 : (_squadService12$user = _squadService12.user) === null || _squadService12$user === void 0 ? void 0 : (_squadService12$user$ = _squadService12$user.user) === null || _squadService12$user$ === void 0 ? void 0 : _squadService12$user$.name : \"Participant\";\n        }\n\n        if (isUrl(message.message)) {\n          const booleans = getUrlBooleans(message.message);\n          message.isFileMessage = booleans.isFileMessage;\n          message.isImageMessage = booleans.isImageMessage;\n          message.isAudioMessage = booleans.isAudioMessage;\n          message.isVideoMessage = booleans.isVideoMessage;\n          message.fileUrl = message.message;\n        }\n      }\n\n      return message;\n    });\n    if (activeChat.jid === newChat.jid) setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      const newChats = [];\n      chats.forEach(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n          newChats.unshift(cht);\n        } else {\n          newChats.push(cht);\n        }\n      });\n      setChats(newChats);\n    }\n  };\n\n  const forwardMessage = () => {\n    if (forwardMessageList && showModalForwardMessageTo) {\n      const ctcs = [...forwardMessageList];\n      const message = { ...showModalForwardMessageTo\n      };\n      setForwardMessageList(undefined);\n      setShowModalForwardMessageTo(undefined);\n      const chatsFinded = [];\n      const oldChats = [...chats.map(chat => {\n        return { ...chat\n        };\n      })];\n      ctcs === null || ctcs === void 0 ? void 0 : ctcs.forEach((ctc, i) => {\n        const cht = oldChats.find(cht => cht.jid === ctc.jid);\n\n        if (cht) {\n          var _squadService13, _squadService13$chat;\n\n          const msg = { ...message,\n            id: `${cht.messages.length + 1}`,\n            userName: user.name,\n            fromUser: user.id,\n            toUser: ctc.jid.split(\"@\")[0],\n            message: message.fileUrl || message.message,\n            deliverStatus: DeliverStatus.QUEUED,\n            isForwardMessage: true\n          };\n          (_squadService13 = squadService) === null || _squadService13 === void 0 ? void 0 : (_squadService13$chat = _squadService13.chat) === null || _squadService13$chat === void 0 ? void 0 : _squadService13$chat.forwardMessage(cht, msg, msgId => {\n            msg.id = msgId;\n            cht.messages.push(msg);\n            chatsFinded.push(cht);\n          });\n        }\n      });\n      const newChats = oldChats.map(chat => chatsFinded.find(cht => cht.id === chat.id) || chat);\n      const ctcsNotInChat = ctcs.filter(ctc => !newChats.find(cht => ctc.jid === cht.jid));\n      ctcsNotInChat.forEach((ctc, i) => {\n        var _squadService14, _squadService14$chat;\n\n        const chat = {\n          id: ctc.jid.split(\"@\")[0],\n          jid: ctc.jid,\n          name: ctc.name,\n          profilePicture: ctc.profilePicture,\n          status: ctc.status || undefined,\n          unRead: 0,\n          chatType: ctc.jid.includes(\"@conference.\") ? ChatType.GROUP : ChatType.USER,\n          inputMessage: \"\",\n          messageLoaded: false,\n          isTyping: false,\n          messages: [],\n          email: ctc.email || undefined,\n          favorite: ctc.favorite,\n          added: ctc.added\n        };\n        const newMessage = { ...message,\n          id: `${1}`,\n          userName: user.name,\n          fromUser: user.id,\n          toUser: ctc.jid.split(\"@\")[0],\n          deliverStatus: DeliverStatus.QUEUED,\n          isForwardMessage: true\n        };\n        (_squadService14 = squadService) === null || _squadService14 === void 0 ? void 0 : (_squadService14$chat = _squadService14.chat) === null || _squadService14$chat === void 0 ? void 0 : _squadService14$chat.forwardMessage(chat, newMessage, msgId => {\n          newMessage.id = msgId;\n          chat.messages.push(newMessage);\n          newChats.unshift(chat);\n        });\n      });\n      setChats(newChats);\n    }\n  };\n\n  const onChangeStatus = () => {\n    var _squadService15, _squadService15$chat;\n\n    if (((_squadService15 = squadService) === null || _squadService15 === void 0 ? void 0 : (_squadService15$chat = _squadService15.chat) === null || _squadService15$chat === void 0 ? void 0 : _squadService15$chat.chat.client.status) === \"online\") {\n      var _squadService16, _squadService16$chat;\n\n      (_squadService16 = squadService) === null || _squadService16 === void 0 ? void 0 : (_squadService16$chat = _squadService16.chat) === null || _squadService16$chat === void 0 ? void 0 : _squadService16$chat.changeStatus(user.status);\n    }\n  };\n\n  const onSearchContacts = () => {\n    if (contactsSearch.length > 2) {\n      var _squadService17;\n\n      (_squadService17 = squadService) === null || _squadService17 === void 0 ? void 0 : _squadService17.contacts.search(contactsSearch, searchList => {\n        setContactsSearched(searchList);\n      });\n    } else {\n      setContactsSearched(undefined);\n    }\n  };\n\n  const onSearchContactsOutsideUserContacts = () => {\n    var _squadService18;\n\n    (_squadService18 = squadService) === null || _squadService18 === void 0 ? void 0 : _squadService18.contacts.getContactsOutsideUserLists(contacts => {\n      if (contacts) {\n        setContactsOutsideUserContacts(contacts);\n      }\n    });\n  };\n\n  const onRemovingGroupMember = () => {\n    if (removedMember && groupToRemoveContact) {\n      var _squadService19;\n\n      let group = groups.find(grp => grp.groupId === groupToRemoveContact);\n      if (group) (_squadService19 = squadService) === null || _squadService19 === void 0 ? void 0 : _squadService19.groups.removeMember(group.groupId, removedMember, success => {\n        if (success) {\n          var _squadService20;\n\n          (_squadService20 = squadService) === null || _squadService20 === void 0 ? void 0 : _squadService20.groups.list(grps => {\n            grps.forEach(grp => {\n              grp.members = grp.members.filter(mb => mb.userId !== removedMember.userId);\n              setRemovedMember(undefined);\n              setGroupToRemoveContact(undefined);\n            });\n          });\n        }\n\n        ;\n      });\n    }\n\n    ;\n  };\n\n  const onLeavingGroup = () => {\n    if (memberQuit && groupIdOfLeaveRequest) {\n      var _squadService21;\n\n      (_squadService21 = squadService) === null || _squadService21 === void 0 ? void 0 : _squadService21.groups.leftingGroup({\n        groupId: groupIdOfLeaveRequest,\n        memberId: memberQuit.userId\n      }, success => {\n        if (success) {\n          setChats(chats.filter(cht => cht.groupId !== groupIdOfLeaveRequest));\n          setMemberQuit(undefined);\n          setGroupIdOfLeaveRequest('');\n\n          if (activeChat.groupId === groupIdOfLeaveRequest) {\n            setShowChat(false);\n          }\n        }\n\n        ;\n      });\n    }\n\n    ;\n  };\n\n  useEffect(onChatsChange, [chats]);\n  useEffect(onNewFavorite, [newFavorite]);\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\n  useEffect(onActiveChatChange, [activeChat]);\n  useEffect(onUserDataChange, [changedUserData]);\n  useEffect(onUserPasswordChange, [changedUserPassword]);\n  useEffect(onChangeStatus, [user.status]);\n  useEffect(forwardMessage, [forwardMessageList]);\n  useEffect(onSearchContacts, [contactsSearch]);\n  useEffect(onSearchContactsOutsideUserContacts, [showModalAddContact]);\n  useEffect(onAddingContacts, [toggleAddingContacts]);\n  useEffect(onRemovingGroupMember, [removedMember, groupToRemoveContact]);\n  useEffect(onLeavingGroup, [memberQuit, groupIdOfLeaveRequest]);\n  useEffect(onRemovingContact, [removedContact]);\n\n  function onRemovingContact() {\n    if (removedContact) {\n      contacts.find(ctc => {\n        if (ctc.id === removedContact.id) {\n          var _squadService22;\n\n          if (ctc.added) (_squadService22 = squadService) === null || _squadService22 === void 0 ? void 0 : _squadService22.contacts.remove(ctc, success => {\n            if (success) {\n              var _squadService23;\n\n              (_squadService23 = squadService) === null || _squadService23 === void 0 ? void 0 : _squadService23.contacts.list(ctcs => {\n                setContacts(ctcs);\n                setRemovedContact(undefined);\n              });\n            }\n          });\n        }\n      });\n    }\n  }\n\n  ;\n\n  function onUserPasswordChange() {\n    if (changedUserPassword) {\n      var _squadService24;\n\n      (_squadService24 = squadService) === null || _squadService24 === void 0 ? void 0 : _squadService24.user.changePassword(changedUserPassword, password => {\n        if (password) {\n          setChangedUserPassword({\n            oldPassword: \"\",\n            newPassword: \"\"\n          });\n        }\n      });\n    }\n  }\n\n  function onUserDataChange() {\n    if (changedUserData) {\n      var _squadService25;\n\n      (_squadService25 = squadService) === null || _squadService25 === void 0 ? void 0 : _squadService25.user.changeUserData(changedUserData, chgd => {\n        if (chgd) {\n          setUser({ ...user,\n            email: changedUserData.email,\n            name: changedUserData.name\n          });\n        }\n      });\n    }\n  }\n\n  function onNewFavorite() {\n    if (newFavorite) {\n      var _squadService26;\n\n      const newFavoriteLoad = { ...newFavorite\n      };\n      (_squadService26 = squadService) === null || _squadService26 === void 0 ? void 0 : _squadService26.contacts.setFavorite(newFavorite, favorite => {\n        if (favorite) {\n          setChats(chats.map(cht => {\n            if (cht.jid === newFavoriteLoad.jid) {\n              cht.favorite = !newFavoriteLoad.favorite;\n            }\n\n            return cht;\n          }));\n          setGroups(groups.map(grp => {\n            if (grp.jid === newFavoriteLoad.jid) {\n              return { ...grp,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return grp;\n          }));\n          setContacts(contacts.map(ctt => {\n            if (ctt.jid === newFavoriteLoad.jid) {\n              return { ...ctt,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return ctt;\n          }));\n        }\n      });\n      setNewFavorite(undefined);\n    }\n  }\n\n  function chatCommunicatorSubscribe(event, data) {\n    var _squadService27;\n\n    switch (event) {\n      case Events.ONLINE:\n        (_squadService27 = squadService) === null || _squadService27 === void 0 ? void 0 : _squadService27.chats.list(receivedChats => {\n          var _squadService28, _squadService30;\n\n          const chats = [];\n          receivedChats.forEach(cht => {\n            if (!chats.find(chat => chat.id === cht.id)) {\n              chats.push(cht);\n            }\n          });\n          setChats(chats); //populating groups\n\n          (_squadService28 = squadService) === null || _squadService28 === void 0 ? void 0 : _squadService28.groups.list(groups => {\n            var _squadService29, _squadService29$chat;\n\n            setGroups(groups); //Joining Groups Rooms in XMPP\n\n            (_squadService29 = squadService) === null || _squadService29 === void 0 ? void 0 : (_squadService29$chat = _squadService29.chat) === null || _squadService29$chat === void 0 ? void 0 : _squadService29$chat.joinGroups(groups.map(group => group.jid));\n          }); //populating contacts\n\n          (_squadService30 = squadService) === null || _squadService30 === void 0 ? void 0 : _squadService30.contacts.list(contacts => setContacts(contacts)); //populating chat's with messages\n          // receivedChats.forEach((chat) => {\n          //   squadService?.messages.list(chat, (messages) => {\n          //     const chatWithMessages = { ...chat };\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\n          //       messages\n          //     );\n          //     setChats([\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\n          //       chatWithMessages,\n          //     ]);\n          //   });\n          // });\n        });\n        break;\n\n      case Events.MESSAGE:\n        if (data.fromUser === user.jid) break;\n        let find = false;\n        let newChats = [];\n        chats.forEach(chat => {\n          if (data.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || data.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\n            find = true;\n            if (!chat.messages.filter(msg => msg.id === data.id)[0]) chat.messages.push(data);\n\n            if (chat.id === activeChat.id) {\n              let chatTemporary = { ...chat\n              };\n              setActiveChat(chatTemporary);\n            } else {\n              chat.unRead++;\n            }\n\n            newChats.unshift(chat);\n          } else {\n            newChats.push(chat);\n          }\n        });\n\n        if (!find) {\n          var _squadService31;\n\n          let newChat = {};\n          (_squadService31 = squadService) === null || _squadService31 === void 0 ? void 0 : _squadService31.contacts.list(listContacts => {\n            listContacts.forEach(c => {\n              if (c.jid === data.fromUser) {\n                newChat = {\n                  id: c.id,\n                  jid: c.jid,\n                  name: c.name,\n                  profilePicture: c.profilePicture,\n                  status: c.status,\n                  unRead: 1,\n                  chatType: ChatType.USER,\n                  inputMessage: \"\",\n                  isTyping: false,\n                  messages: [],\n                  favorite: c.favorite,\n                  added: c.added\n                };\n                newChat.messages.push(data);\n                newChats.unshift(newChat);\n              }\n            });\n          });\n        }\n\n        setChats(newChats);\n        break;\n\n      case Events.RECEIVED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.deliverStatus = DeliverStatus.DELIVERED;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.DISPLAYED:\n        setChats(chats.map(chat => {\n          chat.messages = chat.messages.map(message => {\n            if (message.id === data.id) {\n              message.readStatus = ReadStatus.READ;\n            }\n\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.COMPOSING:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = true;\n            if (activeChat.jid === data) setActiveChat(chat);\n            deleteTypingTimeout(chat.jid);\n            setTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.ACTIVE:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = false;\n\n            if (activeChat.jid === data) {\n              let chatUpdate = { ...chat\n              };\n              setActiveChat(chatUpdate);\n            }\n\n            deleteTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.PRESENCE:\n        setChats(chats.map(cht => {\n          if (cht.jid === data.from.split(\"/\")[0] && !cht.jid.includes(\"@conference.\")) {\n            cht.status = data.status;\n          }\n\n          return cht;\n        }));\n        setContacts(contacts.map(ctc => {\n          if (ctc.jid === data.from.split(\"/\")[0] && !ctc.jid.includes(\"@conference.\")) {\n            ctc.status = data.status;\n          }\n\n          return ctc;\n        }));\n        break;\n    }\n  }\n\n  const deleteTypingTimeout = jid => {\n    var _typingTimeout$get;\n\n    clearTimeout(((_typingTimeout$get = typingTimeout.get(jid)) === null || _typingTimeout$get === void 0 ? void 0 : _typingTimeout$get.timeout) || setTimeout(() => {}, 1));\n    typingTimeout.delete(jid);\n  };\n\n  const setTypingTimeout = jid => {\n    const timeoutData = {\n      msgStr: \"\",\n      timeout: setTimeout(() => {\n        setChats(chats.map(cht => {\n          if (cht.jid === jid) {\n            cht.isTyping = false;\n            if (activeChat.jid === jid) setActiveChat(cht);\n          }\n\n          return cht;\n        }));\n      }, 20000)\n    };\n    typingTimeout.set(jid, timeoutData);\n  };\n\n  (_squadService32 = squadService) === null || _squadService32 === void 0 ? void 0 : _squadService32.updateSubscribeFunction(chatCommunicatorSubscribe); // Comentado para evitar warnings no console enquanto não é usado\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\n  //     squadService?.groups.list((groups) => {\n  //       setGroups(groups);\n  //       callback(true);\n  //     });\n  //   });\n  // }\n\n  function sendMessage(chat, message, callback) {\n    var _squadService33, _squadService33$chat;\n\n    (_squadService33 = squadService) === null || _squadService33 === void 0 ? void 0 : (_squadService33$chat = _squadService33.chat) === null || _squadService33$chat === void 0 ? void 0 : _squadService33$chat.chat.sendMessage(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message, callback);\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","DeliverStatus","XMPPChatType","getFileName","getUrlBooleans","isUrl","ReadStatus","useGroup","useContact","useModal","squadService","typingTimeout","Map","children","chats","setChats","activeChat","replyMsg","setReplyMsg","setActiveChat","forwardMessageList","setForwardMessageList","setShowChat","contactsSearch","setContactsSearched","newFavorite","setNewFavorite","contacts","setContacts","setContactsOutsideUserContacts","setToggleAddingContacts","toggleAddingContacts","checkedContacts","setCheckedContacts","removedContact","setRemovedContact","user","setUser","changedUserData","changedUserPassword","setChangedUserPassword","showModalForwardMessageTo","setShowModalForwardMessageTo","showModalAddContact","setGroups","groups","memberQuit","groupIdOfLeaveRequest","setGroupIdOfLeaveRequest","setMemberQuit","groupToRemoveContact","setGroupToRemoveContact","removedMember","setRemovedMember","init","localStorage","setItem","JSON","stringify","access_token","user_id","email","user_name","expires_in","baseUrl","getInstance","chatCommunicatorSubscribe","get","clearSendFile","chatId","messageId","map","chat","id","messages","message","deliverStatus","QUEUED","sendFile","undefined","onChatsChange","onActiveChatChange","checkSendMessage","checkAttachedFiles","checkNewContact","cht","added","add","success","jid","list","ctcs","onAddingContacts","asynchronousFlag","forEach","ctt","addContacts","length","attachedFileList","attachments","checkSearchMessages","messageLoaded","msg","find","m","unshift","SENDING","files","sendFiles","data","updateMessageFiles","isForwardMessage","sendMessage","msgId","updateMessage","replyMsgCopy","newChat","booleans","url","fileUrl","time","Date","toISOString","isFileMessage","isImageMessage","isVideoMessage","isAudioMessage","filter","newChats","push","replyedMsg","isReplyMessage","replyedMessage","replyedMessageId","replyedMessageTo","getContacts","fromUser","split","name","forwardMessage","chatsFinded","oldChats","ctc","i","userName","toUser","ctcsNotInChat","profilePicture","status","unRead","chatType","includes","GROUP","USER","inputMessage","isTyping","favorite","newMessage","onChangeStatus","client","changeStatus","onSearchContacts","search","searchList","onSearchContactsOutsideUserContacts","getContactsOutsideUserLists","onRemovingGroupMember","group","grp","groupId","removeMember","grps","members","mb","userId","onLeavingGroup","leftingGroup","memberId","onNewFavorite","onUserDataChange","onUserPasswordChange","onRemovingContact","remove","changePassword","password","oldPassword","newPassword","changeUserData","chgd","newFavoriteLoad","setFavorite","event","ONLINE","receivedChats","joinGroups","MESSAGE","chatTemporary","listContacts","c","RECEIVED","DELIVERED","DISPLAYED","readStatus","READ","COMPOSING","deleteTypingTimeout","setTypingTimeout","ACTIVE","chatUpdate","PRESENCE","from","clearTimeout","timeout","setTimeout","delete","timeoutData","msgStr","set","updateSubscribeFunction","callback","GROUPCHAT","CHAT"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\n\r\nimport { Events, SendImageCallbackReturn } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\r\nimport { SendMessageCallback } from \"./types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport { useModal } from \"../contexts/ModalContext\";\r\nimport IContact from \"../alias/IContact\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport { forEach } from \"lodash\";\r\nimport { group } from \"console\";\r\n//import { callbackify } from \"util\";\r\n\r\n// import IContact from \"../alias/IContact\";\r\n// Comentado para Evitar Warnings no console\r\n// interface CreateGroupCallback {\r\n//   (groupCreated: boolean): void;\r\n// }\r\ninterface TypingTimeoutData {\r\n  timeout: NodeJS.Timeout;\r\n  msgStr: string;\r\n}\r\nlet squadService: SquadService | undefined;\r\nlet typingTimeout: Map<string, TypingTimeoutData> = new Map<\r\n  string,\r\n  TypingTimeoutData\r\n>();\r\n\r\nconst SquadCommunicator: React.FC = ({ children }) => {\r\n  const {\r\n    chats,\r\n    setChats,\r\n    activeChat,\r\n    replyMsg,\r\n    setReplyMsg,\r\n    setActiveChat,\r\n    forwardMessageList,\r\n    setForwardMessageList,\r\n    setShowChat\r\n  } = useChat();\r\n  const {\r\n    contactsSearch,\r\n    setContactsSearched,\r\n    newFavorite,\r\n    setNewFavorite,\r\n    contacts,\r\n    setContacts,\r\n    setContactsOutsideUserContacts,\r\n    setToggleAddingContacts,\r\n    toggleAddingContacts,\r\n    checkedContacts,\r\n    setCheckedContacts,\r\n    removedContact,\r\n    setRemovedContact\r\n  } = useContact();\r\n  const {\r\n    user,\r\n    setUser,\r\n    changedUserData,\r\n    changedUserPassword,\r\n    setChangedUserPassword,\r\n  } = useAuth();\r\n  const {\r\n    showModalForwardMessageTo,\r\n    setShowModalForwardMessageTo,\r\n    showModalAddContact,\r\n  } = useModal();\r\n  const { \r\n    setGroups, \r\n    groups, \r\n    memberQuit, \r\n    groupIdOfLeaveRequest, \r\n    setGroupIdOfLeaveRequest, \r\n    setMemberQuit, \r\n    groupToRemoveContact, \r\n    setGroupToRemoveContact,\r\n    removedMember,\r\n    setRemovedMember\r\n  } = useGroup();\r\n\r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"b4c1fa651399a3eb63aee51777d3d508\",\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        email: \"romero2@digivox.com.br\",\r\n        user_name: \"ZZ Romero 2\",\r\n        expires_in: 2592000,\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n      })\r\n    );\r\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\r\n    squadService?.user.get((user: IUser) => {\r\n      setUser(user);\r\n    });\r\n  };\r\n\r\n  const clearSendFile = (chatId: string, messageId: string) => {\r\n    setChats(\r\n      chats.map((chat) => {\r\n        if (chat.id === chatId) {\r\n          chat.messages = chat.messages.map((message) => {\r\n            if (message.id === messageId) {\r\n              message.deliverStatus = DeliverStatus.QUEUED;\r\n              message.sendFile = undefined;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return chat;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onChatsChange = () => {\r\n    // chats.forEach((chat) => {\r\n    // });\r\n  };\r\n  const onActiveChatChange = () => {\r\n    checkSendMessage(activeChat);\r\n    checkAttachedFiles(activeChat);\r\n    checkNewContact(activeChat);\r\n    // checkTyping(activeChat)\r\n  };\r\n  // const checkTyping = (chat: IChat) => {\r\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\r\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\r\n  //     if (oldTimeoutData)\r\n  //       clearTimeout(oldTimeoutData.timeout)\r\n  //     else\r\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\r\n  //     const timeoutData = {\r\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\r\n  //       msgStr: `${chat.inputMessage}`\r\n  //     }\r\n  //     typingTimeout.set(chat.jid, timeoutData)\r\n  //   }\r\n  // }\r\n  const checkNewContact = (cht: IChat) => {\r\n    if (!cht.added) {\r\n      squadService?.contacts.add(cht, (success: boolean) => {\r\n        if (success) {\r\n          setChats(\r\n            chats.map((chat) => {\r\n              if (chat.jid === cht.jid) {\r\n                chat.added = true;\r\n              }\r\n              if (activeChat.jid === chat.jid) setActiveChat(chat);\r\n              return chat;\r\n            })\r\n          );\r\n          squadService?.contacts.list((ctcs) => {\r\n            setContacts(ctcs);\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const onAddingContacts = () => {\r\n    let asynchronousFlag = 0;\r\n    if (checkedContacts && toggleAddingContacts) {\r\n      checkedContacts.forEach((ctt) => {\r\n        if (!ctt.added) {\r\n          squadService?.contacts.addContacts(ctt, (success: boolean) => {\r\n            if (success) {\r\n              asynchronousFlag++;\r\n              if (checkedContacts.length === asynchronousFlag) {\r\n                squadService?.contacts.list((contacts) => {\r\n                  setContacts(contacts);\r\n                  setCheckedContacts(undefined);\r\n                  setToggleAddingContacts(false);\r\n                });\r\n              }\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkAttachedFiles = (cht: IChat) => {\r\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\r\n      squadService?.attachments.list(cht, (attachments) => {\r\n        if (attachments.length > 0)\r\n          setActiveChat({ ...cht, attachedFileList: attachments });\r\n        else setActiveChat({ ...cht, attachedFileList: null });\r\n      });\r\n    }\r\n  };\r\n\r\n  /* getMessageUserProfilePicture = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.profilePicture;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])\r\n        ?.profilePicture;\r\n    }\r\n  }; */\r\n\r\n  const checkSearchMessages = () => {\r\n    if (activeChat.messageLoaded) {\r\n      squadService?.messages.list(activeChat, (messages) => {\r\n        if (messages.length) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.id === activeChat.id) {\r\n                messages.forEach((msg) => {\r\n                  if (!activeChat.messages.find((m) => m.id === msg.id))\r\n                    cht.messages.unshift(msg);\r\n                });\r\n                cht.messageLoaded = false;\r\n                setActiveChat(cht);\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n        } else {\r\n          const chat = { ...activeChat, messageLoaded: false };\r\n          setActiveChat(chat);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkSendMessage = (chat: IChat) => {\r\n    chat.messages.forEach((msg) => {\r\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\r\n        if (msg.sendFile && !replyMsg) {\r\n          const files = [msg.sendFile];\r\n          clearSendFile(chat.id, msg.id);\r\n          squadService?.chat?.sendFiles(\r\n            chat,\r\n            files,\r\n            (data: SendImageCallbackReturn) => {\r\n              updateMessageFiles(data, chat, msg);\r\n            }\r\n          );\r\n        } else {\r\n          if (!msg.isForwardMessage && !replyMsg) {\r\n            sendMessage(chat, msg.message, (msgId) =>\r\n              updateMessage(msgId, chat, msg)\r\n            );\r\n          } else if (replyMsg) {\r\n            const replyMsgCopy = { ...replyMsg };\r\n            setReplyMsg(undefined);\r\n            squadService?.chat?.replyMsg(chat, msg, replyMsgCopy, (msgId) => {\r\n              updateMessage(msgId, chat, msg, replyMsgCopy);\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const updateMessageFiles = (\r\n    data: SendImageCallbackReturn,\r\n    chat: IChat,\r\n    msg: IMessage\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        const booleans = getUrlBooleans(data.url);\r\n        message.id = data.msgId;\r\n        message.fileUrl = data.url;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        message.message = getFileName(data.url);\r\n        message.isFileMessage = booleans.isFileMessage;\r\n        message.isImageMessage = booleans.isImageMessage;\r\n        message.isVideoMessage = booleans.isVideoMessage;\r\n        message.isAudioMessage = booleans.isAudioMessage;\r\n      }\r\n      return message;\r\n    });\r\n    setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      const newChats: IChat[] = [];\r\n      chats.forEach((cht) => {\r\n        if (cht.id === chat.id) {\r\n          cht.messages = newChat.messages;\r\n          newChats.unshift(cht);\r\n        } else {\r\n          newChats.push(cht);\r\n        }\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const updateMessage = (\r\n    msgId: string,\r\n    chat: IChat,\r\n    msg: IMessage,\r\n    replyedMsg: IMessage | undefined = undefined\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        message.id = msgId;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        if (replyedMsg) {\r\n          message.isReplyMessage = true;\r\n          message.replyedMessage = replyedMsg.message || replyedMsg.fileUrl;\r\n          message.replyedMessageId = replyedMsg.id;\r\n          message.replyedMessageTo =\r\n            squadService?.contacts\r\n              .getContacts()\r\n              .get(replyedMsg.fromUser.split(\"@\")[0])?.name ||\r\n            squadService?.user?.user?.id === replyedMsg.fromUser.split(\"@\")[0]\r\n              ? squadService?.user?.user?.name\r\n              : \"Participant\";\r\n        }\r\n        if (isUrl(message.message)) {\r\n          const booleans = getUrlBooleans(message.message);\r\n          message.isFileMessage = booleans.isFileMessage;\r\n          message.isImageMessage = booleans.isImageMessage;\r\n          message.isAudioMessage = booleans.isAudioMessage;\r\n          message.isVideoMessage = booleans.isVideoMessage;\r\n          message.fileUrl = message.message;\r\n        }\r\n      }\r\n      return message;\r\n    });\r\n    if (activeChat.jid === newChat.jid) setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      const newChats: IChat[] = [];\r\n      chats.forEach((cht) => {\r\n        if (cht.id === chat.id) {\r\n          cht.messages = newChat.messages;\r\n          newChats.unshift(cht);\r\n        } else {\r\n          newChats.push(cht);\r\n        }\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const forwardMessage = () => {\r\n    if (forwardMessageList && showModalForwardMessageTo) {\r\n      const ctcs = [...forwardMessageList];\r\n      const message = { ...showModalForwardMessageTo };\r\n      setForwardMessageList(undefined);\r\n      setShowModalForwardMessageTo(undefined);\r\n      const chatsFinded: IChat[] = [];\r\n      const oldChats = [\r\n        ...chats.map((chat) => {\r\n          return { ...chat };\r\n        }),\r\n      ];\r\n      ctcs?.forEach((ctc, i) => {\r\n        const cht = oldChats.find((cht) => cht.jid === ctc.jid);\r\n        if (cht) {\r\n          const msg = {\r\n            ...message,\r\n            id: `${cht.messages.length + 1}`,\r\n            userName: user.name,\r\n            fromUser: user.id,\r\n            toUser: ctc.jid.split(\"@\")[0],\r\n            message: message.fileUrl || message.message,\r\n            deliverStatus: DeliverStatus.QUEUED,\r\n            isForwardMessage: true,\r\n          };\r\n          squadService?.chat?.forwardMessage(cht, msg, (msgId) => {\r\n            msg.id = msgId;\r\n            cht.messages.push(msg);\r\n            chatsFinded.push(cht);\r\n          });\r\n        }\r\n      });\r\n      const newChats = oldChats.map(\r\n        (chat) => chatsFinded.find((cht) => cht.id === chat.id) || chat\r\n      );\r\n      const ctcsNotInChat: (IContact | IGroup)[] = ctcs.filter(\r\n        (ctc) => !newChats.find((cht) => ctc.jid === cht.jid)\r\n      );\r\n      ctcsNotInChat.forEach((ctc, i) => {\r\n        const chat = {\r\n          id: ctc.jid.split(\"@\")[0],\r\n          jid: ctc.jid,\r\n          name: ctc.name,\r\n          profilePicture: ctc.profilePicture,\r\n          status: (ctc as IContact).status || undefined,\r\n          unRead: 0,\r\n          chatType: ctc.jid.includes(\"@conference.\")\r\n            ? ChatType.GROUP\r\n            : ChatType.USER,\r\n          inputMessage: \"\",\r\n          messageLoaded: false,\r\n          isTyping: false,\r\n          messages: [] as IMessage[],\r\n          email: (ctc as IContact).email || undefined,\r\n          favorite: ctc.favorite,\r\n          added: ctc.added,\r\n        };\r\n        const newMessage: IMessage = {\r\n          ...message,\r\n          id: `${1}`,\r\n          userName: user.name,\r\n          fromUser: user.id,\r\n          toUser: ctc.jid.split(\"@\")[0],\r\n          deliverStatus: DeliverStatus.QUEUED,\r\n          isForwardMessage: true,\r\n        };\r\n        squadService?.chat?.forwardMessage(chat, newMessage, (msgId) => {\r\n          newMessage.id = msgId;\r\n          chat.messages.push(newMessage);\r\n          newChats.unshift(chat);\r\n        });\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const onChangeStatus = () => {\r\n    if (squadService?.chat?.chat.client.status === \"online\") {\r\n      squadService?.chat?.changeStatus(user.status);\r\n    }\r\n  };\r\n  const onSearchContacts = () => {\r\n    if (contactsSearch.length > 2) {\r\n      squadService?.contacts.search(contactsSearch, (searchList) => {\r\n        setContactsSearched(searchList);\r\n      });\r\n    } else {\r\n      setContactsSearched(undefined);\r\n    }\r\n  };\r\n\r\n  const onSearchContactsOutsideUserContacts = () => {\r\n    squadService?.contacts.getContactsOutsideUserLists((contacts) => {\r\n      if (contacts) {\r\n        setContactsOutsideUserContacts(contacts);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onRemovingGroupMember = () => {\r\n    if(removedMember && groupToRemoveContact){\r\n      let group = groups.find((grp) => grp.groupId === groupToRemoveContact);\r\n      if(group)\r\n        squadService?.groups.removeMember(group.groupId, removedMember, (success: boolean) => {\r\n          if(success){\r\n            squadService?.groups.list((grps) => {\r\n              grps.forEach((grp) => {\r\n                grp.members = grp.members.filter((mb) => \r\n                mb.userId !== removedMember.userId\r\n                );\r\n                setRemovedMember(undefined);\r\n                setGroupToRemoveContact(undefined);\r\n              });\r\n            });\r\n          };\r\n        });\r\n    };\r\n  }\r\n\r\n  const onLeavingGroup = () => {\r\n    if(memberQuit && groupIdOfLeaveRequest){\r\n      squadService?.groups.leftingGroup({groupId: groupIdOfLeaveRequest, memberId: memberQuit.userId}, (success: boolean) => {\r\n        if(success){\r\n            setChats(chats.filter((cht) => \r\n              cht.groupId !== groupIdOfLeaveRequest\r\n            ));\r\n            setMemberQuit(undefined);\r\n            setGroupIdOfLeaveRequest('');\r\n            if(activeChat.groupId === groupIdOfLeaveRequest){\r\n              setShowChat(false);\r\n            }\r\n        };\r\n      });\r\n    };\r\n  };\r\n \r\n  useEffect(onChatsChange, [chats]);\r\n  useEffect(onNewFavorite, [newFavorite]);\r\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\r\n  useEffect(onActiveChatChange, [activeChat]);\r\n  useEffect(onUserDataChange, [changedUserData]);\r\n  useEffect(onUserPasswordChange, [changedUserPassword]);\r\n  useEffect(onChangeStatus, [user.status]);\r\n  useEffect(forwardMessage, [forwardMessageList]);\r\n  useEffect(onSearchContacts, [contactsSearch]);\r\n  useEffect(onSearchContactsOutsideUserContacts, [showModalAddContact]);\r\n  useEffect(onAddingContacts, [toggleAddingContacts]);\r\n  useEffect(onRemovingGroupMember, [removedMember, groupToRemoveContact]);\r\n  useEffect(onLeavingGroup, [memberQuit, groupIdOfLeaveRequest]);\r\n  useEffect(onRemovingContact, [removedContact]);\r\n\r\n  function onRemovingContact(){\r\n    if(removedContact){\r\n      contacts.find((ctc) => {\r\n        if(ctc.id === removedContact.id){\r\n          if(ctc.added)\r\n            squadService?.contacts.remove(ctc, (success: boolean) => {\r\n              if(success){\r\n                squadService?.contacts.list((ctcs) => {\r\n                  setContacts(ctcs);\r\n                  setRemovedContact(undefined);\r\n                })\r\n              }\r\n            })\r\n        }\r\n      })\r\n    }\r\n  };\r\n\r\n\r\n  function onUserPasswordChange() {\r\n    if (changedUserPassword) {\r\n      squadService?.user.changePassword(changedUserPassword, (password) => {\r\n        if (password) {\r\n          setChangedUserPassword({ oldPassword: \"\", newPassword: \"\" });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onUserDataChange() {\r\n    if (changedUserData) {\r\n      squadService?.user.changeUserData(changedUserData, (chgd) => {\r\n        if (chgd) {\r\n          setUser({\r\n            ...user,\r\n            email: changedUserData.email,\r\n            name: changedUserData.name,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onNewFavorite() {\r\n    if (newFavorite) {\r\n      const newFavoriteLoad = { ...newFavorite };\r\n      squadService?.contacts.setFavorite(newFavorite, (favorite) => {\r\n        if (favorite) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.jid === newFavoriteLoad.jid) {\r\n                cht.favorite = !newFavoriteLoad.favorite;\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n          setGroups(\r\n            groups.map((grp) => {\r\n              if (grp.jid === newFavoriteLoad.jid) {\r\n                return {\r\n                  ...grp,\r\n                  favorite: !newFavoriteLoad.favorite,\r\n                };\r\n              }\r\n              return grp;\r\n            })\r\n          );\r\n          setContacts(\r\n            contacts.map((ctt) => {\r\n              if (ctt.jid === newFavoriteLoad.jid) {\r\n                return {\r\n                  ...ctt,\r\n                  favorite: !newFavoriteLoad.favorite,\r\n                };\r\n              }\r\n              return ctt;\r\n            })\r\n          );\r\n        }\r\n      });\r\n      setNewFavorite(undefined);\r\n    }\r\n  }\r\n\r\n  function chatCommunicatorSubscribe(event: string, data: any) {\r\n    switch (event) {\r\n      case Events.ONLINE:\r\n        squadService?.chats.list((receivedChats) => {\r\n          const chats: IChat[] = [];\r\n          receivedChats.forEach((cht) => {\r\n            if (!chats.find((chat) => chat.id === cht.id)) {\r\n              chats.push(cht);\r\n            }\r\n          });\r\n          setChats(chats);\r\n          //populating groups\r\n          squadService?.groups.list((groups) => {\r\n            setGroups(groups);\r\n            //Joining Groups Rooms in XMPP\r\n            squadService?.chat?.joinGroups(groups.map((group) => group.jid));\r\n          });\r\n          //populating contacts\r\n          squadService?.contacts.list((contacts) => setContacts(contacts));\r\n\r\n          //populating chat's with messages\r\n\r\n          // receivedChats.forEach((chat) => {\r\n          //   squadService?.messages.list(chat, (messages) => {\r\n          //     const chatWithMessages = { ...chat };\r\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\r\n          //       messages\r\n          //     );\r\n          //     setChats([\r\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n          //       chatWithMessages,\r\n          //     ]);\r\n          //   });\r\n          // });\r\n        });\r\n        break;\r\n      case Events.MESSAGE:\r\n        if (data.fromUser === user.jid) break;\r\n        let find = false;\r\n\r\n        let newChats: IChat[] = [];\r\n        chats.forEach((chat) => {\r\n          if (\r\n            data.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] ||\r\n            data.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]\r\n          ) {\r\n            find = true;\r\n            if (!chat.messages.filter((msg) => msg.id === data.id)[0])\r\n              chat.messages.push(data);\r\n            if (chat.id === activeChat.id) {\r\n              let chatTemporary = { ...chat };\r\n              setActiveChat(chatTemporary);\r\n            } else {\r\n              chat.unRead++;\r\n            }\r\n            newChats.unshift(chat);\r\n          } else {\r\n            newChats.push(chat);\r\n          }\r\n        });\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.contacts.list((listContacts) => {\r\n            listContacts.forEach((c) => {\r\n              if (c.jid === data.fromUser) {\r\n                newChat = {\r\n                  id: c.id,\r\n                  jid: c.jid,\r\n                  name: c.name,\r\n                  profilePicture: c.profilePicture,\r\n                  status: c.status,\r\n                  unRead: 1,\r\n                  chatType: ChatType.USER,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  messages: [],\r\n                  favorite: c.favorite,\r\n                  added: c.added,\r\n                };\r\n                newChat.messages.push(data);\r\n                newChats.unshift(newChat);\r\n              }\r\n            });\r\n          });\r\n        }\r\n        setChats(newChats);\r\n\r\n        break;\r\n      case Events.RECEIVED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.messages.find((msg) => msg.id === data.id))\r\n              chat.messages = chat.messages.map((message) => {\r\n                message.deliverStatus = DeliverStatus.DELIVERED;\r\n                return message;\r\n              });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.DISPLAYED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            chat.messages = chat.messages.map((message) => {\r\n              if (message.id === data.id) {\r\n                message.readStatus = ReadStatus.READ;\r\n              }\r\n              return message;\r\n            });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.COMPOSING:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = true;\r\n              if (activeChat.jid === data) setActiveChat(chat);\r\n              deleteTypingTimeout(chat.jid);\r\n              setTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.ACTIVE:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = false;\r\n              if (activeChat.jid === data) {\r\n                let chatUpdate = { ...chat };\r\n                setActiveChat(chatUpdate);\r\n              }\r\n              deleteTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.PRESENCE:\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (\r\n              cht.jid === data.from.split(\"/\")[0] &&\r\n              !cht.jid.includes(\"@conference.\")\r\n            ) {\r\n              cht.status = data.status;\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n        setContacts(\r\n          contacts.map((ctc) => {\r\n            if (\r\n              ctc.jid === data.from.split(\"/\")[0] &&\r\n              !ctc.jid.includes(\"@conference.\")\r\n            ) {\r\n              ctc.status = data.status;\r\n            }\r\n            return ctc;\r\n          })\r\n        );\r\n        break;\r\n    }\r\n  }\r\n  const deleteTypingTimeout = (jid: string) => {\r\n    clearTimeout(typingTimeout.get(jid)?.timeout || setTimeout(() => {}, 1));\r\n    typingTimeout.delete(jid);\r\n  };\r\n  const setTypingTimeout = (jid: string) => {\r\n    const timeoutData: TypingTimeoutData = {\r\n      msgStr: \"\",\r\n      timeout: setTimeout(() => {\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.jid === jid) {\r\n              cht.isTyping = false;\r\n              if (activeChat.jid === jid) setActiveChat(cht);\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n      }, 20000),\r\n    };\r\n    typingTimeout.set(jid, timeoutData);\r\n  };\r\n\r\n  squadService?.updateSubscribeFunction(chatCommunicatorSubscribe);\r\n  // Comentado para evitar warnings no console enquanto não é usado\r\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\r\n  //     squadService?.groups.list((groups) => {\r\n  //       setGroups(groups);\r\n  //       callback(true);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  function sendMessage(\r\n    chat: IChat,\r\n    message: string,\r\n    callback: SendMessageCallback\r\n  ) {\r\n    squadService?.chat?.chat.sendMessage(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message,\r\n      callback\r\n    );\r\n  }\r\n\r\n  useEffect(init, []);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}