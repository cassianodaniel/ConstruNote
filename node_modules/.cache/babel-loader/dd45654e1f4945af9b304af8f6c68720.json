{"ast":null,"code":"import { getAuthorization } from \"./localStorageUtils\";\nexport const getContactName = (chatMessage, contacts) => {\n  var _contacts$get, _contacts$get2;\n\n  return chatMessage.fromName || ((_contacts$get = contacts.get(chatMessage.from)) === null || _contacts$get === void 0 ? void 0 : _contacts$get.name) || ((_contacts$get2 = contacts.get(chatMessage.to)) === null || _contacts$get2 === void 0 ? void 0 : _contacts$get2.name) || getAuthorization().user_name || \"\";\n};\nexport const getFileUrlStr = (fileParams, msg) => {\n  return \"fileUrl\" in msg && fileParams.isFile ? msg.fileUrl : fileParams.isFile ? msg.message : \"\";\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/utils/formatUtils.ts"],"names":["getAuthorization","getContactName","chatMessage","contacts","fromName","get","from","name","to","user_name","getFileUrlStr","fileParams","msg","isFile","fileUrl","message"],"mappings":"AAGA,SAASA,gBAAT,QAAiC,qBAAjC;AAEA,OAAO,MAAMC,cAAc,GAAG,CAC5BC,WAD4B,EAE5BC,QAF4B,KAGzB;AAAA;;AACH,SACED,WAAW,CAACE,QAAZ,sBACAD,QAAQ,CAACE,GAAT,CAAaH,WAAW,CAACI,IAAzB,CADA,kDACA,cAAgCC,IADhC,wBAEAJ,QAAQ,CAACE,GAAT,CAAaH,WAAW,CAACM,EAAzB,CAFA,mDAEA,eAA8BD,IAF9B,KAGAP,gBAAgB,GAAGS,SAHnB,IAIA,EALF;AAOD,CAXM;AAYP,OAAO,MAAMC,aAAa,GAAG,CAC3BC,UAD2B,EAE3BC,GAF2B,KAGxB;AACH,SAAO,aAAaA,GAAb,IAAoBD,UAAU,CAACE,MAA/B,GACFD,GAAD,CAAqBE,OADlB,GAEHH,UAAU,CAACE,MAAX,GACAD,GAAG,CAACG,OADJ,GAEA,EAJJ;AAKD,CATM","sourcesContent":["import { Message } from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport IContact from \"../../alias/IContact\";\r\nimport { Message as XMPPMessage, FileMessage } from \"../chat/types/types\";\r\nimport { getAuthorization } from \"./localStorageUtils\";\r\n\r\nexport const getContactName = (\r\n  chatMessage: Message,\r\n  contacts: Map<string, IContact>\r\n) => {\r\n  return (\r\n    chatMessage.fromName ||\r\n    contacts.get(chatMessage.from)?.name ||\r\n    contacts.get(chatMessage.to)?.name ||\r\n    getAuthorization().user_name ||\r\n    \"\"\r\n  );\r\n};\r\nexport const getFileUrlStr = (\r\n  fileParams: any,\r\n  msg: XMPPMessage | FileMessage\r\n) => {\r\n  return \"fileUrl\" in msg && fileParams.isFile\r\n    ? (msg as FileMessage).fileUrl\r\n    : fileParams.isFile\r\n    ? msg.message\r\n    : \"\";\r\n};\r\n"]},"metadata":{},"sourceType":"module"}