{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\contexts\\\\ContactContext.tsx\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport { useChat } from \"./ChatContext\"; //alias\n\nimport ChatType from \"../enuns/ChatType\";\nexport const ContactContext = createContext({});\nexport const ContactProvider = ({\n  children\n}) => {\n  const [contacts, setContacts] = useState([]);\n  const [contactsOutsideUserContacts, setContactsOutsideUserContacts] = useState([]);\n  const [contactsOutsideGroup, setContactsOutsideGroup] = useState([]);\n  const [removedContact, setRemovedContact] = useState(undefined);\n  const [checkedContacts, setCheckedContacts] = useState([]);\n  const [toggleAddingContacts, setToggleAddingContacts] = useState(false);\n  const [checkedMembers, setCheckedMembers] = useState([]);\n  const [toggleAddingMembers, setToggleAddingMembers] = useState(false);\n  const [groupToInsertMember, setGroupToInsertMember] = useState(undefined);\n  const {\n    activeChat,\n    chats,\n    setChats,\n    setActiveChat,\n    setShowChat,\n    unreadSum,\n    setUnreadSum\n  } = useChat();\n  const [clickedContact, setClickedContact] = useState(undefined);\n  const [newFavorite, setNewFavorite] = useState();\n  const [contactsSearch, setContactsSearch] = useState(\"\");\n  const [contactsSearched, setContactsSearched] = useState();\n\n  const openContact = obj => {\n    if ((activeChat === null || activeChat === void 0 ? void 0 : activeChat.jid) === obj.jid) return;\n    let find = false;\n    setChats(chats.map(item => {\n      if (item.jid === obj.jid) {\n        setUnreadSum(unreadSum - item.unRead);\n        item.unRead = 0;\n        item.messageLoaded = item.messages.length >= 20 ? false : true;\n        setShowChat(true);\n        setActiveChat(item);\n        find = true;\n      }\n\n      return item;\n    }));\n\n    if (!find) {\n      let newChat = {\n        id: obj.id,\n        jid: obj.jid,\n        name: obj.name,\n        email: obj.email,\n        department: obj.department,\n        profilePicture: obj.profilePicture,\n        status: obj.status,\n        messageLoaded: true,\n        unRead: 1,\n        chatType: ChatType.USER,\n        inputMessage: \"\",\n        isTyping: false,\n        messages: [],\n        favorite: obj.favorite,\n        added: obj.added\n      };\n      setShowChat(true);\n      setActiveChat(newChat);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ContactContext.Provider, {\n    value: {\n      openContact,\n      contacts,\n      setContacts,\n      newFavorite,\n      setNewFavorite,\n      contactsSearch,\n      setContactsSearch,\n      contactsSearched,\n      setContactsSearched,\n      contactsOutsideUserContacts,\n      setContactsOutsideUserContacts,\n      toggleAddingContacts,\n      setToggleAddingContacts,\n      checkedContacts,\n      setCheckedContacts,\n      removedContact,\n      setRemovedContact,\n      toggleAddingMembers,\n      setToggleAddingMembers,\n      checkedMembers,\n      setCheckedMembers,\n      contactsOutsideGroup,\n      setContactsOutsideGroup,\n      groupToInsertMember,\n      setGroupToInsertMember,\n      clickedContact,\n      setClickedContact\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport function useContact() {\n  return useContext(ContactContext);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/contexts/ContactContext.tsx"],"names":["React","createContext","useContext","useState","useChat","ChatType","ContactContext","ContactProvider","children","contacts","setContacts","contactsOutsideUserContacts","setContactsOutsideUserContacts","contactsOutsideGroup","setContactsOutsideGroup","removedContact","setRemovedContact","undefined","checkedContacts","setCheckedContacts","toggleAddingContacts","setToggleAddingContacts","checkedMembers","setCheckedMembers","toggleAddingMembers","setToggleAddingMembers","groupToInsertMember","setGroupToInsertMember","activeChat","chats","setChats","setActiveChat","setShowChat","unreadSum","setUnreadSum","clickedContact","setClickedContact","newFavorite","setNewFavorite","contactsSearch","setContactsSearch","contactsSearched","setContactsSearched","openContact","obj","jid","find","map","item","unRead","messageLoaded","messages","length","newChat","id","name","email","department","profilePicture","status","chatType","USER","inputMessage","isTyping","favorite","added","useContact"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport { useChat } from \"./ChatContext\";\r\n\r\n//alias\r\nimport IChat from \"../alias/IChat\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport IContact from \"./../alias/IContact\";\r\nimport ChatType from \"../enuns/ChatType\";\r\n\r\ninterface IContactContextData {\r\n  openContact(value: IContact): void;\r\n  contacts: IContact[];\r\n  setContacts(value: IContact[]): void;\r\n  newFavorite: IChat | IGroup | IContact | undefined;\r\n  setNewFavorite(favorited: IChat | IGroup | IContact | undefined): void;\r\n  contactsSearch: string;\r\n  setContactsSearch(value: string): void;\r\n  contactsSearched: IContact[] | undefined;\r\n  setContactsSearched(val: IContact[] | undefined): void;\r\n  contactsOutsideUserContacts: IContact[];\r\n  setContactsOutsideUserContacts(value: IContact[]): void;\r\n  toggleAddingContacts: boolean;\r\n  setToggleAddingContacts(value: boolean): void;\r\n  toggleAddingMembers: boolean;\r\n  setToggleAddingMembers(value: boolean): void;\r\n  checkedContacts: IContact[];\r\n  setCheckedContacts(value: IContact[]): void;\r\n  removedContact: IContact | undefined;\r\n  setRemovedContact(value: IContact | undefined): void;\r\n  checkedMembers: IContact[];\r\n  setCheckedMembers(value: IContact[]): void;\r\n  contactsOutsideGroup: IContact[];\r\n  setContactsOutsideGroup(value: IContact[]): void;\r\n  groupToInsertMember: IGroup | undefined;\r\n  setGroupToInsertMember(value: IGroup | undefined): void;\r\n  setClickedContact(value: IContact | undefined): void, \r\n  clickedContact: IContact | undefined\r\n}\r\n\r\nexport const ContactContext = createContext<IContactContextData>(\r\n  {} as IContactContextData\r\n);\r\n\r\nexport const ContactProvider: React.FC = ({ children }) => {\r\n  const [contacts, setContacts] = useState<IContact[]>([]);\r\n  const [\r\n    contactsOutsideUserContacts,\r\n    setContactsOutsideUserContacts,\r\n  ] = useState<IContact[]>([]);\r\n  const [contactsOutsideGroup, setContactsOutsideGroup] = useState<IContact[]>(\r\n    []\r\n  );\r\n  const [removedContact, setRemovedContact] = useState<IContact | undefined>(\r\n    undefined\r\n  );\r\n  const [checkedContacts, setCheckedContacts] = useState<IContact[]>([]);\r\n  const [toggleAddingContacts, setToggleAddingContacts] = useState(false);\r\n  const [checkedMembers, setCheckedMembers] = useState<IContact[]>([]);\r\n  const [toggleAddingMembers, setToggleAddingMembers] = useState(false);\r\n  const [groupToInsertMember, setGroupToInsertMember] = useState<\r\n    IGroup | undefined\r\n  >(undefined);\r\n  const { activeChat, chats, setChats, setActiveChat, setShowChat, unreadSum, setUnreadSum } = useChat();\r\n  const [clickedContact, setClickedContact] = useState<IContact| undefined>(undefined);\r\n  const [newFavorite, setNewFavorite] = useState<\r\n    IChat | IGroup | IContact | undefined\r\n  >();\r\n  const [contactsSearch, setContactsSearch] = useState<string>(\"\");\r\n  const [contactsSearched, setContactsSearched] = useState<\r\n    IContact[] | undefined\r\n  >();\r\n\r\n  const openContact = (obj: IContact) => {\r\n    if (activeChat?.jid === obj.jid) return;\r\n    let find = false;\r\n\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.jid === obj.jid) {\r\n          setUnreadSum(unreadSum - item.unRead);\r\n          item.unRead = 0;\r\n          item.messageLoaded = item.messages.length >= 20 ? false : true;\r\n          setShowChat(true);\r\n          setActiveChat(item);\r\n          find = true;\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n\r\n    if (!find) {\r\n      let newChat: IChat = {\r\n        id: obj.id,\r\n        jid: obj.jid,\r\n        name: obj.name,\r\n        email: obj.email,\r\n        department: obj.department,\r\n        profilePicture: obj.profilePicture,\r\n        status: obj.status,\r\n        messageLoaded: true,\r\n        unRead: 1,\r\n        chatType: ChatType.USER,\r\n        inputMessage: \"\",\r\n        isTyping: false,\r\n        messages: [],\r\n        favorite: obj.favorite,\r\n        added: obj.added,\r\n      };\r\n      setShowChat(true);\r\n      setActiveChat(newChat);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ContactContext.Provider\r\n      value={{\r\n        openContact,\r\n        contacts,\r\n        setContacts,\r\n        newFavorite,\r\n        setNewFavorite,\r\n        contactsSearch,\r\n        setContactsSearch,\r\n        contactsSearched,\r\n        setContactsSearched,\r\n        contactsOutsideUserContacts,\r\n        setContactsOutsideUserContacts,\r\n        toggleAddingContacts,\r\n        setToggleAddingContacts,\r\n        checkedContacts,\r\n        setCheckedContacts,\r\n        removedContact,\r\n        setRemovedContact,\r\n        toggleAddingMembers,\r\n        setToggleAddingMembers,\r\n        checkedMembers,\r\n        setCheckedMembers,\r\n        contactsOutsideGroup,\r\n        setContactsOutsideGroup,\r\n        groupToInsertMember,\r\n        setGroupToInsertMember,\r\n        clickedContact, \r\n        setClickedContact\r\n      }}\r\n    >\r\n      {children}\r\n    </ContactContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useContact() {\r\n  return useContext(ContactContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}