{"ast":null,"code":"import { invariant } from '../utils';\nimport { Type } from '../../262';\nimport { FormatNumericToString } from '../NumberFormat/FormatNumericToString';\nimport { GetOperands } from './GetOperands';\n/**\n * http://ecma-international.org/ecma-402/7.0/index.html#sec-resolveplural\n * @param pl\n * @param n\n * @param PluralRuleSelect Has to pass in bc it's implementation-specific\n */\n\nexport function ResolvePlural(pl, n, _a) {\n  var getInternalSlots = _a.getInternalSlots,\n      PluralRuleSelect = _a.PluralRuleSelect;\n  var internalSlots = getInternalSlots(pl);\n  invariant(Type(internalSlots) === 'Object', 'pl has to be an object');\n  invariant('initializedPluralRules' in internalSlots, 'pluralrules must be initialized');\n  invariant(Type(n) === 'Number', 'n must be a number');\n\n  if (!isFinite(n)) {\n    return 'other';\n  }\n\n  var locale = internalSlots.locale,\n      type = internalSlots.type;\n  var res = FormatNumericToString(internalSlots, n);\n  var s = res.formattedString;\n  var operands = GetOperands(s);\n  return PluralRuleSelect(locale, type, n, operands);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@formatjs/ecma402-abstract/lib/src/PluralRules/ResolvePlural.js"],"names":["invariant","Type","FormatNumericToString","GetOperands","ResolvePlural","pl","n","_a","getInternalSlots","PluralRuleSelect","internalSlots","isFinite","locale","type","res","s","formattedString","operands"],"mappings":"AAAA,SAASA,SAAT,QAA0B,UAA1B;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,qBAAT,QAAsC,uCAAtC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA;;;;;;;AAMA,OAAO,SAASC,aAAT,CAAuBC,EAAvB,EAA2BC,CAA3B,EAA8BC,EAA9B,EAAkC;AACrC,MAAIC,gBAAgB,GAAGD,EAAE,CAACC,gBAA1B;AAAA,MAA4CC,gBAAgB,GAAGF,EAAE,CAACE,gBAAlE;AACA,MAAIC,aAAa,GAAGF,gBAAgB,CAACH,EAAD,CAApC;AACAL,EAAAA,SAAS,CAACC,IAAI,CAACS,aAAD,CAAJ,KAAwB,QAAzB,EAAmC,wBAAnC,CAAT;AACAV,EAAAA,SAAS,CAAC,4BAA4BU,aAA7B,EAA4C,iCAA5C,CAAT;AACAV,EAAAA,SAAS,CAACC,IAAI,CAACK,CAAD,CAAJ,KAAY,QAAb,EAAuB,oBAAvB,CAAT;;AACA,MAAI,CAACK,QAAQ,CAACL,CAAD,CAAb,EAAkB;AACd,WAAO,OAAP;AACH;;AACD,MAAIM,MAAM,GAAGF,aAAa,CAACE,MAA3B;AAAA,MAAmCC,IAAI,GAAGH,aAAa,CAACG,IAAxD;AACA,MAAIC,GAAG,GAAGZ,qBAAqB,CAACQ,aAAD,EAAgBJ,CAAhB,CAA/B;AACA,MAAIS,CAAC,GAAGD,GAAG,CAACE,eAAZ;AACA,MAAIC,QAAQ,GAAGd,WAAW,CAACY,CAAD,CAA1B;AACA,SAAON,gBAAgB,CAACG,MAAD,EAASC,IAAT,EAAeP,CAAf,EAAkBW,QAAlB,CAAvB;AACH","sourcesContent":["import { invariant } from '../utils';\nimport { Type } from '../../262';\nimport { FormatNumericToString } from '../NumberFormat/FormatNumericToString';\nimport { GetOperands } from './GetOperands';\n/**\n * http://ecma-international.org/ecma-402/7.0/index.html#sec-resolveplural\n * @param pl\n * @param n\n * @param PluralRuleSelect Has to pass in bc it's implementation-specific\n */\nexport function ResolvePlural(pl, n, _a) {\n    var getInternalSlots = _a.getInternalSlots, PluralRuleSelect = _a.PluralRuleSelect;\n    var internalSlots = getInternalSlots(pl);\n    invariant(Type(internalSlots) === 'Object', 'pl has to be an object');\n    invariant('initializedPluralRules' in internalSlots, 'pluralrules must be initialized');\n    invariant(Type(n) === 'Number', 'n must be a number');\n    if (!isFinite(n)) {\n        return 'other';\n    }\n    var locale = internalSlots.locale, type = internalSlots.type;\n    var res = FormatNumericToString(internalSlots, n);\n    var s = res.formattedString;\n    var operands = GetOperands(s);\n    return PluralRuleSelect(locale, type, n, operands);\n}\n"]},"metadata":{},"sourceType":"module"}