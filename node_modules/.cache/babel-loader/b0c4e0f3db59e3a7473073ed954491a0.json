{"ast":null,"code":"import Chat from \"./chat/chatcommunicator\";\nimport { Events } from \"./chat/types/types\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nimport ChatType from \"../enuns/ChatType\";\nimport { ChatType as XMPPChatType } from \"./types\";\nimport short from \"short-uuid\";\nimport { isUrl } from \"./utils/parseUtils\";\nimport { getFileUrlStr } from \"./utils/formatUtils\";\nexport default class SquadChatCommunicator {\n  constructor(settings, contacts, groups, subscribeFunction) {\n    this.settings = settings;\n    this.contacts = contacts;\n    this.groups = groups;\n\n    this.onMessage = msg => {\n      const fileParams = {\n        isFile: \"fileUrl\" in msg ? true : false,\n        isImage: false,\n        isVideo: false,\n        isAudio: false\n      };\n\n      if (fileParams.isFile) {\n        fileParams.isImage = /\\.(jpe?g|png|gif|ico)$/i.test(msg.fileUrl);\n        fileParams.isVideo = /\\.(mp4|avi|mov)$/i.test(msg.fileUrl);\n        fileParams.isAudio = /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg.fileUrl);\n      }\n\n      if (isUrl(msg.message)) {\n        const splittedMsg = msg.message.split(\"/\");\n        const extension = splittedMsg[splittedMsg.length - 1];\n\n        if (extension.includes(\".\") && splittedMsg.length > 1) {\n          fileParams.isFile = true;\n          fileParams.isImage = /\\.(jpe?g|png|gif|ico)$/i.test(msg.message);\n          fileParams.isVideo = /\\.(mp4|avi|mov)$/i.test(msg.message);\n          fileParams.isAudio = /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg.message);\n        }\n      }\n\n      const message = {\n        id: msg.id,\n        userName: this.getMessageUserName(msg) || \"\",\n        // userProfilePicture: this.getMessageUserProfilePicture(msg) || undefined,\n        message: msg.message || msg.fileUrl,\n        time: msg.sent_at,\n        isFileMessage: fileParams.isFile && !fileParams.isImage && !fileParams.isVideo && !fileParams.isAudio,\n        isImageMessage: fileParams.isImage,\n        isVideoMessage: fileParams.isVideo,\n        isAudioMessage: fileParams.isAudio,\n        fileUrl: getFileUrlStr(fileParams, msg),\n        toUser: msg.to,\n        fromUser: msg.from.split(\"/\")[0],\n        deliverStatus: DeliverStatus.DELIVERED,\n        readStatus: ReadStatus.UNREAD,\n        deliverTimestamp: new Date().toISOString(),\n        readTimestamp: \"\",\n        content: JSON.stringify({\n          reply_msg: msg.reply_msg,\n          reply_msg_id: msg.reply_msg_id,\n          reply_to: msg.reply_to\n        }),\n        contentType: msg.fileUrl || \"text\",\n        isReplyMessage: !!msg.reply_msg,\n        isForwardMessage: !!msg.reply_to && !msg.reply_msg,\n        replyedMessage: msg.reply_msg,\n        replyedMessageTo: msg.reply_to,\n        replyedMessageId: msg.reply_msg_id\n      };\n      this.notify(Events.MESSAGE, message);\n    };\n\n    this.onPresence = presence => {\n      this.notify(Events.PRESENCE, presence);\n    };\n\n    this.forwardMessage = (chat, message, callback) => {\n      this.chat.forwardMsg(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message.fromUser, message.message, message.id, callback);\n    };\n\n    this.sendMessage = (chat, text, callback) => {\n      this.chat.sendMessage(chat.jid, chat.chatType === ChatType.USER ? XMPPChatType.CHAT : XMPPChatType.GROUPCHAT, text, callback);\n    };\n\n    this.sendFiles = (chat, files, cb) => {\n      files.forEach(file => {\n        this.chat.sendFile(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, file, cb);\n      });\n    };\n\n    this.getMessageUserName = msg => {\n      if (msg.from.includes(\"@conference.\")) {\n        const groups = this.groups.getGroups();\n        const group = groups.get(msg.from.split(\"@\")[0]);\n        const member = group === null || group === void 0 ? void 0 : group.members.filter(member => member.userId === msg.from.split(\"/\")[1])[0];\n        return member === null || member === void 0 ? void 0 : member.name;\n      } else {\n        var _this$contacts$getCon;\n\n        return (_this$contacts$getCon = this.contacts.getContacts().get(msg.from.split(\"@\")[0])) === null || _this$contacts$getCon === void 0 ? void 0 : _this$contacts$getCon.name;\n      }\n    };\n\n    this.getMessageUserProfilePicture = msg => {\n      if (msg.from.includes(\"@conference.\")) {\n        const groups = this.groups.getGroups();\n        const group = groups.get(msg.from.split(\"@\")[0]);\n        const member = group === null || group === void 0 ? void 0 : group.members.filter(member => member.userId === msg.from.split(\"/\")[1])[0];\n        return member === null || member === void 0 ? void 0 : member.profilePicture;\n      } else {\n        var _this$contacts$getCon2;\n\n        return (_this$contacts$getCon2 = this.contacts.getContacts().get(msg.from.split(\"@\")[0])) === null || _this$contacts$getCon2 === void 0 ? void 0 : _this$contacts$getCon2.profilePicture;\n      }\n    };\n\n    this.nextSubscriptionId = 0;\n    this.subscriptions = new Map();\n    this.makeChat(subscribeFunction);\n  }\n\n  makeChat(subscribeFunction) {\n    this.subscribe(subscribeFunction);\n    this.settings.get(settings => {\n      const options = {\n        service: `wss://${settings.xmppDomain}:5280/websocket`,\n        domain: settings.xmppDomain,\n        username: settings.xmppUser,\n        password: settings.xmppPw,\n        resource: `squad.web_${settings.xmppUser}_${short().generate()}`\n      };\n      const chat = new Chat(options);\n      this.chat = chat;\n      this.subscribeChatEvents(chat);\n      chat.client.start();\n    });\n  }\n\n  subscribeChatEvents(chat) {\n    chat.on(Events.MESSAGE, this.onMessage);\n    chat.on(Events.PRESENCE, this.onPresence);\n    chat.on(Events.ONLINE, () => this.notify(Events.ONLINE, null));\n    chat.on(Events.OFFLINE, () => this.notify(Events.OFFLINE, null));\n    chat.on(Events.ERROR, this.onError);\n    chat.on(Events.STANZA, this.onStanza);\n    chat.on(Events.RECEIVED, data => this.notify(Events.RECEIVED, data));\n    chat.on(Events.DISPLAYED, data => this.notify(Events.DISPLAYED, data));\n    chat.on(Events.COMPOSING, data => this.notify(Events.COMPOSING, data));\n    chat.on(Events.ACTIVE, data => this.notify(Events.ACTIVE, data));\n  }\n\n  onStanza(stanza) {}\n\n  onError(error) {}\n\n  joinGroup(to) {\n    this.chat.joinRoom(to);\n  }\n\n  joinGroups(groups) {\n    groups.forEach(jid => this.joinGroup(jid));\n  }\n\n  changeStatus(status) {\n    this.chat.sendPresence(status);\n  }\n\n  subscribe(subscribeCallback) {\n    this.subscriptions.set(this.nextSubscriptionId, subscribeCallback);\n    this.nextSubscriptionId += 1;\n  }\n\n  removeSubscription(id) {\n    this.subscriptions.delete(id);\n  }\n\n  removeAllSubscription() {\n    this.subscriptions = new Map();\n  }\n\n  notify(event, data) {\n    if (this.subscriptions) {\n      this.subscriptions.forEach(subscribeCallback => {\n        if (subscribeCallback) subscribeCallback(event, data);\n      });\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadChatCommunicator.ts"],"names":["Chat","Events","DeliverStatus","ReadStatus","ChatType","XMPPChatType","short","isUrl","getFileUrlStr","SquadChatCommunicator","constructor","settings","contacts","groups","subscribeFunction","onMessage","msg","fileParams","isFile","isImage","isVideo","isAudio","test","fileUrl","message","splittedMsg","split","extension","length","includes","id","userName","getMessageUserName","time","sent_at","isFileMessage","isImageMessage","isVideoMessage","isAudioMessage","toUser","to","fromUser","from","deliverStatus","DELIVERED","readStatus","UNREAD","deliverTimestamp","Date","toISOString","readTimestamp","content","JSON","stringify","reply_msg","reply_msg_id","reply_to","contentType","isReplyMessage","isForwardMessage","replyedMessage","replyedMessageTo","replyedMessageId","notify","MESSAGE","onPresence","presence","PRESENCE","forwardMessage","chat","callback","forwardMsg","jid","GROUPCHAT","CHAT","sendMessage","text","chatType","USER","sendFiles","files","cb","forEach","file","sendFile","getGroups","group","get","member","members","filter","userId","name","getContacts","getMessageUserProfilePicture","profilePicture","nextSubscriptionId","subscriptions","Map","makeChat","subscribe","options","service","xmppDomain","domain","username","xmppUser","password","xmppPw","resource","generate","subscribeChatEvents","client","start","on","ONLINE","OFFLINE","ERROR","onError","STANZA","onStanza","RECEIVED","data","DISPLAYED","COMPOSING","ACTIVE","stanza","error","joinGroup","joinRoom","joinGroups","changeStatus","status","sendPresence","subscribeCallback","set","removeSubscription","delete","removeAllSubscription","event"],"mappings":"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","sourcesContent":["import Chat from \"./chat/chatcommunicator\";\r\nimport { Events, FileMessage, Message, Presence } from \"./chat/types/types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport { SendMessageCallback, SubscriptionCallBack } from \"./types\";\r\nimport IChat from \"../alias/IChat\";\r\nimport ChatType from \"../enuns/ChatType\";\r\nimport { ChatType as XMPPChatType } from \"./types\";\r\nimport SettingsBusiness from \"./business/Settings\";\r\nimport short from \"short-uuid\";\r\nimport ContactsBusiness from \"./business/Contacts\";\r\nimport GroupsBusiness from \"./business/Groups\";\r\nimport { isUrl } from \"./utils/parseUtils\";\r\nimport { getFileUrlStr } from \"./utils/formatUtils\";\r\n\r\nexport default interface SquadChatCommunicator {\r\n  chat: Chat;\r\n  nextSubscriptionId: number;\r\n  subscriptions: Map<number, SubscriptionCallBack>;\r\n}\r\nexport default class SquadChatCommunicator {\r\n  constructor(\r\n    private settings: SettingsBusiness,\r\n    private contacts: ContactsBusiness,\r\n    private groups: GroupsBusiness,\r\n    subscribeFunction: SubscriptionCallBack\r\n  ) {\r\n    this.nextSubscriptionId = 0;\r\n    this.subscriptions = new Map<number, SubscriptionCallBack>();\r\n    this.makeChat(subscribeFunction);\r\n  }\r\n  makeChat(subscribeFunction: SubscriptionCallBack) {\r\n    this.subscribe(subscribeFunction);\r\n    this.settings.get((settings) => {\r\n      const options = {\r\n        service: `wss://${settings.xmppDomain}:5280/websocket`,\r\n        domain: settings.xmppDomain,\r\n        username: settings.xmppUser,\r\n        password: settings.xmppPw,\r\n        resource: `squad.web_${settings.xmppUser}_${short().generate()}`,\r\n      };\r\n      const chat = new Chat(options);\r\n      this.chat = chat;\r\n      this.subscribeChatEvents(chat);\r\n      chat.client.start();\r\n    });\r\n  }\r\n  subscribeChatEvents(chat: Chat) {\r\n    chat.on(Events.MESSAGE, this.onMessage);\r\n    chat.on(Events.PRESENCE, this.onPresence);\r\n    chat.on(Events.ONLINE, () => this.notify(Events.ONLINE, null));\r\n    chat.on(Events.OFFLINE, () => this.notify(Events.OFFLINE, null));\r\n    chat.on(Events.ERROR, this.onError);\r\n    chat.on(Events.STANZA, this.onStanza);\r\n    chat.on(Events.RECEIVED, (data) => this.notify(Events.RECEIVED, data));\r\n    chat.on(Events.DISPLAYED, (data) => this.notify(Events.DISPLAYED, data));\r\n    chat.on(Events.COMPOSING, (data) => this.notify(Events.COMPOSING, data));\r\n    chat.on(Events.ACTIVE, (data) => this.notify(Events.ACTIVE, data));\r\n  }\r\n  onMessage = (msg: Message | FileMessage) => {\r\n    const fileParams = {\r\n      isFile: \"fileUrl\" in msg ? true : false,\r\n      isImage: false,\r\n      isVideo: false,\r\n      isAudio: false,\r\n    };\r\n    if (fileParams.isFile) {\r\n      fileParams.isImage = /\\.(jpe?g|png|gif|ico)$/i.test(\r\n        (msg as FileMessage).fileUrl\r\n      );\r\n      fileParams.isVideo = /\\.(mp4|avi|mov)$/i.test(\r\n        (msg as FileMessage).fileUrl\r\n      );\r\n      fileParams.isAudio = /\\.(ogg|mp3|wav|m4a|webm)$/i.test(\r\n        (msg as FileMessage).fileUrl\r\n      );\r\n    }\r\n    if (isUrl(msg.message)) {\r\n      const splittedMsg = msg.message.split(\"/\");\r\n      const extension = splittedMsg[splittedMsg.length - 1];\r\n      if (extension.includes(\".\") && splittedMsg.length > 1) {\r\n        fileParams.isFile = true;\r\n        fileParams.isImage = /\\.(jpe?g|png|gif|ico)$/i.test(msg.message);\r\n        fileParams.isVideo = /\\.(mp4|avi|mov)$/i.test(msg.message);\r\n        fileParams.isAudio = /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg.message);\r\n      }\r\n    }\r\n\r\n    const message: IMessage = {\r\n      id: msg.id,\r\n      userName: this.getMessageUserName(msg) || \"\",\r\n      // userProfilePicture: this.getMessageUserProfilePicture(msg) || undefined,\r\n      message: msg.message || (msg as FileMessage).fileUrl,\r\n      time: msg.sent_at,\r\n      isFileMessage:\r\n        fileParams.isFile &&\r\n        !fileParams.isImage &&\r\n        !fileParams.isVideo &&\r\n        !fileParams.isAudio,\r\n      isImageMessage: fileParams.isImage,\r\n      isVideoMessage: fileParams.isVideo,\r\n      isAudioMessage: fileParams.isAudio,\r\n      fileUrl: getFileUrlStr(fileParams, msg),\r\n      toUser: msg.to,\r\n      fromUser: msg.from.split(\"/\")[0],\r\n      deliverStatus: DeliverStatus.DELIVERED,\r\n      readStatus: ReadStatus.UNREAD,\r\n      deliverTimestamp: new Date().toISOString(),\r\n      readTimestamp: \"\",\r\n      content: JSON.stringify({\r\n        reply_msg: msg.reply_msg,\r\n        reply_msg_id: msg.reply_msg_id,\r\n        reply_to: msg.reply_to,\r\n      }),\r\n      contentType: (msg as FileMessage).fileUrl || \"text\",\r\n      isReplyMessage: !!msg.reply_msg,\r\n      isForwardMessage: !!msg.reply_to && !msg.reply_msg,\r\n      replyedMessage: msg.reply_msg,\r\n      replyedMessageTo: msg.reply_to,\r\n      replyedMessageId: msg.reply_msg_id,\r\n    };\r\n    this.notify(Events.MESSAGE, message);\r\n  };\r\n  onPresence = (presence: Presence) => {\r\n    this.notify(Events.PRESENCE, presence);\r\n  };\r\n  onStanza(stanza: any) {}\r\n  onError(error: any) {}\r\n  forwardMessage = (\r\n    chat: IChat,\r\n    message: IMessage,\r\n    callback: SendMessageCallback\r\n  ) => {\r\n    this.chat.forwardMsg(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message.fromUser,\r\n      message.message,\r\n      message.id,\r\n      callback\r\n    );\r\n  };\r\n  sendMessage = (chat: IChat, text: string, callback: SendMessageCallback) => {\r\n    this.chat.sendMessage(\r\n      chat.jid,\r\n      chat.chatType === ChatType.USER\r\n        ? XMPPChatType.CHAT\r\n        : XMPPChatType.GROUPCHAT,\r\n      text,\r\n      callback\r\n    );\r\n  };\r\n  sendFiles = (chat: IChat, files: File[], cb: any) => {\r\n    files.forEach((file) => {\r\n      this.chat.sendFile(\r\n        chat.jid,\r\n        chat.jid.includes(\"@conference.\")\r\n          ? XMPPChatType.GROUPCHAT\r\n          : XMPPChatType.CHAT,\r\n        file,\r\n        cb\r\n      );\r\n    });\r\n  };\r\n  joinGroup(to: string) {\r\n    this.chat.joinRoom(to);\r\n  }\r\n  joinGroups(groups: string[]) {\r\n    groups.forEach((jid) => this.joinGroup(jid));\r\n  }\r\n  changeStatus(status: string) {\r\n    this.chat.sendPresence(status);\r\n  }\r\n  getMessageUserName = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.name;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])?.name;\r\n    }\r\n  };\r\n  getMessageUserProfilePicture = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.profilePicture;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])\r\n        ?.profilePicture;\r\n    }\r\n  };\r\n  subscribe(subscribeCallback: SubscriptionCallBack) {\r\n    this.subscriptions.set(this.nextSubscriptionId, subscribeCallback);\r\n    this.nextSubscriptionId += 1;\r\n  }\r\n  removeSubscription(id: number) {\r\n    this.subscriptions.delete(id);\r\n  }\r\n  removeAllSubscription() {\r\n    this.subscriptions = new Map<number, SubscriptionCallBack>();\r\n  }\r\n  notify(event: string, data: any) {\r\n    if (this.subscriptions) {\r\n      this.subscriptions.forEach((subscribeCallback) => {\r\n        if (subscribeCallback) subscribeCallback(event, data);\r\n      });\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}