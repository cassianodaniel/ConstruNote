{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\DragNDropFileUpload.tsx\";\nimport React, { useState } from \"react\";\nimport Dropzone from \"react-dropzone\";\n\nconst FileUpload = ({\n  addFile,\n  files\n}) => {\n  const [warningMsg, setWarningMsg] = useState(\"\");\n\n  const onDrop = (accepted, rejected) => {\n    if (Object.keys(rejected).length !== 0) {\n      const message = \"Please submit valid file type\";\n      setWarningMsg(message);\n    } else {\n      addFile(accepted);\n      setWarningMsg(\"\");\n      console.log(accepted[0].preview);\n      var blobPromise = new Promise((resolve, reject) => {\n        const reader = new window.FileReader();\n        reader.readAsDataURL(accepted[0]);\n\n        reader.onloadend = () => {\n          const base64data = reader.result;\n          resolve(base64data);\n        };\n      });\n      blobPromise.then(value => {\n        console.log(value);\n      });\n    }\n  };\n\n  const render = Object.keys(files).length !== 0 ? files.map(file => /*#__PURE__*/React.createElement(\"p\", {\n    key: file.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 34\n    }\n  }, file.name)) : /*#__PURE__*/React.createElement(\"p\", {\n    className: \"hello\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"Please drop only .PDF, .DOC or .DOCX files\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      height: \"50vh\",\n      border: \" 2px dashed\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, warningMsg), /*#__PURE__*/React.createElement(Dropzone, {\n    multiple: false,\n    accept: \"application/msword, application/pdf, application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    onDrop: (accepted, rejected) => onDrop(accepted, rejected),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, ({\n    isDragAccept,\n    isDragReject,\n    acceptedFiles\n  }) => {\n    if (isDragReject) return \"Please submit a valid file\";\n    return render;\n  }));\n};\n\nexport default FileUpload;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/DragNDropFileUpload.tsx"],"names":["React","useState","Dropzone","FileUpload","addFile","files","warningMsg","setWarningMsg","onDrop","accepted","rejected","Object","keys","length","message","console","log","preview","blobPromise","Promise","resolve","reject","reader","window","FileReader","readAsDataURL","onloadend","base64data","result","then","value","render","map","file","name","display","justifyContent","alignItems","height","border","isDragAccept","isDragReject","acceptedFiles"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,QAAP,MAAqB,gBAArB;;AAOA,MAAMC,UAA6B,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAwB;AAC5D,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMO,MAAM,GAAG,CAACC,QAAD,EAAgBC,QAAhB,KAAkC;AAC/C,QAAIC,MAAM,CAACC,IAAP,CAAYF,QAAZ,EAAsBG,MAAtB,KAAiC,CAArC,EAAwC;AACtC,YAAMC,OAAO,GAAG,+BAAhB;AACAP,MAAAA,aAAa,CAACO,OAAD,CAAb;AACD,KAHD,MAGO;AACLV,MAAAA,OAAO,CAACK,QAAD,CAAP;AACAF,MAAAA,aAAa,CAAC,EAAD,CAAb;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYP,QAAQ,CAAC,CAAD,CAAR,CAAYQ,OAAxB;AAEA,UAAIC,WAAW,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACjD,cAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,UAAX,EAAf;AACAF,QAAAA,MAAM,CAACG,aAAP,CAAqBhB,QAAQ,CAAC,CAAD,CAA7B;;AACAa,QAAAA,MAAM,CAACI,SAAP,GAAmB,MAAM;AACvB,gBAAMC,UAAU,GAAGL,MAAM,CAACM,MAA1B;AACAR,UAAAA,OAAO,CAACO,UAAD,CAAP;AACD,SAHD;AAID,OAPiB,CAAlB;AAQAT,MAAAA,WAAW,CAACW,IAAZ,CAAiBC,KAAK,IAAI;AACxBf,QAAAA,OAAO,CAACC,GAAR,CAAYc,KAAZ;AACD,OAFD;AAGD;AACF,GArBD;;AAwBE,QAAMC,MAAM,GACVpB,MAAM,CAACC,IAAP,CAAYP,KAAZ,EAAmBQ,MAAnB,KAA8B,CAA9B,GACER,KAAK,CAAC2B,GAAN,CAAWC,IAAD,iBAAe;AAAG,IAAA,GAAG,EAAEA,IAAI,CAACC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBD,IAAI,CAACC,IAAzB,CAAzB,CADF,gBAGE;AAAG,IAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kDAJJ;AAOA,sBACE;AACA,IAAA,KAAK,EAAE;AACLC,MAAAA,OAAO,EAAE,MADJ;AAELC,MAAAA,cAAc,EAAE,QAFX;AAGLC,MAAAA,UAAU,EAAE,QAHP;AAILC,MAAAA,MAAM,EAAE,MAJH;AAKLC,MAAAA,MAAM,EAAE;AALH,KADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIjC,UAAJ,CARF,eAUE,oBAAC,QAAD;AACE,IAAA,QAAQ,EAAE,KADZ;AAEE,IAAA,MAAM,EAAC,8GAFT;AAGE,IAAA,MAAM,EAAE,CAACG,QAAD,EAAWC,QAAX,KAAwBF,MAAM,CAACC,QAAD,EAAWC,QAAX,CAHxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKG,CAAC;AAAE8B,IAAAA,YAAF;AAAgBC,IAAAA,YAAhB;AAA8BC,IAAAA;AAA9B,GAAD,KAAmD;AAClD,QAAID,YAAJ,EAAkB,OAAO,4BAAP;AAClB,WAAOV,MAAP;AACD,GARH,CAVF,CADF;AAuBD,CAzDH;;AA2DA,eAAe5B,UAAf","sourcesContent":["import React, {useState} from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\n\r\ninterface IProps{\r\n    addFile(value: any): any;\r\n    files: any;\r\n}\r\n\r\nconst FileUpload : React.FC<IProps> = ({ addFile, files }) => {\r\n  const [warningMsg, setWarningMsg] = useState(\"\");\r\n\r\n  const onDrop = (accepted: any, rejected: any) => {\r\n    if (Object.keys(rejected).length !== 0) {\r\n      const message = \"Please submit valid file type\";\r\n      setWarningMsg(message);\r\n    } else {\r\n      addFile(accepted);\r\n      setWarningMsg(\"\");\r\n      console.log(accepted[0].preview);\r\n\r\n      var blobPromise = new Promise((resolve, reject) => {\r\n        const reader = new window.FileReader();\r\n        reader.readAsDataURL(accepted[0]);\r\n        reader.onloadend = () => {\r\n          const base64data = reader.result;\r\n          resolve(base64data);\r\n        };\r\n      });\r\n      blobPromise.then(value => {\r\n        console.log(value);\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n    const render =\r\n      Object.keys(files).length !== 0 ? (\r\n        files.map((file: any) => <p key={file.name}>{file.name}</p>)\r\n      ) : (\r\n        <p className=\"hello\">Please drop only .PDF, .DOC or .DOCX files</p>\r\n      );\r\n\r\n    return (\r\n      <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"50vh\",\r\n        border: \" 2px dashed\"\r\n      }}>\r\n        <p>{warningMsg}</p>\r\n\r\n        <Dropzone\r\n          multiple={false}\r\n          accept=\"application/msword, application/pdf, application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n          onDrop={(accepted, rejected) => onDrop(accepted, rejected)}\r\n        >\r\n          {({ isDragAccept, isDragReject, acceptedFiles }) => {\r\n            if (isDragReject) return \"Please submit a valid file\";\r\n            return render;\r\n          }}\r\n        </Dropzone>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default FileUpload;\r\n"]},"metadata":{},"sourceType":"module"}