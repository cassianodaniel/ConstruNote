{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{createContext,useContext,useState,useEffect}from\"react\";export var CallContext=createContext({});export var CallProvider=function CallProvider(_ref){var children=_ref.children;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),show=_useState2[0],setShow=_useState2[1];var _useState3=useState(new Map()),_useState4=_slicedToArray(_useState3,2),currentCalls=_useState4[0],setCurrentCalls=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),callNumber=_useState6[0],setCallNumber=_useState6[1];var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),updateConstraints=_useState8[0],setUpdateConstraints=_useState8[1];var _useState9=useState(),_useState10=_slicedToArray(_useState9,2),blindTransfer=_useState10[0],setBlindTransfer=_useState10[1];var _useState11=useState(),_useState12=_slicedToArray(_useState11,2),assistedTransfer=_useState12[0],setAssistedTransfer=_useState12[1];var _useState13=useState(),_useState14=_slicedToArray(_useState13,2),conferenceCommand=_useState14[0],setConferenceCommand=_useState14[1];var time=function time(){// const callWhitoutTime = Array.from(currentCalls.values()).find(\n//   (c) => !c.interval\n// );\n// if (callWhitoutTime) {\n//   if (callWhitoutTime.callStatus === CallStatus.ON_GOING) {\n//     let cc = { ...callWhitoutTime };\n//     if (cc.interval) clearInterval(cc.interval);\n//     cc.interval = setInterval(() => {\n//       const currentCallsCopy = new Map<string, ICall>(currentCalls);\n//       cc.seconds = cc.seconds ? cc.seconds + 1 : 1;\n//       currentCallsCopy.set(cc.callId, cc);\n//       setCurrentCalls(currentCallsCopy);\n//     }, 1000);\n//   }\n// }\n};useEffect(time,[currentCalls]);return/*#__PURE__*/React.createElement(CallContext.Provider,{value:{show:show,setShow:setShow,currentCalls:currentCalls,setCurrentCalls:setCurrentCalls,callNumber:callNumber,setCallNumber:setCallNumber,updateConstraints:updateConstraints,setUpdateConstraints:setUpdateConstraints,blindTransfer:blindTransfer,setBlindTransfer:setBlindTransfer,assistedTransfer:assistedTransfer,setAssistedTransfer:setAssistedTransfer,conferenceCommand:conferenceCommand,setConferenceCommand:setConferenceCommand}},children);};export function useCall(){return useContext(CallContext);}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/contexts/CallContext.tsx"],"names":["React","createContext","useContext","useState","useEffect","CallContext","CallProvider","children","show","setShow","Map","currentCalls","setCurrentCalls","callNumber","setCallNumber","updateConstraints","setUpdateConstraints","blindTransfer","setBlindTransfer","assistedTransfer","setAssistedTransfer","conferenceCommand","setConferenceCommand","time","useCall"],"mappings":"gLAAA,MAAOA,CAAAA,KAAP,EAAgBC,aAAhB,CAA+BC,UAA/B,CAA2CC,QAA3C,CAAqDC,SAArD,KAAsE,OAAtE,CAwCA,MAAO,IAAMC,CAAAA,WAAW,CAAGJ,aAAa,CACtC,EADsC,CAAjC,CAIP,MAAO,IAAMK,CAAAA,YAAsB,CAAG,QAAzBA,CAAAA,YAAyB,MAAkB,IAAfC,CAAAA,QAAe,MAAfA,QAAe,eAC9BJ,QAAQ,CAAC,KAAD,CADsB,wCAC/CK,IAD+C,eACzCC,OADyC,8BAEdN,QAAQ,CAC9C,GAAIO,CAAAA,GAAJ,EAD8C,CAFM,yCAE/CC,YAF+C,eAEjCC,eAFiC,8BAKlBT,QAAQ,EALU,yCAK/CU,UAL+C,eAKnCC,aALmC,8BASlDX,QAAQ,EAT0C,yCAOpDY,iBAPoD,eAQpDC,oBARoD,8BAUZb,QAAQ,EAVI,0CAU/Cc,aAV+C,gBAUhCC,gBAVgC,gCAaNf,QAAQ,EAbF,2CAa/CgB,gBAb+C,gBAa7BC,mBAb6B,gCAgBJjB,QAAQ,EAhBJ,2CAgB/CkB,iBAhB+C,gBAgB5BC,oBAhB4B,gBAmBtD,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAM,CACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CAhBD,CAkBAnB,SAAS,CAACmB,IAAD,CAAO,CAACZ,YAAD,CAAP,CAAT,CAEA,mBACE,oBAAC,WAAD,CAAa,QAAb,EACE,KAAK,CAAE,CACLH,IAAI,CAAJA,IADK,CAELC,OAAO,CAAPA,OAFK,CAGLE,YAAY,CAAZA,YAHK,CAILC,eAAe,CAAfA,eAJK,CAKLC,UAAU,CAAVA,UALK,CAMLC,aAAa,CAAbA,aANK,CAOLC,iBAAiB,CAAjBA,iBAPK,CAQLC,oBAAoB,CAApBA,oBARK,CASLC,aAAa,CAAbA,aATK,CAULC,gBAAgB,CAAhBA,gBAVK,CAWLC,gBAAgB,CAAhBA,gBAXK,CAYLC,mBAAmB,CAAnBA,mBAZK,CAaLC,iBAAiB,CAAjBA,iBAbK,CAcLC,oBAAoB,CAApBA,oBAdK,CADT,EAkBGf,QAlBH,CADF,CAsBD,CA7DM,CA+DP,MAAO,SAASiB,CAAAA,OAAT,EAAmB,CACxB,MAAOtB,CAAAA,UAAU,CAACG,WAAD,CAAjB,CACD","sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport ICall from \"../alias/ICall\";\r\nimport { UpdateConstraintsParams } from \"../services/SquadVoiceCommunicator\";\r\nimport { Commands } from \"../services/SquadEventsCommunicator\";\r\n//alias\r\ninterface MakeCall {\r\n  number: string;\r\n  useVideo: boolean;\r\n  useAudio: boolean;\r\n}\r\ninterface BlindTransfer {\r\n  number: string;\r\n  callId: string;\r\n}\r\ninterface AssistedTransfer {\r\n  firstCallId: string;\r\n  secondCallId: string;\r\n}\r\ninterface ConferenceCommand {\r\n  command: Commands;\r\n  conferenceId: string;\r\n  extraParam: string;\r\n}\r\ninterface ICallContextData {\r\n  show: boolean;\r\n  setShow(value: boolean): void;\r\n  currentCalls: Map<string, ICall>;\r\n  setCurrentCalls(value: Map<string, ICall>): void;\r\n  callNumber: MakeCall | undefined;\r\n  setCallNumber(value: MakeCall | undefined): void;\r\n  updateConstraints: UpdateConstraintsParams | undefined;\r\n  setUpdateConstraints(val: UpdateConstraintsParams | undefined): void;\r\n  blindTransfer: BlindTransfer | undefined;\r\n  setBlindTransfer(val: BlindTransfer | undefined): void;\r\n  assistedTransfer: AssistedTransfer | undefined;\r\n  setAssistedTransfer(val: AssistedTransfer | undefined): void;\r\n  conferenceCommand: ConferenceCommand | undefined;\r\n  setConferenceCommand(val: ConferenceCommand | undefined): void;\r\n}\r\n\r\nexport const CallContext = createContext<ICallContextData>(\r\n  {} as ICallContextData\r\n);\r\n\r\nexport const CallProvider: React.FC = ({ children }) => {\r\n  const [show, setShow] = useState(false);\r\n  const [currentCalls, setCurrentCalls] = useState<Map<string, ICall>>(\r\n    new Map<string, ICall>()\r\n  );\r\n  const [callNumber, setCallNumber] = useState<MakeCall | undefined>();\r\n  const [\r\n    updateConstraints,\r\n    setUpdateConstraints,\r\n  ] = useState<UpdateConstraintsParams>();\r\n  const [blindTransfer, setBlindTransfer] = useState<\r\n    BlindTransfer | undefined\r\n  >();\r\n  const [assistedTransfer, setAssistedTransfer] = useState<\r\n    AssistedTransfer | undefined\r\n  >();\r\n  const [conferenceCommand, setConferenceCommand] = useState<\r\n    ConferenceCommand | undefined\r\n  >();\r\n  const time = () => {\r\n    // const callWhitoutTime = Array.from(currentCalls.values()).find(\r\n    //   (c) => !c.interval\r\n    // );\r\n    // if (callWhitoutTime) {\r\n    //   if (callWhitoutTime.callStatus === CallStatus.ON_GOING) {\r\n    //     let cc = { ...callWhitoutTime };\r\n    //     if (cc.interval) clearInterval(cc.interval);\r\n    //     cc.interval = setInterval(() => {\r\n    //       const currentCallsCopy = new Map<string, ICall>(currentCalls);\r\n    //       cc.seconds = cc.seconds ? cc.seconds + 1 : 1;\r\n    //       currentCallsCopy.set(cc.callId, cc);\r\n    //       setCurrentCalls(currentCallsCopy);\r\n    //     }, 1000);\r\n    //   }\r\n    // }\r\n  };\r\n\r\n  useEffect(time, [currentCalls]);\r\n\r\n  return (\r\n    <CallContext.Provider\r\n      value={{\r\n        show,\r\n        setShow,\r\n        currentCalls,\r\n        setCurrentCalls,\r\n        callNumber,\r\n        setCallNumber,\r\n        updateConstraints,\r\n        setUpdateConstraints,\r\n        blindTransfer,\r\n        setBlindTransfer,\r\n        assistedTransfer,\r\n        setAssistedTransfer,\r\n        conferenceCommand,\r\n        setConferenceCommand,\r\n      }}\r\n    >\r\n      {children}\r\n    </CallContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useCall() {\r\n  return useContext(CallContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}