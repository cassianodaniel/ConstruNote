{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { Levels } from \"./levels\";\nimport { Logger } from \"./logger\";\n/**\n * Logger.\n * @public\n */\n\nexport var LoggerFactory = /*#__PURE__*/function () {\n  function LoggerFactory() {\n    _classCallCheck(this, LoggerFactory);\n\n    this.builtinEnabled = true;\n    this._level = Levels.log; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    this.loggers = {};\n    this.logger = this.getLogger(\"sip:loggerfactory\");\n  }\n\n  _createClass(LoggerFactory, [{\n    key: \"getLogger\",\n    value: function getLogger(category, label) {\n      if (label && this.level === 3) {\n        return new Logger(this, category, label);\n      } else if (this.loggers[category]) {\n        return this.loggers[category];\n      } else {\n        var logger = new Logger(this, category);\n        this.loggers[category] = logger;\n        return logger;\n      }\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  }, {\n    key: \"genericLog\",\n    value: function genericLog(levelToLog, category, label, content) {\n      if (this.level >= levelToLog) {\n        if (this.builtinEnabled) {\n          this.print(levelToLog, category, label, content);\n        }\n      }\n\n      if (this.connector) {\n        this.connector(Levels[levelToLog], category, label, content);\n      }\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  }, {\n    key: \"print\",\n    value: function print(levelToLog, category, label, content) {\n      if (typeof content === \"string\") {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        var prefix = [new Date(), category];\n\n        if (label) {\n          prefix.push(label);\n        }\n\n        content = prefix.concat(content).join(\" | \");\n      }\n\n      switch (levelToLog) {\n        case Levels.error:\n          // eslint-disable-next-line no-console\n          console.error(content);\n          break;\n\n        case Levels.warn:\n          // eslint-disable-next-line no-console\n          console.warn(content);\n          break;\n\n        case Levels.log:\n          // eslint-disable-next-line no-console\n          console.log(content);\n          break;\n\n        case Levels.debug:\n          // eslint-disable-next-line no-console\n          console.debug(content);\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"level\",\n    get: function get() {\n      return this._level;\n    },\n    set: function set(newLevel) {\n      if (newLevel >= 0 && newLevel <= 3) {\n        this._level = newLevel;\n      } else if (newLevel > 3) {\n        this._level = 3; // eslint-disable-next-line no-prototype-builtins\n      } else if (Levels.hasOwnProperty(newLevel)) {\n        this._level = newLevel;\n      } else {\n        this.logger.error(\"invalid 'level' parameter value: \" + JSON.stringify(newLevel));\n      }\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  }, {\n    key: \"connector\",\n    get: function get() {\n      return this._connector;\n    },\n    set: function set(value) {\n      if (!value) {\n        this._connector = undefined;\n      } else if (typeof value === \"function\") {\n        this._connector = value;\n      } else {\n        this.logger.error(\"invalid 'connector' parameter value: \" + JSON.stringify(value));\n      }\n    }\n  }]);\n\n  return LoggerFactory;\n}();","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/core/log/logger-factory.js"],"names":["Levels","Logger","LoggerFactory","builtinEnabled","_level","log","loggers","logger","getLogger","category","label","level","levelToLog","content","print","connector","prefix","Date","push","concat","join","error","console","warn","debug","newLevel","hasOwnProperty","JSON","stringify","_connector","value","undefined"],"mappings":"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","sourcesContent":["import { Levels } from \"./levels\";\nimport { Logger } from \"./logger\";\n/**\n * Logger.\n * @public\n */\nexport class LoggerFactory {\n    constructor() {\n        this.builtinEnabled = true;\n        this._level = Levels.log;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.loggers = {};\n        this.logger = this.getLogger(\"sip:loggerfactory\");\n    }\n    get level() {\n        return this._level;\n    }\n    set level(newLevel) {\n        if (newLevel >= 0 && newLevel <= 3) {\n            this._level = newLevel;\n        }\n        else if (newLevel > 3) {\n            this._level = 3;\n            // eslint-disable-next-line no-prototype-builtins\n        }\n        else if (Levels.hasOwnProperty(newLevel)) {\n            this._level = newLevel;\n        }\n        else {\n            this.logger.error(\"invalid 'level' parameter value: \" + JSON.stringify(newLevel));\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get connector() {\n        return this._connector;\n    }\n    set connector(value) {\n        if (!value) {\n            this._connector = undefined;\n        }\n        else if (typeof value === \"function\") {\n            this._connector = value;\n        }\n        else {\n            this.logger.error(\"invalid 'connector' parameter value: \" + JSON.stringify(value));\n        }\n    }\n    getLogger(category, label) {\n        if (label && this.level === 3) {\n            return new Logger(this, category, label);\n        }\n        else if (this.loggers[category]) {\n            return this.loggers[category];\n        }\n        else {\n            const logger = new Logger(this, category);\n            this.loggers[category] = logger;\n            return logger;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    genericLog(levelToLog, category, label, content) {\n        if (this.level >= levelToLog) {\n            if (this.builtinEnabled) {\n                this.print(levelToLog, category, label, content);\n            }\n        }\n        if (this.connector) {\n            this.connector(Levels[levelToLog], category, label, content);\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    print(levelToLog, category, label, content) {\n        if (typeof content === \"string\") {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const prefix = [new Date(), category];\n            if (label) {\n                prefix.push(label);\n            }\n            content = prefix.concat(content).join(\" | \");\n        }\n        switch (levelToLog) {\n            case Levels.error:\n                // eslint-disable-next-line no-console\n                console.error(content);\n                break;\n            case Levels.warn:\n                // eslint-disable-next-line no-console\n                console.warn(content);\n                break;\n            case Levels.log:\n                // eslint-disable-next-line no-console\n                console.log(content);\n                break;\n            case Levels.debug:\n                // eslint-disable-next-line no-console\n                console.debug(content);\n                break;\n            default:\n                break;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}