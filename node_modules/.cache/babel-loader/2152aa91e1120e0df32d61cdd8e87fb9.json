{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ModalNewConference.tsx\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input, Alert } from \"reactstrap\"; //simple bar\n\nimport SimpleBar from \"simplebar-react\"; //components\n\nimport SelectContact from \"./SelectContact\";\nimport { useTranslation } from \"react-i18next\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport EmailList from \"./EmailList\";\nimport { zeroLeft } from \"./../helpers/zeroLeft\";\nimport Swal from \"sweetalert2\";\nimport { useConference } from \"../contexts/ConferenceContext\";\n\nconst today = () => {\n  var today = new Date();\n  var dd = today.getDate();\n  var mm = today.getMonth() + 1; //January is 0!\n\n  var yyyy = today.getFullYear();\n  var hh = zeroLeft(today.getHours(), 2);\n  var min = zeroLeft(today.getMinutes(), 2);\n  return {\n    date: `${yyyy}-${mm}-${dd}`,\n    time: `${hh}:${min}`\n  };\n};\n\nexport const ModalNewConference = ({\n  show,\n  toggle\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    contacts\n  } = useContact();\n  const {\n    setCreateConference\n  } = useConference();\n  const [isOpenAlert, setIsOpenAlert] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [startDate, setStartDate] = useState(today().date);\n  const [startTime, setStartTime] = useState(today().time);\n  const [duration, setDuration] = useState(\"01:00\");\n  const [mdCheck, setMdCheck] = useState(false);\n  const [selectedContact, setSelectedContact] = useState([]);\n  const [emailList, setEmailList] = useState([]);\n\n  const handleCreateGroup = () => {\n    setCreateConference({\n      name,\n      description,\n      startDate,\n      startTime,\n      duration,\n      mdCheck,\n      selectedContact,\n      emailList\n    });\n    setIsOpenAlert(true);\n    setMessage(\"Criando conferÃªncia...\");\n    setTimeout(() => {\n      setIsOpenAlert(false);\n      setMessage(\"\");\n      setSearch(\"\");\n      setName(\"\");\n      setDescription(\"\");\n      setStartDate(today().date);\n      setStartTime(today().time);\n      setDuration(\"01:00\");\n      setMdCheck(false);\n      setSelectedContact([]);\n      setEmailList([]);\n    }, 2000);\n  };\n\n  const handleCheckContact = (selected, contact) => {\n    if (selected) {\n      let selected = selectedContact;\n      selected.push(contact);\n      setSelectedContact(selected);\n    } else {\n      setSelectedContact(selectedContact.filter(sel => {\n        if (sel.id === contact.id) {\n          return false;\n        }\n\n        return true;\n      }));\n    }\n  };\n\n  const updatedTime = () => {\n    setTime(startTime);\n  };\n\n  useEffect(updatedTime, [startDate]);\n\n  const setTime = value => {\n    let time = value.split(\":\");\n    let currentTime = today().time.split(\":\");\n\n    if (startDate === today().date) {\n      if (parseInt(time[0]) < parseInt(currentTime[0])) {\n        Swal.fire(\"Error!\", \"the time has to be longer than the current one!\", \"error\");\n        setStartTime(today().time);\n        return;\n      }\n\n      if (parseInt(time[0]) === parseInt(currentTime[0]) && parseInt(time[1]) < parseInt(currentTime[1])) {\n        Swal.fire(\"Error!\", \"the time has to be longer than the current one!\", \"error\");\n        setStartTime(today().time);\n        return;\n      }\n    }\n\n    setStartTime(value);\n  };\n\n  const inputName = useRef(null);\n  useEffect(() => {\n    setTimeout(() => {\n      var _inputName$current;\n\n      return (_inputName$current = inputName.current) === null || _inputName$current === void 0 ? void 0 : _inputName$current.focus();\n    }, 500);\n  }, [show]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: show,\n    size: \"lg\",\n    centered: true,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    tag: \"h5\",\n    className: \"modal-title font-size-16\",\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, t(\"Create conference\")), /*#__PURE__*/React.createElement(ModalBody, {\n    className: \"p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"name-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, t(\"Name of the room\")), /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputName,\n    type: \"text\",\n    className: \"form-control\",\n    id: \"name-input\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    placeholder: t(\"name...\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"description-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }, t(\"Room description\")), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    className: \"form-control\",\n    id: \"description-input\",\n    value: description,\n    onChange: e => setDescription(e.target.value),\n    placeholder: t(\"description...\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4 col-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"date-start-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 19\n    }\n  }, t(\"Start date\")), /*#__PURE__*/React.createElement(Input, {\n    type: \"date\",\n    className: \"form-control\",\n    id: \"date-start-input\",\n    min: today().date,\n    value: startDate,\n    onChange: e => setStartDate(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4 col-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"time-start-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 19\n    }\n  }, t(\"Start time\")), /*#__PURE__*/React.createElement(Input, {\n    type: \"time\",\n    className: \"form-control\",\n    id: \"time-start-input\",\n    value: startTime,\n    onChange: e => setTime(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4 col-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"duration-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 19\n    }\n  }, t(\"Duration\")), /*#__PURE__*/React.createElement(Input, {\n    type: \"time\",\n    className: \"form-control\",\n    id: \"date-end-input\",\n    value: duration,\n    onChange: e => setDuration(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4 col-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"custom-control custom-checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"checkbox\",\n    className: \"custom-control-input\",\n    onChange: e => {\n      setMdCheck(e.target.checked);\n    },\n    id: \"mdCheck\",\n    value: mdCheck ? 1 : 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    className: \"custom-control-label\",\n    htmlFor: \"mdCheck\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 21\n    }\n  }, \"Aguardar moderador\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"search-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 17\n    }\n  }, t(\"Conference Members\")), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    className: \"form-control mb-2\",\n    id: \"search-input\",\n    value: search,\n    onChange: e => setSearch(e.target.value),\n    placeholder: t(\"search users...\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SimpleBar, {\n    style: {\n      height: \"320px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"addContacts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(SelectContact, {\n    handleCheckContact: handleCheckContact,\n    contacts: contacts,\n    search: search,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 23\n    }\n  }))))))), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 11\n    }\n  }, t(\"External participants\")), /*#__PURE__*/React.createElement(EmailList, {\n    emailList: emailList,\n    setEmailList: setEmailList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Alert, {\n    isOpen: isOpenAlert,\n    color: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 9\n    }\n  }, message)), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"link\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }\n  }, t(\"Close\")), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"primary\",\n    onClick: handleCreateGroup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }\n  }, t(\"Create conference\"))));\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ModalNewConference.tsx"],"names":["React","useState","useEffect","useRef","Button","Modal","ModalHeader","ModalBody","ModalFooter","Form","FormGroup","Label","Input","Alert","SimpleBar","SelectContact","useTranslation","useContact","EmailList","zeroLeft","Swal","useConference","today","Date","dd","getDate","mm","getMonth","yyyy","getFullYear","hh","getHours","min","getMinutes","date","time","ModalNewConference","show","toggle","t","contacts","setCreateConference","isOpenAlert","setIsOpenAlert","search","setSearch","message","setMessage","name","setName","description","setDescription","startDate","setStartDate","startTime","setStartTime","duration","setDuration","mdCheck","setMdCheck","selectedContact","setSelectedContact","emailList","setEmailList","handleCreateGroup","setTimeout","handleCheckContact","selected","contact","push","filter","sel","id","updatedTime","setTime","value","split","currentTime","parseInt","fire","inputName","current","focus","e","target","checked","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Alert,\r\n} from \"reactstrap\";\r\n\r\n//simple bar\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\n//components\r\nimport SelectContact from \"./SelectContact\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\nimport IContact from \"../alias/IContact\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport EmailList from \"./EmailList\";\r\nimport IEmailList from \"../alias/IEmailList\";\r\nimport { zeroLeft } from \"./../helpers/zeroLeft\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useConference } from \"../contexts/ConferenceContext\";\r\n\r\ninterface IProps {\r\n  show: boolean;\r\n  toggle(): void;\r\n}\r\n\r\nconst today = () => {\r\n  var today = new Date();\r\n  var dd = today.getDate();\r\n  var mm = today.getMonth() + 1; //January is 0!\r\n  var yyyy = today.getFullYear();\r\n\r\n  var hh = zeroLeft(today.getHours(), 2);\r\n  var min = zeroLeft(today.getMinutes(), 2);\r\n\r\n  return {\r\n    date: `${yyyy}-${mm}-${dd}`,\r\n    time: `${hh}:${min}`,\r\n  };\r\n};\r\n\r\nexport const ModalNewConference: React.FC<IProps> = ({ show, toggle }) => {\r\n  const { t } = useTranslation();\r\n  const { contacts } = useContact();\r\n  const { setCreateConference } = useConference();\r\n\r\n  const [isOpenAlert, setIsOpenAlert] = useState(false);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const [name, setName] = useState<string>(\"\");\r\n  const [description, setDescription] = useState<string>(\"\");\r\n  const [startDate, setStartDate] = useState<string>(today().date);\r\n  const [startTime, setStartTime] = useState<string>(today().time);\r\n  const [duration, setDuration] = useState<string>(\"01:00\");\r\n  const [mdCheck, setMdCheck] = useState<boolean>(false);\r\n  const [selectedContact, setSelectedContact] = useState<IContact[]>([]);\r\n  const [emailList, setEmailList] = useState<IEmailList[]>([]);\r\n\r\n  const handleCreateGroup = () => {\r\n    setCreateConference({\r\n      name,\r\n      description,\r\n      startDate,\r\n      startTime,\r\n      duration,\r\n      mdCheck,\r\n      selectedContact,\r\n      emailList,\r\n    });\r\n\r\n    setIsOpenAlert(true);\r\n    setMessage(\"Criando conferÃªncia...\");\r\n\r\n    setTimeout(() => {\r\n      setIsOpenAlert(false);\r\n      setMessage(\"\");\r\n      setSearch(\"\");\r\n      setName(\"\");\r\n      setDescription(\"\");\r\n      setStartDate(today().date);\r\n      setStartTime(today().time);\r\n      setDuration(\"01:00\");\r\n      setMdCheck(false);\r\n      setSelectedContact([]);\r\n      setEmailList([]);\r\n    }, 2000);\r\n  };\r\n\r\n  const handleCheckContact = (selected: boolean, contact: IContact) => {\r\n    if (selected) {\r\n      let selected = selectedContact;\r\n      selected.push(contact);\r\n      setSelectedContact(selected);\r\n    } else {\r\n      setSelectedContact(\r\n        selectedContact.filter((sel) => {\r\n          if (sel.id === contact.id) {\r\n            return false;\r\n          }\r\n          return true;\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const updatedTime = () => {\r\n    setTime(startTime);\r\n  };\r\n\r\n  useEffect(updatedTime, [startDate]);\r\n\r\n  const setTime = (value: string) => {\r\n    let time = value.split(\":\");\r\n    let currentTime = today().time.split(\":\");\r\n\r\n    if (startDate === today().date) {\r\n      if (parseInt(time[0]) < parseInt(currentTime[0])) {\r\n        Swal.fire(\r\n          \"Error!\",\r\n          \"the time has to be longer than the current one!\",\r\n          \"error\"\r\n        );\r\n        setStartTime(today().time);\r\n        return;\r\n      }\r\n\r\n      if (\r\n        parseInt(time[0]) === parseInt(currentTime[0]) &&\r\n        parseInt(time[1]) < parseInt(currentTime[1])\r\n      ) {\r\n        Swal.fire(\r\n          \"Error!\",\r\n          \"the time has to be longer than the current one!\",\r\n          \"error\"\r\n        );\r\n        setStartTime(today().time);\r\n        return;\r\n      }\r\n    }\r\n\r\n    setStartTime(value);\r\n  };\r\n\r\n  const inputName = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => inputName.current?.focus(), 500);\r\n  }, [show]);\r\n\r\n  return (\r\n    <Modal isOpen={show} size=\"lg\" centered toggle={toggle}>\r\n      <ModalHeader\r\n        tag=\"h5\"\r\n        className=\"modal-title font-size-16\"\r\n        toggle={toggle}\r\n      >\r\n        {t(\"Create conference\")}\r\n      </ModalHeader>\r\n      <ModalBody className=\"p-4\">\r\n        <Form>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <FormGroup className=\"mb-4\">\r\n                <Label htmlFor=\"name-input\">{t(\"Name of the room\")}</Label>\r\n                <input\r\n                  ref={inputName}\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"name-input\"\r\n                  value={name}\r\n                  onChange={(e) => setName(e.target.value)}\r\n                  placeholder={t(\"name...\")}\r\n                />\r\n              </FormGroup>\r\n              <FormGroup className=\"mb-4\">\r\n                <Label htmlFor=\"description-input\">\r\n                  {t(\"Room description\")}\r\n                </Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"description-input\"\r\n                  value={description}\r\n                  onChange={(e) => setDescription(e.target.value)}\r\n                  placeholder={t(\"description...\")}\r\n                />\r\n              </FormGroup>\r\n              <div className=\"row\">\r\n                <FormGroup className=\"mb-4 col-6\">\r\n                  <Label htmlFor=\"date-start-input\">{t(\"Start date\")}</Label>\r\n                  <Input\r\n                    type=\"date\"\r\n                    className=\"form-control\"\r\n                    id=\"date-start-input\"\r\n                    min={today().date}\r\n                    value={startDate}\r\n                    onChange={(e) => setStartDate(e.target.value)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup className=\"mb-4 col-6\">\r\n                  <Label htmlFor=\"time-start-input\">{t(\"Start time\")}</Label>\r\n                  <Input\r\n                    type=\"time\"\r\n                    className=\"form-control\"\r\n                    id=\"time-start-input\"\r\n                    value={startTime}\r\n                    onChange={(e) => setTime(e.target.value)}\r\n                  />\r\n                </FormGroup>\r\n              </div>\r\n              <div className=\"row\">\r\n                <FormGroup className=\"mb-4 col-6\">\r\n                  <Label htmlFor=\"duration-input\">{t(\"Duration\")}</Label>\r\n                  <Input\r\n                    type=\"time\"\r\n                    className=\"form-control\"\r\n                    id=\"date-end-input\"\r\n                    value={duration}\r\n                    onChange={(e) => setDuration(e.target.value)}\r\n                  />\r\n                </FormGroup>\r\n                <FormGroup className=\"mb-4 col-12\">\r\n                  <div className=\"custom-control custom-checkbox\">\r\n                    <Input\r\n                      type=\"checkbox\"\r\n                      className=\"custom-control-input\"\r\n                      onChange={(e) => {\r\n                        setMdCheck(e.target.checked);\r\n                      }}\r\n                      id={\"mdCheck\"}\r\n                      value={mdCheck ? 1 : 0}\r\n                    />\r\n                    <Label className=\"custom-control-label\" htmlFor={\"mdCheck\"}>\r\n                      Aguardar moderador\r\n                    </Label>\r\n                  </div>\r\n                </FormGroup>\r\n              </div>\r\n            </div>\r\n            <div className=\"col\">\r\n              <FormGroup className=\"mb-4\">\r\n                <Label htmlFor=\"search-input\">{t(\"Conference Members\")}</Label>\r\n                <Input\r\n                  type=\"text\"\r\n                  className=\"form-control mb-2\"\r\n                  id=\"search-input\"\r\n                  value={search}\r\n                  onChange={(e) => setSearch(e.target.value)}\r\n                  placeholder={t(\"search users...\")}\r\n                />\r\n                <div className=\"border\">\r\n                  <SimpleBar style={{ height: \"320px\" }}>\r\n                    <div id=\"addContacts\">\r\n                      <SelectContact\r\n                        handleCheckContact={handleCheckContact}\r\n                        contacts={contacts}\r\n                        search={search}\r\n                      />\r\n                    </div>\r\n                  </SimpleBar>\r\n                </div>\r\n              </FormGroup>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n          <h5 className=\"mb-3\">{t(\"External participants\")}</h5>\r\n          <EmailList emailList={emailList} setEmailList={setEmailList} />\r\n        </Form>\r\n        <Alert isOpen={isOpenAlert} color=\"danger\">\r\n          {message}\r\n        </Alert>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button type=\"button\" color=\"link\" onClick={toggle}>\r\n          {t(\"Close\")}\r\n        </Button>\r\n        <Button type=\"button\" color=\"primary\" onClick={handleCreateGroup}>\r\n          {t(\"Create conference\")}\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}