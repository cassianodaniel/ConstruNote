{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport { Events as VoiceEvents } from \"./voice/types/types\";\nimport { useCall } from \"../contexts/CallContext\";\nimport CallStatus from \"../enuns/CallStatus\";\nimport { useConference } from \"../contexts/ConferenceContext\";\nimport { ConferenceEvents } from \"./SquadEventsCommunicator\";\nimport { IConnectionStatus } from \"../alias/IUser\";\nimport { useAuth } from \"../contexts/AuthContext\"; //import { callbackify } from \"util\";\n// import IContact from \"../alias/IContact\";\n// Comentado para Evitar Warnings no console\n// interface CreateGroupCallback {\n//   (groupCreated: boolean): void;\n// }\n\nlet squadService;\n\nconst SquadSipCommunicator = () => {\n  const {\n    contacts\n  } = useContact();\n  const {\n    user,\n    setUser\n  } = useAuth();\n  const {\n    currentCalls,\n    setCurrentCalls,\n    callNumber,\n    setCallNumber,\n    updateConstraints,\n    setUpdateConstraints,\n    blindTransfer,\n    setBlindTransfer,\n    assistedTransfer,\n    setAssistedTransfer,\n    conferenceCommand,\n    setConferenceCommand\n  } = useCall();\n  const {\n    groups\n  } = useGroup();\n  const {\n    conferenceList\n  } = useConference();\n\n  const init = () => {\n    squadService = SquadService.getInstance({\n      voiceCB: voiceCommuncatorSubscribe\n    });\n  };\n\n  const setNewCall = call => {\n    const cc = new Map(currentCalls);\n    cc.set(call.callId, call);\n    setCurrentCalls(cc);\n  };\n\n  const removeCall = call => {\n    if (call.interval) clearTimeout(call.interval);\n    const cc = new Map(currentCalls);\n    cc.delete(call.callId);\n    setCurrentCalls(cc);\n  };\n\n  const onMakeCall = () => {\n    if (callNumber === null || callNumber === void 0 ? void 0 : callNumber.number) {\n      var _squadService, _squadService$sip;\n\n      if (currentCalls) {\n        Array.from(currentCalls.values()).forEach(call => {\n          if (!call.hold) {\n            call.holdCall();\n          }\n        });\n      }\n\n      const constraints = {\n        useAudio: callNumber === null || callNumber === void 0 ? void 0 : callNumber.useAudio,\n        useVideo: callNumber === null || callNumber === void 0 ? void 0 : callNumber.useVideo\n      };\n      (_squadService = squadService) === null || _squadService === void 0 ? void 0 : (_squadService$sip = _squadService.sip) === null || _squadService$sip === void 0 ? void 0 : _squadService$sip.makeCall(callNumber === null || callNumber === void 0 ? void 0 : callNumber.number, constraints);\n      setCallNumber(undefined);\n    }\n  };\n\n  const onUpdateConstraints = () => {\n    if (updateConstraints) {\n      var _squadService2;\n\n      (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.sip.updateConstraintsParams(updateConstraints);\n      setUpdateConstraints(undefined);\n    }\n  };\n\n  const onBlindTransfer = () => {\n    if (blindTransfer) {\n      var _squadService3;\n\n      (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.sip.sip.blindTransfer(blindTransfer.callId, blindTransfer.number);\n      setBlindTransfer(undefined);\n    }\n  };\n\n  const onAttendedTransfer = () => {\n    if (assistedTransfer) {\n      var _squadService4;\n\n      (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : _squadService4.sip.sip.attendedTransfer(assistedTransfer.firstCallId, assistedTransfer.secondCallId);\n      setAssistedTransfer(undefined);\n    }\n  };\n\n  const onCallHoldChange = (callId, status) => {\n    const currentCallsCopy = new Map(currentCalls);\n    let cpc = currentCallsCopy.get(callId);\n\n    if (cpc) {\n      cpc = { ...cpc\n      };\n      cpc.hold = status;\n      currentCallsCopy.set(cpc.callId, cpc);\n      setCurrentCalls(currentCallsCopy);\n    }\n  };\n\n  const onAcceptCall = (callId, useVideo) => {\n    const currentCallsCopy = new Map(currentCalls);\n    Array.from(currentCalls.values()).filter(cl => cl.callId !== callId).forEach(cl => {\n      var _squadService5;\n\n      (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.sip.holdCall(cl.callId);\n      cl.hold = true;\n      currentCallsCopy.set(cl.callId, cl);\n    });\n    let callCopy = currentCallsCopy.get(callId);\n\n    if (callCopy) {\n      callCopy = { ...callCopy\n      };\n      callCopy.callStatus = CallStatus.CONNECTING;\n      callCopy.sendingVideo = useVideo;\n      currentCallsCopy.set(callCopy.callId, callCopy);\n      setCurrentCalls(currentCallsCopy);\n    }\n  };\n\n  const onSendConferenceCommand = () => {\n    if (conferenceCommand) {\n      var _squadService6;\n\n      (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : _squadService6.events.sendCommand(conferenceCommand.conferenceId, conferenceCommand.command, conferenceCommand.extraParam);\n      setConferenceCommand(undefined);\n    }\n  };\n\n  const setConferenceParticipants = data => {\n    let conferenceCall = Array.from(currentCalls.values()).find(c => {\n      var _ref, _ref2, _data$members$;\n\n      return [(_ref = c.callerObject) === null || _ref === void 0 ? void 0 : _ref.id, (_ref2 = c.callerObject) === null || _ref2 === void 0 ? void 0 : _ref2.groupId].includes((_data$members$ = data.members[0]) === null || _data$members$ === void 0 ? void 0 : _data$members$.Conference_Name);\n    });\n\n    if (conferenceCall) {\n      conferenceCall = { ...conferenceCall\n      };\n      if (!conferenceCall.conferenceParticipants) conferenceCall.conferenceParticipants = [];\n      conferenceCall.conferenceParticipants = data.members.map(m => {\n        var _conferenceCall;\n\n        if (m.Caller_Name === ((_conferenceCall = conferenceCall) === null || _conferenceCall === void 0 ? void 0 : _conferenceCall.session.remoteIdentity.uri.aor.split(\"@\")[0])) {\n          conferenceCall.micMuted = !m.Speak;\n          conferenceCall.videoMuted = !m.See;\n        }\n\n        return {\n          memberId: m[\"Member-ID\"],\n          callerName: m.Caller_Caller_ID_Name,\n          conferenceName: m.Conference_Name,\n          callName: m.Caller_Name,\n          floor: m.Floor,\n          hear: m.Hear,\n          hold: m.Hold,\n          memberGhost: m[\"Member-Ghost\"],\n          memberType: m[\"Member-Type\"],\n          mute: m.Speak,\n          muteDetect: m[\"Mute-Detect\"],\n          see: m.See,\n          talking: m.Talking,\n          video: m.See\n        };\n      });\n      setNewCall({ ...conferenceCall\n      });\n    }\n  };\n\n  const setConferenceEvents = call => {\n    var _squadService7;\n\n    if (!call.callerObject.participantPin && !call.callerObject.groupId) return;\n    const callName = call.callerObject.id || call.callerObject.groupId;\n    (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : _squadService7.events.connect(callName, conferenceEventsSubscribe);\n  };\n\n  const hangupEvents = call => {\n    if (call.remoteIdentity.uri.aor.includes(\"citrus-conference-authenticated-\") || call.remoteIdentity.uri.aor.includes(\"citrus-conference_\")) {\n      var _squadService8;\n\n      (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : _squadService8.events.disconnect();\n    }\n  };\n\n  function voiceCommuncatorSubscribe(event, data) {\n    var _invitation$remoteIde, _invitation$remoteIde2, _ref3, _ref4, _ref5, _inviter$sessionDescr, _inviter$remoteIdenti, _inviter$remoteIdenti2, _ref6, _ref7, _ref8, _data$invitation, _data$inviter;\n\n    let endCall;\n\n    switch (event) {\n      case VoiceEvents.CONNECTED:\n        setUser({ ...user,\n          connectionStatus: IConnectionStatus.CONNECTED\n        });\n        console.log(\"connected\");\n        break;\n\n      case VoiceEvents.DISCONNECTED:\n        setUser({ ...user,\n          connectionStatus: IConnectionStatus.DISCONNECTED\n        });\n        break;\n\n      case VoiceEvents.RECEIVED_CALL:\n        const invitation = data;\n        const invitation_caller_id_number = (_invitation$remoteIde = invitation.remoteIdentity.uri.aor) === null || _invitation$remoteIde === void 0 ? void 0 : (_invitation$remoteIde2 = _invitation$remoteIde.split(\"@\")[0]) === null || _invitation$remoteIde2 === void 0 ? void 0 : _invitation$remoteIde2.replace(\"sip:\", \"\").replace(\"citrus-conference-authenticated-\", \"\").replace(\"citrus-conference_\", \"\").split(\"_\")[0];\n        const invitation_ctct_of_number = contacts.find(ctc => ctc.number === invitation_caller_id_number) || groups.find(grp => grp.groupId === invitation_caller_id_number) || conferenceList.find(conf => conf.id === invitation_caller_id_number);\n        let receivedCall;\n\n        endCall = () => {\n          var _squadService9;\n\n          (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : _squadService9.sip.sip.endCall(invitation);\n        };\n\n        receivedCall = {\n          callId: invitation.id,\n          callStatus: CallStatus.RINGING,\n          callerNumber: invitation_caller_id_number,\n          callerObject: invitation_ctct_of_number,\n          callerId: ((_ref3 = invitation_ctct_of_number) === null || _ref3 === void 0 ? void 0 : _ref3.id) || ((_ref4 = invitation_ctct_of_number) === null || _ref4 === void 0 ? void 0 : _ref4.groupId),\n          callerName: invitation_ctct_of_number === null || invitation_ctct_of_number === void 0 ? void 0 : invitation_ctct_of_number.name,\n          callerProfilePicture: invitation_ctct_of_number === null || invitation_ctct_of_number === void 0 ? void 0 : invitation_ctct_of_number.profilePicture,\n          session: invitation,\n          isGroup: !!((_ref5 = invitation_ctct_of_number) === null || _ref5 === void 0 ? void 0 : _ref5.groupId),\n          accept: (useVideo = false) => {\n            var _squadService10;\n\n            return (_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : _squadService10.sip.acceptCall(invitation, useVideo);\n          },\n          endCall,\n          micMuted: false,\n          videoMuted: false,\n          hold: false,\n          muteMic: () => {\n            var _squadService11;\n\n            return (_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : _squadService11.sip.muteMic(invitation.id);\n          },\n          unMuteMic: () => {\n            var _squadService12;\n\n            return (_squadService12 = squadService) === null || _squadService12 === void 0 ? void 0 : _squadService12.sip.unMuteMic(invitation.id);\n          },\n          disableCam: () => {\n            var _squadService13;\n\n            return (_squadService13 = squadService) === null || _squadService13 === void 0 ? void 0 : _squadService13.sip.disableCam(invitation.id);\n          },\n          enableCam: () => {\n            var _squadService14;\n\n            return (_squadService14 = squadService) === null || _squadService14 === void 0 ? void 0 : _squadService14.sip.enableCam(invitation.id);\n          },\n          holdCall: () => {\n            var _squadService15;\n\n            return (_squadService15 = squadService) === null || _squadService15 === void 0 ? void 0 : _squadService15.sip.holdCall(invitation.id);\n          },\n          unHoldCall: () => {\n            var _squadService16;\n\n            return (_squadService16 = squadService) === null || _squadService16 === void 0 ? void 0 : _squadService16.sip.unHoldCall(invitation.id);\n          },\n          sendDTMF: dtmf => {\n            var _squadService17;\n\n            return (_squadService17 = squadService) === null || _squadService17 === void 0 ? void 0 : _squadService17.sip.sip.sendDTMF(invitation.id, dtmf);\n          }\n        };\n        let conferenceId;\n\n        if (invitation_ctct_of_number.groupId) {\n          conferenceId = `${invitation_ctct_of_number.groupId}`;\n        } else if (invitation_ctct_of_number.participantPin) {\n          conferenceId = `${invitation_ctct_of_number.id}`;\n        }\n\n        if (conferenceId) {\n          receivedCall.shareScreen = () => {\n            var _squadService18;\n\n            (_squadService18 = squadService) === null || _squadService18 === void 0 ? void 0 : _squadService18.sip.sip.conferenceScreenShare(conferenceId);\n          };\n        }\n\n        setConferenceEvents(receivedCall);\n        setNewCall(receivedCall);\n        break;\n\n      case VoiceEvents.MAKE_CALL:\n        const inviter = data;\n        const localConstraints = inviter === null || inviter === void 0 ? void 0 : (_inviter$sessionDescr = inviter.sessionDescriptionHandlerOptions) === null || _inviter$sessionDescr === void 0 ? void 0 : _inviter$sessionDescr.constraints;\n        const inviter_caller_id_number = (_inviter$remoteIdenti = inviter.remoteIdentity.uri.aor) === null || _inviter$remoteIdenti === void 0 ? void 0 : (_inviter$remoteIdenti2 = _inviter$remoteIdenti.split(\"@\")[0]) === null || _inviter$remoteIdenti2 === void 0 ? void 0 : _inviter$remoteIdenti2.replace(\"sip:\", \"\").replace(\"citrus-conference-authenticated-\", \"\").replace(\"citrus-conference_\", \"\").split(\"_\")[0];\n        const inviter_ctct_of_number = contacts.find(ctc => ctc.number === inviter_caller_id_number) || groups.find(grp => grp.groupId === inviter_caller_id_number) || conferenceList.find(conf => conf.id === inviter_caller_id_number);\n\n        endCall = () => {\n          var _squadService19;\n\n          (_squadService19 = squadService) === null || _squadService19 === void 0 ? void 0 : _squadService19.sip.sip.endCall(inviter);\n        };\n\n        const sendCall = {\n          callId: inviter.id,\n          callStatus: CallStatus.CALLING,\n          callerNumber: inviter_caller_id_number,\n          callerObject: inviter_ctct_of_number,\n          callerId: ((_ref6 = inviter_ctct_of_number) === null || _ref6 === void 0 ? void 0 : _ref6.id) || ((_ref7 = inviter_ctct_of_number) === null || _ref7 === void 0 ? void 0 : _ref7.groupId),\n          callerName: inviter_ctct_of_number === null || inviter_ctct_of_number === void 0 ? void 0 : inviter_ctct_of_number.name,\n          callerProfilePicture: inviter_ctct_of_number === null || inviter_ctct_of_number === void 0 ? void 0 : inviter_ctct_of_number.profilePicture,\n          session: inviter,\n          isGroup: !!((_ref8 = inviter_ctct_of_number) === null || _ref8 === void 0 ? void 0 : _ref8.groupId),\n          sendingVideo: (localConstraints === null || localConstraints === void 0 ? void 0 : localConstraints.video) !== false,\n          endCall,\n          muteMic: () => {\n            var _squadService20;\n\n            return (_squadService20 = squadService) === null || _squadService20 === void 0 ? void 0 : _squadService20.sip.muteMic(inviter.id);\n          },\n          unMuteMic: () => {\n            var _squadService21;\n\n            return (_squadService21 = squadService) === null || _squadService21 === void 0 ? void 0 : _squadService21.sip.unMuteMic(inviter.id);\n          },\n          disableCam: () => {\n            var _squadService22;\n\n            return (_squadService22 = squadService) === null || _squadService22 === void 0 ? void 0 : _squadService22.sip.disableCam(inviter.id);\n          },\n          enableCam: () => {\n            var _squadService23;\n\n            return (_squadService23 = squadService) === null || _squadService23 === void 0 ? void 0 : _squadService23.sip.enableCam(inviter.id);\n          },\n          holdCall: () => {\n            var _squadService24;\n\n            return (_squadService24 = squadService) === null || _squadService24 === void 0 ? void 0 : _squadService24.sip.holdCall(inviter.id);\n          },\n          unHoldCall: () => {\n            var _squadService25;\n\n            return (_squadService25 = squadService) === null || _squadService25 === void 0 ? void 0 : _squadService25.sip.unHoldCall(inviter.id);\n          },\n          sendDTMF: dtmf => {\n            var _squadService26;\n\n            return (_squadService26 = squadService) === null || _squadService26 === void 0 ? void 0 : _squadService26.sip.sip.sendDTMF(inviter.id, dtmf);\n          }\n        };\n        let conferenceID;\n\n        if (inviter_ctct_of_number.groupId) {\n          conferenceID = `${inviter_ctct_of_number.groupId}`;\n        } else if (inviter_ctct_of_number.participantPin) {\n          conferenceID = `${inviter_ctct_of_number.id}`;\n        }\n\n        if (conferenceID) {\n          sendCall.shareScreen = () => {\n            var _squadService27;\n\n            (_squadService27 = squadService) === null || _squadService27 === void 0 ? void 0 : _squadService27.sip.sip.conferenceScreenShare(conferenceID);\n          };\n\n          sendCall.endCall = () => {\n            var _squadService28, _squadService29;\n\n            (_squadService28 = squadService) === null || _squadService28 === void 0 ? void 0 : _squadService28.sip.sip.endCall(inviter);\n            (_squadService29 = squadService) === null || _squadService29 === void 0 ? void 0 : _squadService29.sip.sip.endScreenShare();\n          };\n        }\n\n        setConferenceEvents(sendCall);\n        setNewCall(sendCall);\n        console.log(\"make_call\");\n        break;\n\n      case VoiceEvents.CALL_ON_GOING:\n        const callOnGoing = currentCalls.get(data === null || data === void 0 ? void 0 : (_data$invitation = data.invitation) === null || _data$invitation === void 0 ? void 0 : _data$invitation.id) || currentCalls.get(data === null || data === void 0 ? void 0 : (_data$inviter = data.inviter) === null || _data$inviter === void 0 ? void 0 : _data$inviter.id);\n\n        if (callOnGoing) {\n          const cc = { ...callOnGoing\n          };\n          cc.callStatus = CallStatus.ON_GOING;\n          cc.receivingVideo = data.receivingVideo;\n          cc.tagId = data.tagId;\n          setNewCall(cc); // squadService?.sip.sip.screenShare(\n          //   `citrus-conference-authenticated-${\n          //     (cc.callerObject as IGroup)?.groupId\n          //   }`\n          // );\n        }\n\n        break;\n\n      case VoiceEvents.CALL_HANGUP:\n        const hangupCall = currentCalls.get(data.id);\n\n        if (hangupCall) {\n          hangupEvents(hangupCall.session);\n          removeCall(hangupCall);\n        }\n\n        break;\n\n      case VoiceEvents.MUTE_MIC:\n        const currentCallsCopy = new Map(currentCalls);\n        let cc = currentCallsCopy.get(data.callId);\n\n        if (cc) {\n          cc = { ...cc\n          };\n          cc.micMuted = data.status;\n          currentCallsCopy.set(cc.callId, cc);\n          setCurrentCalls(currentCallsCopy);\n        }\n\n        break;\n\n      case VoiceEvents.MUTE_CAM:\n        const currentCallsCp = new Map(currentCalls);\n        let ccp = currentCallsCp.get(data.callId);\n\n        if (ccp) {\n          ccp = { ...ccp\n          };\n          ccp.videoMuted = data.status;\n          currentCallsCp.set(ccp.callId, ccp);\n          setCurrentCalls(currentCallsCp);\n        }\n\n        break;\n\n      case VoiceEvents.HOLD_CALL:\n        onCallHoldChange(data.callId, data.status);\n        break;\n\n      case VoiceEvents.ACCEPTED_CALL:\n        onAcceptCall(data.callId, data.useVideo);\n        break;\n\n      default:\n        console.log(event);\n        break;\n    }\n  }\n\n  const conferenceEventsSubscribe = (event, data) => {\n    switch (event) {\n      case ConferenceEvents.UPDATE:\n        setConferenceParticipants(data);\n        break;\n\n      default:\n        console.error(\"EVENT NOT MAPPED\");\n        console.log(event, data);\n        break;\n    }\n  };\n\n  const updateFunction = () => {\n    var _squadService30, _squadService31;\n\n    (_squadService30 = squadService) === null || _squadService30 === void 0 ? void 0 : _squadService30.updateVoiceSubscribeFunction(voiceCommuncatorSubscribe);\n    (_squadService31 = squadService) === null || _squadService31 === void 0 ? void 0 : _squadService31.updateEventsSubscribeFunction(conferenceEventsSubscribe);\n  };\n\n  useEffect(init, []);\n  useEffect(updateFunction, [contacts, groups, currentCalls, callNumber, user]);\n  useEffect(onMakeCall, [callNumber]);\n  useEffect(onUpdateConstraints, [updateConstraints]);\n  useEffect(onBlindTransfer, [blindTransfer]);\n  useEffect(onAttendedTransfer, [assistedTransfer]);\n  useEffect(onSendConferenceCommand, [conferenceCommand]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n\nexport default SquadSipCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadSipCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useGroup","useContact","Events","VoiceEvents","useCall","CallStatus","useConference","ConferenceEvents","IConnectionStatus","useAuth","squadService","SquadSipCommunicator","contacts","user","setUser","currentCalls","setCurrentCalls","callNumber","setCallNumber","updateConstraints","setUpdateConstraints","blindTransfer","setBlindTransfer","assistedTransfer","setAssistedTransfer","conferenceCommand","setConferenceCommand","groups","conferenceList","init","getInstance","voiceCB","voiceCommuncatorSubscribe","setNewCall","call","cc","Map","set","callId","removeCall","interval","clearTimeout","delete","onMakeCall","number","Array","from","values","forEach","hold","holdCall","constraints","useAudio","useVideo","sip","makeCall","undefined","onUpdateConstraints","updateConstraintsParams","onBlindTransfer","onAttendedTransfer","attendedTransfer","firstCallId","secondCallId","onCallHoldChange","status","currentCallsCopy","cpc","get","onAcceptCall","filter","cl","callCopy","callStatus","CONNECTING","sendingVideo","onSendConferenceCommand","events","sendCommand","conferenceId","command","extraParam","setConferenceParticipants","data","conferenceCall","find","c","callerObject","id","groupId","includes","members","Conference_Name","conferenceParticipants","map","m","Caller_Name","session","remoteIdentity","uri","aor","split","micMuted","Speak","videoMuted","See","memberId","callerName","Caller_Caller_ID_Name","conferenceName","callName","floor","Floor","hear","Hear","Hold","memberGhost","memberType","mute","muteDetect","see","talking","Talking","video","setConferenceEvents","participantPin","connect","conferenceEventsSubscribe","hangupEvents","disconnect","event","endCall","CONNECTED","connectionStatus","console","log","DISCONNECTED","RECEIVED_CALL","invitation","invitation_caller_id_number","replace","invitation_ctct_of_number","ctc","grp","conf","receivedCall","RINGING","callerNumber","callerId","name","callerProfilePicture","profilePicture","isGroup","accept","acceptCall","muteMic","unMuteMic","disableCam","enableCam","unHoldCall","sendDTMF","dtmf","shareScreen","conferenceScreenShare","MAKE_CALL","inviter","localConstraints","sessionDescriptionHandlerOptions","inviter_caller_id_number","inviter_ctct_of_number","sendCall","CALLING","conferenceID","endScreenShare","CALL_ON_GOING","callOnGoing","ON_GOING","receivingVideo","tagId","CALL_HANGUP","hangupCall","MUTE_MIC","MUTE_CAM","currentCallsCp","ccp","HOLD_CALL","ACCEPTED_CALL","UPDATE","error","updateFunction","updateVoiceSubscribeFunction","updateEventsSubscribeFunction"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport IContact from \"../alias/IContact\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport { Events as VoiceEvents } from \"./voice/types/types\";\r\nimport { useCall } from \"../contexts/CallContext\";\r\nimport ICall from \"../alias/ICall\";\r\nimport { Invitation, Inviter, Session } from \"sip.js\";\r\nimport CallStatus from \"../enuns/CallStatus\";\r\nimport { useConference } from \"../contexts/ConferenceContext\";\r\nimport { ConferenceEvent, ConferenceEvents } from \"./SquadEventsCommunicator\";\r\nimport { IConference } from \"../alias/IConference\";\r\nimport IUser, { IConnectionStatus } from \"../alias/IUser\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\n//import { callbackify } from \"util\";\r\n\r\n// import IContact from \"../alias/IContact\";\r\n// Comentado para Evitar Warnings no console\r\n// interface CreateGroupCallback {\r\n//   (groupCreated: boolean): void;\r\n// }\r\n\r\nlet squadService: SquadService | undefined;\r\n\r\nconst SquadSipCommunicator: React.FC = () => {\r\n  const { contacts } = useContact();\r\n  const { user, setUser } = useAuth();\r\n  const {\r\n    currentCalls,\r\n    setCurrentCalls,\r\n    callNumber,\r\n    setCallNumber,\r\n    updateConstraints,\r\n    setUpdateConstraints,\r\n    blindTransfer,\r\n    setBlindTransfer,\r\n    assistedTransfer,\r\n    setAssistedTransfer,\r\n    conferenceCommand,\r\n    setConferenceCommand,\r\n  } = useCall();\r\n  const { groups } = useGroup();\r\n  const { conferenceList } = useConference();\r\n  const init = () => {\r\n    squadService = SquadService.getInstance({\r\n      voiceCB: voiceCommuncatorSubscribe,\r\n    });\r\n  };\r\n  const setNewCall = (call: ICall) => {\r\n    const cc = new Map<string, ICall>(currentCalls);\r\n    cc.set(call.callId, call);\r\n    setCurrentCalls(cc);\r\n  };\r\n  const removeCall = (call: ICall) => {\r\n    if (call.interval) clearTimeout(call.interval);\r\n    const cc = new Map<string, ICall>(currentCalls);\r\n    cc.delete(call.callId);\r\n    setCurrentCalls(cc);\r\n  };\r\n  const onMakeCall = () => {\r\n    if (callNumber?.number) {\r\n      if (currentCalls) {\r\n        Array.from(currentCalls.values()).forEach((call) => {\r\n          if (!call.hold) {\r\n            call.holdCall();\r\n          }\r\n        });\r\n      }\r\n      const constraints = {\r\n        useAudio: callNumber?.useAudio,\r\n        useVideo: callNumber?.useVideo,\r\n      };\r\n      squadService?.sip?.makeCall(callNumber?.number, constraints);\r\n      setCallNumber(undefined);\r\n    }\r\n  };\r\n  const onUpdateConstraints = () => {\r\n    if (updateConstraints) {\r\n      squadService?.sip.updateConstraintsParams(updateConstraints);\r\n      setUpdateConstraints(undefined);\r\n    }\r\n  };\r\n  const onBlindTransfer = () => {\r\n    if (blindTransfer) {\r\n      squadService?.sip.sip.blindTransfer(\r\n        blindTransfer.callId,\r\n        blindTransfer.number\r\n      );\r\n      setBlindTransfer(undefined);\r\n    }\r\n  };\r\n  const onAttendedTransfer = () => {\r\n    if (assistedTransfer) {\r\n      squadService?.sip.sip.attendedTransfer(\r\n        assistedTransfer.firstCallId,\r\n        assistedTransfer.secondCallId\r\n      );\r\n      setAssistedTransfer(undefined);\r\n    }\r\n  };\r\n  const onCallHoldChange = (callId: string, status: boolean) => {\r\n    const currentCallsCopy = new Map(currentCalls);\r\n    let cpc = currentCallsCopy.get(callId);\r\n    if (cpc) {\r\n      cpc = { ...cpc };\r\n      cpc.hold = status;\r\n      currentCallsCopy.set(cpc.callId, cpc);\r\n      setCurrentCalls(currentCallsCopy);\r\n    }\r\n  };\r\n  const onAcceptCall = (callId: string, useVideo: boolean) => {\r\n    const currentCallsCopy = new Map(currentCalls);\r\n    Array.from(currentCalls.values())\r\n      .filter((cl) => cl.callId !== callId)\r\n      .forEach((cl) => {\r\n        squadService?.sip.holdCall(cl.callId);\r\n        cl.hold = true;\r\n        currentCallsCopy.set(cl.callId, cl);\r\n      });\r\n    let callCopy = currentCallsCopy.get(callId);\r\n    if (callCopy) {\r\n      callCopy = { ...callCopy };\r\n      callCopy.callStatus = CallStatus.CONNECTING;\r\n      callCopy.sendingVideo = useVideo;\r\n      currentCallsCopy.set(callCopy.callId, callCopy);\r\n      setCurrentCalls(currentCallsCopy);\r\n    }\r\n  };\r\n  const onSendConferenceCommand = () => {\r\n    if (conferenceCommand) {\r\n      squadService?.events.sendCommand(\r\n        conferenceCommand.conferenceId,\r\n        conferenceCommand.command,\r\n        conferenceCommand.extraParam\r\n      );\r\n      setConferenceCommand(undefined);\r\n    }\r\n  };\r\n  const setConferenceParticipants = (data: ConferenceEvent) => {\r\n    let conferenceCall = Array.from(currentCalls.values()).find((c) =>\r\n      [\r\n        (c.callerObject as IConference)?.id,\r\n        (c.callerObject as IGroup)?.groupId,\r\n      ].includes(data.members[0]?.Conference_Name)\r\n    );\r\n    if (conferenceCall) {\r\n      conferenceCall = { ...conferenceCall };\r\n      if (!conferenceCall.conferenceParticipants)\r\n        conferenceCall.conferenceParticipants = [];\r\n      conferenceCall.conferenceParticipants = data.members.map((m) => {\r\n        if (\r\n          m.Caller_Name ===\r\n          conferenceCall?.session.remoteIdentity.uri.aor.split(\"@\")[0]\r\n        ) {\r\n          conferenceCall.micMuted = !m.Speak;\r\n          conferenceCall.videoMuted = !m.See;\r\n        }\r\n        return {\r\n          memberId: m[\"Member-ID\"],\r\n          callerName: m.Caller_Caller_ID_Name,\r\n          conferenceName: m.Conference_Name,\r\n          callName: m.Caller_Name,\r\n          floor: m.Floor,\r\n          hear: m.Hear,\r\n          hold: m.Hold,\r\n          memberGhost: m[\"Member-Ghost\"],\r\n          memberType: m[\"Member-Type\"],\r\n          mute: m.Speak,\r\n          muteDetect: m[\"Mute-Detect\"],\r\n          see: m.See,\r\n          talking: m.Talking,\r\n          video: m.See,\r\n        };\r\n      });\r\n\r\n      setNewCall({ ...conferenceCall });\r\n    }\r\n  };\r\n  const setConferenceEvents = (call: ICall) => {\r\n    if (\r\n      !(call.callerObject as IConference).participantPin &&\r\n      !(call.callerObject as IGroup).groupId\r\n    )\r\n      return;\r\n    const callName =\r\n      (call.callerObject as IConference).id ||\r\n      (call.callerObject as IGroup).groupId;\r\n    squadService?.events.connect(callName, conferenceEventsSubscribe);\r\n  };\r\n  const hangupEvents = (call: Session) => {\r\n    if (\r\n      call.remoteIdentity.uri.aor.includes(\r\n        \"citrus-conference-authenticated-\"\r\n      ) ||\r\n      call.remoteIdentity.uri.aor.includes(\"citrus-conference_\")\r\n    ) {\r\n      squadService?.events.disconnect();\r\n    }\r\n  };\r\n  function voiceCommuncatorSubscribe(event: VoiceEvents, data: any) {\r\n    let endCall;\r\n    switch (event) {\r\n      case VoiceEvents.CONNECTED:\r\n        setUser({\r\n          ...user,\r\n          connectionStatus: IConnectionStatus.CONNECTED,\r\n        } as IUser);\r\n        console.log(\"connected\");\r\n        break;\r\n      case VoiceEvents.DISCONNECTED:\r\n        setUser({\r\n          ...user,\r\n          connectionStatus: IConnectionStatus.DISCONNECTED,\r\n        } as IUser);\r\n        break;\r\n      case VoiceEvents.RECEIVED_CALL:\r\n        const invitation = data as Invitation;\r\n        const invitation_caller_id_number = invitation.remoteIdentity.uri.aor\r\n          ?.split(\"@\")[0]\r\n          ?.replace(\"sip:\", \"\")\r\n          .replace(\"citrus-conference-authenticated-\", \"\")\r\n          .replace(\"citrus-conference_\", \"\")\r\n          .split(\"_\")[0];\r\n        const invitation_ctct_of_number =\r\n          contacts.find((ctc) => ctc.number === invitation_caller_id_number) ||\r\n          groups.find((grp) => grp.groupId === invitation_caller_id_number) ||\r\n          conferenceList.find(\r\n            (conf) => conf.id === invitation_caller_id_number\r\n          );\r\n        let receivedCall: ICall;\r\n        endCall = () => {\r\n          squadService?.sip.sip.endCall(invitation);\r\n        };\r\n        receivedCall = {\r\n          callId: invitation.id,\r\n          callStatus: CallStatus.RINGING,\r\n          callerNumber: invitation_caller_id_number,\r\n          callerObject: invitation_ctct_of_number,\r\n          callerId:\r\n            (invitation_ctct_of_number as IContact)?.id ||\r\n            (invitation_ctct_of_number as IGroup)?.groupId,\r\n          callerName: invitation_ctct_of_number?.name,\r\n          callerProfilePicture: invitation_ctct_of_number?.profilePicture,\r\n          session: invitation,\r\n          isGroup: !!(invitation_ctct_of_number as IGroup)?.groupId,\r\n          accept: (useVideo = false) =>\r\n            squadService?.sip.acceptCall(invitation, useVideo),\r\n          endCall,\r\n          micMuted: false,\r\n          videoMuted: false,\r\n          hold: false,\r\n          muteMic: () => squadService?.sip.muteMic(invitation.id),\r\n          unMuteMic: () => squadService?.sip.unMuteMic(invitation.id),\r\n          disableCam: () => squadService?.sip.disableCam(invitation.id),\r\n          enableCam: () => squadService?.sip.enableCam(invitation.id),\r\n          holdCall: () => squadService?.sip.holdCall(invitation.id),\r\n          unHoldCall: () => squadService?.sip.unHoldCall(invitation.id),\r\n          sendDTMF: (dtmf: string) =>\r\n            squadService?.sip.sip.sendDTMF(invitation.id, dtmf),\r\n        };\r\n        let conferenceId: string | undefined;\r\n        if ((invitation_ctct_of_number as IGroup).groupId) {\r\n          conferenceId = `${(invitation_ctct_of_number as IGroup).groupId}`;\r\n        } else if ((invitation_ctct_of_number as IConference).participantPin) {\r\n          conferenceId = `${(invitation_ctct_of_number as IConference).id}`;\r\n        }\r\n        if (conferenceId) {\r\n          receivedCall.shareScreen = () => {\r\n            squadService?.sip.sip.conferenceScreenShare(conferenceId);\r\n          };\r\n        }\r\n        setConferenceEvents(receivedCall);\r\n        setNewCall(receivedCall);\r\n        break;\r\n      case VoiceEvents.MAKE_CALL:\r\n        const inviter = data as Inviter;\r\n        const localConstraints = inviter?.sessionDescriptionHandlerOptions\r\n          ?.constraints as MediaStreamConstraints;\r\n        const inviter_caller_id_number = inviter.remoteIdentity.uri.aor\r\n          ?.split(\"@\")[0]\r\n          ?.replace(\"sip:\", \"\")\r\n          .replace(\"citrus-conference-authenticated-\", \"\")\r\n          .replace(\"citrus-conference_\", \"\")\r\n          .split(\"_\")[0];\r\n        const inviter_ctct_of_number =\r\n          contacts.find((ctc) => ctc.number === inviter_caller_id_number) ||\r\n          groups.find((grp) => grp.groupId === inviter_caller_id_number) ||\r\n          conferenceList.find((conf) => conf.id === inviter_caller_id_number);\r\n\r\n        endCall = () => {\r\n          squadService?.sip.sip.endCall(inviter);\r\n        };\r\n        const sendCall: ICall = {\r\n          callId: inviter.id,\r\n          callStatus: CallStatus.CALLING,\r\n          callerNumber: inviter_caller_id_number,\r\n          callerObject: inviter_ctct_of_number,\r\n          callerId:\r\n            (inviter_ctct_of_number as IContact)?.id ||\r\n            (inviter_ctct_of_number as IGroup)?.groupId,\r\n          callerName: inviter_ctct_of_number?.name,\r\n          callerProfilePicture: inviter_ctct_of_number?.profilePicture,\r\n          session: inviter,\r\n          isGroup: !!(inviter_ctct_of_number as IGroup)?.groupId,\r\n          sendingVideo: localConstraints?.video !== false,\r\n          endCall,\r\n          muteMic: () => squadService?.sip.muteMic(inviter.id),\r\n          unMuteMic: () => squadService?.sip.unMuteMic(inviter.id),\r\n          disableCam: () => squadService?.sip.disableCam(inviter.id),\r\n          enableCam: () => squadService?.sip.enableCam(inviter.id),\r\n          holdCall: () => squadService?.sip.holdCall(inviter.id),\r\n          unHoldCall: () => squadService?.sip.unHoldCall(inviter.id),\r\n          sendDTMF: (dtmf: string) =>\r\n            squadService?.sip.sip.sendDTMF(inviter.id, dtmf),\r\n        };\r\n        let conferenceID: string | undefined;\r\n        if ((inviter_ctct_of_number as IGroup).groupId) {\r\n          conferenceID = `${(inviter_ctct_of_number as IGroup).groupId}`;\r\n        } else if ((inviter_ctct_of_number as IConference).participantPin) {\r\n          conferenceID = `${(inviter_ctct_of_number as IConference).id}`;\r\n        }\r\n        if (conferenceID) {\r\n          sendCall.shareScreen = () => {\r\n            squadService?.sip.sip.conferenceScreenShare(conferenceID);\r\n          };\r\n          sendCall.endCall = () => {\r\n            squadService?.sip.sip.endCall(inviter);\r\n            squadService?.sip.sip.endScreenShare();\r\n          };\r\n        }\r\n        setConferenceEvents(sendCall);\r\n        setNewCall(sendCall);\r\n        console.log(\"make_call\");\r\n        break;\r\n      case VoiceEvents.CALL_ON_GOING:\r\n        const callOnGoing =\r\n          currentCalls.get(data?.invitation?.id) ||\r\n          currentCalls.get(data?.inviter?.id);\r\n        if (callOnGoing) {\r\n          const cc = { ...callOnGoing };\r\n          cc.callStatus = CallStatus.ON_GOING;\r\n          cc.receivingVideo = data.receivingVideo;\r\n          cc.tagId = data.tagId;\r\n          setNewCall(cc);\r\n          // squadService?.sip.sip.screenShare(\r\n          //   `citrus-conference-authenticated-${\r\n          //     (cc.callerObject as IGroup)?.groupId\r\n          //   }`\r\n          // );\r\n        }\r\n        break;\r\n      case VoiceEvents.CALL_HANGUP:\r\n        const hangupCall = currentCalls.get(data.id);\r\n        if (hangupCall) {\r\n          hangupEvents(hangupCall.session);\r\n          removeCall(hangupCall);\r\n        }\r\n        break;\r\n      case VoiceEvents.MUTE_MIC:\r\n        const currentCallsCopy = new Map(currentCalls);\r\n        let cc = currentCallsCopy.get(data.callId);\r\n        if (cc) {\r\n          cc = { ...cc };\r\n          cc.micMuted = data.status;\r\n          currentCallsCopy.set(cc.callId, cc);\r\n          setCurrentCalls(currentCallsCopy);\r\n        }\r\n        break;\r\n      case VoiceEvents.MUTE_CAM:\r\n        const currentCallsCp = new Map(currentCalls);\r\n        let ccp = currentCallsCp.get(data.callId);\r\n        if (ccp) {\r\n          ccp = { ...ccp };\r\n          ccp.videoMuted = data.status;\r\n          currentCallsCp.set(ccp.callId, ccp);\r\n          setCurrentCalls(currentCallsCp);\r\n        }\r\n        break;\r\n      case VoiceEvents.HOLD_CALL:\r\n        onCallHoldChange(data.callId, data.status);\r\n        break;\r\n      case VoiceEvents.ACCEPTED_CALL:\r\n        onAcceptCall(data.callId, data.useVideo);\r\n        break;\r\n      default:\r\n        console.log(event);\r\n        break;\r\n    }\r\n  }\r\n  const conferenceEventsSubscribe = (\r\n    event: ConferenceEvents,\r\n    data: ConferenceEvent\r\n  ) => {\r\n    switch (event) {\r\n      case ConferenceEvents.UPDATE:\r\n        setConferenceParticipants(data);\r\n        break;\r\n      default:\r\n        console.error(\"EVENT NOT MAPPED\");\r\n        console.log(event, data);\r\n        break;\r\n    }\r\n  };\r\n  const updateFunction = () => {\r\n    squadService?.updateVoiceSubscribeFunction(voiceCommuncatorSubscribe);\r\n    squadService?.updateEventsSubscribeFunction(conferenceEventsSubscribe);\r\n  };\r\n\r\n  useEffect(init, []);\r\n  useEffect(updateFunction, [contacts, groups, currentCalls, callNumber, user]);\r\n  useEffect(onMakeCall, [callNumber]);\r\n  useEffect(onUpdateConstraints, [updateConstraints]);\r\n  useEffect(onBlindTransfer, [blindTransfer]);\r\n  useEffect(onAttendedTransfer, [assistedTransfer]);\r\n  useEffect(onSendConferenceCommand, [conferenceCommand]);\r\n  return <></>;\r\n};\r\n\r\nexport default SquadSipCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}