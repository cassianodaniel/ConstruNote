{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\contexts\\\\ChatContext.tsx\";\nimport React, { createContext, useContext, useState } from \"react\";\nimport { activeChat as activeChatData, chats as chatsData, groups as groupsData, contacts as contactsData } from \"./../data/chat\"; //alias\n\nexport const ChatContext = createContext({});\nexport const ChatProvider = ({\n  children\n}) => {\n  const [activeChat, setActiveChat] = useState(activeChatData);\n  const [chats, setChats] = useState(chatsData);\n  const [groups, setGroups] = useState(groupsData);\n  const [contacts, setContacts] = useState(contactsData);\n\n  const openChat = obj => {\n    setChats(chats.map(item => {\n      if (item.id !== obj.id) {\n        setActiveChat(obj);\n        return item;\n      } else {\n        item.unRead = 0;\n        return item;\n      }\n    }));\n  };\n\n  const openGroup = obj => {\n    setChats(chats.map(item => {\n      if (item.groupId !== obj.groupId) {\n        setActiveChat(item);\n        return item;\n      } else {\n        item.unRead = 0;\n        return item;\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(ChatContext.Provider, {\n    value: {\n      activeChat,\n      setActiveChat,\n      openChat,\n      openGroup,\n      chats,\n      setChats,\n      groups,\n      setGroups,\n      contacts,\n      setContacts\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport function useChat() {\n  return useContext(ChatContext);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/contexts/ChatContext.tsx"],"names":["React","createContext","useContext","useState","activeChat","activeChatData","chats","chatsData","groups","groupsData","contacts","contactsData","ChatContext","ChatProvider","children","setActiveChat","setChats","setGroups","setContacts","openChat","obj","map","item","id","unRead","openGroup","groupId","useChat"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,SACEC,UAAU,IAAIC,cADhB,EAEEC,KAAK,IAAIC,SAFX,EAGEC,MAAM,IAAIC,UAHZ,EAIEC,QAAQ,IAAIC,YAJd,QAKO,gBALP,C,CAOA;;AAkBA,OAAO,MAAMC,WAAW,GAAGX,aAAa,CACtC,EADsC,CAAjC;AAIP,OAAO,MAAMY,YAAsB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtD,QAAM,CAACV,UAAD,EAAaW,aAAb,IAA8BZ,QAAQ,CAACE,cAAD,CAA5C;AACA,QAAM,CAACC,KAAD,EAAQU,QAAR,IAAoBb,QAAQ,CAAUI,SAAV,CAAlC;AACA,QAAM,CAACC,MAAD,EAASS,SAAT,IAAsBd,QAAQ,CAAWM,UAAX,CAApC;AACA,QAAM,CAACC,QAAD,EAAWQ,WAAX,IAA0Bf,QAAQ,CAAaQ,YAAb,CAAxC;;AAEA,QAAMQ,QAAQ,GAAIC,GAAD,IAAgB;AAC/BJ,IAAAA,QAAQ,CACNV,KAAK,CAACe,GAAN,CAAWC,IAAD,IAAU;AAClB,UAAIA,IAAI,CAACC,EAAL,KAAYH,GAAG,CAACG,EAApB,EAAwB;AACtBR,QAAAA,aAAa,CAACK,GAAD,CAAb;AACA,eAAOE,IAAP;AACD,OAHD,MAGO;AACLA,QAAAA,IAAI,CAACE,MAAL,GAAc,CAAd;AACA,eAAOF,IAAP;AACD;AACF,KARD,CADM,CAAR;AAWD,GAZD;;AAcA,QAAMG,SAAS,GAAIL,GAAD,IAAiB;AACjCJ,IAAAA,QAAQ,CACNV,KAAK,CAACe,GAAN,CAAWC,IAAD,IAAU;AAClB,UAAIA,IAAI,CAACI,OAAL,KAAiBN,GAAG,CAACM,OAAzB,EAAkC;AAChCX,QAAAA,aAAa,CAACO,IAAD,CAAb;AACA,eAAOA,IAAP;AACD,OAHD,MAGO;AACLA,QAAAA,IAAI,CAACE,MAAL,GAAc,CAAd;AACA,eAAOF,IAAP;AACD;AACF,KARD,CADM,CAAR;AAWD,GAZD;;AAcA,sBACE,oBAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLlB,MAAAA,UADK;AAELW,MAAAA,aAFK;AAGLI,MAAAA,QAHK;AAILM,MAAAA,SAJK;AAKLnB,MAAAA,KALK;AAMLU,MAAAA,QANK;AAOLR,MAAAA,MAPK;AAQLS,MAAAA,SARK;AASLP,MAAAA,QATK;AAULQ,MAAAA;AAVK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAcGJ,QAdH,CADF;AAkBD,CApDM;AAsDP,OAAO,SAASa,OAAT,GAAmB;AACxB,SAAOzB,UAAU,CAACU,WAAD,CAAjB;AACD","sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport {\r\n  activeChat as activeChatData,\r\n  chats as chatsData,\r\n  groups as groupsData,\r\n  contacts as contactsData,\r\n} from \"./../data/chat\";\r\n\r\n//alias\r\nimport IChat from \"../alias/IChat\";\r\nimport IGroup from \"./../alias/IGroup\";\r\nimport IContact from \"./../alias/IContact\";\r\n\r\ninterface IChatContextData {\r\n  activeChat: IChat;\r\n  setActiveChat(value: IChat): void;\r\n  openChat(obj: IChat): void;\r\n  openGroup(obj: IGroup): void;\r\n  chats: IChat[];\r\n  setChats(value: IChat[]): void;\r\n  groups: IGroup[];\r\n  setGroups(value: IGroup[]): void;\r\n  contacts: IContact[];\r\n  setContacts(value: IContact[]): void;\r\n}\r\n\r\nexport const ChatContext = createContext<IChatContextData>(\r\n  {} as IChatContextData\r\n);\r\n\r\nexport const ChatProvider: React.FC = ({ children }) => {\r\n  const [activeChat, setActiveChat] = useState(activeChatData);\r\n  const [chats, setChats] = useState<IChat[]>(chatsData);\r\n  const [groups, setGroups] = useState<IGroup[]>(groupsData);\r\n  const [contacts, setContacts] = useState<IContact[]>(contactsData);\r\n\r\n  const openChat = (obj: IChat) => {\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.id !== obj.id) {\r\n          setActiveChat(obj);\r\n          return item;\r\n        } else {\r\n          item.unRead = 0;\r\n          return item;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  const openGroup = (obj: IGroup) => {\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (item.groupId !== obj.groupId) {\r\n          setActiveChat(item);\r\n          return item;\r\n        } else {\r\n          item.unRead = 0;\r\n          return item;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        activeChat,\r\n        setActiveChat,\r\n        openChat,\r\n        openGroup,\r\n        chats,\r\n        setChats,\r\n        groups,\r\n        setGroups,\r\n        contacts,\r\n        setContacts,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useChat() {\r\n  return useContext(ChatContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}