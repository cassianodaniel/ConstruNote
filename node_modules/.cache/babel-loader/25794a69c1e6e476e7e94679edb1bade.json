{"ast":null,"code":"/* jshint browser: true */\n(function () {\n  // The properties that we copy into a mirrored div.\n  // Note that some browsers, such as Firefox,\n  // do not concatenate properties, i.e. padding-top, bottom etc. -> padding,\n  // so we have to do every single property specifically.\n  var properties = ['direction', // RTL support\n  'boxSizing', 'width', // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does\n  'height', 'overflowX', 'overflowY', // copy the scrollbar for IE\n  'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth', 'borderStyle', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n  'fontStyle', 'fontVariant', 'fontWeight', 'fontStretch', 'fontSize', 'fontSizeAdjust', 'lineHeight', 'fontFamily', 'textAlign', 'textTransform', 'textIndent', 'textDecoration', // might not make a difference, but better be safe\n  'letterSpacing', 'wordSpacing', 'tabSize', 'MozTabSize'];\n  var isBrowser = typeof window !== 'undefined';\n  var isFirefox = isBrowser && window.mozInnerScreenX != null;\n\n  function getCaretCoordinates(element, position, options) {\n    if (!isBrowser) {\n      throw new Error('textarea-caret-position#getCaretCoordinates should only be called in a browser');\n    }\n\n    var debug = options && options.debug || false;\n\n    if (debug) {\n      var el = document.querySelector('#input-textarea-caret-position-mirror-div');\n\n      if (el) {\n        el.parentNode.removeChild(el);\n      }\n    } // mirrored div\n\n\n    var div = document.createElement('div');\n    div.id = 'input-textarea-caret-position-mirror-div';\n    document.body.appendChild(div);\n    var style = div.style;\n    var computed = window.getComputedStyle ? getComputedStyle(element) : element.currentStyle; // currentStyle for IE < 9\n    // default textarea styles\n\n    style.whiteSpace = 'pre-wrap';\n    if (element.nodeName !== 'INPUT') style.wordWrap = 'break-word'; // only for textarea-s\n    // position off-screen\n\n    style.position = 'absolute'; // required to return coordinates properly\n\n    if (!debug) style.visibility = 'hidden'; // not 'display: none' because we want rendering\n    // transfer the element's properties to the div\n\n    properties.forEach(function (prop) {\n      style[prop] = computed[prop];\n    });\n\n    if (isFirefox) {\n      // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n      if (element.scrollHeight > parseInt(computed.height)) style.overflowY = 'scroll';\n    } else {\n      style.overflow = 'hidden'; // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n    }\n\n    div.textContent = element.value.substring(0, position); // the second special handling for input type=\"text\" vs textarea: spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\n\n    if (element.nodeName === 'INPUT') div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\n    var span = document.createElement('span'); // Wrapping must be replicated *exactly*, including when a long word gets\n    // onto the next line, with whitespace at the end of the line before (#7).\n    // The  *only* reliable way to do that is to copy the *entire* rest of the\n    // textarea's content into the <span> created at the caret position.\n    // for inputs, just '.' would be enough, but why bother?\n\n    span.textContent = element.value.substring(position) || '.'; // || because a completely empty faux span doesn't render at all\n\n    div.appendChild(span);\n    var coordinates = {\n      top: span.offsetTop + parseInt(computed['borderTopWidth']),\n      left: span.offsetLeft + parseInt(computed['borderLeftWidth'])\n    };\n\n    if (debug) {\n      span.style.backgroundColor = '#aaa';\n    } else {\n      document.body.removeChild(div);\n    }\n\n    return coordinates;\n  }\n\n  if (typeof module != 'undefined' && typeof module.exports != 'undefined') {\n    module.exports = getCaretCoordinates;\n  } else if (isBrowser) {\n    window.getCaretCoordinates = getCaretCoordinates;\n  }\n})();","map":{"version":3,"sources":["C:/Users/Digivox/dev/DathApp/ConstruNote/node_modules/textarea-caret/index.js"],"names":["properties","isBrowser","window","isFirefox","mozInnerScreenX","getCaretCoordinates","element","position","options","Error","debug","el","document","querySelector","parentNode","removeChild","div","createElement","id","body","appendChild","style","computed","getComputedStyle","currentStyle","whiteSpace","nodeName","wordWrap","visibility","forEach","prop","scrollHeight","parseInt","height","overflowY","overflow","textContent","value","substring","replace","span","coordinates","top","offsetTop","left","offsetLeft","backgroundColor","module","exports"],"mappings":"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","sourcesContent":["/* jshint browser: true */\n\n(function () {\n\n// The properties that we copy into a mirrored div.\n// Note that some browsers, such as Firefox,\n// do not concatenate properties, i.e. padding-top, bottom etc. -> padding,\n// so we have to do every single property specifically.\nvar properties = [\n  'direction',  // RTL support\n  'boxSizing',\n  'width',  // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does\n  'height',\n  'overflowX',\n  'overflowY',  // copy the scrollbar for IE\n\n  'borderTopWidth',\n  'borderRightWidth',\n  'borderBottomWidth',\n  'borderLeftWidth',\n  'borderStyle',\n\n  'paddingTop',\n  'paddingRight',\n  'paddingBottom',\n  'paddingLeft',\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n  'fontStyle',\n  'fontVariant',\n  'fontWeight',\n  'fontStretch',\n  'fontSize',\n  'fontSizeAdjust',\n  'lineHeight',\n  'fontFamily',\n\n  'textAlign',\n  'textTransform',\n  'textIndent',\n  'textDecoration',  // might not make a difference, but better be safe\n\n  'letterSpacing',\n  'wordSpacing',\n\n  'tabSize',\n  'MozTabSize'\n\n];\n\nvar isBrowser = (typeof window !== 'undefined');\nvar isFirefox = (isBrowser && window.mozInnerScreenX != null);\n\nfunction getCaretCoordinates(element, position, options) {\n  if(!isBrowser) {\n    throw new Error('textarea-caret-position#getCaretCoordinates should only be called in a browser');\n  }\n\n  var debug = options && options.debug || false;\n  if (debug) {\n    var el = document.querySelector('#input-textarea-caret-position-mirror-div');\n    if ( el ) { el.parentNode.removeChild(el); }\n  }\n\n  // mirrored div\n  var div = document.createElement('div');\n  div.id = 'input-textarea-caret-position-mirror-div';\n  document.body.appendChild(div);\n\n  var style = div.style;\n  var computed = window.getComputedStyle? getComputedStyle(element) : element.currentStyle;  // currentStyle for IE < 9\n\n  // default textarea styles\n  style.whiteSpace = 'pre-wrap';\n  if (element.nodeName !== 'INPUT')\n    style.wordWrap = 'break-word';  // only for textarea-s\n\n  // position off-screen\n  style.position = 'absolute';  // required to return coordinates properly\n  if (!debug)\n    style.visibility = 'hidden';  // not 'display: none' because we want rendering\n\n  // transfer the element's properties to the div\n  properties.forEach(function (prop) {\n    style[prop] = computed[prop];\n  });\n\n  if (isFirefox) {\n    // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n    if (element.scrollHeight > parseInt(computed.height))\n      style.overflowY = 'scroll';\n  } else {\n    style.overflow = 'hidden';  // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n  }\n\n  div.textContent = element.value.substring(0, position);\n  // the second special handling for input type=\"text\" vs textarea: spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\n  if (element.nodeName === 'INPUT')\n    div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\n\n  var span = document.createElement('span');\n  // Wrapping must be replicated *exactly*, including when a long word gets\n  // onto the next line, with whitespace at the end of the line before (#7).\n  // The  *only* reliable way to do that is to copy the *entire* rest of the\n  // textarea's content into the <span> created at the caret position.\n  // for inputs, just '.' would be enough, but why bother?\n  span.textContent = element.value.substring(position) || '.';  // || because a completely empty faux span doesn't render at all\n  div.appendChild(span);\n\n  var coordinates = {\n    top: span.offsetTop + parseInt(computed['borderTopWidth']),\n    left: span.offsetLeft + parseInt(computed['borderLeftWidth'])\n  };\n\n  if (debug) {\n    span.style.backgroundColor = '#aaa';\n  } else {\n    document.body.removeChild(div);\n  }\n\n  return coordinates;\n}\n\nif (typeof module != 'undefined' && typeof module.exports != 'undefined') {\n  module.exports = getCaretCoordinates;\n} else if(isBrowser){\n  window.getCaretCoordinates = getCaretCoordinates;\n}\n\n}());\n"]},"metadata":{},"sourceType":"script"}