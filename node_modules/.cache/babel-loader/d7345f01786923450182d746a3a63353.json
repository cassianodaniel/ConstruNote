{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\SelectMember.tsx\";\nimport React from \"react\";\nimport { Input, Label } from \"reactstrap\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport { SearchContact } from \"../helpers/SearchContact\";\nimport sortContactGroup from \"../helpers/SortContactGroup\";\n\nconst SelectMember = ({\n  search,\n  handleCheckContact\n}) => {\n  var _actualGroup$members;\n\n  const {\n    contactsOutsideGroup,\n    setContactsOutsideGroup,\n    checkedMembers,\n    setCheckedMembers,\n    contacts\n  } = useContact();\n  const {\n    groups\n  } = useGroup();\n  const {\n    activeChat\n  } = useChat();\n  let actualGroup = groups.find(grp => grp.groupId === activeChat.groupId);\n  let actualGroupMembersId = actualGroup === null || actualGroup === void 0 ? void 0 : (_actualGroup$members = actualGroup.members) === null || _actualGroup$members === void 0 ? void 0 : _actualGroup$members.filter(mbrs => {\n    return mbrs.userId;\n  });\n  /* let cttsOut: IContact[] = contacts.forEach((ctc) =>\r\n      if(ctc.id !== actualGroupMembersId){\r\n        setContactsOutsideGroup(...cttsOut, cttsOut);\r\n      }\r\n  )\r\n  */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, sortContactGroup(SearchContact(contactsOutsideGroup, search ? search : \"\")).map((contact, key) => /*#__PURE__*/React.createElement(\"div\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ml-3 pl-1 font-weight-bold text-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, contact.group), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list-unstyled contact-list mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, contact.children.map((child, keyChild) => /*#__PURE__*/React.createElement(\"li\", {\n    key: keyChild,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"custom-control custom-checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"checkbox\",\n    className: \"custom-control-input\",\n    onChange: e => {\n      handleCheckContact(e.target.checked, child);\n      setCheckedMembers([...checkedMembers, child]);\n    },\n    id: \"memberCheck\" + child.id,\n    value: child.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    className: \"custom-control-label\",\n    htmlFor: \"memberCheck\" + child.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 19\n    }\n  }, child.name))))))));\n};\n\nexport default SelectMember;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/SelectMember.tsx"],"names":["React","Input","Label","useGroup","useChat","useContact","SearchContact","sortContactGroup","SelectMember","search","handleCheckContact","contactsOutsideGroup","setContactsOutsideGroup","checkedMembers","setCheckedMembers","contacts","groups","activeChat","actualGroup","find","grp","groupId","actualGroupMembersId","members","filter","mbrs","userId","map","contact","key","group","children","child","keyChild","e","target","checked","id","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,KAAhB,QAA6B,YAA7B;AAEA,SAAwBC,QAAxB,QAAwC,0BAAxC;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,UAAT,QAA2B,4BAA3B;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;;AAQA,MAAMC,YAA8B,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAoC;AAAA;;AACzE,QAAM;AACJC,IAAAA,oBADI;AAEJC,IAAAA,uBAFI;AAGJC,IAAAA,cAHI;AAIJC,IAAAA,iBAJI;AAKJC,IAAAA;AALI,MAMFV,UAAU,EANd;AAOA,QAAM;AAAEW,IAAAA;AAAF,MAAab,QAAQ,EAA3B;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAiBb,OAAO,EAA9B;AAEA,MAAIc,WAAW,GAAGF,MAAM,CAACG,IAAP,CAAaC,GAAD,IAC5BA,GAAG,CAACC,OAAJ,KAAgBJ,UAAU,CAACI,OADX,CAAlB;AAIA,MAAIC,oBAAoB,GAAGJ,WAAH,aAAGA,WAAH,+CAAGA,WAAW,CAAEK,OAAhB,yDAAG,qBAAsBC,MAAtB,CAA8BC,IAAD,IAAU;AAChE,WAAOA,IAAI,CAACC,MAAZ;AACD,GAF0B,CAA3B;AAIA;AACF;AACA;AACA;AACA;AACA;;AAEE,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGnB,gBAAgB,CACfD,aAAa,CAACK,oBAAD,EAAuBF,MAAM,GAAGA,MAAH,GAAY,EAAzC,CADE,CAAhB,CAECkB,GAFD,CAEK,CAACC,OAAD,EAAUC,GAAV,kBACJ;AAAK,IAAA,GAAG,EAAEA,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,yCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,OAAO,CAACE,KADX,CADF,eAKE;AAAI,IAAA,SAAS,EAAC,iCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,OAAO,CAACG,QAAR,CAAiBJ,GAAjB,CAAqB,CAACK,KAAD,EAAQC,QAAR,kBACpB;AAAI,IAAA,GAAG,EAAEA,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,gCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,SAAS,EAAC,sBAFZ;AAGE,IAAA,QAAQ,EAAGC,CAAD,IAAO;AACfxB,MAAAA,kBAAkB,CAACwB,CAAC,CAACC,MAAF,CAASC,OAAV,EAAmBJ,KAAnB,CAAlB;AACAlB,MAAAA,iBAAiB,CAAC,CAAC,GAAGD,cAAJ,EAAoBmB,KAApB,CAAD,CAAjB;AACD,KANH;AAOE,IAAA,EAAE,EAAE,gBAAgBA,KAAK,CAACK,EAP5B;AAQE,IAAA,KAAK,EAAEL,KAAK,CAACM,IARf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAWE,oBAAC,KAAD;AACE,IAAA,SAAS,EAAC,sBADZ;AAEE,IAAA,OAAO,EAAE,gBAAgBN,KAAK,CAACK,EAFjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGL,KAAK,CAACM,IAJT,CAXF,CADF,CADD,CADH,CALF,CAHD,CADH,CADF;AAsCD,CAhED;;AAkEA,eAAe9B,YAAf","sourcesContent":["import React from \"react\";\r\nimport { Input, Label } from \"reactstrap\";\r\nimport IContact from \"../alias/IContact\";\r\nimport { GroupProvider, useGroup } from \"../contexts/GroupContext\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport { SearchContact } from \"../helpers/SearchContact\";\r\nimport sortContactGroup from \"../helpers/SortContactGroup\";\r\nimport IGroup from \"../alias/IGroup\";\r\n\r\ninterface IProps {\r\n  search?: string;\r\n  handleCheckContact(selected: boolean, contact: IContact): void;\r\n}\r\n\r\nconst SelectMember: React.FC<IProps> = ({ search, handleCheckContact }) => {\r\n  const {\r\n    contactsOutsideGroup,\r\n    setContactsOutsideGroup,\r\n    checkedMembers,\r\n    setCheckedMembers,\r\n    contacts\r\n  } = useContact();\r\n  const { groups } = useGroup();\r\n  const { activeChat } = useChat();\r\n  \r\n  let actualGroup = groups.find((grp) => (\r\n    grp.groupId === activeChat.groupId\r\n  ));\r\n\r\n  let actualGroupMembersId = actualGroup?.members?.filter((mbrs) => {\r\n    return mbrs.userId;\r\n  })\r\n  \r\n  /* let cttsOut: IContact[] = contacts.forEach((ctc) =>\r\n      if(ctc.id !== actualGroupMembersId){\r\n        setContactsOutsideGroup(...cttsOut, cttsOut);\r\n      }\r\n  )\r\n */\r\n\r\n  return (\r\n    <div className=\"mt-2\">\r\n      {sortContactGroup(\r\n        SearchContact(contactsOutsideGroup, search ? search : \"\")\r\n      ).map((contact, key) => (\r\n        <div key={key}>\r\n          <div className=\"ml-3 pl-1 font-weight-bold text-primary\">\r\n            {contact.group}\r\n          </div>\r\n\r\n          <ul className=\"list-unstyled contact-list mb-2\">\r\n            {contact.children.map((child, keyChild) => (\r\n              <li key={keyChild}>\r\n                <div className=\"custom-control custom-checkbox\">\r\n                  <Input\r\n                    type=\"checkbox\"\r\n                    className=\"custom-control-input\"\r\n                    onChange={(e) => {\r\n                      handleCheckContact(e.target.checked, child);\r\n                      setCheckedMembers([...checkedMembers, child]);\r\n                    }}\r\n                    id={\"memberCheck\" + child.id}\r\n                    value={child.name}\r\n                  />\r\n                  <Label\r\n                    className=\"custom-control-label\"\r\n                    htmlFor={\"memberCheck\" + child.id}\r\n                  >\r\n                    {child.name}\r\n                  </Label>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectMember;\r\n"]},"metadata":{},"sourceType":"module"}