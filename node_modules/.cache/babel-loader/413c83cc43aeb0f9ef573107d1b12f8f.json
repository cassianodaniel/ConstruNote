{"ast":null,"code":"import { formatOffset, parseZoneInfo, hasIntl } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\nlet singleton = null;\n/**\n * Represents the local zone for this Javascript environment.\n * @implements {Zone}\n */\n\nexport default class LocalZone extends Zone {\n  /**\n   * Get a singleton instance of the local zone\n   * @return {LocalZone}\n   */\n  static get instance() {\n    if (singleton === null) {\n      singleton = new LocalZone();\n    }\n\n    return singleton;\n  }\n  /** @override **/\n\n\n  get type() {\n    return \"local\";\n  }\n  /** @override **/\n\n\n  get name() {\n    if (hasIntl()) {\n      return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } else return \"local\";\n  }\n  /** @override **/\n\n\n  get universal() {\n    return false;\n  }\n  /** @override **/\n\n\n  offsetName(ts, {\n    format,\n    locale\n  }) {\n    return parseZoneInfo(ts, format, locale);\n  }\n  /** @override **/\n\n\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n  /** @override **/\n\n\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n  /** @override **/\n\n\n  equals(otherZone) {\n    return otherZone.type === \"local\";\n  }\n  /** @override **/\n\n\n  get isValid() {\n    return true;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/luxon/src/zones/localZone.js"],"names":["formatOffset","parseZoneInfo","hasIntl","Zone","singleton","LocalZone","instance","type","name","Intl","DateTimeFormat","resolvedOptions","timeZone","universal","offsetName","ts","format","locale","offset","Date","getTimezoneOffset","equals","otherZone","isValid"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,OAAtC,QAAqD,iBAArD;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA,IAAIC,SAAS,GAAG,IAAhB;AAEA;;;;;AAIA,eAAe,MAAMC,SAAN,SAAwBF,IAAxB,CAA6B;AAC1C;;;;AAIA,aAAWG,QAAX,GAAsB;AACpB,QAAIF,SAAS,KAAK,IAAlB,EAAwB;AACtBA,MAAAA,SAAS,GAAG,IAAIC,SAAJ,EAAZ;AACD;;AACD,WAAOD,SAAP;AACD;AAED;;;AACA,MAAIG,IAAJ,GAAW;AACT,WAAO,OAAP;AACD;AAED;;;AACA,MAAIC,IAAJ,GAAW;AACT,QAAIN,OAAO,EAAX,EAAe;AACb,aAAO,IAAIO,IAAI,CAACC,cAAT,GAA0BC,eAA1B,GAA4CC,QAAnD;AACD,KAFD,MAEO,OAAO,OAAP;AACR;AAED;;;AACA,MAAIC,SAAJ,GAAgB;AACd,WAAO,KAAP;AACD;AAED;;;AACAC,EAAAA,UAAU,CAACC,EAAD,EAAK;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAL,EAAyB;AACjC,WAAOhB,aAAa,CAACc,EAAD,EAAKC,MAAL,EAAaC,MAAb,CAApB;AACD;AAED;;;AACAjB,EAAAA,YAAY,CAACe,EAAD,EAAKC,MAAL,EAAa;AACvB,WAAOhB,YAAY,CAAC,KAAKkB,MAAL,CAAYH,EAAZ,CAAD,EAAkBC,MAAlB,CAAnB;AACD;AAED;;;AACAE,EAAAA,MAAM,CAACH,EAAD,EAAK;AACT,WAAO,CAAC,IAAII,IAAJ,CAASJ,EAAT,EAAaK,iBAAb,EAAR;AACD;AAED;;;AACAC,EAAAA,MAAM,CAACC,SAAD,EAAY;AAChB,WAAOA,SAAS,CAACf,IAAV,KAAmB,OAA1B;AACD;AAED;;;AACA,MAAIgB,OAAJ,GAAc;AACZ,WAAO,IAAP;AACD;;AApDyC","sourcesContent":["import { formatOffset, parseZoneInfo, hasIntl } from \"../impl/util.js\";\nimport Zone from \"../zone.js\";\n\nlet singleton = null;\n\n/**\n * Represents the local zone for this Javascript environment.\n * @implements {Zone}\n */\nexport default class LocalZone extends Zone {\n  /**\n   * Get a singleton instance of the local zone\n   * @return {LocalZone}\n   */\n  static get instance() {\n    if (singleton === null) {\n      singleton = new LocalZone();\n    }\n    return singleton;\n  }\n\n  /** @override **/\n  get type() {\n    return \"local\";\n  }\n\n  /** @override **/\n  get name() {\n    if (hasIntl()) {\n      return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } else return \"local\";\n  }\n\n  /** @override **/\n  get universal() {\n    return false;\n  }\n\n  /** @override **/\n  offsetName(ts, { format, locale }) {\n    return parseZoneInfo(ts, format, locale);\n  }\n\n  /** @override **/\n  formatOffset(ts, format) {\n    return formatOffset(this.offset(ts), format);\n  }\n\n  /** @override **/\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  /** @override **/\n  equals(otherZone) {\n    return otherZone.type === \"local\";\n  }\n\n  /** @override **/\n  get isValid() {\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}