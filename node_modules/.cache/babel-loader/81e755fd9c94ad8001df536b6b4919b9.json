{"ast":null,"code":"import { getAttachmentType } from \"../utils/parseUtils\";\nexport default class AttachmentsBusiness {\n  constructor(api, settings) {\n    this.api = api;\n    this.settings = settings;\n\n    this.list = (chat, callback) => {\n      if (!this.api) return;\n      this.settings.get(settings => {\n        const paramsUrl = {\n          kind: chat.jid.includes(\"@conference.\") ? \"groupchat\" : \"chat\",\n          src: `${settings.xmppUser}@${settings.xmppDomain}`,\n          dst: chat.jid\n        };\n        this.api.getAttachments({\n          paramsUrl\n        }, attachments => {\n          if (attachments === null || attachments === void 0 ? void 0 : attachments.attachments) {\n            const parsedAttachments = attachments === null || attachments === void 0 ? void 0 : attachments.attachments.map(attachment => {\n              const booleans = getAttachmentType(attachment.fileExtension);\n              return {\n                name: attachment.fileName,\n                // size: \"any\",\n                thumbnail: attachment.fileUrl,\n                ...booleans\n              };\n            });\n            callback(parsedAttachments);\n          }\n        });\n      });\n    };\n  }\n\n  saveData(payload, callback) {\n    if (!this.api) return;\n    this.api.saveSharedData(payload, callback);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Attachments.ts"],"names":["getAttachmentType","AttachmentsBusiness","constructor","api","settings","list","chat","callback","get","paramsUrl","kind","jid","includes","src","xmppUser","xmppDomain","dst","getAttachments","attachments","parsedAttachments","map","attachment","booleans","fileExtension","name","fileName","thumbnail","fileUrl","saveData","payload","saveSharedData"],"mappings":"AAGA,SAASA,iBAAT,QAAkC,qBAAlC;AAOA,eAAe,MAAMC,mBAAN,CAA0B;AACvCC,EAAAA,WAAW,CAASC,GAAT,EAA2BC,QAA3B,EAAuD;AAAA,SAA9CD,GAA8C,GAA9CA,GAA8C;AAAA,SAA5BC,QAA4B,GAA5BA,QAA4B;;AAAA,SAClEC,IADkE,GAC3D,CAACC,IAAD,EAAcC,QAAd,KAAmD;AACxD,UAAI,CAAC,KAAKJ,GAAV,EAAe;AACf,WAAKC,QAAL,CAAcI,GAAd,CAAmBJ,QAAD,IAAc;AAC9B,cAAMK,SAAS,GAAG;AAChBC,UAAAA,IAAI,EAAEJ,IAAI,CAACK,GAAL,CAASC,QAAT,CAAkB,cAAlB,IAAoC,WAApC,GAAkD,MADxC;AAEhBC,UAAAA,GAAG,EAAG,GAAET,QAAQ,CAACU,QAAS,IAAGV,QAAQ,CAACW,UAAW,EAFjC;AAGhBC,UAAAA,GAAG,EAAEV,IAAI,CAACK;AAHM,SAAlB;AAKA,aAAKR,GAAL,CAASc,cAAT,CAAwB;AAAER,UAAAA;AAAF,SAAxB,EAAwCS,WAAD,IAAiB;AACtD,cAAIA,WAAJ,aAAIA,WAAJ,uBAAIA,WAAW,CAAEA,WAAjB,EAA8B;AAC5B,kBAAMC,iBAAmC,GAAGD,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEA,WAAb,CAAyBE,GAAzB,CACzCC,UAAD,IAAgB;AACd,oBAAMC,QAAQ,GAAGtB,iBAAiB,CAACqB,UAAU,CAACE,aAAZ,CAAlC;AACA,qBAAO;AACLC,gBAAAA,IAAI,EAAEH,UAAU,CAACI,QADZ;AAEL;AACAC,gBAAAA,SAAS,EAAEL,UAAU,CAACM,OAHjB;AAIL,mBAAGL;AAJE,eAAP;AAMD,aATyC,CAA5C;AAWAf,YAAAA,QAAQ,CAACY,iBAAD,CAAR;AACD;AACF,SAfD;AAgBD,OAtBD;AAuBD,KA1BiE;AAAE;;AA2BpES,EAAAA,QAAQ,CAACC,OAAD,EAAiCtB,QAAjC,EAAkE;AACxE,QAAG,CAAC,KAAKJ,GAAT,EAAc;AACd,SAAKA,GAAL,CAAS2B,cAAT,CAAwBD,OAAxB,EAAiCtB,QAAjC;AACD;;AA/BsC","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport IAttachedFiles from \"../../alias/IAttachedFiles\";\r\nimport IChat from \"../../alias/IChat\";\r\nimport { getAttachmentType } from \"../utils/parseUtils\";\r\nimport SettingsBusiness from \"./Settings\";\r\nimport {SaveSharedDataCallback, SaveSharedDataRequest} from \"@digivox/apicommunicator/dist/types/types/types\";\r\n\r\ninterface GetAttachmentsCallback {\r\n  (attachment: IAttachedFiles[]): void;\r\n}\r\nexport default class AttachmentsBusiness {\r\n  constructor(private api: API, private settings: SettingsBusiness) {}\r\n  list = (chat: IChat, callback: GetAttachmentsCallback) => {\r\n    if (!this.api) return;\r\n    this.settings.get((settings) => {\r\n      const paramsUrl = {\r\n        kind: chat.jid.includes(\"@conference.\") ? \"groupchat\" : \"chat\",\r\n        src: `${settings.xmppUser}@${settings.xmppDomain}`,\r\n        dst: chat.jid,\r\n      };\r\n      this.api.getAttachments({ paramsUrl }, (attachments) => {\r\n        if (attachments?.attachments) {\r\n          const parsedAttachments: IAttachedFiles[] = attachments?.attachments.map(\r\n            (attachment) => {\r\n              const booleans = getAttachmentType(attachment.fileExtension);\r\n              return {\r\n                name: attachment.fileName,\r\n                // size: \"any\",\r\n                thumbnail: attachment.fileUrl,\r\n                ...booleans,\r\n              };\r\n            }\r\n          );\r\n          callback(parsedAttachments);\r\n        }\r\n      });\r\n    });\r\n  };\r\n  saveData(payload: SaveSharedDataRequest, callback: SaveSharedDataCallback){\r\n    if(!this.api) return;\r\n    this.api.saveSharedData(payload, callback);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}