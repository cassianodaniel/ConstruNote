{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Parameters } from \"./parameters\";\n/**\n * URI.\n * @public\n */\n\nexport var URI = /*#__PURE__*/function (_Parameters) {\n  _inherits(URI, _Parameters);\n\n  var _super = _createSuper(URI);\n\n  /**\n   * Constructor\n   * @param scheme -\n   * @param user -\n   * @param host -\n   * @param port -\n   * @param parameters -\n   * @param headers -\n   */\n  function URI(scheme, user, host, port, parameters, headers) {\n    var _this;\n\n    _classCallCheck(this, URI);\n\n    _this = _super.call(this, parameters);\n    _this.headers = {}; // Checks\n\n    if (!host) {\n      throw new TypeError('missing or invalid \"host\" parameter');\n    } // Initialize parameters\n\n\n    scheme = scheme || \"sip\";\n\n    for (var header in headers) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (headers.hasOwnProperty(header)) {\n        _this.setHeader(header, headers[header]);\n      }\n    } // Raw URI\n\n\n    _this.raw = {\n      scheme: scheme,\n      user: user,\n      host: host,\n      port: port\n    }; // Normalized URI\n\n    _this.normal = {\n      scheme: scheme.toLowerCase(),\n      user: user,\n      host: host.toLowerCase(),\n      port: port\n    };\n    return _this;\n  }\n\n  _createClass(URI, [{\n    key: \"setHeader\",\n    value: function setHeader(name, value) {\n      this.headers[this.headerize(name)] = value instanceof Array ? value : [value];\n    }\n  }, {\n    key: \"getHeader\",\n    value: function getHeader(name) {\n      if (name) {\n        return this.headers[this.headerize(name)];\n      }\n    }\n  }, {\n    key: \"hasHeader\",\n    value: function hasHeader(name) {\n      // eslint-disable-next-line no-prototype-builtins\n      return !!name && !!this.headers.hasOwnProperty(this.headerize(name));\n    }\n  }, {\n    key: \"deleteHeader\",\n    value: function deleteHeader(header) {\n      header = this.headerize(header); // eslint-disable-next-line no-prototype-builtins\n\n      if (this.headers.hasOwnProperty(header)) {\n        var value = this.headers[header];\n        delete this.headers[header];\n        return value;\n      }\n    }\n  }, {\n    key: \"clearHeaders\",\n    value: function clearHeaders() {\n      this.headers = {};\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new URI(this._raw.scheme, this._raw.user || \"\", this._raw.host, this._raw.port, JSON.parse(JSON.stringify(this.parameters)), JSON.parse(JSON.stringify(this.headers)));\n    }\n  }, {\n    key: \"toRaw\",\n    value: function toRaw() {\n      return this._toString(this._raw);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this._toString(this._normal);\n    }\n  }, {\n    key: \"_toString\",\n    value: function _toString(uri) {\n      var uriString = uri.scheme + \":\"; // add slashes if it's not a sip(s) URI\n\n      if (!uri.scheme.toLowerCase().match(\"^sips?$\")) {\n        uriString += \"//\";\n      }\n\n      if (uri.user) {\n        uriString += this.escapeUser(uri.user) + \"@\";\n      }\n\n      uriString += uri.host;\n\n      if (uri.port || uri.port === 0) {\n        uriString += \":\" + uri.port;\n      }\n\n      for (var parameter in this.parameters) {\n        // eslint-disable-next-line no-prototype-builtins\n        if (this.parameters.hasOwnProperty(parameter)) {\n          uriString += \";\" + parameter;\n\n          if (this.parameters[parameter] !== null) {\n            uriString += \"=\" + this.parameters[parameter];\n          }\n        }\n      }\n\n      var headers = [];\n\n      for (var header in this.headers) {\n        // eslint-disable-next-line no-prototype-builtins\n        if (this.headers.hasOwnProperty(header)) {\n          for (var idx in this.headers[header]) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.headers[header].hasOwnProperty(idx)) {\n              headers.push(header + \"=\" + this.headers[header][idx]);\n            }\n          }\n        }\n      }\n\n      if (headers.length > 0) {\n        uriString += \"?\" + headers.join(\"&\");\n      }\n\n      return uriString;\n    }\n    /*\n     * Hex-escape a SIP URI user.\n     * @private\n     * @param {String} user\n     */\n\n  }, {\n    key: \"escapeUser\",\n    value: function escapeUser(user) {\n      var decodedUser; // FIXME: This is called by toString above which should never throw, but\n      // decodeURIComponent can throw and I've seen one case in production where\n      // it did throw resulting in a cascading failure. This class should be\n      // fixed so that decodeURIComponent is not called at this point (in toString).\n      // The user should be decoded when the URI is constructor or some other\n      // place where we can catch the error before the URI is created or somesuch.\n      // eslint-disable-next-line no-useless-catch\n\n      try {\n        decodedUser = decodeURIComponent(user);\n      } catch (error) {\n        throw error;\n      } // Don't hex-escape ':' (%3A), '+' (%2B), '?' (%3F\"), '/' (%2F).\n\n\n      return encodeURIComponent(decodedUser).replace(/%3A/ig, \":\").replace(/%2B/ig, \"+\").replace(/%3F/ig, \"?\").replace(/%2F/ig, \"/\");\n    }\n  }, {\n    key: \"headerize\",\n    value: function headerize(str) {\n      var exceptions = {\n        \"Call-Id\": \"Call-ID\",\n        \"Cseq\": \"CSeq\",\n        \"Min-Se\": \"Min-SE\",\n        \"Rack\": \"RAck\",\n        \"Rseq\": \"RSeq\",\n        \"Www-Authenticate\": \"WWW-Authenticate\"\n      };\n      var name = str.toLowerCase().replace(/_/g, \"-\").split(\"-\");\n      var parts = name.length;\n      var hname = \"\";\n\n      for (var part = 0; part < parts; part++) {\n        if (part !== 0) {\n          hname += \"-\";\n        }\n\n        hname += name[part].charAt(0).toUpperCase() + name[part].substring(1);\n      }\n\n      if (exceptions[hname]) {\n        hname = exceptions[hname];\n      }\n\n      return hname;\n    }\n  }, {\n    key: \"scheme\",\n    get: function get() {\n      return this.normal.scheme;\n    },\n    set: function set(value) {\n      this.raw.scheme = value;\n      this.normal.scheme = value.toLowerCase();\n    }\n  }, {\n    key: \"user\",\n    get: function get() {\n      return this.normal.user;\n    },\n    set: function set(value) {\n      this.normal.user = this.raw.user = value;\n    }\n  }, {\n    key: \"host\",\n    get: function get() {\n      return this.normal.host;\n    },\n    set: function set(value) {\n      this.raw.host = value;\n      this.normal.host = value.toLowerCase();\n    }\n  }, {\n    key: \"aor\",\n    get: function get() {\n      return this.normal.user + \"@\" + this.normal.host;\n    }\n  }, {\n    key: \"port\",\n    get: function get() {\n      return this.normal.port;\n    },\n    set: function set(value) {\n      this.normal.port = this.raw.port = value === 0 ? value : value;\n    }\n  }, {\n    key: \"_normal\",\n    get: function get() {\n      return this.normal;\n    }\n  }, {\n    key: \"_raw\",\n    get: function get() {\n      return this.raw;\n    }\n  }]);\n\n  return URI;\n}(Parameters);","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/grammar/uri.js"],"names":["Parameters","URI","scheme","user","host","port","parameters","headers","TypeError","header","hasOwnProperty","setHeader","raw","normal","toLowerCase","name","value","headerize","Array","_raw","JSON","parse","stringify","_toString","_normal","uri","uriString","match","escapeUser","parameter","idx","push","length","join","decodedUser","decodeURIComponent","error","encodeURIComponent","replace","str","exceptions","split","parts","hname","part","charAt","toUpperCase","substring"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Parameters } from \"./parameters\";\n/**\n * URI.\n * @public\n */\nexport class URI extends Parameters {\n    /**\n     * Constructor\n     * @param scheme -\n     * @param user -\n     * @param host -\n     * @param port -\n     * @param parameters -\n     * @param headers -\n     */\n    constructor(scheme, user, host, port, parameters, headers) {\n        super(parameters);\n        this.headers = {};\n        // Checks\n        if (!host) {\n            throw new TypeError('missing or invalid \"host\" parameter');\n        }\n        // Initialize parameters\n        scheme = scheme || \"sip\";\n        for (const header in headers) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (headers.hasOwnProperty(header)) {\n                this.setHeader(header, headers[header]);\n            }\n        }\n        // Raw URI\n        this.raw = {\n            scheme,\n            user,\n            host,\n            port\n        };\n        // Normalized URI\n        this.normal = {\n            scheme: scheme.toLowerCase(),\n            user,\n            host: host.toLowerCase(),\n            port\n        };\n    }\n    get scheme() { return this.normal.scheme; }\n    set scheme(value) {\n        this.raw.scheme = value;\n        this.normal.scheme = value.toLowerCase();\n    }\n    get user() { return this.normal.user; }\n    set user(value) {\n        this.normal.user = this.raw.user = value;\n    }\n    get host() { return this.normal.host; }\n    set host(value) {\n        this.raw.host = value;\n        this.normal.host = value.toLowerCase();\n    }\n    get aor() { return this.normal.user + \"@\" + this.normal.host; }\n    get port() { return this.normal.port; }\n    set port(value) {\n        this.normal.port = this.raw.port = value === 0 ? value : value;\n    }\n    setHeader(name, value) {\n        this.headers[this.headerize(name)] = (value instanceof Array) ? value : [value];\n    }\n    getHeader(name) {\n        if (name) {\n            return this.headers[this.headerize(name)];\n        }\n    }\n    hasHeader(name) {\n        // eslint-disable-next-line no-prototype-builtins\n        return !!name && !!this.headers.hasOwnProperty(this.headerize(name));\n    }\n    deleteHeader(header) {\n        header = this.headerize(header);\n        // eslint-disable-next-line no-prototype-builtins\n        if (this.headers.hasOwnProperty(header)) {\n            const value = this.headers[header];\n            delete this.headers[header];\n            return value;\n        }\n    }\n    clearHeaders() {\n        this.headers = {};\n    }\n    clone() {\n        return new URI(this._raw.scheme, this._raw.user || \"\", this._raw.host, this._raw.port, JSON.parse(JSON.stringify(this.parameters)), JSON.parse(JSON.stringify(this.headers)));\n    }\n    toRaw() {\n        return this._toString(this._raw);\n    }\n    toString() {\n        return this._toString(this._normal);\n    }\n    get _normal() { return this.normal; }\n    get _raw() { return this.raw; }\n    _toString(uri) {\n        let uriString = uri.scheme + \":\";\n        // add slashes if it's not a sip(s) URI\n        if (!uri.scheme.toLowerCase().match(\"^sips?$\")) {\n            uriString += \"//\";\n        }\n        if (uri.user) {\n            uriString += this.escapeUser(uri.user) + \"@\";\n        }\n        uriString += uri.host;\n        if (uri.port || uri.port === 0) {\n            uriString += \":\" + uri.port;\n        }\n        for (const parameter in this.parameters) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.parameters.hasOwnProperty(parameter)) {\n                uriString += \";\" + parameter;\n                if (this.parameters[parameter] !== null) {\n                    uriString += \"=\" + this.parameters[parameter];\n                }\n            }\n        }\n        const headers = [];\n        for (const header in this.headers) {\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.headers.hasOwnProperty(header)) {\n                for (const idx in this.headers[header]) {\n                    // eslint-disable-next-line no-prototype-builtins\n                    if (this.headers[header].hasOwnProperty(idx)) {\n                        headers.push(header + \"=\" + this.headers[header][idx]);\n                    }\n                }\n            }\n        }\n        if (headers.length > 0) {\n            uriString += \"?\" + headers.join(\"&\");\n        }\n        return uriString;\n    }\n    /*\n     * Hex-escape a SIP URI user.\n     * @private\n     * @param {String} user\n     */\n    escapeUser(user) {\n        let decodedUser;\n        // FIXME: This is called by toString above which should never throw, but\n        // decodeURIComponent can throw and I've seen one case in production where\n        // it did throw resulting in a cascading failure. This class should be\n        // fixed so that decodeURIComponent is not called at this point (in toString).\n        // The user should be decoded when the URI is constructor or some other\n        // place where we can catch the error before the URI is created or somesuch.\n        // eslint-disable-next-line no-useless-catch\n        try {\n            decodedUser = decodeURIComponent(user);\n        }\n        catch (error) {\n            throw error;\n        }\n        // Don't hex-escape ':' (%3A), '+' (%2B), '?' (%3F\"), '/' (%2F).\n        return encodeURIComponent(decodedUser)\n            .replace(/%3A/ig, \":\")\n            .replace(/%2B/ig, \"+\")\n            .replace(/%3F/ig, \"?\")\n            .replace(/%2F/ig, \"/\");\n    }\n    headerize(str) {\n        const exceptions = {\n            \"Call-Id\": \"Call-ID\",\n            \"Cseq\": \"CSeq\",\n            \"Min-Se\": \"Min-SE\",\n            \"Rack\": \"RAck\",\n            \"Rseq\": \"RSeq\",\n            \"Www-Authenticate\": \"WWW-Authenticate\",\n        };\n        const name = str.toLowerCase().replace(/_/g, \"-\").split(\"-\");\n        const parts = name.length;\n        let hname = \"\";\n        for (let part = 0; part < parts; part++) {\n            if (part !== 0) {\n                hname += \"-\";\n            }\n            hname += name[part].charAt(0).toUpperCase() + name[part].substring(1);\n        }\n        if (exceptions[hname]) {\n            hname = exceptions[hname];\n        }\n        return hname;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}