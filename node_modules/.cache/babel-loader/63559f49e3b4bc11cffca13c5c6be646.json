{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ChatMessageText.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport VideoMessage from \"./VideoMessage\";\nimport ImageMessage from \"./ImageMessage\";\nimport AudioMessage from \"./AudioMessage\";\nimport FileMessage from \"./FileMessage\";\nimport { useTranslation } from \"react-i18next\";\nimport GroupNotification from './GroupNotification';\nimport \"./../assets/css/link-message-text.css\";\nimport Linkify from \"react-linkify\";\nimport { parseEmojis } from \"../helpers/MessageUtils\";\nimport { activeChat } from \"../data/chat\";\n\nconst ChatMessageText = ({\n  message\n}) => {\n  var _activeChat$members;\n\n  const [show, setShow] = useState(false);\n  const {\n    t\n  } = useTranslation();\n\n  const toggle = () => setShow(!show);\n\n  const componentDecorator = (href, text, key) => /*#__PURE__*/React.createElement(\"a\", {\n    href: href,\n    key: key,\n    rel: \"noopener noreferrer\",\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, text);\n\n  useEffect(() => {\n    setShow(false);\n  }, [message]);\n  var smallerMessage = \"\";\n  var biggerMessage = \"\";\n  const MAXNUMBEROFCHARACTERSONAMESSAGE = 10000;\n  const MAXNUMBERTODISPLAYMESSAGE = 165;\n  const membersName = (_activeChat$members = activeChat.members) === null || _activeChat$members === void 0 ? void 0 : _activeChat$members.filter(mb => mb.name);\n\n  if (!message.eventId) {\n    if (message.message) {\n      if (message.message.length > MAXNUMBERTODISPLAYMESSAGE && !message.isFileMessage && !message.isImageMessage && !message.isAudioMessage && !message.isVideoMessage) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          id: \"receivedmessage\",\n          className: \"mb-0\",\n          style: {\n            wordBreak: \"break-word\",\n            textAlign: \"left\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 11\n          }\n        }, /*#__PURE__*/React.createElement(Linkify, {\n          componentDecorator: componentDecorator\n          /* matchDecorator={()} */\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }\n        }, !show ? (smallerMessage = message.message.slice(0, MAXNUMBERTODISPLAYMESSAGE)) && smallerMessage : null, show ? (biggerMessage = message.message.slice(MAXNUMBERTODISPLAYMESSAGE, MAXNUMBEROFCHARACTERSONAMESSAGE)) && message.message.slice(0, MAXNUMBERTODISPLAYMESSAGE) + biggerMessage : null, /*#__PURE__*/React.createElement(\"button\", {\n          className: \"hover\",\n          id: \"more-msg\",\n          style: {\n            border: 0,\n            background: 0\n          },\n          onClick: toggle,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }\n        }, !show ? \".. \" + t(\"Read more\") : null)));\n      }\n\n      if (message.message.length <= 164 || message.isFileMessage || message.isImageMessage || message.isAudioMessage || message.isVideoMessage) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"mb-0\",\n          id: \"receivedmessage\",\n          style: {\n            wordBreak: \"break-word\",\n            textAlign: \"left\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }\n        }, message.isAudioMessage && /*#__PURE__*/React.createElement(AudioMessage, {\n          url: message.fileUrl,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 40\n          }\n        }), message.isFileMessage && /*#__PURE__*/React.createElement(FileMessage, {\n          url: message.fileUrl,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 39\n          }\n        }), message.isVideoMessage && /*#__PURE__*/React.createElement(VideoMessage, {\n          url: message.fileUrl,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 40\n          }\n        }), message.isImageMessage && /*#__PURE__*/React.createElement(ImageMessage, {\n          url: message.fileUrl,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 40\n          }\n        }), !message.isAudioMessage && !message.isFileMessage && !message.isVideoMessage && !message.isImageMessage && /*#__PURE__*/React.createElement(Linkify, {\n          componentDecorator: componentDecorator,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 17\n          }\n        }, message.message ? message.message.toString().split(\"\\n\").map((msg, i) => /*#__PURE__*/React.createElement(\"div\", {\n          key: msg + i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 27\n          }\n        }, parseEmojis(msg))) : null));\n      }\n    }\n  } else {\n    if (message.eventId) {\n      return /*#__PURE__*/React.createElement(GroupNotification, {\n        msg: message,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 16\n        }\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n\nexport default ChatMessageText;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ChatMessageText.tsx"],"names":["React","useState","useEffect","VideoMessage","ImageMessage","AudioMessage","FileMessage","useTranslation","GroupNotification","Linkify","parseEmojis","activeChat","ChatMessageText","message","show","setShow","t","toggle","componentDecorator","href","text","key","smallerMessage","biggerMessage","MAXNUMBEROFCHARACTERSONAMESSAGE","MAXNUMBERTODISPLAYMESSAGE","membersName","members","filter","mb","name","eventId","length","isFileMessage","isImageMessage","isAudioMessage","isVideoMessage","wordBreak","textAlign","slice","border","background","fileUrl","toString","split","map","msg","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport IMessage from \"../alias/IMessage\";\r\n\r\nimport VideoMessage from \"./VideoMessage\";\r\nimport ImageMessage from \"./ImageMessage\";\r\nimport AudioMessage from \"./AudioMessage\";\r\nimport FileMessage from \"./FileMessage\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport GroupNotification from './GroupNotification';\r\nimport \"./../assets/css/link-message-text.css\";\r\nimport Linkify from \"react-linkify\";\r\nimport { parseEmojis } from \"../helpers/MessageUtils\";\r\nimport { activeChat } from \"../data/chat\";\r\ninterface IProps {\r\n  message: IMessage;\r\n}\r\n\r\nconst ChatMessageText: React.FC<IProps> = ({ message }) => {\r\n  const [show, setShow] = useState(false);\r\n  const { t } = useTranslation();\r\n  const toggle = () => setShow(!show);\r\n  const componentDecorator = (href: string, text: string, key: any) => (\r\n    <a href={href} key={key} rel=\"noopener noreferrer\" target=\"_blank\">\r\n      {text}\r\n    </a>\r\n  );\r\n  useEffect(() => {\r\n    setShow(false);\r\n  }, [message]);\r\n  var smallerMessage = \"\";\r\n  var biggerMessage = \"\";\r\n  const MAXNUMBEROFCHARACTERSONAMESSAGE = 10000;\r\n  const MAXNUMBERTODISPLAYMESSAGE = 165;\r\n  const membersName = activeChat.members?.filter((mb) => mb.name);\r\n  \r\n  if(!message.eventId){\r\n    if (message.message) {\r\n      if (\r\n        message.message.length > MAXNUMBERTODISPLAYMESSAGE &&\r\n        !message.isFileMessage &&\r\n        !message.isImageMessage &&\r\n        !message.isAudioMessage &&\r\n        !message.isVideoMessage\r\n      ) {\r\n        return (\r\n          <div\r\n            id=\"receivedmessage\"\r\n            className=\"mb-0\"\r\n            style={{ wordBreak: \"break-word\", textAlign: \"left\" }}\r\n          >\r\n            <Linkify componentDecorator={componentDecorator} /* matchDecorator={()} */>\r\n              {!show\r\n                ? (smallerMessage = message.message.slice(\r\n                    0,\r\n                    MAXNUMBERTODISPLAYMESSAGE\r\n                  )) && smallerMessage\r\n                : null}\r\n              {show\r\n                ? (biggerMessage = message.message.slice(\r\n                    MAXNUMBERTODISPLAYMESSAGE,\r\n                    MAXNUMBEROFCHARACTERSONAMESSAGE\r\n                  )) &&\r\n                  message.message.slice(0, MAXNUMBERTODISPLAYMESSAGE) +\r\n                    biggerMessage\r\n                : null}\r\n\r\n              <button\r\n                className=\"hover\"\r\n                id=\"more-msg\"\r\n                style={{\r\n                  border: 0,\r\n                  background: 0,\r\n                }}\r\n                onClick={toggle}\r\n              >\r\n                {!show ? \".. \" + t(\"Read more\") : null}\r\n              </button>\r\n            </Linkify>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      if (\r\n        message.message.length <= 164 ||\r\n        message.isFileMessage ||\r\n        message.isImageMessage ||\r\n        message.isAudioMessage ||\r\n        message.isVideoMessage\r\n      ) {\r\n        return (\r\n          <div\r\n            className=\"mb-0\"\r\n            id=\"receivedmessage\"\r\n            style={{ wordBreak: \"break-word\", textAlign: \"left\" }}\r\n          >\r\n            {message.isAudioMessage && <AudioMessage url={message.fileUrl} />}\r\n            {message.isFileMessage && <FileMessage url={message.fileUrl} />}\r\n            {message.isVideoMessage && <VideoMessage url={message.fileUrl} />}\r\n            {message.isImageMessage && <ImageMessage url={message.fileUrl} />}\r\n            {!message.isAudioMessage &&\r\n              !message.isFileMessage &&\r\n              !message.isVideoMessage &&\r\n              !message.isImageMessage && (\r\n                <Linkify componentDecorator={componentDecorator}>\r\n                  {message.message\r\n                    ? message.message\r\n                        .toString()\r\n                        .split(\"\\n\")\r\n                        .map((msg, i) => (\r\n                          <div key={msg + i}>{parseEmojis(msg)}</div>\r\n                        ))\r\n                    : null}\r\n                </Linkify>\r\n              )}\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  }else{\r\n    if(message.eventId){\r\n        return <GroupNotification msg={message}/>\r\n      }\r\n    }\r\n  return <></>;\r\n};\r\n\r\nexport default ChatMessageText;\r\n"]},"metadata":{},"sourceType":"module"}