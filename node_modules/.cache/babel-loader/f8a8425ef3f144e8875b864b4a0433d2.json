{"ast":null,"code":"import { C, fromBodyLegacy } from \"../core\";\nimport { EmitterImpl } from \"./emitter\";\nimport { PublisherState } from \"./publisher-state\";\n/**\n * A publisher publishes a publication (outgoing PUBLISH).\n * @public\n */\n\nexport class Publisher {\n  /**\n   * Constructs a new instance of the `Publisher` class.\n   *\n   * @param userAgent - User agent. See {@link UserAgent} for details.\n   * @param targetURI - Request URI identifying the target of the message.\n   * @param eventType - The event type identifying the published document.\n   * @param options - Options bucket. See {@link PublisherOptions} for details.\n   */\n  constructor(userAgent, targetURI, eventType, options = {}) {\n    this.disposed = false;\n    /** The publication state. */\n\n    this._state = PublisherState.Initial; // state emitter\n\n    this._stateEventEmitter = new EmitterImpl();\n    this.userAgent = userAgent;\n    options.extraHeaders = (options.extraHeaders || []).slice();\n    options.contentType = options.contentType || \"text/plain\";\n\n    if (typeof options.expires !== \"number\" || options.expires % 1 !== 0) {\n      options.expires = 3600;\n    } else {\n      options.expires = Number(options.expires);\n    }\n\n    if (typeof options.unpublishOnClose !== \"boolean\") {\n      options.unpublishOnClose = true;\n    }\n\n    this.target = targetURI;\n    this.event = eventType;\n    this.options = options;\n    this.pubRequestExpires = options.expires;\n    this.logger = userAgent.getLogger(\"sip.Publisher\");\n    const params = options.params || {};\n    const fromURI = params.fromUri ? params.fromUri : userAgent.userAgentCore.configuration.aor;\n    const toURI = params.toUri ? params.toUri : targetURI;\n    let body;\n\n    if (options.body && options.contentType) {\n      const contentDisposition = \"render\";\n      const contentType = options.contentType;\n      const content = options.body;\n      body = {\n        contentDisposition,\n        contentType,\n        content\n      };\n    }\n\n    const extraHeaders = (options.extraHeaders || []).slice(); // Build the request\n\n    this.request = userAgent.userAgentCore.makeOutgoingRequestMessage(C.PUBLISH, targetURI, fromURI, toURI, params, extraHeaders, body); // Identifier\n\n    this.id = this.target.toString() + \":\" + this.event; // Add to the user agent's publisher collection.\n\n    this.userAgent._publishers[this.id] = this;\n  }\n  /**\n   * Destructor.\n   */\n\n\n  dispose() {\n    if (this.disposed) {\n      return Promise.resolve();\n    }\n\n    this.disposed = true;\n    this.logger.log(`Publisher ${this.id} in state ${this.state} is being disposed`); // Remove from the user agent's publisher collection\n\n    delete this.userAgent._publishers[this.id]; // Send unpublish, if requested\n\n    if (this.options.unpublishOnClose && this.state === PublisherState.Published) {\n      return this.unpublish();\n    }\n\n    if (this.publishRefreshTimer) {\n      clearTimeout(this.publishRefreshTimer);\n      this.publishRefreshTimer = undefined;\n    }\n\n    this.pubRequestBody = undefined;\n    this.pubRequestExpires = 0;\n    this.pubRequestEtag = undefined;\n    return Promise.resolve();\n  }\n  /** The publication state. */\n\n\n  get state() {\n    return this._state;\n  }\n  /** Emits when the publisher state changes. */\n\n\n  get stateChange() {\n    return this._stateEventEmitter;\n  }\n  /**\n   * Publish.\n   * @param content - Body to publish\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  publish(content, options = {}) {\n    // Clean up before the run\n    if (this.publishRefreshTimer) {\n      clearTimeout(this.publishRefreshTimer);\n      this.publishRefreshTimer = undefined;\n    } // is Initial or Modify request\n\n\n    this.options.body = content;\n    this.pubRequestBody = this.options.body;\n\n    if (this.pubRequestExpires === 0) {\n      // This is Initial request after unpublish\n      if (this.options.expires === undefined) {\n        throw new Error(\"Expires undefined.\");\n      }\n\n      this.pubRequestExpires = this.options.expires;\n      this.pubRequestEtag = undefined;\n    }\n\n    this.sendPublishRequest();\n    return Promise.resolve();\n  }\n  /**\n   * Unpublish.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  unpublish(options = {}) {\n    // Clean up before the run\n    if (this.publishRefreshTimer) {\n      clearTimeout(this.publishRefreshTimer);\n      this.publishRefreshTimer = undefined;\n    }\n\n    this.pubRequestBody = undefined;\n    this.pubRequestExpires = 0;\n\n    if (this.pubRequestEtag !== undefined) {\n      this.sendPublishRequest();\n    }\n\n    return Promise.resolve();\n  }\n  /** @internal */\n\n\n  receiveResponse(response) {\n    const statusCode = response.statusCode || 0;\n\n    switch (true) {\n      case /^1[0-9]{2}$/.test(statusCode.toString()):\n        break;\n\n      case /^2[0-9]{2}$/.test(statusCode.toString()):\n        // Set SIP-Etag\n        if (response.hasHeader(\"SIP-ETag\")) {\n          this.pubRequestEtag = response.getHeader(\"SIP-ETag\");\n        } else {\n          this.logger.warn(\"SIP-ETag header missing in a 200-class response to PUBLISH\");\n        } // Update Expire\n\n\n        if (response.hasHeader(\"Expires\")) {\n          const expires = Number(response.getHeader(\"Expires\"));\n\n          if (typeof expires === \"number\" && expires >= 0 && expires <= this.pubRequestExpires) {\n            this.pubRequestExpires = expires;\n          } else {\n            this.logger.warn(\"Bad Expires header in a 200-class response to PUBLISH\");\n          }\n        } else {\n          this.logger.warn(\"Expires header missing in a 200-class response to PUBLISH\");\n        }\n\n        if (this.pubRequestExpires !== 0) {\n          // Schedule refresh\n          this.publishRefreshTimer = setTimeout(() => this.refreshRequest(), this.pubRequestExpires * 900);\n          this.stateTransition(PublisherState.Published);\n        } else {\n          this.stateTransition(PublisherState.Unpublished);\n        }\n\n        break;\n\n      case /^412$/.test(statusCode.toString()):\n        // 412 code means no matching ETag - possibly the PUBLISH expired\n        // Resubmit as new request, if the current request is not a \"remove\"\n        if (this.pubRequestEtag !== undefined && this.pubRequestExpires !== 0) {\n          this.logger.warn(\"412 response to PUBLISH, recovering\");\n          this.pubRequestEtag = undefined;\n\n          if (this.options.body === undefined) {\n            throw new Error(\"Body undefined.\");\n          }\n\n          this.publish(this.options.body);\n        } else {\n          this.logger.warn(\"412 response to PUBLISH, recovery failed\");\n          this.pubRequestExpires = 0;\n          this.stateTransition(PublisherState.Unpublished);\n          this.stateTransition(PublisherState.Terminated);\n        }\n\n        break;\n\n      case /^423$/.test(statusCode.toString()):\n        // 423 code means we need to adjust the Expires interval up\n        if (this.pubRequestExpires !== 0 && response.hasHeader(\"Min-Expires\")) {\n          const minExpires = Number(response.getHeader(\"Min-Expires\"));\n\n          if (typeof minExpires === \"number\" || minExpires > this.pubRequestExpires) {\n            this.logger.warn(\"423 code in response to PUBLISH, adjusting the Expires value and trying to recover\");\n            this.pubRequestExpires = minExpires;\n\n            if (this.options.body === undefined) {\n              throw new Error(\"Body undefined.\");\n            }\n\n            this.publish(this.options.body);\n          } else {\n            this.logger.warn(\"Bad 423 response Min-Expires header received for PUBLISH\");\n            this.pubRequestExpires = 0;\n            this.stateTransition(PublisherState.Unpublished);\n            this.stateTransition(PublisherState.Terminated);\n          }\n        } else {\n          this.logger.warn(\"423 response to PUBLISH, recovery failed\");\n          this.pubRequestExpires = 0;\n          this.stateTransition(PublisherState.Unpublished);\n          this.stateTransition(PublisherState.Terminated);\n        }\n\n        break;\n\n      default:\n        this.pubRequestExpires = 0;\n        this.stateTransition(PublisherState.Unpublished);\n        this.stateTransition(PublisherState.Terminated);\n        break;\n    } // Do the cleanup\n\n\n    if (this.pubRequestExpires === 0) {\n      if (this.publishRefreshTimer) {\n        clearTimeout(this.publishRefreshTimer);\n        this.publishRefreshTimer = undefined;\n      }\n\n      this.pubRequestBody = undefined;\n      this.pubRequestEtag = undefined;\n    }\n  }\n  /** @internal */\n\n\n  send() {\n    return this.userAgent.userAgentCore.publish(this.request, {\n      onAccept: response => this.receiveResponse(response.message),\n      onProgress: response => this.receiveResponse(response.message),\n      onRedirect: response => this.receiveResponse(response.message),\n      onReject: response => this.receiveResponse(response.message),\n      onTrying: response => this.receiveResponse(response.message)\n    });\n  }\n\n  refreshRequest() {\n    // Clean up before the run\n    if (this.publishRefreshTimer) {\n      clearTimeout(this.publishRefreshTimer);\n      this.publishRefreshTimer = undefined;\n    } // This is Refresh request\n\n\n    this.pubRequestBody = undefined;\n\n    if (this.pubRequestEtag === undefined) {\n      throw new Error(\"Etag undefined\");\n    }\n\n    if (this.pubRequestExpires === 0) {\n      throw new Error(\"Expires zero\");\n    }\n\n    this.sendPublishRequest();\n  }\n\n  sendPublishRequest() {\n    const reqOptions = Object.assign({}, this.options);\n    reqOptions.extraHeaders = (this.options.extraHeaders || []).slice();\n    reqOptions.extraHeaders.push(\"Event: \" + this.event);\n    reqOptions.extraHeaders.push(\"Expires: \" + this.pubRequestExpires);\n\n    if (this.pubRequestEtag !== undefined) {\n      reqOptions.extraHeaders.push(\"SIP-If-Match: \" + this.pubRequestEtag);\n    }\n\n    const ruri = this.target;\n    const params = this.options.params || {};\n    let bodyAndContentType;\n\n    if (this.pubRequestBody !== undefined) {\n      if (this.options.contentType === undefined) {\n        throw new Error(\"Content type undefined.\");\n      }\n\n      bodyAndContentType = {\n        body: this.pubRequestBody,\n        contentType: this.options.contentType\n      };\n    }\n\n    let body;\n\n    if (bodyAndContentType) {\n      body = fromBodyLegacy(bodyAndContentType);\n    }\n\n    this.request = this.userAgent.userAgentCore.makeOutgoingRequestMessage(C.PUBLISH, ruri, params.fromUri ? params.fromUri : this.userAgent.userAgentCore.configuration.aor, params.toUri ? params.toUri : this.target, params, reqOptions.extraHeaders, body);\n    return this.send();\n  }\n  /**\n   * Transition publication state.\n   */\n\n\n  stateTransition(newState) {\n    const invalidTransition = () => {\n      throw new Error(`Invalid state transition from ${this._state} to ${newState}`);\n    }; // Validate transition\n\n\n    switch (this._state) {\n      case PublisherState.Initial:\n        if (newState !== PublisherState.Published && newState !== PublisherState.Unpublished && newState !== PublisherState.Terminated) {\n          invalidTransition();\n        }\n\n        break;\n\n      case PublisherState.Published:\n        if (newState !== PublisherState.Unpublished && newState !== PublisherState.Terminated) {\n          invalidTransition();\n        }\n\n        break;\n\n      case PublisherState.Unpublished:\n        if (newState !== PublisherState.Published && newState !== PublisherState.Terminated) {\n          invalidTransition();\n        }\n\n        break;\n\n      case PublisherState.Terminated:\n        invalidTransition();\n        break;\n\n      default:\n        throw new Error(\"Unrecognized state.\");\n    } // Transition\n\n\n    this._state = newState;\n    this.logger.log(`Publication transitioned to state ${this._state}`);\n\n    this._stateEventEmitter.emit(this._state); // Dispose\n\n\n    if (newState === PublisherState.Terminated) {\n      this.dispose();\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/api/publisher.js"],"names":["C","fromBodyLegacy","EmitterImpl","PublisherState","Publisher","constructor","userAgent","targetURI","eventType","options","disposed","_state","Initial","_stateEventEmitter","extraHeaders","slice","contentType","expires","Number","unpublishOnClose","target","event","pubRequestExpires","logger","getLogger","params","fromURI","fromUri","userAgentCore","configuration","aor","toURI","toUri","body","contentDisposition","content","request","makeOutgoingRequestMessage","PUBLISH","id","toString","_publishers","dispose","Promise","resolve","log","state","Published","unpublish","publishRefreshTimer","clearTimeout","undefined","pubRequestBody","pubRequestEtag","stateChange","publish","Error","sendPublishRequest","receiveResponse","response","statusCode","test","hasHeader","getHeader","warn","setTimeout","refreshRequest","stateTransition","Unpublished","Terminated","minExpires","send","onAccept","message","onProgress","onRedirect","onReject","onTrying","reqOptions","Object","assign","push","ruri","bodyAndContentType","newState","invalidTransition","emit"],"mappings":"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","sourcesContent":["import { C, fromBodyLegacy } from \"../core\";\nimport { EmitterImpl } from \"./emitter\";\nimport { PublisherState } from \"./publisher-state\";\n/**\n * A publisher publishes a publication (outgoing PUBLISH).\n * @public\n */\nexport class Publisher {\n    /**\n     * Constructs a new instance of the `Publisher` class.\n     *\n     * @param userAgent - User agent. See {@link UserAgent} for details.\n     * @param targetURI - Request URI identifying the target of the message.\n     * @param eventType - The event type identifying the published document.\n     * @param options - Options bucket. See {@link PublisherOptions} for details.\n     */\n    constructor(userAgent, targetURI, eventType, options = {}) {\n        this.disposed = false;\n        /** The publication state. */\n        this._state = PublisherState.Initial;\n        // state emitter\n        this._stateEventEmitter = new EmitterImpl();\n        this.userAgent = userAgent;\n        options.extraHeaders = (options.extraHeaders || []).slice();\n        options.contentType = options.contentType || \"text/plain\";\n        if (typeof options.expires !== \"number\" || options.expires % 1 !== 0) {\n            options.expires = 3600;\n        }\n        else {\n            options.expires = Number(options.expires);\n        }\n        if (typeof options.unpublishOnClose !== \"boolean\") {\n            options.unpublishOnClose = true;\n        }\n        this.target = targetURI;\n        this.event = eventType;\n        this.options = options;\n        this.pubRequestExpires = options.expires;\n        this.logger = userAgent.getLogger(\"sip.Publisher\");\n        const params = options.params || {};\n        const fromURI = params.fromUri ? params.fromUri : userAgent.userAgentCore.configuration.aor;\n        const toURI = params.toUri ? params.toUri : targetURI;\n        let body;\n        if (options.body && options.contentType) {\n            const contentDisposition = \"render\";\n            const contentType = options.contentType;\n            const content = options.body;\n            body = {\n                contentDisposition,\n                contentType,\n                content\n            };\n        }\n        const extraHeaders = (options.extraHeaders || []).slice();\n        // Build the request\n        this.request = userAgent.userAgentCore.makeOutgoingRequestMessage(C.PUBLISH, targetURI, fromURI, toURI, params, extraHeaders, body);\n        // Identifier\n        this.id = this.target.toString() + \":\" + this.event;\n        // Add to the user agent's publisher collection.\n        this.userAgent._publishers[this.id] = this;\n    }\n    /**\n     * Destructor.\n     */\n    dispose() {\n        if (this.disposed) {\n            return Promise.resolve();\n        }\n        this.disposed = true;\n        this.logger.log(`Publisher ${this.id} in state ${this.state} is being disposed`);\n        // Remove from the user agent's publisher collection\n        delete this.userAgent._publishers[this.id];\n        // Send unpublish, if requested\n        if (this.options.unpublishOnClose && this.state === PublisherState.Published) {\n            return this.unpublish();\n        }\n        if (this.publishRefreshTimer) {\n            clearTimeout(this.publishRefreshTimer);\n            this.publishRefreshTimer = undefined;\n        }\n        this.pubRequestBody = undefined;\n        this.pubRequestExpires = 0;\n        this.pubRequestEtag = undefined;\n        return Promise.resolve();\n    }\n    /** The publication state. */\n    get state() {\n        return this._state;\n    }\n    /** Emits when the publisher state changes. */\n    get stateChange() {\n        return this._stateEventEmitter;\n    }\n    /**\n     * Publish.\n     * @param content - Body to publish\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    publish(content, options = {}) {\n        // Clean up before the run\n        if (this.publishRefreshTimer) {\n            clearTimeout(this.publishRefreshTimer);\n            this.publishRefreshTimer = undefined;\n        }\n        // is Initial or Modify request\n        this.options.body = content;\n        this.pubRequestBody = this.options.body;\n        if (this.pubRequestExpires === 0) {\n            // This is Initial request after unpublish\n            if (this.options.expires === undefined) {\n                throw new Error(\"Expires undefined.\");\n            }\n            this.pubRequestExpires = this.options.expires;\n            this.pubRequestEtag = undefined;\n        }\n        this.sendPublishRequest();\n        return Promise.resolve();\n    }\n    /**\n     * Unpublish.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    unpublish(options = {}) {\n        // Clean up before the run\n        if (this.publishRefreshTimer) {\n            clearTimeout(this.publishRefreshTimer);\n            this.publishRefreshTimer = undefined;\n        }\n        this.pubRequestBody = undefined;\n        this.pubRequestExpires = 0;\n        if (this.pubRequestEtag !== undefined) {\n            this.sendPublishRequest();\n        }\n        return Promise.resolve();\n    }\n    /** @internal */\n    receiveResponse(response) {\n        const statusCode = response.statusCode || 0;\n        switch (true) {\n            case /^1[0-9]{2}$/.test(statusCode.toString()):\n                break;\n            case /^2[0-9]{2}$/.test(statusCode.toString()):\n                // Set SIP-Etag\n                if (response.hasHeader(\"SIP-ETag\")) {\n                    this.pubRequestEtag = response.getHeader(\"SIP-ETag\");\n                }\n                else {\n                    this.logger.warn(\"SIP-ETag header missing in a 200-class response to PUBLISH\");\n                }\n                // Update Expire\n                if (response.hasHeader(\"Expires\")) {\n                    const expires = Number(response.getHeader(\"Expires\"));\n                    if (typeof expires === \"number\" && expires >= 0 && expires <= this.pubRequestExpires) {\n                        this.pubRequestExpires = expires;\n                    }\n                    else {\n                        this.logger.warn(\"Bad Expires header in a 200-class response to PUBLISH\");\n                    }\n                }\n                else {\n                    this.logger.warn(\"Expires header missing in a 200-class response to PUBLISH\");\n                }\n                if (this.pubRequestExpires !== 0) {\n                    // Schedule refresh\n                    this.publishRefreshTimer = setTimeout(() => this.refreshRequest(), this.pubRequestExpires * 900);\n                    this.stateTransition(PublisherState.Published);\n                }\n                else {\n                    this.stateTransition(PublisherState.Unpublished);\n                }\n                break;\n            case /^412$/.test(statusCode.toString()):\n                // 412 code means no matching ETag - possibly the PUBLISH expired\n                // Resubmit as new request, if the current request is not a \"remove\"\n                if (this.pubRequestEtag !== undefined && this.pubRequestExpires !== 0) {\n                    this.logger.warn(\"412 response to PUBLISH, recovering\");\n                    this.pubRequestEtag = undefined;\n                    if (this.options.body === undefined) {\n                        throw new Error(\"Body undefined.\");\n                    }\n                    this.publish(this.options.body);\n                }\n                else {\n                    this.logger.warn(\"412 response to PUBLISH, recovery failed\");\n                    this.pubRequestExpires = 0;\n                    this.stateTransition(PublisherState.Unpublished);\n                    this.stateTransition(PublisherState.Terminated);\n                }\n                break;\n            case /^423$/.test(statusCode.toString()):\n                // 423 code means we need to adjust the Expires interval up\n                if (this.pubRequestExpires !== 0 && response.hasHeader(\"Min-Expires\")) {\n                    const minExpires = Number(response.getHeader(\"Min-Expires\"));\n                    if (typeof minExpires === \"number\" || minExpires > this.pubRequestExpires) {\n                        this.logger.warn(\"423 code in response to PUBLISH, adjusting the Expires value and trying to recover\");\n                        this.pubRequestExpires = minExpires;\n                        if (this.options.body === undefined) {\n                            throw new Error(\"Body undefined.\");\n                        }\n                        this.publish(this.options.body);\n                    }\n                    else {\n                        this.logger.warn(\"Bad 423 response Min-Expires header received for PUBLISH\");\n                        this.pubRequestExpires = 0;\n                        this.stateTransition(PublisherState.Unpublished);\n                        this.stateTransition(PublisherState.Terminated);\n                    }\n                }\n                else {\n                    this.logger.warn(\"423 response to PUBLISH, recovery failed\");\n                    this.pubRequestExpires = 0;\n                    this.stateTransition(PublisherState.Unpublished);\n                    this.stateTransition(PublisherState.Terminated);\n                }\n                break;\n            default:\n                this.pubRequestExpires = 0;\n                this.stateTransition(PublisherState.Unpublished);\n                this.stateTransition(PublisherState.Terminated);\n                break;\n        }\n        // Do the cleanup\n        if (this.pubRequestExpires === 0) {\n            if (this.publishRefreshTimer) {\n                clearTimeout(this.publishRefreshTimer);\n                this.publishRefreshTimer = undefined;\n            }\n            this.pubRequestBody = undefined;\n            this.pubRequestEtag = undefined;\n        }\n    }\n    /** @internal */\n    send() {\n        return this.userAgent.userAgentCore.publish(this.request, {\n            onAccept: (response) => this.receiveResponse(response.message),\n            onProgress: (response) => this.receiveResponse(response.message),\n            onRedirect: (response) => this.receiveResponse(response.message),\n            onReject: (response) => this.receiveResponse(response.message),\n            onTrying: (response) => this.receiveResponse(response.message)\n        });\n    }\n    refreshRequest() {\n        // Clean up before the run\n        if (this.publishRefreshTimer) {\n            clearTimeout(this.publishRefreshTimer);\n            this.publishRefreshTimer = undefined;\n        }\n        // This is Refresh request\n        this.pubRequestBody = undefined;\n        if (this.pubRequestEtag === undefined) {\n            throw new Error(\"Etag undefined\");\n        }\n        if (this.pubRequestExpires === 0) {\n            throw new Error(\"Expires zero\");\n        }\n        this.sendPublishRequest();\n    }\n    sendPublishRequest() {\n        const reqOptions = Object.assign({}, this.options);\n        reqOptions.extraHeaders = (this.options.extraHeaders || []).slice();\n        reqOptions.extraHeaders.push(\"Event: \" + this.event);\n        reqOptions.extraHeaders.push(\"Expires: \" + this.pubRequestExpires);\n        if (this.pubRequestEtag !== undefined) {\n            reqOptions.extraHeaders.push(\"SIP-If-Match: \" + this.pubRequestEtag);\n        }\n        const ruri = this.target;\n        const params = this.options.params || {};\n        let bodyAndContentType;\n        if (this.pubRequestBody !== undefined) {\n            if (this.options.contentType === undefined) {\n                throw new Error(\"Content type undefined.\");\n            }\n            bodyAndContentType = {\n                body: this.pubRequestBody,\n                contentType: this.options.contentType\n            };\n        }\n        let body;\n        if (bodyAndContentType) {\n            body = fromBodyLegacy(bodyAndContentType);\n        }\n        this.request = this.userAgent.userAgentCore.makeOutgoingRequestMessage(C.PUBLISH, ruri, params.fromUri ? params.fromUri : this.userAgent.userAgentCore.configuration.aor, params.toUri ? params.toUri : this.target, params, reqOptions.extraHeaders, body);\n        return this.send();\n    }\n    /**\n     * Transition publication state.\n     */\n    stateTransition(newState) {\n        const invalidTransition = () => {\n            throw new Error(`Invalid state transition from ${this._state} to ${newState}`);\n        };\n        // Validate transition\n        switch (this._state) {\n            case PublisherState.Initial:\n                if (newState !== PublisherState.Published &&\n                    newState !== PublisherState.Unpublished &&\n                    newState !== PublisherState.Terminated) {\n                    invalidTransition();\n                }\n                break;\n            case PublisherState.Published:\n                if (newState !== PublisherState.Unpublished && newState !== PublisherState.Terminated) {\n                    invalidTransition();\n                }\n                break;\n            case PublisherState.Unpublished:\n                if (newState !== PublisherState.Published && newState !== PublisherState.Terminated) {\n                    invalidTransition();\n                }\n                break;\n            case PublisherState.Terminated:\n                invalidTransition();\n                break;\n            default:\n                throw new Error(\"Unrecognized state.\");\n        }\n        // Transition\n        this._state = newState;\n        this.logger.log(`Publication transitioned to state ${this._state}`);\n        this._stateEventEmitter.emit(this._state);\n        // Dispose\n        if (newState === PublisherState.Terminated) {\n            this.dispose();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}