{"ast":null,"code":"import { EmitterImpl } from \"./emitter\";\nimport { SubscriptionState } from \"./subscription-state\";\n/**\n * A subscription provides {@link Notification} of events.\n *\n * @remarks\n * See {@link Subscriber} for details on establishing a subscription.\n *\n * @public\n */\n\nexport class Subscription {\n  /**\n   * Constructor.\n   * @param userAgent - User agent. See {@link UserAgent} for details.\n   * @internal\n   */\n  constructor(userAgent, options = {}) {\n    this._disposed = false;\n    this._state = SubscriptionState.Initial;\n    this._logger = userAgent.getLogger(\"sip.Subscription\");\n    this._stateEventEmitter = new EmitterImpl();\n    this._userAgent = userAgent;\n    this.delegate = options.delegate;\n  }\n  /**\n   * Destructor.\n   */\n\n\n  dispose() {\n    if (this._disposed) {\n      return Promise.resolve();\n    }\n\n    this._disposed = true;\n\n    this._stateEventEmitter.removeAllListeners();\n\n    return Promise.resolve();\n  }\n  /**\n   * The subscribed subscription dialog.\n   */\n\n\n  get dialog() {\n    return this._dialog;\n  }\n  /**\n   * True if disposed.\n   * @internal\n   */\n\n\n  get disposed() {\n    return this._disposed;\n  }\n  /**\n   * Subscription state. See {@link SubscriptionState} for details.\n   */\n\n\n  get state() {\n    return this._state;\n  }\n  /**\n   * Emits when the subscription `state` property changes.\n   */\n\n\n  get stateChange() {\n    return this._stateEventEmitter;\n  }\n  /** @internal */\n\n\n  stateTransition(newState) {\n    const invalidTransition = () => {\n      throw new Error(`Invalid state transition from ${this._state} to ${newState}`);\n    }; // Validate transition\n\n\n    switch (this._state) {\n      case SubscriptionState.Initial:\n        if (newState !== SubscriptionState.NotifyWait && newState !== SubscriptionState.Terminated) {\n          invalidTransition();\n        }\n\n        break;\n\n      case SubscriptionState.NotifyWait:\n        if (newState !== SubscriptionState.Subscribed && newState !== SubscriptionState.Terminated) {\n          invalidTransition();\n        }\n\n        break;\n\n      case SubscriptionState.Subscribed:\n        if (newState !== SubscriptionState.Terminated) {\n          invalidTransition();\n        }\n\n        break;\n\n      case SubscriptionState.Terminated:\n        invalidTransition();\n        break;\n\n      default:\n        throw new Error(\"Unrecognized state.\");\n    } // Guard against duplicate transition\n\n\n    if (this._state === newState) {\n      return;\n    } // Transition\n\n\n    this._state = newState;\n\n    this._logger.log(`Subscription ${this._dialog ? this._dialog.id : undefined} transitioned to ${this._state}`);\n\n    this._stateEventEmitter.emit(this._state); // Dispose\n\n\n    if (newState === SubscriptionState.Terminated) {\n      this.dispose();\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/api/subscription.js"],"names":["EmitterImpl","SubscriptionState","Subscription","constructor","userAgent","options","_disposed","_state","Initial","_logger","getLogger","_stateEventEmitter","_userAgent","delegate","dispose","Promise","resolve","removeAllListeners","dialog","_dialog","disposed","state","stateChange","stateTransition","newState","invalidTransition","Error","NotifyWait","Terminated","Subscribed","log","id","undefined","emit"],"mappings":"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","sourcesContent":["import { EmitterImpl } from \"./emitter\";\nimport { SubscriptionState } from \"./subscription-state\";\n/**\n * A subscription provides {@link Notification} of events.\n *\n * @remarks\n * See {@link Subscriber} for details on establishing a subscription.\n *\n * @public\n */\nexport class Subscription {\n    /**\n     * Constructor.\n     * @param userAgent - User agent. See {@link UserAgent} for details.\n     * @internal\n     */\n    constructor(userAgent, options = {}) {\n        this._disposed = false;\n        this._state = SubscriptionState.Initial;\n        this._logger = userAgent.getLogger(\"sip.Subscription\");\n        this._stateEventEmitter = new EmitterImpl();\n        this._userAgent = userAgent;\n        this.delegate = options.delegate;\n    }\n    /**\n     * Destructor.\n     */\n    dispose() {\n        if (this._disposed) {\n            return Promise.resolve();\n        }\n        this._disposed = true;\n        this._stateEventEmitter.removeAllListeners();\n        return Promise.resolve();\n    }\n    /**\n     * The subscribed subscription dialog.\n     */\n    get dialog() {\n        return this._dialog;\n    }\n    /**\n     * True if disposed.\n     * @internal\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Subscription state. See {@link SubscriptionState} for details.\n     */\n    get state() {\n        return this._state;\n    }\n    /**\n     * Emits when the subscription `state` property changes.\n     */\n    get stateChange() {\n        return this._stateEventEmitter;\n    }\n    /** @internal */\n    stateTransition(newState) {\n        const invalidTransition = () => {\n            throw new Error(`Invalid state transition from ${this._state} to ${newState}`);\n        };\n        // Validate transition\n        switch (this._state) {\n            case SubscriptionState.Initial:\n                if (newState !== SubscriptionState.NotifyWait && newState !== SubscriptionState.Terminated) {\n                    invalidTransition();\n                }\n                break;\n            case SubscriptionState.NotifyWait:\n                if (newState !== SubscriptionState.Subscribed && newState !== SubscriptionState.Terminated) {\n                    invalidTransition();\n                }\n                break;\n            case SubscriptionState.Subscribed:\n                if (newState !== SubscriptionState.Terminated) {\n                    invalidTransition();\n                }\n                break;\n            case SubscriptionState.Terminated:\n                invalidTransition();\n                break;\n            default:\n                throw new Error(\"Unrecognized state.\");\n        }\n        // Guard against duplicate transition\n        if (this._state === newState) {\n            return;\n        }\n        // Transition\n        this._state = newState;\n        this._logger.log(`Subscription ${this._dialog ? this._dialog.id : undefined} transitioned to ${this._state}`);\n        this._stateEventEmitter.emit(this._state);\n        // Dispose\n        if (newState === SubscriptionState.Terminated) {\n            this.dispose();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}