{"ast":null,"code":"import SquadChatCommunicator from \"./SquadChatCommunicator\";\nimport API from \"@digivox/apicommunicator\";\nimport PresenceStatus from \"../enuns/PresenceStatus\";\nimport UserType from \"../enuns/UserType\";\nimport short from \"short-uuid\";\nimport { Events } from \"./chat/types/types\";\nimport ChatType from \"../enuns/ChatType\";\nimport { getAttachmentType } from \"./utils/parseUtils\";\nexport class SquadCommunicator {\n  constructor() {\n    this.chatCommunicatorSubscribe = (event, data) => {\n      var _this$contacts$get;\n\n      if (!this.interfaceChatCommunicatorSubscribe) return;\n\n      switch (event) {\n        case Events.MESSAGE:\n          const senderId = data.fromUser.split(\"@\")[0];\n          data.userName = (_this$contacts$get = this.contacts.get(senderId)) === null || _this$contacts$get === void 0 ? void 0 : _this$contacts$get.name;\n          this.interfaceChatCommunicatorSubscribe(event, data);\n          break;\n\n        default:\n          this.interfaceChatCommunicatorSubscribe(event, data);\n      }\n    };\n\n    this.createGroup = (group, callback) => {\n      if (!this.api) return;\n      const contactsId = group.contacts.map(contact => contact.id);\n      const body = {\n        name: group.name,\n        description: group.description,\n        members: contactsId,\n        domain: this.settings.sipDomain\n      };\n      this.api.createGroup({\n        body\n      }, (returnGroup, err) => {\n        if (err) return;\n        if (!this.api) return;\n        if (!returnGroup) return;\n        this.api.getGroup(returnGroup.id, {\n          paramsUrl: {\n            members: true\n          }\n        }, groupWithMember => {\n          const parsedGroup = this.parseGroup(groupWithMember);\n          this.groups.set(parsedGroup.groupId, parsedGroup);\n          callback(parsedGroup);\n        });\n      });\n    };\n\n    this.joinGroups = () => {\n      var _this$chat;\n\n      const groupsJid = Array.from(this.groups.values()).map(group => group.jid);\n      (_this$chat = this.chat) === null || _this$chat === void 0 ? void 0 : _this$chat.joinGroups(groupsJid);\n    };\n\n    this.getMessages = (chat, callback) => {\n      if (!this.api) return;\n      const lastMessageId = chat.messages[0].id;\n      this.api.getMessages(chat.id, chat.chatType, {\n        paramsUrl: {\n          startingByMessageId: lastMessageId\n        }\n      }, data => {\n        if (data) callback(data.messages.map(msg => this.parseMessage(msg)));else return;\n      });\n    };\n\n    this.sendMessage = (chat, text) => {\n      var _this$chat2;\n\n      (_this$chat2 = this.chat) === null || _this$chat2 === void 0 ? void 0 : _this$chat2.sendMessage(chat, text);\n    };\n\n    this.getAttachments = (chat, callback) => {\n      if (!this.api) return;\n      const paramsUrl = {\n        kind: chat.chatType === ChatType.USER ? \"chat\" : \"group\",\n        src: `${this.getAuthorization().user_name}@${this.settings.xmppDomain}`,\n        dst: chat.jid\n      };\n      this.api.getAttachments({\n        paramsUrl\n      }, attachments => {\n        if (attachments === null || attachments === void 0 ? void 0 : attachments.attachments) {\n          const parsedAttachments = attachments === null || attachments === void 0 ? void 0 : attachments.attachments.map(attachment => {\n            const booleans = getAttachmentType(attachment.fileExtension);\n            return {\n              name: attachment.fileName,\n              // size: \"any\",\n              thumbnail: \"default\",\n              ...booleans\n            };\n          });\n          callback(parsedAttachments);\n        }\n      });\n    };\n\n    this.parseToIChat = (chat, arr) => {\n      const chatUser = this.groups.get(chat.id) || this.contacts.get(chat.id);\n\n      if (chatUser) {\n        const chatMessage = chat.messages[0];\n        const iChat = {\n          id: chat.id,\n          jid: chatUser.jid,\n          name: chat.name,\n          profilePicture: chatUser.profilePicture,\n          status: \"status\" in chatUser ? chatUser.status : undefined,\n          unRead: chat.unreadMessages,\n          chatType: chat.chatType,\n          inputMessage: \"\",\n          isTyping: false,\n          messages: [this.parseMessage(chatMessage)]\n        };\n        arr.push(iChat);\n      }\n    };\n\n    this.parseGroup = apiGroup => {\n      return {\n        groupId: apiGroup.id,\n        name: apiGroup.name,\n        description: apiGroup.description,\n        jid: `${apiGroup.id}@conference.${apiGroup.domainName}`,\n        profilePicture: apiGroup.imageUrl,\n        members: apiGroup.members.map(member => {\n          return {\n            userId: member.id,\n            name: member.name,\n            profilePicture: member.imageUrl,\n            role: member.admin ? UserType.ADMIN : UserType.USER,\n            status: PresenceStatus.ONLINE\n          };\n        })\n      };\n    };\n\n    this.parseContact = apiContact => {\n      return {\n        id: apiContact.id,\n        jid: apiContact.imId,\n        name: apiContact.name,\n        domain: apiContact.domainName,\n        number: apiContact.extension,\n        profilePicture: apiContact.imageUrl,\n        email: apiContact.email,\n        blocked: apiContact.blocked,\n        added: apiContact.added,\n        status: PresenceStatus.ONLINE,\n        favorite: apiContact.favorite\n      };\n    };\n\n    this.interfaceChatCommunicatorSubscribe = undefined;\n    this.contacts = new Map();\n    this.groups = new Map();\n    this.makeAPI();\n  }\n\n  static getInstance(chatCommunicatorSubscribe) {\n    if (!this.instance) {\n      this.instance = new SquadCommunicator();\n    }\n\n    this.instance.updateSubscribeFunction(chatCommunicatorSubscribe);\n    return this.instance;\n  }\n\n  updateSubscribeFunction(chatCommunicatorSubscribe) {\n    this.interfaceChatCommunicatorSubscribe = chatCommunicatorSubscribe;\n  } // -- Make Services --\n\n\n  makeAPI() {\n    const authorization = this.getAuthorization();\n\n    if (authorization) {\n      const api = new API({\n        token: authorization.access_token,\n        apiUrl: authorization.baseUrl\n      });\n      this.api = api;\n      this.getSettings(settings => {\n        this.settings = settings;\n        this.makeChat();\n      });\n    }\n  }\n\n  makeChat() {\n    this.chat = new SquadChatCommunicator({\n      service: `wss://${this.settings.xmppDomain}:5280/websocket`,\n      domain: this.settings.xmppDomain,\n      username: this.settings.xmppUser,\n      password: this.settings.xmppPw,\n      resource: `squad.web_${this.settings.xmppUser}_${short().generate()}`\n    }, this.chatCommunicatorSubscribe);\n  } // -- END --\n  // -- Subscribe Intercept --\n\n\n  // END\n  // User\n  getAuthorization() {\n    const Auth = localStorage.getItem(\"authorization\");\n    if (Auth) return JSON.parse(Auth);\n    return {};\n  }\n\n  getUser(callback) {\n    if (!this.api) return;\n    const Auth = this.getAuthorization();\n    this.getSettings(settings => {\n      callback({\n        id: settings.xmppUser,\n        jid: `${settings.xmppUser}@${settings.xmppDomain}`,\n        name: Auth.user_name,\n        email: Auth.email,\n        profilePicture: settings.imageUrl,\n        number: settings.sipUser.replace(\"w-\", \"\").replace(\"s-\", \"\")\n      });\n    });\n  } // -- END --\n  // -- Settings --\n\n\n  getSettings(callback) {\n    if (!this.api) return;\n    this.api.getSettings({}, (settings, error) => {\n      if (error) throw error;\n      if (settings) callback(settings);\n    });\n  } // -- Contacts --\n\n\n  getContacts(callback) {\n    callback(Array.from(this.contacts.values()));\n  }\n\n  getFavorites(callback) {\n    const contacts = Array.from(this.contacts.values()).filter(contact => contact.favorite);\n    callback(contacts);\n  } // -- END --\n  // -- Groups --\n\n\n  getGroups(callback) {\n    callback(Array.from(this.groups.values()));\n  }\n\n  // -- END --\n  // -- Chats --\n  getChats(callback) {\n    if (!this.api) return;\n    this.api.getSettings({}, (settings, error) => {\n      if (settings) this.settings = settings;\n      if (this.api) this.api.getContacts({\n        paramsUrl: {\n          added: true,\n          limit: 5000,\n          contactType: \"contact\"\n        }\n      }, (apiContacts, err) => {\n        // Populando o Map de contatos\n        if (!err) {\n          if (!this.api) return;\n          this.populateContacts(apiContacts);\n          this.api.getGroups({\n            paramsUrl: {\n              members: true\n            }\n          }, (apiGroups, err) => {\n            // Populando o Map de grupos\n            if (!err) {\n              if (!this.api) return;\n              this.api.getChats({\n                paramsUrl: {\n                  limit: 5000,\n                  contactType: \"contact\"\n                }\n              }, apiChats => {\n                //Retornando os Chats\n                if (!this.api) {\n                  return;\n                }\n\n                this.populateGroups(apiGroups);\n                const returnChats = [];\n                apiChats.chats.forEach(chat => {\n                  this.parseToIChat(chat, returnChats);\n                });\n                callback(returnChats);\n              });\n            }\n          });\n        }\n      });\n    });\n  } // -- Messages --\n\n\n  parseMessage(chatMessage) {\n    const msg = {\n      id: chatMessage.idXmpp,\n      userName: this.getContactName(chatMessage),\n      message: chatMessage.message,\n      time: chatMessage.sentAt,\n      isImageMessage: chatMessage.isImage,\n      isFileMessage: chatMessage.isFile,\n      isVideoMessage: chatMessage.isVideo,\n      isAudioMessage: chatMessage.isAudio,\n      fileUrl: chatMessage.message,\n      toUser: chatMessage.to,\n      fromUser: chatMessage.from,\n      deliverStatus: chatMessage.deliveryStatus,\n      readStatus: chatMessage.readStatus,\n      deliverTimestamp: chatMessage.deliveryTimestamp || \"\",\n      readTimestamp: chatMessage.readTimestamp || \"\",\n      content: chatMessage.content,\n      contentType: chatMessage.contentType\n    };\n    return msg;\n  }\n\n  getContactName(chatMessage) {\n    var _this$contacts$get2, _this$contacts$get3;\n\n    return chatMessage.fromName || ((_this$contacts$get2 = this.contacts.get(chatMessage.from)) === null || _this$contacts$get2 === void 0 ? void 0 : _this$contacts$get2.name) || ((_this$contacts$get3 = this.contacts.get(chatMessage.to)) === null || _this$contacts$get3 === void 0 ? void 0 : _this$contacts$get3.name) || this.getAuthorization().user_name || \"\";\n  }\n\n  // -- END --\n  // -- Populate --\n  populateGroups(apiGroups) {\n    apiGroups.groups.forEach(group => {\n      this.groups.set(group.id, this.parseGroup(group));\n    });\n  }\n\n  populateContacts(apiContacts) {\n    apiContacts.contacts.forEach(contact => {\n      this.contacts.set(contact.id, this.parseContact(contact));\n    });\n  } // -- END --\n\n\n}\nSquadCommunicator.instance = void 0;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicatorService.ts"],"names":["SquadChatCommunicator","API","PresenceStatus","UserType","short","Events","ChatType","getAttachmentType","SquadCommunicator","constructor","chatCommunicatorSubscribe","event","data","interfaceChatCommunicatorSubscribe","MESSAGE","senderId","fromUser","split","userName","contacts","get","name","createGroup","group","callback","api","contactsId","map","contact","id","body","description","members","domain","settings","sipDomain","returnGroup","err","getGroup","paramsUrl","groupWithMember","parsedGroup","parseGroup","groups","set","groupId","joinGroups","groupsJid","Array","from","values","jid","chat","getMessages","lastMessageId","messages","chatType","startingByMessageId","msg","parseMessage","sendMessage","text","getAttachments","kind","USER","src","getAuthorization","user_name","xmppDomain","dst","attachments","parsedAttachments","attachment","booleans","fileExtension","fileName","thumbnail","parseToIChat","arr","chatUser","chatMessage","iChat","profilePicture","status","undefined","unRead","unreadMessages","inputMessage","isTyping","push","apiGroup","domainName","imageUrl","member","userId","role","admin","ADMIN","ONLINE","parseContact","apiContact","imId","number","extension","email","blocked","added","favorite","Map","makeAPI","getInstance","instance","updateSubscribeFunction","authorization","token","access_token","apiUrl","baseUrl","getSettings","makeChat","service","username","xmppUser","password","xmppPw","resource","generate","Auth","localStorage","getItem","JSON","parse","getUser","sipUser","replace","error","getContacts","getFavorites","filter","getGroups","getChats","limit","contactType","apiContacts","populateContacts","apiGroups","apiChats","populateGroups","returnChats","chats","forEach","idXmpp","getContactName","message","time","sentAt","isImageMessage","isImage","isFileMessage","isFile","isVideoMessage","isVideo","isAudioMessage","isAudio","fileUrl","toUser","to","deliverStatus","deliveryStatus","readStatus","deliverTimestamp","deliveryTimestamp","readTimestamp","content","contentType","fromName"],"mappings":"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","sourcesContent":["import SquadChatCommunicator from \"./SquadChatCommunicator\";\r\nimport API from \"@digivox/apicommunicator\";\r\nimport IChat from \"../alias/IChat\";\r\nimport IContact from \"../alias/IContact\";\r\nimport PresenceStatus from \"../enuns/PresenceStatus\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport UserType from \"../enuns/UserType\";\r\nimport IUser from \"../alias/IUser\";\r\nimport INewGroup from \"../alias/INewGroup\";\r\nimport IAttachedFiles from \"../alias/IAttachedFiles\";\r\nimport {\r\n  Message,\r\n  Settings,\r\n} from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport short from \"short-uuid\";\r\nimport { SubscriptionCallBack } from \"./types\";\r\nimport { Events } from \"./chat/types/types\";\r\nimport ChatType from \"../enuns/ChatType\";\r\nimport { getAttachmentType } from \"./utils/parseUtils\";\r\n\r\ninterface GetAttachmentsCallback {\r\n  (attachment: IAttachedFiles[]): void;\r\n}\r\ninterface GetSettingsCallback {\r\n  (settings: Settings): void;\r\n}\r\ninterface NewGroupCallback {\r\n  (group: IGroup): void;\r\n}\r\ninterface GetUserCallBack {\r\n  (user: IUser): void;\r\n}\r\ninterface ContactsCallBack {\r\n  (contacts: IContact[]): void;\r\n}\r\ninterface FavoritesCallBack {\r\n  (favorites: IContact[]): void;\r\n}\r\ninterface GroupsCallBack {\r\n  (groups: IGroup[]): void;\r\n}\r\n\r\ninterface ChatsCallBack {\r\n  (chats: IChat[]): void;\r\n}\r\ninterface GetMessagesCallback {\r\n  (messages: IMessage[]): void;\r\n}\r\n\r\ninterface AuthReturn {\r\n  access_token: string;\r\n  user_id: string;\r\n  user_name: string;\r\n  expires_in: number;\r\n  baseUrl: string;\r\n}\r\nexport interface SquadCommunicator {\r\n  interfaceChatCommunicatorSubscribe: SubscriptionCallBack | undefined;\r\n  getInstance(): SquadCommunicator;\r\n  api: API | undefined;\r\n  chat: SquadChatCommunicator | undefined;\r\n  getChats(callback: ChatsCallBack): void;\r\n  getAuthorization(): AuthReturn;\r\n  contacts: Map<string, IContact>;\r\n  groups: Map<string, IGroup>;\r\n  settings: Settings;\r\n}\r\nexport class SquadCommunicator {\r\n  private static instance: SquadCommunicator | undefined;\r\n  constructor() {\r\n    this.interfaceChatCommunicatorSubscribe = undefined;\r\n    this.contacts = new Map<string, IContact>();\r\n    this.groups = new Map<string, IGroup>();\r\n    this.makeAPI();\r\n  }\r\n  static getInstance(chatCommunicatorSubscribe: SubscriptionCallBack) {\r\n    if (!this.instance) {\r\n      this.instance = new SquadCommunicator();\r\n    }\r\n    this.instance.updateSubscribeFunction(chatCommunicatorSubscribe);\r\n    return this.instance;\r\n  }\r\n  updateSubscribeFunction(chatCommunicatorSubscribe: SubscriptionCallBack) {\r\n    this.interfaceChatCommunicatorSubscribe = chatCommunicatorSubscribe;\r\n  }\r\n  // -- Make Services --\r\n  makeAPI() {\r\n    const authorization = this.getAuthorization();\r\n    if (authorization) {\r\n      const api = new API({\r\n        token: authorization.access_token,\r\n        apiUrl: authorization.baseUrl,\r\n      });\r\n      this.api = api;\r\n      this.getSettings((settings) => {\r\n        this.settings = settings;\r\n        this.makeChat();\r\n      });\r\n    }\r\n  }\r\n  makeChat() {\r\n    this.chat = new SquadChatCommunicator(\r\n      {\r\n        service: `wss://${this.settings.xmppDomain}:5280/websocket`,\r\n        domain: this.settings.xmppDomain,\r\n        username: this.settings.xmppUser,\r\n        password: this.settings.xmppPw,\r\n        resource: `squad.web_${this.settings.xmppUser}_${short().generate()}`,\r\n      },\r\n      this.chatCommunicatorSubscribe\r\n    );\r\n  }\r\n  // -- END --\r\n  // -- Subscribe Intercept --\r\n  chatCommunicatorSubscribe = (event: string, data: any) => {\r\n    if (!this.interfaceChatCommunicatorSubscribe) return;\r\n    switch (event) {\r\n      case Events.MESSAGE:\r\n        const senderId = data.fromUser.split(\"@\")[0];\r\n        data.userName = this.contacts.get(senderId)?.name;\r\n        this.interfaceChatCommunicatorSubscribe(event, data);\r\n        break;\r\n      default:\r\n        this.interfaceChatCommunicatorSubscribe(event, data);\r\n    }\r\n  };\r\n  // END\r\n  // User\r\n  getAuthorization() {\r\n    const Auth = localStorage.getItem(\"authorization\");\r\n    if (Auth) return JSON.parse(Auth);\r\n    return {};\r\n  }\r\n  getUser(callback: GetUserCallBack) {\r\n    if (!this.api) return;\r\n    const Auth = this.getAuthorization();\r\n    this.getSettings((settings) => {\r\n      callback({\r\n        id: settings.xmppUser,\r\n        jid: `${settings.xmppUser}@${settings.xmppDomain}`,\r\n        name: Auth.user_name,\r\n        email: Auth.email,\r\n        profilePicture: settings.imageUrl,\r\n        number: settings.sipUser.replace(\"w-\", \"\").replace(\"s-\", \"\"),\r\n      });\r\n    });\r\n  }\r\n  // -- END --\r\n  // -- Settings --\r\n  getSettings(callback: GetSettingsCallback) {\r\n    if (!this.api) return;\r\n    this.api.getSettings({}, (settings, error) => {\r\n      if (error) throw error;\r\n      if (settings) callback(settings);\r\n    });\r\n  }\r\n  // -- Contacts --\r\n  getContacts(callback: ContactsCallBack) {\r\n    callback(Array.from(this.contacts.values()));\r\n  }\r\n  getFavorites(callback: FavoritesCallBack) {\r\n    const contacts = Array.from(this.contacts.values()).filter(\r\n      (contact) => contact.favorite\r\n    );\r\n    callback(contacts);\r\n  }\r\n  // -- END --\r\n  // -- Groups --\r\n  getGroups(callback: GroupsCallBack) {\r\n    callback(Array.from(this.groups.values()));\r\n  }\r\n  createGroup = (group: INewGroup, callback: NewGroupCallback) => {\r\n    if (!this.api) return;\r\n    const contactsId = group.contacts.map((contact) => contact.id);\r\n    const body = {\r\n      name: group.name,\r\n      description: group.description,\r\n      members: contactsId,\r\n      domain: this.settings.sipDomain,\r\n    };\r\n    this.api.createGroup({ body }, (returnGroup, err) => {\r\n      if (err) return;\r\n      if (!this.api) return;\r\n      if (!returnGroup) return;\r\n      this.api.getGroup(\r\n        returnGroup.id,\r\n        { paramsUrl: { members: true } },\r\n        (groupWithMember) => {\r\n          const parsedGroup = this.parseGroup(groupWithMember);\r\n          this.groups.set(parsedGroup.groupId, parsedGroup);\r\n          callback(parsedGroup);\r\n        }\r\n      );\r\n    });\r\n  };\r\n  joinGroups = () => {\r\n    const groupsJid = Array.from(this.groups.values()).map(\r\n      (group: IGroup) => group.jid\r\n    );\r\n    this.chat?.joinGroups(groupsJid);\r\n  };\r\n  // -- END --\r\n  // -- Chats --\r\n  getChats(callback: ChatsCallBack) {\r\n    if (!this.api) return;\r\n    this.api.getSettings({}, (settings, error) => {\r\n      if (settings) this.settings = settings;\r\n      if (this.api)\r\n        this.api.getContacts(\r\n          { paramsUrl: { added: true, limit: 5000, contactType: \"contact\" } },\r\n          (apiContacts: any, err: any) => {\r\n            // Populando o Map de contatos\r\n            if (!err) {\r\n              if (!this.api) return;\r\n              this.populateContacts(apiContacts);\r\n              this.api.getGroups(\r\n                { paramsUrl: { members: true } },\r\n                (apiGroups: any, err) => {\r\n                  // Populando o Map de grupos\r\n                  if (!err) {\r\n                    if (!this.api) return;\r\n                    this.api.getChats(\r\n                      { paramsUrl: { limit: 5000, contactType: \"contact\" } },\r\n                      (apiChats: any) => {\r\n                        //Retornando os Chats\r\n                        if (!this.api) {\r\n                          return;\r\n                        }\r\n                        this.populateGroups(apiGroups);\r\n                        const returnChats: IChat[] = [];\r\n                        apiChats.chats.forEach((chat: any) => {\r\n                          this.parseToIChat(chat, returnChats);\r\n                        });\r\n                        callback(returnChats);\r\n                      }\r\n                    );\r\n                  }\r\n                }\r\n              );\r\n            }\r\n          }\r\n        );\r\n    });\r\n  }\r\n  // -- Messages --\r\n  getMessages = (chat: IChat, callback: GetMessagesCallback) => {\r\n    if (!this.api) return;\r\n    const lastMessageId = chat.messages[0].id;\r\n    this.api.getMessages(\r\n      chat.id,\r\n      chat.chatType,\r\n      { paramsUrl: { startingByMessageId: lastMessageId } },\r\n      (data) => {\r\n        if (data) callback(data.messages.map((msg) => this.parseMessage(msg)));\r\n        else return;\r\n      }\r\n    );\r\n  };\r\n  sendMessage = (chat: IChat, text: string) => {\r\n    this.chat?.sendMessage(chat, text);\r\n  };\r\n  // -- END --\r\n  // -- Attachments --\r\n  getAttachments = (chat: IChat, callback: GetAttachmentsCallback) => {\r\n    if (!this.api) return;\r\n    const paramsUrl = {\r\n      kind: chat.chatType === ChatType.USER ? \"chat\" : \"group\",\r\n      src: `${this.getAuthorization().user_name}@${this.settings.xmppDomain}`,\r\n      dst: chat.jid,\r\n    };\r\n    this.api.getAttachments({ paramsUrl }, (attachments) => {\r\n      if (attachments?.attachments) {\r\n        const parsedAttachments: IAttachedFiles[] = attachments?.attachments.map(\r\n          (attachment) => {\r\n            const booleans = getAttachmentType(attachment.fileExtension);\r\n            return {\r\n              name: attachment.fileName,\r\n              // size: \"any\",\r\n              thumbnail: \"default\",\r\n              ...booleans,\r\n            };\r\n          }\r\n        );\r\n        callback(parsedAttachments);\r\n      }\r\n    });\r\n  };\r\n  // -- END --\r\n  // -- Parse Functions --\r\n  parseToIChat = (chat: any, arr: IChat[]) => {\r\n    const chatUser = this.groups.get(chat.id) || this.contacts.get(chat.id);\r\n    if (chatUser) {\r\n      const chatMessage = chat.messages[0];\r\n      const iChat: IChat = {\r\n        id: chat.id,\r\n        jid: chatUser.jid,\r\n        name: chat.name,\r\n        profilePicture: chatUser.profilePicture,\r\n        status:\r\n          \"status\" in chatUser ? (chatUser as IContact).status : undefined,\r\n        unRead: chat.unreadMessages,\r\n        chatType: chat.chatType,\r\n        inputMessage: \"\",\r\n        isTyping: false,\r\n        messages: [this.parseMessage(chatMessage)],\r\n      };\r\n      arr.push(iChat);\r\n    }\r\n  };\r\n  parseMessage(chatMessage: Message) {\r\n    const msg: IMessage = {\r\n      id: chatMessage.idXmpp,\r\n      userName: this.getContactName(chatMessage),\r\n      message: chatMessage.message,\r\n      time: chatMessage.sentAt,\r\n      isImageMessage: chatMessage.isImage,\r\n      isFileMessage: chatMessage.isFile,\r\n      isVideoMessage: chatMessage.isVideo,\r\n      isAudioMessage: chatMessage.isAudio,\r\n      fileUrl: chatMessage.message,\r\n      toUser: chatMessage.to,\r\n      fromUser: chatMessage.from,\r\n      deliverStatus: chatMessage.deliveryStatus,\r\n      readStatus: chatMessage.readStatus,\r\n      deliverTimestamp: chatMessage.deliveryTimestamp || \"\",\r\n      readTimestamp: chatMessage.readTimestamp || \"\",\r\n      content: chatMessage.content,\r\n      contentType: chatMessage.contentType,\r\n    };\r\n    return msg;\r\n  }\r\n  getContactName(chatMessage: Message) {\r\n    return (\r\n      chatMessage.fromName ||\r\n      this.contacts.get(chatMessage.from)?.name ||\r\n      this.contacts.get(chatMessage.to)?.name ||\r\n      this.getAuthorization().user_name ||\r\n      \"\"\r\n    );\r\n  }\r\n  parseGroup = (apiGroup: any) => {\r\n    return {\r\n      groupId: apiGroup.id,\r\n      name: apiGroup.name,\r\n      description: apiGroup.description,\r\n      jid: `${apiGroup.id}@conference.${apiGroup.domainName}`,\r\n      profilePicture: apiGroup.imageUrl,\r\n      members: apiGroup.members.map((member: any) => {\r\n        return {\r\n          userId: member.id,\r\n          name: member.name,\r\n          profilePicture: member.imageUrl,\r\n          role: member.admin ? UserType.ADMIN : UserType.USER,\r\n          status: PresenceStatus.ONLINE,\r\n        };\r\n      }),\r\n    };\r\n  };\r\n  parseContact = (apiContact: any) => {\r\n    return {\r\n      id: apiContact.id,\r\n      jid: apiContact.imId,\r\n      name: apiContact.name,\r\n      domain: apiContact.domainName,\r\n      number: apiContact.extension,\r\n      profilePicture: apiContact.imageUrl,\r\n      email: apiContact.email,\r\n      blocked: apiContact.blocked,\r\n      added: apiContact.added,\r\n      status: PresenceStatus.ONLINE,\r\n      favorite: apiContact.favorite,\r\n    };\r\n  };\r\n  // -- END --\r\n  // -- Populate --\r\n  populateGroups(apiGroups: any) {\r\n    apiGroups.groups.forEach((group: any) => {\r\n      this.groups.set(group.id, this.parseGroup(group));\r\n    });\r\n  }\r\n  populateContacts(apiContacts: any) {\r\n    apiContacts.contacts.forEach((contact: any) => {\r\n      this.contacts.set(contact.id, this.parseContact(contact));\r\n    });\r\n  }\r\n  // -- END --\r\n}\r\n"]},"metadata":{},"sourceType":"module"}