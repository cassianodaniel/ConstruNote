{"ast":null,"code":"import PresenceStatus from \"../../enuns/PresenceStatus\";\nimport UserType from \"../../enuns/UserType\";\nimport { getContactName, getUserProfilePicture } from \"./formatUtils\";\nexport function getAttachmentType(extension) {\n  const booleans = {\n    isImageMessage: /\\.(jpe?g|png|gif|ico)$/i.test(extension) && extension.includes(\"/upload/\"),\n    isAudioMessage: /\\.(ogg|mp3|wav|m4a|webm)$/i.test(extension) && extension.includes(\"/upload/\"),\n    isVideoMessage: /\\.(mp4|avi)$/i.test(extension) && extension.includes(\"/upload/\"),\n    isFileMessage: true\n  };\n  booleans.isFileMessage = !booleans.isAudioMessage && !booleans.isImageMessage && !booleans.isVideoMessage;\n  return booleans;\n} //Groups\n\nexport const parseGroup = apiGroup => {\n  return {\n    groupId: apiGroup.id,\n    name: apiGroup.name,\n    description: apiGroup.description,\n    jid: `${apiGroup.id}@conference.${apiGroup.domainName}`,\n    profilePicture: apiGroup.imageUrl,\n    members: apiGroup.members.map(member => {\n      return {\n        userId: member.id,\n        name: member.name,\n        profilePicture: member.imageUrl,\n        role: member.admin ? UserType.ADMIN : UserType.USER,\n        status: PresenceStatus.ONLINE\n      };\n    })\n  };\n}; //Contacts\n\nexport const parseContact = apiContact => {\n  return {\n    id: apiContact.id,\n    jid: apiContact.imId,\n    name: apiContact.name,\n    domain: apiContact.domainName,\n    number: apiContact.extension,\n    profilePicture: apiContact.imageUrl,\n    email: apiContact.email,\n    blocked: apiContact.blocked,\n    added: apiContact.added,\n    status: PresenceStatus.ONLINE,\n    favorite: apiContact.favorite\n  };\n}; //Chats\n\nexport const parseChats = (chats, groups, contacts, user) => {\n  const parsedChats = [];\n  chats.forEach(chat => {\n    const parsedChat = parseChat(chat, groups, contacts, user);\n    if (parsedChat) parsedChats.push(parsedChat);\n  });\n  return parsedChats;\n};\nexport const parseChat = (chat, groups, contacts, user) => {\n  const chatUser = groups.get(chat.id) || contacts.get(chat.id);\n\n  if (chatUser) {\n    const chatMessage = chat.messages[0];\n    const iChat = {\n      id: chat.id,\n      jid: chatUser.jid,\n      name: chat.name,\n      profilePicture: chatUser.profilePicture,\n      status: \"status\" in chatUser ? chatUser.status : undefined,\n      unRead: chat.unreadMessages,\n      chatType: chat.chatType,\n      inputMessage: \"\",\n      isTyping: false,\n      messages: [parseMessage(chatMessage, contacts, groups, user)]\n    };\n    return iChat;\n  }\n}; //Messages\n\nexport const parseMessage = (chatMessage, contacts, groups, user) => {\n  let booleans = {\n    isImageMessage: chatMessage.isImage,\n    isFileMessage: chatMessage.isFile && !chatMessage.isImage && !chatMessage.isVideo && !chatMessage.isAudio,\n    isVideoMessage: chatMessage.isVideo,\n    isAudioMessage: chatMessage.isAudio\n  };\n\n  if (isUrl(chatMessage.message)) {\n    booleans = getUrlBooleans(chatMessage.message);\n  }\n\n  const msg = {\n    id: chatMessage.idXmpp,\n    userName: getContactName(chatMessage, contacts, groups, user),\n    userProfilePicture: getUserProfilePicture(chatMessage, contacts, groups, user),\n    message: chatMessage.message,\n    time: new Date(chatMessage.sentAt).toISOString(),\n    fileUrl: chatMessage.message,\n    toUser: chatMessage.to,\n    fromUser: chatMessage.from,\n    deliverStatus: chatMessage.deliveryStatus,\n    readStatus: chatMessage.readStatus,\n    deliverTimestamp: chatMessage.deliveryTimestamp || \"\",\n    readTimestamp: chatMessage.readTimestamp || \"\",\n    content: chatMessage.content,\n    contentType: chatMessage.contentType,\n    ...booleans\n  };\n  return msg;\n};\nexport function isUrl(str) {\n  var expression = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;\n  var regex = new RegExp(expression);\n  return !!str.match(regex);\n}\nexport function getUrlBooleans(msg) {\n  const splittedMsg = msg.split(\"/\");\n  const booleans = {\n    isImageMessage: /\\.(jpe?g|png|gif|ico)$/i.test(msg),\n    isVideoMessage: /\\.(mp4|avi)$/i.test(msg),\n    isAudioMessage: /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg),\n    isFileMessage: splittedMsg[splittedMsg.length - 1].includes(\".\")\n  };\n  booleans.isFileMessage = booleans.isFileMessage && !booleans.isImageMessage && !booleans.isVideoMessage && !booleans.isAudioMessage;\n  return booleans;\n}\nexport function getFileName(msg) {\n  const splittedMsg = msg.split(\"/\");\n  return splittedMsg[splittedMsg.length - 1];\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/utils/parseUtils.ts"],"names":["PresenceStatus","UserType","getContactName","getUserProfilePicture","getAttachmentType","extension","booleans","isImageMessage","test","includes","isAudioMessage","isVideoMessage","isFileMessage","parseGroup","apiGroup","groupId","id","name","description","jid","domainName","profilePicture","imageUrl","members","map","member","userId","role","admin","ADMIN","USER","status","ONLINE","parseContact","apiContact","imId","domain","number","email","blocked","added","favorite","parseChats","chats","groups","contacts","user","parsedChats","forEach","chat","parsedChat","parseChat","push","chatUser","get","chatMessage","messages","iChat","undefined","unRead","unreadMessages","chatType","inputMessage","isTyping","parseMessage","isImage","isFile","isVideo","isAudio","isUrl","message","getUrlBooleans","msg","idXmpp","userName","userProfilePicture","time","Date","sentAt","toISOString","fileUrl","toUser","to","fromUser","from","deliverStatus","deliveryStatus","readStatus","deliverTimestamp","deliveryTimestamp","readTimestamp","content","contentType","str","expression","regex","RegExp","match","splittedMsg","split","length","getFileName"],"mappings":"AAOA,OAAOA,cAAP,MAA2B,4BAA3B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,SAASC,cAAT,EAAyBC,qBAAzB,QAAsD,eAAtD;AAEA,OAAO,SAASC,iBAAT,CAA2BC,SAA3B,EAA8C;AACnD,QAAMC,QAAQ,GAAG;AACfC,IAAAA,cAAc,EACZ,0BAA0BC,IAA1B,CAA+BH,SAA/B,KACAA,SAAS,CAACI,QAAV,CAAmB,UAAnB,CAHa;AAIfC,IAAAA,cAAc,EACZ,6BAA6BF,IAA7B,CAAkCH,SAAlC,KACAA,SAAS,CAACI,QAAV,CAAmB,UAAnB,CANa;AAOfE,IAAAA,cAAc,EACZ,gBAAgBH,IAAhB,CAAqBH,SAArB,KAAmCA,SAAS,CAACI,QAAV,CAAmB,UAAnB,CARtB;AASfG,IAAAA,aAAa,EAAE;AATA,GAAjB;AAWAN,EAAAA,QAAQ,CAACM,aAAT,GACE,CAACN,QAAQ,CAACI,cAAV,IACA,CAACJ,QAAQ,CAACC,cADV,IAEA,CAACD,QAAQ,CAACK,cAHZ;AAIA,SAAOL,QAAP;AACD,C,CACD;;AACA,OAAO,MAAMO,UAAU,GAAIC,QAAD,IAAmB;AAC3C,SAAO;AACLC,IAAAA,OAAO,EAAED,QAAQ,CAACE,EADb;AAELC,IAAAA,IAAI,EAAEH,QAAQ,CAACG,IAFV;AAGLC,IAAAA,WAAW,EAAEJ,QAAQ,CAACI,WAHjB;AAILC,IAAAA,GAAG,EAAG,GAAEL,QAAQ,CAACE,EAAG,eAAcF,QAAQ,CAACM,UAAW,EAJjD;AAKLC,IAAAA,cAAc,EAAEP,QAAQ,CAACQ,QALpB;AAMLC,IAAAA,OAAO,EAAET,QAAQ,CAACS,OAAT,CAAiBC,GAAjB,CAAsBC,MAAD,IAAiB;AAC7C,aAAO;AACLC,QAAAA,MAAM,EAAED,MAAM,CAACT,EADV;AAELC,QAAAA,IAAI,EAAEQ,MAAM,CAACR,IAFR;AAGLI,QAAAA,cAAc,EAAEI,MAAM,CAACH,QAHlB;AAILK,QAAAA,IAAI,EAAEF,MAAM,CAACG,KAAP,GAAe3B,QAAQ,CAAC4B,KAAxB,GAAgC5B,QAAQ,CAAC6B,IAJ1C;AAKLC,QAAAA,MAAM,EAAE/B,cAAc,CAACgC;AALlB,OAAP;AAOD,KARQ;AANJ,GAAP;AAgBD,CAjBM,C,CAkBP;;AACA,OAAO,MAAMC,YAAY,GAAIC,UAAD,IAAqB;AAC/C,SAAO;AACLlB,IAAAA,EAAE,EAAEkB,UAAU,CAAClB,EADV;AAELG,IAAAA,GAAG,EAAEe,UAAU,CAACC,IAFX;AAGLlB,IAAAA,IAAI,EAAEiB,UAAU,CAACjB,IAHZ;AAILmB,IAAAA,MAAM,EAAEF,UAAU,CAACd,UAJd;AAKLiB,IAAAA,MAAM,EAAEH,UAAU,CAAC7B,SALd;AAMLgB,IAAAA,cAAc,EAAEa,UAAU,CAACZ,QANtB;AAOLgB,IAAAA,KAAK,EAAEJ,UAAU,CAACI,KAPb;AAQLC,IAAAA,OAAO,EAAEL,UAAU,CAACK,OARf;AASLC,IAAAA,KAAK,EAAEN,UAAU,CAACM,KATb;AAULT,IAAAA,MAAM,EAAE/B,cAAc,CAACgC,MAVlB;AAWLS,IAAAA,QAAQ,EAAEP,UAAU,CAACO;AAXhB,GAAP;AAaD,CAdM,C,CAeP;;AACA,OAAO,MAAMC,UAAU,GAAG,CACxBC,KADwB,EAExBC,MAFwB,EAGxBC,QAHwB,EAIxBC,IAJwB,KAKZ;AACZ,QAAMC,WAAoB,GAAG,EAA7B;AACAJ,EAAAA,KAAK,CAACK,OAAN,CAAeC,IAAD,IAAU;AACtB,UAAMC,UAAU,GAAGC,SAAS,CAACF,IAAD,EAAOL,MAAP,EAAeC,QAAf,EAAyBC,IAAzB,CAA5B;AACA,QAAII,UAAJ,EAAgBH,WAAW,CAACK,IAAZ,CAAiBF,UAAjB;AACjB,GAHD;AAIA,SAAOH,WAAP;AACD,CAZM;AAaP,OAAO,MAAMI,SAAS,GAAG,CACvBF,IADuB,EAEvBL,MAFuB,EAGvBC,QAHuB,EAIvBC,IAJuB,KAKpB;AACH,QAAMO,QAAQ,GAAGT,MAAM,CAACU,GAAP,CAAWL,IAAI,CAACjC,EAAhB,KAAuB6B,QAAQ,CAACS,GAAT,CAAaL,IAAI,CAACjC,EAAlB,CAAxC;;AACA,MAAIqC,QAAJ,EAAc;AACZ,UAAME,WAAW,GAAGN,IAAI,CAACO,QAAL,CAAc,CAAd,CAApB;AACA,UAAMC,KAAY,GAAG;AACnBzC,MAAAA,EAAE,EAAEiC,IAAI,CAACjC,EADU;AAEnBG,MAAAA,GAAG,EAAEkC,QAAQ,CAAClC,GAFK;AAGnBF,MAAAA,IAAI,EAAEgC,IAAI,CAAChC,IAHQ;AAInBI,MAAAA,cAAc,EAAEgC,QAAQ,CAAChC,cAJN;AAKnBU,MAAAA,MAAM,EAAE,YAAYsB,QAAZ,GAAwBA,QAAD,CAAuBtB,MAA9C,GAAuD2B,SAL5C;AAMnBC,MAAAA,MAAM,EAAEV,IAAI,CAACW,cANM;AAOnBC,MAAAA,QAAQ,EAAEZ,IAAI,CAACY,QAPI;AAQnBC,MAAAA,YAAY,EAAE,EARK;AASnBC,MAAAA,QAAQ,EAAE,KATS;AAUnBP,MAAAA,QAAQ,EAAE,CAACQ,YAAY,CAACT,WAAD,EAAcV,QAAd,EAAwBD,MAAxB,EAAgCE,IAAhC,CAAb;AAVS,KAArB;AAYA,WAAOW,KAAP;AACD;AACF,CAvBM,C,CAwBP;;AACA,OAAO,MAAMO,YAAY,GAAG,CAC1BT,WAD0B,EAE1BV,QAF0B,EAG1BD,MAH0B,EAI1BE,IAJ0B,KAKvB;AACH,MAAIxC,QAAQ,GAAG;AACbC,IAAAA,cAAc,EAAEgD,WAAW,CAACU,OADf;AAEbrD,IAAAA,aAAa,EACX2C,WAAW,CAACW,MAAZ,IACA,CAACX,WAAW,CAACU,OADb,IAEA,CAACV,WAAW,CAACY,OAFb,IAGA,CAACZ,WAAW,CAACa,OANF;AAObzD,IAAAA,cAAc,EAAE4C,WAAW,CAACY,OAPf;AAQbzD,IAAAA,cAAc,EAAE6C,WAAW,CAACa;AARf,GAAf;;AAUA,MAAIC,KAAK,CAACd,WAAW,CAACe,OAAb,CAAT,EAAgC;AAC9BhE,IAAAA,QAAQ,GAAGiE,cAAc,CAAChB,WAAW,CAACe,OAAb,CAAzB;AACD;;AACD,QAAME,GAAa,GAAG;AACpBxD,IAAAA,EAAE,EAAEuC,WAAW,CAACkB,MADI;AAEpBC,IAAAA,QAAQ,EAAExE,cAAc,CAACqD,WAAD,EAAcV,QAAd,EAAwBD,MAAxB,EAAgCE,IAAhC,CAFJ;AAGpB6B,IAAAA,kBAAkB,EAAExE,qBAAqB,CACvCoD,WADuC,EAEvCV,QAFuC,EAGvCD,MAHuC,EAIvCE,IAJuC,CAHrB;AASpBwB,IAAAA,OAAO,EAAEf,WAAW,CAACe,OATD;AAUpBM,IAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAStB,WAAW,CAACuB,MAArB,EAA6BC,WAA7B,EAVc;AAWpBC,IAAAA,OAAO,EAAEzB,WAAW,CAACe,OAXD;AAYpBW,IAAAA,MAAM,EAAE1B,WAAW,CAAC2B,EAZA;AAapBC,IAAAA,QAAQ,EAAE5B,WAAW,CAAC6B,IAbF;AAcpBC,IAAAA,aAAa,EAAE9B,WAAW,CAAC+B,cAdP;AAepBC,IAAAA,UAAU,EAAEhC,WAAW,CAACgC,UAfJ;AAgBpBC,IAAAA,gBAAgB,EAAEjC,WAAW,CAACkC,iBAAZ,IAAiC,EAhB/B;AAiBpBC,IAAAA,aAAa,EAAEnC,WAAW,CAACmC,aAAZ,IAA6B,EAjBxB;AAkBpBC,IAAAA,OAAO,EAAEpC,WAAW,CAACoC,OAlBD;AAmBpBC,IAAAA,WAAW,EAAErC,WAAW,CAACqC,WAnBL;AAoBpB,OAAGtF;AApBiB,GAAtB;AAsBA,SAAOkE,GAAP;AACD,CA1CM;AA2CP,OAAO,SAASH,KAAT,CAAewB,GAAf,EAA4B;AACjC,MAAIC,UAAU,GAAG,qNAAjB;AACA,MAAIC,KAAK,GAAG,IAAIC,MAAJ,CAAWF,UAAX,CAAZ;AACA,SAAO,CAAC,CAACD,GAAG,CAACI,KAAJ,CAAUF,KAAV,CAAT;AACD;AACD,OAAO,SAASxB,cAAT,CAAwBC,GAAxB,EAAqC;AAC1C,QAAM0B,WAAW,GAAG1B,GAAG,CAAC2B,KAAJ,CAAU,GAAV,CAApB;AACA,QAAM7F,QAAQ,GAAG;AACfC,IAAAA,cAAc,EAAE,0BAA0BC,IAA1B,CAA+BgE,GAA/B,CADD;AAEf7D,IAAAA,cAAc,EAAE,gBAAgBH,IAAhB,CAAqBgE,GAArB,CAFD;AAGf9D,IAAAA,cAAc,EAAE,6BAA6BF,IAA7B,CAAkCgE,GAAlC,CAHD;AAIf5D,IAAAA,aAAa,EAAEsF,WAAW,CAACA,WAAW,CAACE,MAAZ,GAAqB,CAAtB,CAAX,CAAoC3F,QAApC,CAA6C,GAA7C;AAJA,GAAjB;AAMAH,EAAAA,QAAQ,CAACM,aAAT,GACEN,QAAQ,CAACM,aAAT,IACA,CAACN,QAAQ,CAACC,cADV,IAEA,CAACD,QAAQ,CAACK,cAFV,IAGA,CAACL,QAAQ,CAACI,cAJZ;AAKA,SAAOJ,QAAP;AACD;AACD,OAAO,SAAS+F,WAAT,CAAqB7B,GAArB,EAAkC;AACvC,QAAM0B,WAAW,GAAG1B,GAAG,CAAC2B,KAAJ,CAAU,GAAV,CAApB;AACA,SAAOD,WAAW,CAACA,WAAW,CAACE,MAAZ,GAAqB,CAAtB,CAAlB;AACD","sourcesContent":["import { Message } from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport IChat from \"../../alias/IChat\";\r\nimport IContact from \"../../alias/IContact\";\r\nimport IGroup from \"../../alias/IGroup\";\r\nimport IMessage from \"../../alias/IMessage\";\r\nimport IUser from \"../../alias/IUser\";\r\nimport { groups } from \"../../data/chat\";\r\nimport PresenceStatus from \"../../enuns/PresenceStatus\";\r\nimport UserType from \"../../enuns/UserType\";\r\nimport { getContactName, getUserProfilePicture } from \"./formatUtils\";\r\n\r\nexport function getAttachmentType(extension: string) {\r\n  const booleans = {\r\n    isImageMessage:\r\n      /\\.(jpe?g|png|gif|ico)$/i.test(extension) &&\r\n      extension.includes(\"/upload/\"),\r\n    isAudioMessage:\r\n      /\\.(ogg|mp3|wav|m4a|webm)$/i.test(extension) &&\r\n      extension.includes(\"/upload/\"),\r\n    isVideoMessage:\r\n      /\\.(mp4|avi)$/i.test(extension) && extension.includes(\"/upload/\"),\r\n    isFileMessage: true,\r\n  };\r\n  booleans.isFileMessage =\r\n    !booleans.isAudioMessage &&\r\n    !booleans.isImageMessage &&\r\n    !booleans.isVideoMessage;\r\n  return booleans;\r\n}\r\n//Groups\r\nexport const parseGroup = (apiGroup: any) => {\r\n  return {\r\n    groupId: apiGroup.id,\r\n    name: apiGroup.name,\r\n    description: apiGroup.description,\r\n    jid: `${apiGroup.id}@conference.${apiGroup.domainName}`,\r\n    profilePicture: apiGroup.imageUrl,\r\n    members: apiGroup.members.map((member: any) => {\r\n      return {\r\n        userId: member.id,\r\n        name: member.name,\r\n        profilePicture: member.imageUrl,\r\n        role: member.admin ? UserType.ADMIN : UserType.USER,\r\n        status: PresenceStatus.ONLINE,\r\n      };\r\n    }),\r\n  };\r\n};\r\n//Contacts\r\nexport const parseContact = (apiContact: any) => {\r\n  return {\r\n    id: apiContact.id,\r\n    jid: apiContact.imId,\r\n    name: apiContact.name,\r\n    domain: apiContact.domainName,\r\n    number: apiContact.extension,\r\n    profilePicture: apiContact.imageUrl,\r\n    email: apiContact.email,\r\n    blocked: apiContact.blocked,\r\n    added: apiContact.added,\r\n    status: PresenceStatus.ONLINE,\r\n    favorite: apiContact.favorite,\r\n  };\r\n};\r\n//Chats\r\nexport const parseChats = (\r\n  chats: any[],\r\n  groups: Map<string, IGroup>,\r\n  contacts: Map<string, IContact>,\r\n  user: IUser\r\n): IChat[] => {\r\n  const parsedChats: IChat[] = [];\r\n  chats.forEach((chat) => {\r\n    const parsedChat = parseChat(chat, groups, contacts, user);\r\n    if (parsedChat) parsedChats.push(parsedChat);\r\n  });\r\n  return parsedChats;\r\n};\r\nexport const parseChat = (\r\n  chat: any,\r\n  groups: Map<string, IGroup>,\r\n  contacts: Map<string, IContact>,\r\n  user: IUser\r\n) => {\r\n  const chatUser = groups.get(chat.id) || contacts.get(chat.id);\r\n  if (chatUser) {\r\n    const chatMessage = chat.messages[0];\r\n    const iChat: IChat = {\r\n      id: chat.id,\r\n      jid: chatUser.jid,\r\n      name: chat.name,\r\n      profilePicture: chatUser.profilePicture,\r\n      status: \"status\" in chatUser ? (chatUser as IContact).status : undefined,\r\n      unRead: chat.unreadMessages,\r\n      chatType: chat.chatType,\r\n      inputMessage: \"\",\r\n      isTyping: false,\r\n      messages: [parseMessage(chatMessage, contacts, groups, user)],\r\n    };\r\n    return iChat;\r\n  }\r\n};\r\n//Messages\r\nexport const parseMessage = (\r\n  chatMessage: Message,\r\n  contacts: Map<string, IContact>,\r\n  groups: Map<string, IGroup>,\r\n  user: IUser\r\n) => {\r\n  let booleans = {\r\n    isImageMessage: chatMessage.isImage,\r\n    isFileMessage:\r\n      chatMessage.isFile &&\r\n      !chatMessage.isImage &&\r\n      !chatMessage.isVideo &&\r\n      !chatMessage.isAudio,\r\n    isVideoMessage: chatMessage.isVideo,\r\n    isAudioMessage: chatMessage.isAudio,\r\n  };\r\n  if (isUrl(chatMessage.message)) {\r\n    booleans = getUrlBooleans(chatMessage.message);\r\n  }\r\n  const msg: IMessage = {\r\n    id: chatMessage.idXmpp,\r\n    userName: getContactName(chatMessage, contacts, groups, user),\r\n    userProfilePicture: getUserProfilePicture(\r\n      chatMessage,\r\n      contacts,\r\n      groups,\r\n      user\r\n    ),\r\n    message: chatMessage.message,\r\n    time: new Date(chatMessage.sentAt).toISOString(),\r\n    fileUrl: chatMessage.message,\r\n    toUser: chatMessage.to,\r\n    fromUser: chatMessage.from,\r\n    deliverStatus: chatMessage.deliveryStatus,\r\n    readStatus: chatMessage.readStatus,\r\n    deliverTimestamp: chatMessage.deliveryTimestamp || \"\",\r\n    readTimestamp: chatMessage.readTimestamp || \"\",\r\n    content: chatMessage.content,\r\n    contentType: chatMessage.contentType,\r\n    ...booleans,\r\n  };\r\n  return msg;\r\n};\r\nexport function isUrl(str: string) {\r\n  var expression = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;\r\n  var regex = new RegExp(expression);\r\n  return !!str.match(regex);\r\n}\r\nexport function getUrlBooleans(msg: string) {\r\n  const splittedMsg = msg.split(\"/\");\r\n  const booleans = {\r\n    isImageMessage: /\\.(jpe?g|png|gif|ico)$/i.test(msg),\r\n    isVideoMessage: /\\.(mp4|avi)$/i.test(msg),\r\n    isAudioMessage: /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg),\r\n    isFileMessage: splittedMsg[splittedMsg.length - 1].includes(\".\"),\r\n  };\r\n  booleans.isFileMessage =\r\n    booleans.isFileMessage &&\r\n    !booleans.isImageMessage &&\r\n    !booleans.isVideoMessage &&\r\n    !booleans.isAudioMessage;\r\n  return booleans;\r\n}\r\nexport function getFileName(msg: string) {\r\n  const splittedMsg = msg.split(\"/\");\r\n  return splittedMsg[splittedMsg.length - 1];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}