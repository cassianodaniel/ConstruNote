{"ast":null,"code":"import { parseContact } from \"../utils/parseUtils\";\nimport debounce from \"lodash/debounce\";\nexport default class ContactsBusiness {\n  constructor(api, settings) {\n    this.api = api;\n    this.settings = settings;\n    this.allUsers = void 0;\n    this.contacts = void 0;\n    this.chat = void 0;\n\n    this.add = (ctc, callback) => {\n      this.api.addContact({\n        contactType: \"contact\",\n        contactId: ctc.id,\n        favorite: false,\n        blocked: false\n      }, callback);\n    };\n\n    this.remove = (ctc, callback) => {\n      this.api.removeContact({\n        contactId: ctc.id,\n        contactType: \"contact\"\n      }, callback);\n    };\n\n    this.addContacts = (ctc, callback) => {\n      this.api.addContact({\n        contactType: \"contact\",\n        contactId: ctc.id,\n        favorite: false,\n        blocked: false\n      }, callback);\n    };\n\n    this.toggleMemberRole = (usrId, grpId, mbRole, callback) => {\n      mbRole === \"admin\" ? this.api.toggleMemberRole({\n        admin: false,\n        groupId: grpId,\n        memberId: usrId\n      }, callback) : this.api.toggleMemberRole({\n        admin: true,\n        groupId: grpId,\n        memberId: usrId\n      }, callback);\n    };\n\n    this.search = debounce((strSearch, callback) => {\n      this.settings.get(settings => {\n        this.api.getContacts({\n          paramsUrl: {\n            limit: 5000,\n            contactType: \"contact\",\n            domain: settings.sipDomain,\n            name: strSearch\n          }\n        }, (apiContacts, err) => {\n          if (!err) {\n            if (!this.api) return;\n            const searchList = apiContacts.contacts.map(contact => {\n              var _this$chat;\n\n              return parseContact(contact, (_this$chat = this.chat) === null || _this$chat === void 0 ? void 0 : _this$chat.chat.presences);\n            });\n            callback(searchList);\n          }\n        });\n      });\n    }, 250);\n    this.contacts = new Map();\n    this.allUsers = new Map();\n  }\n\n  setChat(chat) {\n    this.chat = chat;\n  }\n\n  getContacts() {\n    return this.contacts;\n  }\n\n  getAllUsers() {\n    return this.allUsers;\n  }\n\n  listAllUsers(cb) {\n    if (this.allUsers.size > 0) {\n      cb(this.allUsers);\n      return;\n    }\n\n    this.settings.get(settings => {\n      this.api.getContacts({\n        paramsUrl: {\n          limit: 5000,\n          domain: settings.sipDomain\n        }\n      }, (apiContacts, err) => {\n        if (!err) {\n          if (!this.api) return;\n          apiContacts.contacts.map(contact => {\n            var _this$chat2;\n\n            const parsedCtc = parseContact(contact, (_this$chat2 = this.chat) === null || _this$chat2 === void 0 ? void 0 : _this$chat2.chat.presences);\n            this.allUsers.set(parsedCtc.id, parsedCtc);\n            return parsedCtc;\n          });\n          cb(this.allUsers);\n        }\n      });\n    });\n  }\n\n  getContactsOutsideUserLists(callback) {\n    this.settings.get(settings => {\n      this.api.getContacts({\n        paramsUrl: {\n          limit: 5000,\n          contactType: \"contact\",\n          domain: settings.sipDomain,\n          added: false\n        }\n      }, (apiContacts, err) => {\n        if (!err) {\n          if (!this.api) return;\n          const searchList = apiContacts.contacts.map(contact => {\n            var _this$chat3;\n\n            return parseContact(contact, (_this$chat3 = this.chat) === null || _this$chat3 === void 0 ? void 0 : _this$chat3.chat.presences);\n          });\n          callback(searchList);\n        }\n      });\n    });\n  }\n\n  list(callback) {\n    this.settings.get(settings => {\n      this.api.getContacts({\n        paramsUrl: {\n          added: true,\n          limit: 5000,\n          contactType: \"contact\",\n          domain: settings.sipDomain\n        }\n      }, (apiContacts, err) => {\n        // Populando o Map de contatos\n        if (!err) {\n          if (!this.api) return;\n          this.populate(apiContacts); //Favoritar o contato dentro da população com\n          //favoriteCallback()\n\n          callback(Array.from(this.contacts.values()));\n        }\n      });\n    });\n  }\n\n  populate(apiContacts) {\n    apiContacts.contacts.forEach(contact => {\n      var _this$chat4;\n\n      this.contacts.set(contact.id, parseContact(contact, (_this$chat4 = this.chat) === null || _this$chat4 === void 0 ? void 0 : _this$chat4.chat.presences));\n    });\n  }\n\n  setFavorite(favorited, callback) {\n    this.api.setFavoriteUser({\n      contactID: favorited.jid.split(\"@\")[0],\n      contactType: favorited.jid.includes(\"@conference.\") ? \"group\" : \"contact\",\n      favorite: !favorited.favorite\n    }, callback);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Contacts.ts"],"names":["parseContact","debounce","ContactsBusiness","constructor","api","settings","allUsers","contacts","chat","add","ctc","callback","addContact","contactType","contactId","id","favorite","blocked","remove","removeContact","addContacts","toggleMemberRole","usrId","grpId","mbRole","admin","groupId","memberId","search","strSearch","get","getContacts","paramsUrl","limit","domain","sipDomain","name","apiContacts","err","searchList","map","contact","presences","Map","setChat","getAllUsers","listAllUsers","cb","size","parsedCtc","set","getContactsOutsideUserLists","added","list","populate","Array","from","values","forEach","setFavorite","favorited","setFavoriteUser","contactID","jid","split","includes"],"mappings":"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","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport IContact from \"../../alias/IContact\";\r\nimport IChat from \"../../alias/IChat\";\r\nimport IGroup from \"../../alias/IGroup\";\r\nimport { parseContact } from \"../utils/parseUtils\";\r\nimport SettingsBusiness from \"./Settings\";\r\nimport {\r\n  AddContactCallback,\r\n  FavoriteUserCallback,\r\n  RemoveContactCallback,\r\n  toggleMemberRoleCallback,\r\n} from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport debounce from \"lodash/debounce\";\r\nimport UserType from \"./../../enuns/UserType\";\r\nimport SquadChatCommunicator from \"../SquadChatCommunicator\";\r\ninterface ContactsCallBack {\r\n  (contacts: IContact[]): void;\r\n}\r\ninterface MapContactsCallBack {\r\n  (contacts: Map<string, IContact>): void;\r\n}\r\nexport default interface ContactsBusiness {}\r\nexport default class ContactsBusiness {\r\n  private allUsers: Map<string, IContact>;\r\n  private contacts: Map<string, IContact>;\r\n  private chat: SquadChatCommunicator | undefined;\r\n  constructor(private api: API, private settings: SettingsBusiness) {\r\n    this.contacts = new Map<string, IContact>();\r\n    this.allUsers = new Map<string, IContact>();\r\n  }\r\n  setChat(chat: SquadChatCommunicator) {\r\n    this.chat = chat;\r\n  }\r\n  getContacts() {\r\n    return this.contacts;\r\n  }\r\n  getAllUsers() {\r\n    return this.allUsers;\r\n  }\r\n  listAllUsers(cb: MapContactsCallBack) {\r\n    if (this.allUsers.size > 0) {\r\n      cb(this.allUsers);\r\n      return;\r\n    }\r\n    this.settings.get((settings) => {\r\n      this.api.getContacts(\r\n        {\r\n          paramsUrl: {\r\n            limit: 5000,\r\n            domain: settings.sipDomain,\r\n          },\r\n        },\r\n        (apiContacts: any, err: any) => {\r\n          if (!err) {\r\n            if (!this.api) return;\r\n            apiContacts.contacts.map((contact: any) => {\r\n              const parsedCtc = parseContact(\r\n                contact,\r\n                this.chat?.chat.presences\r\n              );\r\n              this.allUsers.set(parsedCtc.id, parsedCtc);\r\n              return parsedCtc;\r\n            });\r\n            cb(this.allUsers);\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n  getContactsOutsideUserLists(callback: ContactsCallBack) {\r\n    this.settings.get((settings) => {\r\n      this.api.getContacts(\r\n        {\r\n          paramsUrl: {\r\n            limit: 5000,\r\n            contactType: \"contact\",\r\n            domain: settings.sipDomain,\r\n            added: false,\r\n          },\r\n        },\r\n        (apiContacts: any, err: any) => {\r\n          if (!err) {\r\n            if (!this.api) return;\r\n            const searchList = apiContacts.contacts.map((contact: any) => {\r\n              return parseContact(contact, this.chat?.chat.presences);\r\n            });\r\n            callback(searchList);\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n\r\n  list(callback: ContactsCallBack) {\r\n    this.settings.get((settings) => {\r\n      this.api.getContacts(\r\n        {\r\n          paramsUrl: {\r\n            added: true,\r\n            limit: 5000,\r\n            contactType: \"contact\",\r\n            domain: settings.sipDomain,\r\n          },\r\n        },\r\n        (apiContacts: any, err: any) => {\r\n          // Populando o Map de contatos\r\n          if (!err) {\r\n            if (!this.api) return;\r\n            this.populate(apiContacts);\r\n\r\n            //Favoritar o contato dentro da população com\r\n            //favoriteCallback()\r\n\r\n            callback(Array.from(this.contacts.values()));\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n  populate(apiContacts: any) {\r\n    apiContacts.contacts.forEach((contact: any) => {\r\n      this.contacts.set(\r\n        contact.id,\r\n        parseContact(contact, this.chat?.chat.presences)\r\n      );\r\n    });\r\n  }\r\n  setFavorite(\r\n    favorited: IGroup | IChat | IContact,\r\n    callback: FavoriteUserCallback\r\n  ) {\r\n    this.api.setFavoriteUser(\r\n      {\r\n        contactID: favorited.jid.split(\"@\")[0],\r\n        contactType: favorited.jid.includes(\"@conference.\")\r\n          ? \"group\"\r\n          : \"contact\",\r\n        favorite: !favorited.favorite,\r\n      },\r\n      callback\r\n    );\r\n  }\r\n\r\n  add = (ctc: IChat, callback: AddContactCallback) => {\r\n    this.api.addContact(\r\n      {\r\n        contactType: \"contact\",\r\n        contactId: ctc.id,\r\n        favorite: false,\r\n        blocked: false,\r\n      },\r\n      callback\r\n    );\r\n  };\r\n\r\n  remove = (ctc: IContact, callback: RemoveContactCallback) => {\r\n    this.api.removeContact(\r\n      {\r\n        contactId: ctc.id,\r\n        contactType: \"contact\",\r\n      },\r\n      callback\r\n    );\r\n  };\r\n\r\n  addContacts = (ctc: IContact, callback: AddContactCallback) => {\r\n    this.api.addContact(\r\n      {\r\n        contactType: \"contact\",\r\n        contactId: ctc.id,\r\n        favorite: false,\r\n        blocked: false,\r\n      },\r\n      callback\r\n    );\r\n  };\r\n\r\n  toggleMemberRole = (\r\n    usrId: string,\r\n    grpId: string,\r\n    mbRole: UserType,\r\n    callback: toggleMemberRoleCallback\r\n  ) => {\r\n    mbRole === \"admin\"\r\n      ? this.api.toggleMemberRole(\r\n          {\r\n            admin: false,\r\n            groupId: grpId,\r\n            memberId: usrId,\r\n          },\r\n          callback\r\n        )\r\n      : this.api.toggleMemberRole(\r\n          {\r\n            admin: true,\r\n            groupId: grpId,\r\n            memberId: usrId,\r\n          },\r\n          callback\r\n        );\r\n  };\r\n\r\n  search = debounce((strSearch: string, callback: ContactsCallBack) => {\r\n    this.settings.get((settings) => {\r\n      this.api.getContacts(\r\n        {\r\n          paramsUrl: {\r\n            limit: 5000,\r\n            contactType: \"contact\",\r\n            domain: settings.sipDomain,\r\n            name: strSearch,\r\n          },\r\n        },\r\n        (apiContacts: any, err: any) => {\r\n          if (!err) {\r\n            if (!this.api) return;\r\n            const searchList = apiContacts.contacts.map((contact: any) => {\r\n              return parseContact(contact, this.chat?.chat.presences);\r\n            });\r\n\r\n            callback(searchList);\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }, 250);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}