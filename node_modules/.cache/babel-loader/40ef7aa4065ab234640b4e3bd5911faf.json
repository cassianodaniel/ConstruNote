{"ast":null,"code":"import { parseContact } from \"../utils/parseUtils\";\nimport debounce from \"lodash/debounce\";\nexport default class ContactsBusiness {\n  constructor(api, settings) {\n    this.api = api;\n    this.settings = settings;\n    this.contacts = void 0;\n\n    this.add = (ctc, callback) => {\n      this.api.addContact({\n        contactType: \"contact\",\n        contactId: ctc.id,\n        favorite: false,\n        blocked: false\n      }, callback);\n    };\n\n    this.addContacts = (ctc, callback) => {\n      this.api.addContact({\n        contactType: \"contact\",\n        contactId: ctc.id,\n        favorite: false,\n        blocked: false\n      }, callback);\n    };\n\n    this.removeContacts = (ctc, callback) => {\n      this.api.removeContact({\n        contactType: \"contact\",\n        contactId: ctc.id\n      }, callback);\n    };\n\n    this.search = debounce((strSearch, callback) => {\n      this.settings.get(settings => {\n        this.api.getContacts({\n          paramsUrl: {\n            limit: 5000,\n            contactType: \"contact\",\n            domain: settings.sipDomain,\n            name: strSearch\n          }\n        }, (apiContacts, err) => {\n          if (!err) {\n            if (!this.api) return;\n            const searchList = apiContacts.contacts.map(contact => {\n              return parseContact(contact);\n            });\n            callback(searchList);\n          }\n        });\n      });\n    }, 250);\n    this.contacts = new Map();\n  }\n\n  getContacts() {\n    return this.contacts;\n  }\n\n  getContactsOutsideUserLists(callback) {\n    this.settings.get(settings => {\n      this.api.getContacts({\n        paramsUrl: {\n          limit: 5000,\n          contactType: \"contact\",\n          domain: settings.sipDomain,\n          added: false\n        }\n      }, (apiContacts, err) => {\n        if (!err) {\n          if (!this.api) return;\n          const searchList = apiContacts.contacts.map(contact => {\n            return parseContact(contact);\n          });\n          callback(searchList);\n        }\n      });\n    });\n  }\n\n  list(callback) {\n    this.settings.get(settings => {\n      this.api.getContacts({\n        paramsUrl: {\n          added: true,\n          limit: 5000,\n          contactType: \"contact\",\n          domain: settings.sipDomain\n        }\n      }, (apiContacts, err) => {\n        // Populando o Map de contatos\n        if (!err) {\n          if (!this.api) return;\n          this.populate(apiContacts); //Favoritar o contato dentro da população com\n          //favoriteCallback()\n\n          callback(Array.from(this.contacts.values()));\n        }\n      });\n    });\n  }\n\n  populate(apiContacts) {\n    apiContacts.contacts.forEach(contact => {\n      this.contacts.set(contact.id, parseContact(contact));\n    });\n  }\n\n  setFavorite(favorited, callback) {\n    this.api.setFavoriteUser({\n      contactID: favorited.jid.split(\"@\")[0],\n      contactType: favorited.jid.includes(\"@conference.\") ? \"group\" : \"contact\",\n      favorite: !favorited.favorite\n    }, callback);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Contacts.ts"],"names":["parseContact","debounce","ContactsBusiness","constructor","api","settings","contacts","add","ctc","callback","addContact","contactType","contactId","id","favorite","blocked","addContacts","removeContacts","removeContact","search","strSearch","get","getContacts","paramsUrl","limit","domain","sipDomain","name","apiContacts","err","searchList","map","contact","Map","getContactsOutsideUserLists","added","list","populate","Array","from","values","forEach","set","setFavorite","favorited","setFavoriteUser","contactID","jid","split","includes"],"mappings":"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","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport IContact from \"../../alias/IContact\";\r\nimport IChat from \"../../alias/IChat\";\r\nimport IGroup from \"../../alias/IGroup\";\r\nimport { parseContact } from \"../utils/parseUtils\";\r\nimport SettingsBusiness from \"./Settings\";\r\nimport {\r\n  AddContactCallback,\r\n  FavoriteUserCallback,\r\n  RemoveContactCallback,\r\n  RemoveContactRequest\r\n} from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport debounce from \"lodash/debounce\";\r\n\r\ninterface ContactsCallBack {\r\n  (contacts: IContact[]): void;\r\n}\r\n\r\nexport default interface ContactsBusiness {}\r\nexport default class ContactsBusiness {\r\n  private contacts: Map<string, IContact>;\r\n  constructor(private api: API, private settings: SettingsBusiness) {\r\n    this.contacts = new Map<string, IContact>();\r\n  }\r\n  getContacts() {\r\n    return this.contacts;\r\n  }\r\n\r\n  getContactsOutsideUserLists(callback: ContactsCallBack){\r\n    this.settings.get((settings) => {\r\n      this.api.getContacts(\r\n        {\r\n          paramsUrl: {\r\n            limit: 5000,\r\n            contactType: \"contact\",\r\n            domain: settings.sipDomain,\r\n            added: false\r\n          },\r\n        }, (apiContacts: any, err: any) => {\r\n          if (!err) {\r\n            if (!this.api) return;\r\n            const searchList = apiContacts.contacts.map((contact: any) => {\r\n              return parseContact(contact);\r\n            });\r\n            callback(searchList);\r\n        }\r\n      });\r\n    })\r\n  };\r\n\r\n\r\n  list(callback: ContactsCallBack) {\r\n    this.settings.get((settings) => {\r\n      this.api.getContacts(\r\n        {\r\n          paramsUrl: {\r\n            added: true,\r\n            limit: 5000,\r\n            contactType: \"contact\",\r\n            domain: settings.sipDomain,\r\n          },\r\n        },\r\n        (apiContacts: any, err: any) => {\r\n          // Populando o Map de contatos\r\n          if (!err) {\r\n            if (!this.api) return;\r\n            this.populate(apiContacts);\r\n\r\n            //Favoritar o contato dentro da população com\r\n            //favoriteCallback()\r\n\r\n            callback(Array.from(this.contacts.values()));\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }\r\n  populate(apiContacts: any) {\r\n    apiContacts.contacts.forEach((contact: any) => {\r\n      this.contacts.set(contact.id, parseContact(contact));\r\n    });\r\n  }\r\n  setFavorite(\r\n    favorited: IGroup | IChat | IContact,\r\n    callback: FavoriteUserCallback\r\n  ) {\r\n    this.api.setFavoriteUser(\r\n      {\r\n        contactID: favorited.jid.split(\"@\")[0],\r\n        contactType: favorited.jid.includes(\"@conference.\")\r\n          ? \"group\"\r\n          : \"contact\",\r\n        favorite: !favorited.favorite,\r\n      },\r\n      callback\r\n    );\r\n  }\r\n\r\n  add = (ctc: IChat, callback: AddContactCallback) => {\r\n    this.api.addContact(\r\n      {\r\n        contactType: \"contact\",\r\n        contactId: ctc.id,\r\n        favorite: false,\r\n        blocked: false,\r\n      },\r\n      callback\r\n    );\r\n  };\r\n\r\n  addContacts = (ctc: IContact, callback: AddContactCallback) => {\r\n    this.api.addContact(\r\n      {\r\n        contactType: \"contact\",\r\n        contactId: ctc.id,\r\n        favorite: false,\r\n        blocked: false,\r\n      },\r\n      callback\r\n    );\r\n  };\r\n\r\n  removeContacts = (ctc: IContact, callback: RemoveContactCallback) => {\r\n    this.api.removeContact(\r\n      {\r\n        contactType: \"contact\",\r\n        contactId: ctc.id\r\n      },\r\n      callback\r\n    );\r\n  };\r\n\r\n  search = debounce((strSearch: string, callback: ContactsCallBack) => {\r\n    this.settings.get((settings) => {\r\n      this.api.getContacts(\r\n        {\r\n          paramsUrl: {\r\n            limit: 5000,\r\n            contactType: \"contact\",\r\n            domain: settings.sipDomain,\r\n            name: strSearch,\r\n          },\r\n        },\r\n        (apiContacts: any, err: any) => {\r\n          if (!err) {\r\n            if (!this.api) return;\r\n            const searchList = apiContacts.contacts.map((contact: any) => {\r\n              return parseContact(contact);\r\n            });\r\n\r\n            callback(searchList);\r\n          }\r\n        }\r\n      );\r\n    });\r\n  }, 250);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}