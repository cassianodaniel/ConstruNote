{"ast":null,"code":"import _objectSpread from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import PresenceStatus from\"../../enuns/PresenceStatus\";import UserType from\"../../enuns/UserType\";import{ParseUserTag}from\"../../helpers/TextMessageTagParse\";import{getContactName,getUserProfilePicture}from\"./formatUtils\";export function getAttachmentType(extension){var booleans={isImageMessage:/jpe?g|png|gif|ico$/i.test(extension),isAudioMessage:/ogg|mp3|wav|m4a|webm$/i.test(extension),isVideoMessage:/mp4|avi|mov$/i.test(extension),isFileMessage:/txt|doc?x|pdf|ppt?s|sql|css|js|html|xlsx|xml/.test(extension)};booleans.isFileMessage=!booleans.isAudioMessage&&!booleans.isImageMessage&&!booleans.isVideoMessage&&booleans.isFileMessage;return booleans;}//Groups\nexport var parseGroup=function parseGroup(apiGroup,presenceMap){return{groupId:apiGroup.id,name:apiGroup.name,description:apiGroup.description,jid:\"\".concat(apiGroup.id,\"@conference.\").concat(apiGroup.domainName),profilePicture:apiGroup.imageUrl,favorite:apiGroup.favorite,added:apiGroup.added,members:apiGroup.members.map(function(member){var _Array$from$find;return{userId:member.id,name:member.name,profilePicture:member.imageUrl,role:member.admin?UserType.ADMIN:UserType.USER,status:presenceMap?((_Array$from$find=Array.from(presenceMap.values()).find(function(pres){return pres.from.split(\"@\")[0]===member.id;}))===null||_Array$from$find===void 0?void 0:_Array$from$find.status)||PresenceStatus.OFFLINE:PresenceStatus.OFFLINE};})};};//Contacts\nexport var parseContact=function parseContact(apiContact,presenceMap){var _Array$from$find2;return{id:apiContact.id,jid:apiContact.imId,name:apiContact.name,department:apiContact.department,domain:apiContact.domainName,number:apiContact.extension,profilePicture:apiContact.imageUrl,email:apiContact.email,blocked:apiContact.blocked,added:apiContact.added,status:presenceMap?((_Array$from$find2=Array.from(presenceMap.values()).find(function(pres){return pres.from.split(\"/\")[0]===apiContact.imId;}))===null||_Array$from$find2===void 0?void 0:_Array$from$find2.status)||PresenceStatus.OFFLINE:PresenceStatus.OFFLINE,favorite:apiContact.favorite};};//Chats\nexport var parseChats=function parseChats(chats,groups,contacts,user){var parsedChats=[];chats.forEach(function(chat){var parsedChat=parseChat(chat,groups,contacts,user);if(parsedChat)parsedChats.push(parsedChat);});return parsedChats;};export var parseChat=function parseChat(chat,groups,contacts,user){var chatUser=groups.get(chat.id)||contacts.get(chat.id);if(chatUser){var _ref,_ref2;var chatMessage=chat.messages[0];var iChat={id:chat.id,jid:chatUser.jid,name:chat.name,email:(_ref=chatUser)===null||_ref===void 0?void 0:_ref.email,department:(_ref2=chatUser)===null||_ref2===void 0?void 0:_ref2.department,profilePicture:(chatUser===null||chatUser===void 0?void 0:chatUser.profilePicture)||(chatUser===null||chatUser===void 0?void 0:chatUser.profilePicture),status:\"status\"in chatUser?chatUser.status:undefined,unRead:chat.unreadMessages,chatType:chat.chatType,members:chatUser.members,inputMessage:\"\",isTyping:false,messages:[parseMessage(chatMessage,contacts,groups,user)],favorite:(chatUser===null||chatUser===void 0?void 0:chatUser.favorite)||(chatUser===null||chatUser===void 0?void 0:chatUser.favorite)||false,added:chatUser.added,groupId:chatUser.groupId,mencioned:chat.unreadMessages>0?ParseUserTag(user.id,chatMessage.message):0};return iChat;}};//Messages\nexport var parseMessage=function parseMessage(chatMessage,contacts,groups,user){var _contacts$get,_content$reply_to,_content$reply_to2;var booleans={isImageMessage:chatMessage.isImage,isFileMessage:chatMessage.isFile&&!chatMessage.isImage&&!chatMessage.isVideo&&!chatMessage.isAudio,isVideoMessage:chatMessage.isVideo,isAudioMessage:chatMessage.isAudio};if(isUrl(chatMessage.message)){booleans=getUrlBooleans(chatMessage.message);}var content={};if(chatMessage.content){var newContent=chatMessage.content.replace(/'/g,'\"');try{content=JSON.parse(newContent);}catch(e){content={};}if(typeof content!==\"object\"){content={};}if(content.reply_to)content.reply_to=content.reply_to.split(\"@\")[0];}var msg=_objectSpread(_objectSpread({id:chatMessage.idXmpp,userName:getContactName(chatMessage,contacts,groups,user),userProfilePicture:getUserProfilePicture(chatMessage,contacts,groups,user),message:chatMessage.message,time:new Date(chatMessage.sentAt).toISOString(),fileUrl:chatMessage.message,toUser:chatMessage.to,fromUser:chatMessage.from,deliverStatus:chatMessage.deliveryStatus,readStatus:chatMessage.readStatus,deliverTimestamp:chatMessage.deliveryTimestamp||\"\",readTimestamp:chatMessage.readTimestamp||\"\",content:chatMessage.content,contentType:chatMessage.contentType,isReplyMessage:!!content.reply_msg,isForwardMessage:!!(!content.reply_msg&&content.reply_to&&content.reply_msg_id)},booleans),{},{replyedMessage:content.reply_msg,replyedMessageId:content.reply_msg_id,replyedMessageTo:((_contacts$get=contacts.get(((_content$reply_to=content.reply_to)===null||_content$reply_to===void 0?void 0:_content$reply_to.split(\"@\")[0])||\"\"))===null||_contacts$get===void 0?void 0:_contacts$get.name)||user.id===((_content$reply_to2=content.reply_to)===null||_content$reply_to2===void 0?void 0:_content$reply_to2.split(\"@\")[0])?user.name:\"Participant\"});return msg;};export function isUrl(str){var expression=/(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;var regex=new RegExp(expression);return!!(str===null||str===void 0?void 0:str.match(regex));}export function getUrlBooleans(msg){var booleans={isImageMessage:/\\.(jpe?g|png|gif|ico)$/i.test(msg),isVideoMessage:/\\.(mp4|avi)$/i.test(msg),isAudioMessage:/\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg),isFileMessage:/\\.(txt|doc?x|pdf|ppt?s|sql|css|js|html|xlsx|xml)$/i.test(msg)};booleans.isFileMessage=booleans.isFileMessage&&!booleans.isImageMessage&&!booleans.isVideoMessage&&!booleans.isAudioMessage;return booleans;}export function getFileName(msg){var splittedMsg=msg.split(\"/\");return splittedMsg[splittedMsg.length-1];}export function parseConferences(conferences,settings){var parsedConferences=conferences.map(function(conf){var parsedParcicipants=[];conf.conferenceRoomParticipantExternals.forEach(function(part){parsedParcicipants.push(part);});conf.conferenceRoomParticipants.forEach(function(part){if(!parsedParcicipants.find(function(p){return p.userUuid===part.userUuid;}))parsedParcicipants.push(part);});conf.conferenceRoomModerators.forEach(function(part){if(!parsedParcicipants.find(function(p){return p.userUuid===part.userUuid;}))parsedParcicipants.push(part);});return{id:conf.id,jid:\"\".concat(conf.id,\"@conference.public-\").concat(settings.xmppDomain),name:conf.name,number:conf.number,anonymousModeratorUrl:conf.anonymousModeratorUrl,anonymousParticipantUrl:conf.anonymousParticipantUrl,citrusInvationParticipantExternal:conf.citrusInvationParticipantExternal,citrusSendPin:conf.citrusSendPin,conferenceRoomParticipants:parsedParcicipants,createdBy:conf.createdBy,description:conf.description,domainName:conf.domainName,enabledLiveStream:conf.enabledLiveStream,liveStreamUrl:conf.liveStreamUrl,meetingUuid:conf.meetingUuid,moderatorPin:conf.moderatorPin,numberExternal:conf.numberExternal,participantPin:conf.participantPin,record:conf.record,rtmpUrl:conf.rtmpUrl,serverType:conf.serverType,sfuUrl:conf.sfuUrl,startDatetime:conf.startDatetime,startDatetimeStr:conf.startDatetimeStr,stopDatetime:conf.stopDatetime,stopDatetimeStr:conf.stopDatetimeStr,userCreatedName:conf.userCreatedName,waitMod:conf.waitMod};});return parsedConferences;}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/utils/parseUtils.ts"],"names":["PresenceStatus","UserType","ParseUserTag","getContactName","getUserProfilePicture","getAttachmentType","extension","booleans","isImageMessage","test","isAudioMessage","isVideoMessage","isFileMessage","parseGroup","apiGroup","presenceMap","groupId","id","name","description","jid","domainName","profilePicture","imageUrl","favorite","added","members","map","member","userId","role","admin","ADMIN","USER","status","Array","from","values","find","pres","split","OFFLINE","parseContact","apiContact","imId","department","domain","number","email","blocked","parseChats","chats","groups","contacts","user","parsedChats","forEach","chat","parsedChat","parseChat","push","chatUser","get","chatMessage","messages","iChat","undefined","unRead","unreadMessages","chatType","inputMessage","isTyping","parseMessage","mencioned","message","isImage","isFile","isVideo","isAudio","isUrl","getUrlBooleans","content","newContent","replace","JSON","parse","e","reply_to","msg","idXmpp","userName","userProfilePicture","time","Date","sentAt","toISOString","fileUrl","toUser","to","fromUser","deliverStatus","deliveryStatus","readStatus","deliverTimestamp","deliveryTimestamp","readTimestamp","contentType","isReplyMessage","reply_msg","isForwardMessage","reply_msg_id","replyedMessage","replyedMessageId","replyedMessageTo","str","expression","regex","RegExp","match","getFileName","splittedMsg","length","parseConferences","conferences","settings","parsedConferences","conf","parsedParcicipants","conferenceRoomParticipantExternals","part","conferenceRoomParticipants","p","userUuid","conferenceRoomModerators","xmppDomain","anonymousModeratorUrl","anonymousParticipantUrl","citrusInvationParticipantExternal","citrusSendPin","createdBy","enabledLiveStream","liveStreamUrl","meetingUuid","moderatorPin","numberExternal","participantPin","record","rtmpUrl","serverType","sfuUrl","startDatetime","startDatetimeStr","stopDatetime","stopDatetimeStr","userCreatedName","waitMod"],"mappings":"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","sourcesContent":["import {\r\n  ConferenceRoom,\r\n  ConferenceRoomParticipant,\r\n  Message,\r\n  Settings,\r\n} from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport IChat from \"../../alias/IChat\";\r\nimport { IConference } from \"../../alias/IConference\";\r\nimport IContact from \"../../alias/IContact\";\r\nimport IGroup from \"../../alias/IGroup\";\r\nimport IMessage from \"../../alias/IMessage\";\r\nimport IUser from \"../../alias/IUser\";\r\nimport PresenceStatus from \"../../enuns/PresenceStatus\";\r\nimport UserType from \"../../enuns/UserType\";\r\nimport { ParseUserTag } from \"../../helpers/TextMessageTagParse\";\r\nimport { Presence } from \"../chat/types/types\";\r\nimport { getContactName, getUserProfilePicture } from \"./formatUtils\";\r\n\r\ninterface MessageContent {\r\n  reply_to?: string;\r\n  reply_msg?: string;\r\n  reply_msg_id?: string;\r\n}\r\n\r\nexport function getAttachmentType(extension: string) {\r\n  const booleans = {\r\n    isImageMessage: /jpe?g|png|gif|ico$/i.test(extension),\r\n    isAudioMessage: /ogg|mp3|wav|m4a|webm$/i.test(extension),\r\n    isVideoMessage: /mp4|avi|mov$/i.test(extension),\r\n    isFileMessage: /txt|doc?x|pdf|ppt?s|sql|css|js|html|xlsx|xml/.test(extension),\r\n  };\r\n  booleans.isFileMessage =\r\n    !booleans.isAudioMessage &&\r\n    !booleans.isImageMessage &&\r\n    !booleans.isVideoMessage &&\r\n    booleans.isFileMessage\r\n  return booleans;\r\n}\r\n//Groups\r\nexport const parseGroup = (\r\n  apiGroup: any,\r\n  presenceMap: Map<string, Presence> | undefined\r\n) => {\r\n  return {\r\n    groupId: apiGroup.id,\r\n    name: apiGroup.name,\r\n    description: apiGroup.description,\r\n    jid: `${apiGroup.id}@conference.${apiGroup.domainName}`,\r\n    profilePicture: apiGroup.imageUrl,\r\n    favorite: apiGroup.favorite,\r\n    added: apiGroup.added,\r\n    members: apiGroup.members.map((member: any) => {\r\n      return {\r\n        userId: member.id,\r\n        name: member.name,\r\n        profilePicture: member.imageUrl,\r\n        role: member.admin ? UserType.ADMIN : UserType.USER,\r\n        status: presenceMap\r\n          ? Array.from(presenceMap.values()).find(\r\n              (pres) => pres.from.split(\"@\")[0] === member.id\r\n            )?.status || PresenceStatus.OFFLINE\r\n          : PresenceStatus.OFFLINE,\r\n      };\r\n    }),\r\n  };\r\n};\r\n//Contacts\r\nexport const parseContact = (\r\n  apiContact: any,\r\n  presenceMap: Map<string, Presence> | undefined\r\n) => {\r\n  return {\r\n    id: apiContact.id,\r\n    jid: apiContact.imId,\r\n    name: apiContact.name,\r\n    department: apiContact.department,\r\n    domain: apiContact.domainName,\r\n    number: apiContact.extension,\r\n    profilePicture: apiContact.imageUrl,\r\n    email: apiContact.email,\r\n    blocked: apiContact.blocked,\r\n    added: apiContact.added,\r\n    status: presenceMap\r\n      ? (Array.from(presenceMap.values()).find(\r\n          (pres) => pres.from.split(\"/\")[0] === apiContact.imId\r\n        )?.status as PresenceStatus) || PresenceStatus.OFFLINE\r\n      : PresenceStatus.OFFLINE,\r\n    favorite: apiContact.favorite,\r\n  };\r\n};\r\n//Chats\r\nexport const parseChats = (\r\n  chats: any[],\r\n  groups: Map<string, IGroup>,\r\n  contacts: Map<string, IContact>,\r\n  user: IUser\r\n): IChat[] => {\r\n  const parsedChats: IChat[] = [];\r\n  chats.forEach((chat) => {\r\n    const parsedChat = parseChat(chat, groups, contacts, user);\r\n    if (parsedChat) parsedChats.push(parsedChat);\r\n  });\r\n  return parsedChats;\r\n};\r\nexport const parseChat = (\r\n  chat: any,\r\n  groups: Map<string, IGroup>,\r\n  contacts: Map<string, IContact>,\r\n  user: IUser\r\n) => {\r\n  const chatUser = groups.get(chat.id) || contacts.get(chat.id);\r\n  if (chatUser) {\r\n    const chatMessage = chat.messages[0];\r\n    const iChat: IChat = {\r\n      id: chat.id,\r\n      jid: chatUser.jid,\r\n      name: chat.name,\r\n      email: (chatUser as IContact)?.email,\r\n      department: (chatUser as IContact)?.department,\r\n      profilePicture: chatUser?.profilePicture || chatUser?.profilePicture,\r\n      status: \"status\" in chatUser ? (chatUser as IContact).status : undefined,\r\n      unRead: chat.unreadMessages,\r\n      chatType: chat.chatType,\r\n      members: (chatUser as IGroup).members,\r\n      inputMessage: \"\",\r\n      isTyping: false,\r\n      messages: [parseMessage(chatMessage, contacts, groups, user)],\r\n      favorite: chatUser?.favorite || chatUser?.favorite || false,\r\n      added: chatUser.added,\r\n      groupId: (chatUser as IGroup).groupId,\r\n      mencioned: chat.unreadMessages > 0 ? ParseUserTag(user.id, chatMessage.message) : 0\r\n    };\r\n    return iChat;\r\n  }\r\n};\r\n//Messages\r\nexport const parseMessage = (\r\n  chatMessage: Message,\r\n  contacts: Map<string, IContact>,\r\n  groups: Map<string, IGroup>,\r\n  user: IUser\r\n) => {\r\n  let booleans = {\r\n    isImageMessage: chatMessage.isImage,\r\n    isFileMessage:\r\n      chatMessage.isFile &&\r\n      !chatMessage.isImage &&\r\n      !chatMessage.isVideo &&\r\n      !chatMessage.isAudio,\r\n    isVideoMessage: chatMessage.isVideo,\r\n    isAudioMessage: chatMessage.isAudio,\r\n  };\r\n  if (isUrl(chatMessage.message)) {\r\n    booleans = getUrlBooleans(chatMessage.message);\r\n  }\r\n  let content: MessageContent = {};\r\n  if (chatMessage.content) {\r\n    let newContent = chatMessage.content.replace(/'/g, '\"');\r\n    try {\r\n      content = JSON.parse(newContent);\r\n    } catch (e) {\r\n      content = {};\r\n    }\r\n    if (typeof content !== \"object\") {\r\n      content = {};\r\n    }\r\n    if (content.reply_to) content.reply_to = content.reply_to.split(\"@\")[0];\r\n  }\r\n  const msg: IMessage = {\r\n    id: chatMessage.idXmpp,\r\n    userName: getContactName(chatMessage, contacts, groups, user),\r\n    userProfilePicture: getUserProfilePicture(\r\n      chatMessage,\r\n      contacts,\r\n      groups,\r\n      user\r\n    ),\r\n    message: chatMessage.message,\r\n    time: new Date(chatMessage.sentAt).toISOString(),\r\n    fileUrl: chatMessage.message,\r\n    toUser: chatMessage.to,\r\n    fromUser: chatMessage.from,\r\n    deliverStatus: chatMessage.deliveryStatus,\r\n    readStatus: chatMessage.readStatus,\r\n    deliverTimestamp: chatMessage.deliveryTimestamp || \"\",\r\n    readTimestamp: chatMessage.readTimestamp || \"\",\r\n    content: chatMessage.content,\r\n    contentType: chatMessage.contentType,\r\n    isReplyMessage: !!content.reply_msg,\r\n    isForwardMessage: !!(\r\n      !content.reply_msg &&\r\n      content.reply_to &&\r\n      content.reply_msg_id\r\n    ),\r\n    ...booleans,\r\n    replyedMessage: content.reply_msg,\r\n    replyedMessageId: content.reply_msg_id,\r\n    replyedMessageTo:\r\n      contacts.get(content.reply_to?.split(\"@\")[0] || \"\")?.name ||\r\n      user.id === content.reply_to?.split(\"@\")[0]\r\n        ? user.name\r\n        : \"Participant\",\r\n  };\r\n  return msg;\r\n};\r\nexport function isUrl(str: string) {\r\n  var expression = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;\r\n  var regex = new RegExp(expression);\r\n  return !!str?.match(regex);\r\n}\r\nexport function getUrlBooleans(msg: string) {\r\n  const booleans = {\r\n    isImageMessage: /\\.(jpe?g|png|gif|ico)$/i.test(msg),\r\n    isVideoMessage: /\\.(mp4|avi)$/i.test(msg),\r\n    isAudioMessage: /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg),\r\n    isFileMessage: /\\.(txt|doc?x|pdf|ppt?s|sql|css|js|html|xlsx|xml)$/i.test(msg),\r\n  }\r\n  booleans.isFileMessage =\r\n    booleans.isFileMessage &&\r\n    !booleans.isImageMessage &&\r\n    !booleans.isVideoMessage &&\r\n    !booleans.isAudioMessage;\r\n  return booleans;\r\n}\r\nexport function getFileName(msg: string) {\r\n  const splittedMsg = msg.split(\"/\");\r\n  return splittedMsg[splittedMsg.length - 1];\r\n}\r\nexport function parseConferences(\r\n  conferences: ConferenceRoom[],\r\n  settings: Settings\r\n) {\r\n  const parsedConferences: IConference[] = conferences.map((conf) => {\r\n    const parsedParcicipants: ConferenceRoomParticipant[] = [];\r\n    conf.conferenceRoomParticipantExternals.forEach((part) => {\r\n      parsedParcicipants.push(part);\r\n    });\r\n    conf.conferenceRoomParticipants.forEach((part) => {\r\n      if (!parsedParcicipants.find((p) => p.userUuid === part.userUuid))\r\n        parsedParcicipants.push(part);\r\n    });\r\n    conf.conferenceRoomModerators.forEach((part) => {\r\n      if (!parsedParcicipants.find((p) => p.userUuid === part.userUuid))\r\n        parsedParcicipants.push(part);\r\n    });\r\n    return {\r\n      id: conf.id,\r\n      jid: `${conf.id}@conference.public-${settings.xmppDomain}`,\r\n      name: conf.name,\r\n      number: conf.number,\r\n      anonymousModeratorUrl: conf.anonymousModeratorUrl,\r\n      anonymousParticipantUrl: conf.anonymousParticipantUrl,\r\n      citrusInvationParticipantExternal: conf.citrusInvationParticipantExternal,\r\n      citrusSendPin: conf.citrusSendPin,\r\n      conferenceRoomParticipants: parsedParcicipants,\r\n      createdBy: conf.createdBy,\r\n      description: conf.description,\r\n      domainName: conf.domainName,\r\n      enabledLiveStream: conf.enabledLiveStream,\r\n      liveStreamUrl: conf.liveStreamUrl,\r\n      meetingUuid: conf.meetingUuid,\r\n      moderatorPin: conf.moderatorPin,\r\n      numberExternal: conf.numberExternal,\r\n      participantPin: conf.participantPin,\r\n      record: conf.record,\r\n      rtmpUrl: conf.rtmpUrl,\r\n      serverType: conf.serverType,\r\n      sfuUrl: conf.sfuUrl,\r\n      startDatetime: conf.startDatetime,\r\n      startDatetimeStr: conf.startDatetimeStr,\r\n      stopDatetime: conf.stopDatetime,\r\n      stopDatetimeStr: conf.stopDatetimeStr,\r\n      userCreatedName: conf.userCreatedName,\r\n      waitMod: conf.waitMod,\r\n    };\r\n  });\r\n  return parsedConferences;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}