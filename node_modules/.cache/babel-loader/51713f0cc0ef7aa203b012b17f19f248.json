{"ast":null,"code":"import { C } from \"../messages\";\nimport { NonInviteClientTransaction } from \"../transactions\";\nimport { UserAgentClient } from \"./user-agent-client\";\n/**\n * Re-SUBSCRIBE UAC.\n * @public\n */\n\nexport class ReSubscribeUserAgentClient extends UserAgentClient {\n  constructor(dialog, delegate, options) {\n    const message = dialog.createOutgoingRequestMessage(C.SUBSCRIBE, options);\n    super(NonInviteClientTransaction, dialog.userAgentCore, message, delegate);\n    this.dialog = dialog;\n  }\n\n  waitNotifyStop() {\n    // TODO: Placeholder. Not utilized currently.\n    return;\n  }\n  /**\n   * Receive a response from the transaction layer.\n   * @param message - Incoming response message.\n   */\n\n\n  receiveResponse(message) {\n    if (message.statusCode && message.statusCode >= 200 && message.statusCode < 300) {\n      //  The \"Expires\" header field in a 200-class response to SUBSCRIBE\n      //  request indicates the actual duration for which the subscription will\n      //  remain active (unless refreshed).  The received value might be\n      //  smaller than the value indicated in the SUBSCRIBE request but cannot\n      //  be larger; see Section 4.2.1 for details.\n      // https://tools.ietf.org/html/rfc6665#section-4.1.2.1\n      const expires = message.getHeader(\"Expires\");\n\n      if (!expires) {\n        this.logger.warn(\"Expires header missing in a 200-class response to SUBSCRIBE\");\n      } else {\n        const subscriptionExpiresReceived = Number(expires);\n\n        if (this.dialog.subscriptionExpires > subscriptionExpiresReceived) {\n          this.dialog.subscriptionExpires = subscriptionExpiresReceived;\n        }\n      }\n    }\n\n    if (message.statusCode && message.statusCode >= 400 && message.statusCode < 700) {\n      // If a SUBSCRIBE request to refresh a subscription receives a 404, 405,\n      // 410, 416, 480-485, 489, 501, or 604 response, the subscriber MUST\n      // consider the subscription terminated.  (See [RFC5057] for further\n      // details and notes about the effect of error codes on dialogs and\n      // usages within dialog, such as subscriptions).  If the subscriber\n      // wishes to re-subscribe to the state, he does so by composing an\n      // unrelated initial SUBSCRIBE request with a freshly generated Call-ID\n      // and a new, unique \"From\" tag (see Section 4.1.2.1).\n      // https://tools.ietf.org/html/rfc6665#section-4.1.2.2\n      const errorCodes = [404, 405, 410, 416, 480, 481, 482, 483, 484, 485, 489, 501, 604];\n\n      if (errorCodes.includes(message.statusCode)) {\n        this.dialog.terminate();\n      } // If a SUBSCRIBE request to refresh a subscription fails with any error\n      // code other than those listed above, the original subscription is\n      // still considered valid for the duration of the most recently known\n      // \"Expires\" value as negotiated by the most recent successful SUBSCRIBE\n      // transaction, or as communicated by a NOTIFY request in its\n      // \"Subscription-State\" header field \"expires\" parameter.\n      // https://tools.ietf.org/html/rfc6665#section-4.1.2.2\n\n    }\n\n    super.receiveResponse(message);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/core/user-agents/re-subscribe-user-agent-client.js"],"names":["C","NonInviteClientTransaction","UserAgentClient","ReSubscribeUserAgentClient","constructor","dialog","delegate","options","message","createOutgoingRequestMessage","SUBSCRIBE","userAgentCore","waitNotifyStop","receiveResponse","statusCode","expires","getHeader","logger","warn","subscriptionExpiresReceived","Number","subscriptionExpires","errorCodes","includes","terminate"],"mappings":"AAAA,SAASA,CAAT,QAAkB,aAAlB;AACA,SAASC,0BAAT,QAA2C,iBAA3C;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,0BAAN,SAAyCD,eAAzC,CAAyD;AAC5DE,EAAAA,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmBC,OAAnB,EAA4B;AACnC,UAAMC,OAAO,GAAGH,MAAM,CAACI,4BAAP,CAAoCT,CAAC,CAACU,SAAtC,EAAiDH,OAAjD,CAAhB;AACA,UAAMN,0BAAN,EAAkCI,MAAM,CAACM,aAAzC,EAAwDH,OAAxD,EAAiEF,QAAjE;AACA,SAAKD,MAAL,GAAcA,MAAd;AACH;;AACDO,EAAAA,cAAc,GAAG;AACb;AACA;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,eAAe,CAACL,OAAD,EAAU;AACrB,QAAIA,OAAO,CAACM,UAAR,IAAsBN,OAAO,CAACM,UAAR,IAAsB,GAA5C,IAAmDN,OAAO,CAACM,UAAR,GAAqB,GAA5E,EAAiF;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,YAAMC,OAAO,GAAGP,OAAO,CAACQ,SAAR,CAAkB,SAAlB,CAAhB;;AACA,UAAI,CAACD,OAAL,EAAc;AACV,aAAKE,MAAL,CAAYC,IAAZ,CAAiB,6DAAjB;AACH,OAFD,MAGK;AACD,cAAMC,2BAA2B,GAAGC,MAAM,CAACL,OAAD,CAA1C;;AACA,YAAI,KAAKV,MAAL,CAAYgB,mBAAZ,GAAkCF,2BAAtC,EAAmE;AAC/D,eAAKd,MAAL,CAAYgB,mBAAZ,GAAkCF,2BAAlC;AACH;AACJ;AACJ;;AACD,QAAIX,OAAO,CAACM,UAAR,IAAsBN,OAAO,CAACM,UAAR,IAAsB,GAA5C,IAAmDN,OAAO,CAACM,UAAR,GAAqB,GAA5E,EAAiF;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAMQ,UAAU,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,CAAnB;;AACA,UAAIA,UAAU,CAACC,QAAX,CAAoBf,OAAO,CAACM,UAA5B,CAAJ,EAA6C;AACzC,aAAKT,MAAL,CAAYmB,SAAZ;AACH,OAb4E,CAc7E;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;;AACD,UAAMX,eAAN,CAAsBL,OAAtB;AACH;;AAxD2D","sourcesContent":["import { C } from \"../messages\";\nimport { NonInviteClientTransaction } from \"../transactions\";\nimport { UserAgentClient } from \"./user-agent-client\";\n/**\n * Re-SUBSCRIBE UAC.\n * @public\n */\nexport class ReSubscribeUserAgentClient extends UserAgentClient {\n    constructor(dialog, delegate, options) {\n        const message = dialog.createOutgoingRequestMessage(C.SUBSCRIBE, options);\n        super(NonInviteClientTransaction, dialog.userAgentCore, message, delegate);\n        this.dialog = dialog;\n    }\n    waitNotifyStop() {\n        // TODO: Placeholder. Not utilized currently.\n        return;\n    }\n    /**\n     * Receive a response from the transaction layer.\n     * @param message - Incoming response message.\n     */\n    receiveResponse(message) {\n        if (message.statusCode && message.statusCode >= 200 && message.statusCode < 300) {\n            //  The \"Expires\" header field in a 200-class response to SUBSCRIBE\n            //  request indicates the actual duration for which the subscription will\n            //  remain active (unless refreshed).  The received value might be\n            //  smaller than the value indicated in the SUBSCRIBE request but cannot\n            //  be larger; see Section 4.2.1 for details.\n            // https://tools.ietf.org/html/rfc6665#section-4.1.2.1\n            const expires = message.getHeader(\"Expires\");\n            if (!expires) {\n                this.logger.warn(\"Expires header missing in a 200-class response to SUBSCRIBE\");\n            }\n            else {\n                const subscriptionExpiresReceived = Number(expires);\n                if (this.dialog.subscriptionExpires > subscriptionExpiresReceived) {\n                    this.dialog.subscriptionExpires = subscriptionExpiresReceived;\n                }\n            }\n        }\n        if (message.statusCode && message.statusCode >= 400 && message.statusCode < 700) {\n            // If a SUBSCRIBE request to refresh a subscription receives a 404, 405,\n            // 410, 416, 480-485, 489, 501, or 604 response, the subscriber MUST\n            // consider the subscription terminated.  (See [RFC5057] for further\n            // details and notes about the effect of error codes on dialogs and\n            // usages within dialog, such as subscriptions).  If the subscriber\n            // wishes to re-subscribe to the state, he does so by composing an\n            // unrelated initial SUBSCRIBE request with a freshly generated Call-ID\n            // and a new, unique \"From\" tag (see Section 4.1.2.1).\n            // https://tools.ietf.org/html/rfc6665#section-4.1.2.2\n            const errorCodes = [404, 405, 410, 416, 480, 481, 482, 483, 484, 485, 489, 501, 604];\n            if (errorCodes.includes(message.statusCode)) {\n                this.dialog.terminate();\n            }\n            // If a SUBSCRIBE request to refresh a subscription fails with any error\n            // code other than those listed above, the original subscription is\n            // still considered valid for the duration of the most recently known\n            // \"Expires\" value as negotiated by the most recent successful SUBSCRIBE\n            // transaction, or as communicated by a NOTIFY request in its\n            // \"Subscription-State\" header field \"expires\" parameter.\n            // https://tools.ietf.org/html/rfc6665#section-4.1.2.2\n        }\n        super.receiveResponse(message);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}