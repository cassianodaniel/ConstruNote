{"ast":null,"code":"import { untruncateYear, signedOffset, parseInteger, parseMillis, ianaRegex, isUndefined } from \"./util.js\";\nimport * as English from \"./english.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n/*\n * This file handles parsing for well-specified formats. Here's how it works:\n * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.\n * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object\n * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.\n * Extractors can take a \"cursor\" representing the offset in the match to look at. This makes it easy to combine extractors.\n * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.\n * Some extractions are super dumb and simpleParse and fromStrings help DRY them.\n */\n\nfunction combineRegexes(...regexes) {\n  const full = regexes.reduce((f, r) => f + r.source, \"\");\n  return RegExp(`^${full}$`);\n}\n\nfunction combineExtractors(...extractors) {\n  return m => extractors.reduce(([mergedVals, mergedZone, cursor], ex) => {\n    const [val, zone, next] = ex(m, cursor);\n    return [Object.assign(mergedVals, val), mergedZone || zone, next];\n  }, [{}, null, 1]).slice(0, 2);\n}\n\nfunction parse(s, ...patterns) {\n  if (s == null) {\n    return [null, null];\n  }\n\n  for (const [regex, extractor] of patterns) {\n    const m = regex.exec(s);\n\n    if (m) {\n      return extractor(m);\n    }\n  }\n\n  return [null, null];\n}\n\nfunction simpleParse(...keys) {\n  return (match, cursor) => {\n    const ret = {};\n    let i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInteger(match[cursor + i]);\n    }\n\n    return [ret, null, cursor + i];\n  };\n} // ISO and SQL parsing\n\n\nconst offsetRegex = /(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)/,\n      isoTimeBaseRegex = /(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d{1,30}))?)?)?/,\n      isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${offsetRegex.source}?`),\n      isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`),\n      isoYmdRegex = /([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/,\n      isoWeekRegex = /(\\d{4})-?W(\\d\\d)(?:-?(\\d))?/,\n      isoOrdinalRegex = /(\\d{4})-?(\\d{3})/,\n      extractISOWeekData = simpleParse(\"weekYear\", \"weekNumber\", \"weekDay\"),\n      extractISOOrdinalData = simpleParse(\"year\", \"ordinal\"),\n      sqlYmdRegex = /(\\d{4})-(\\d\\d)-(\\d\\d)/,\n      // dumbed-down version of the ISO one\nsqlTimeRegex = RegExp(`${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`),\n      sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);\n\nfunction int(match, pos, fallback) {\n  const m = match[pos];\n  return isUndefined(m) ? fallback : parseInteger(m);\n}\n\nfunction extractISOYmd(match, cursor) {\n  const item = {\n    year: int(match, cursor),\n    month: int(match, cursor + 1, 1),\n    day: int(match, cursor + 2, 1)\n  };\n  return [item, null, cursor + 3];\n}\n\nfunction extractISOTime(match, cursor) {\n  const item = {\n    hour: int(match, cursor, 0),\n    minute: int(match, cursor + 1, 0),\n    second: int(match, cursor + 2, 0),\n    millisecond: parseMillis(match[cursor + 3])\n  };\n  return [item, null, cursor + 4];\n}\n\nfunction extractISOOffset(match, cursor) {\n  const local = !match[cursor] && !match[cursor + 1],\n        fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),\n        zone = local ? null : FixedOffsetZone.instance(fullOffset);\n  return [{}, zone, cursor + 3];\n}\n\nfunction extractIANAZone(match, cursor) {\n  const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;\n  return [{}, zone, cursor + 1];\n} // ISO duration parsing\n\n\nconst isoDuration = /^-?P(?:(?:(-?\\d{1,9})Y)?(?:(-?\\d{1,9})M)?(?:(-?\\d{1,9})W)?(?:(-?\\d{1,9})D)?(?:T(?:(-?\\d{1,9})H)?(?:(-?\\d{1,9})M)?(?:(-?\\d{1,20})(?:[.,](-?\\d{1,9}))?S)?)?)$/;\n\nfunction extractISODuration(match) {\n  const [s, yearStr, monthStr, weekStr, dayStr, hourStr, minuteStr, secondStr, millisecondsStr] = match;\n  const hasNegativePrefix = s[0] === \"-\";\n\n  const maybeNegate = num => num && hasNegativePrefix ? -num : num;\n\n  return [{\n    years: maybeNegate(parseInteger(yearStr)),\n    months: maybeNegate(parseInteger(monthStr)),\n    weeks: maybeNegate(parseInteger(weekStr)),\n    days: maybeNegate(parseInteger(dayStr)),\n    hours: maybeNegate(parseInteger(hourStr)),\n    minutes: maybeNegate(parseInteger(minuteStr)),\n    seconds: maybeNegate(parseInteger(secondStr)),\n    milliseconds: maybeNegate(parseMillis(millisecondsStr))\n  }];\n} // These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\n\n\nconst obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60\n};\n\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  const result = {\n    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),\n    month: English.monthsShort.indexOf(monthStr) + 1,\n    day: parseInteger(dayStr),\n    hour: parseInteger(hourStr),\n    minute: parseInteger(minuteStr)\n  };\n  if (secondStr) result.second = parseInteger(secondStr);\n\n  if (weekdayStr) {\n    result.weekday = weekdayStr.length > 3 ? English.weekdaysLong.indexOf(weekdayStr) + 1 : English.weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  return result;\n} // RFC 2822/5322\n\n\nconst rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match) {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr, obsOffset, milOffset, offHourStr, offMinuteStr] = match,\n        result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  let offset;\n\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s.replace(/\\([^)]*\\)|[\\n\\t]/g, \" \").replace(/(\\s\\s+)/g, \" \").trim();\n} // http date\n\n\nconst rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n      rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n      ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match) {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\n        result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match) {\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\n        result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nconst isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);\nconst isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);\nconst isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);\nconst isoTimeCombinedRegex = combineRegexes(isoTimeRegex);\nconst extractISOYmdTimeAndOffset = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset);\nconst extractISOWeekTimeAndOffset = combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset);\nconst extractISOOrdinalDataAndTime = combineExtractors(extractISOOrdinalData, extractISOTime);\nconst extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset);\n/**\n * @private\n */\n\nexport function parseISODate(s) {\n  return parse(s, [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset], [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset], [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDataAndTime], [isoTimeCombinedRegex, extractISOTimeAndOffset]);\n}\nexport function parseRFC2822Date(s) {\n  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n}\nexport function parseHTTPDate(s) {\n  return parse(s, [rfc1123, extractRFC1123Or850], [rfc850, extractRFC1123Or850], [ascii, extractASCII]);\n}\nexport function parseISODuration(s) {\n  return parse(s, [isoDuration, extractISODuration]);\n}\nconst sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);\nconst sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);\nconst extractISOYmdTimeOffsetAndIANAZone = combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone);\nconst extractISOTimeOffsetAndIANAZone = combineExtractors(extractISOTime, extractISOOffset, extractIANAZone);\nexport function parseSQL(s) {\n  return parse(s, [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeOffsetAndIANAZone], [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/luxon/src/impl/regexParser.js"],"names":["untruncateYear","signedOffset","parseInteger","parseMillis","ianaRegex","isUndefined","English","FixedOffsetZone","IANAZone","combineRegexes","regexes","full","reduce","f","r","source","RegExp","combineExtractors","extractors","m","mergedVals","mergedZone","cursor","ex","val","zone","next","Object","assign","slice","parse","s","patterns","regex","extractor","exec","simpleParse","keys","match","ret","i","length","offsetRegex","isoTimeBaseRegex","isoTimeRegex","isoTimeExtensionRegex","isoYmdRegex","isoWeekRegex","isoOrdinalRegex","extractISOWeekData","extractISOOrdinalData","sqlYmdRegex","sqlTimeRegex","sqlTimeExtensionRegex","int","pos","fallback","extractISOYmd","item","year","month","day","extractISOTime","hour","minute","second","millisecond","extractISOOffset","local","fullOffset","instance","extractIANAZone","create","isoDuration","extractISODuration","yearStr","monthStr","weekStr","dayStr","hourStr","minuteStr","secondStr","millisecondsStr","hasNegativePrefix","maybeNegate","num","years","months","weeks","days","hours","minutes","seconds","milliseconds","obsOffsets","GMT","EDT","EST","CDT","CST","MDT","MST","PDT","PST","fromStrings","weekdayStr","result","monthsShort","indexOf","weekday","weekdaysLong","weekdaysShort","rfc2822","extractRFC2822","obsOffset","milOffset","offHourStr","offMinuteStr","offset","preprocessRFC2822","replace","trim","rfc1123","rfc850","ascii","extractRFC1123Or850","utcInstance","extractASCII","isoYmdWithTimeExtensionRegex","isoWeekWithTimeExtensionRegex","isoOrdinalWithTimeExtensionRegex","isoTimeCombinedRegex","extractISOYmdTimeAndOffset","extractISOWeekTimeAndOffset","extractISOOrdinalDataAndTime","extractISOTimeAndOffset","parseISODate","parseRFC2822Date","parseHTTPDate","parseISODuration","sqlYmdWithTimeExtensionRegex","sqlTimeCombinedRegex","extractISOYmdTimeOffsetAndIANAZone","extractISOTimeOffsetAndIANAZone","parseSQL"],"mappings":"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","sourcesContent":["import {\n  untruncateYear,\n  signedOffset,\n  parseInteger,\n  parseMillis,\n  ianaRegex,\n  isUndefined\n} from \"./util.js\";\nimport * as English from \"./english.js\";\nimport FixedOffsetZone from \"../zones/fixedOffsetZone.js\";\nimport IANAZone from \"../zones/IANAZone.js\";\n\n/*\n * This file handles parsing for well-specified formats. Here's how it works:\n * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.\n * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object\n * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.\n * Extractors can take a \"cursor\" representing the offset in the match to look at. This makes it easy to combine extractors.\n * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.\n * Some extractions are super dumb and simpleParse and fromStrings help DRY them.\n */\n\nfunction combineRegexes(...regexes) {\n  const full = regexes.reduce((f, r) => f + r.source, \"\");\n  return RegExp(`^${full}$`);\n}\n\nfunction combineExtractors(...extractors) {\n  return m =>\n    extractors\n      .reduce(\n        ([mergedVals, mergedZone, cursor], ex) => {\n          const [val, zone, next] = ex(m, cursor);\n          return [Object.assign(mergedVals, val), mergedZone || zone, next];\n        },\n        [{}, null, 1]\n      )\n      .slice(0, 2);\n}\n\nfunction parse(s, ...patterns) {\n  if (s == null) {\n    return [null, null];\n  }\n\n  for (const [regex, extractor] of patterns) {\n    const m = regex.exec(s);\n    if (m) {\n      return extractor(m);\n    }\n  }\n  return [null, null];\n}\n\nfunction simpleParse(...keys) {\n  return (match, cursor) => {\n    const ret = {};\n    let i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInteger(match[cursor + i]);\n    }\n    return [ret, null, cursor + i];\n  };\n}\n\n// ISO and SQL parsing\nconst offsetRegex = /(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)/,\n  isoTimeBaseRegex = /(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d{1,30}))?)?)?/,\n  isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${offsetRegex.source}?`),\n  isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`),\n  isoYmdRegex = /([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/,\n  isoWeekRegex = /(\\d{4})-?W(\\d\\d)(?:-?(\\d))?/,\n  isoOrdinalRegex = /(\\d{4})-?(\\d{3})/,\n  extractISOWeekData = simpleParse(\"weekYear\", \"weekNumber\", \"weekDay\"),\n  extractISOOrdinalData = simpleParse(\"year\", \"ordinal\"),\n  sqlYmdRegex = /(\\d{4})-(\\d\\d)-(\\d\\d)/, // dumbed-down version of the ISO one\n  sqlTimeRegex = RegExp(\n    `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|(${ianaRegex.source}))?`\n  ),\n  sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);\n\nfunction int(match, pos, fallback) {\n  const m = match[pos];\n  return isUndefined(m) ? fallback : parseInteger(m);\n}\n\nfunction extractISOYmd(match, cursor) {\n  const item = {\n    year: int(match, cursor),\n    month: int(match, cursor + 1, 1),\n    day: int(match, cursor + 2, 1)\n  };\n\n  return [item, null, cursor + 3];\n}\n\nfunction extractISOTime(match, cursor) {\n  const item = {\n    hour: int(match, cursor, 0),\n    minute: int(match, cursor + 1, 0),\n    second: int(match, cursor + 2, 0),\n    millisecond: parseMillis(match[cursor + 3])\n  };\n\n  return [item, null, cursor + 4];\n}\n\nfunction extractISOOffset(match, cursor) {\n  const local = !match[cursor] && !match[cursor + 1],\n    fullOffset = signedOffset(match[cursor + 1], match[cursor + 2]),\n    zone = local ? null : FixedOffsetZone.instance(fullOffset);\n  return [{}, zone, cursor + 3];\n}\n\nfunction extractIANAZone(match, cursor) {\n  const zone = match[cursor] ? IANAZone.create(match[cursor]) : null;\n  return [{}, zone, cursor + 1];\n}\n\n// ISO duration parsing\n\nconst isoDuration = /^-?P(?:(?:(-?\\d{1,9})Y)?(?:(-?\\d{1,9})M)?(?:(-?\\d{1,9})W)?(?:(-?\\d{1,9})D)?(?:T(?:(-?\\d{1,9})H)?(?:(-?\\d{1,9})M)?(?:(-?\\d{1,20})(?:[.,](-?\\d{1,9}))?S)?)?)$/;\n\nfunction extractISODuration(match) {\n  const [\n    s,\n    yearStr,\n    monthStr,\n    weekStr,\n    dayStr,\n    hourStr,\n    minuteStr,\n    secondStr,\n    millisecondsStr\n  ] = match;\n\n  const hasNegativePrefix = s[0] === \"-\";\n\n  const maybeNegate = num => (num && hasNegativePrefix ? -num : num);\n\n  return [\n    {\n      years: maybeNegate(parseInteger(yearStr)),\n      months: maybeNegate(parseInteger(monthStr)),\n      weeks: maybeNegate(parseInteger(weekStr)),\n      days: maybeNegate(parseInteger(dayStr)),\n      hours: maybeNegate(parseInteger(hourStr)),\n      minutes: maybeNegate(parseInteger(minuteStr)),\n      seconds: maybeNegate(parseInteger(secondStr)),\n      milliseconds: maybeNegate(parseMillis(millisecondsStr))\n    }\n  ];\n}\n\n// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\nconst obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60\n};\n\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  const result = {\n    year: yearStr.length === 2 ? untruncateYear(parseInteger(yearStr)) : parseInteger(yearStr),\n    month: English.monthsShort.indexOf(monthStr) + 1,\n    day: parseInteger(dayStr),\n    hour: parseInteger(hourStr),\n    minute: parseInteger(minuteStr)\n  };\n\n  if (secondStr) result.second = parseInteger(secondStr);\n  if (weekdayStr) {\n    result.weekday =\n      weekdayStr.length > 3\n        ? English.weekdaysLong.indexOf(weekdayStr) + 1\n        : English.weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  return result;\n}\n\n// RFC 2822/5322\nconst rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match) {\n  const [\n      ,\n      weekdayStr,\n      dayStr,\n      monthStr,\n      yearStr,\n      hourStr,\n      minuteStr,\n      secondStr,\n      obsOffset,\n      milOffset,\n      offHourStr,\n      offMinuteStr\n    ] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n\n  let offset;\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s\n    .replace(/\\([^)]*\\)|[\\n\\t]/g, \" \")\n    .replace(/(\\s\\s+)/g, \" \")\n    .trim();\n}\n\n// http date\n\nconst rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match) {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match) {\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nconst isoYmdWithTimeExtensionRegex = combineRegexes(isoYmdRegex, isoTimeExtensionRegex);\nconst isoWeekWithTimeExtensionRegex = combineRegexes(isoWeekRegex, isoTimeExtensionRegex);\nconst isoOrdinalWithTimeExtensionRegex = combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex);\nconst isoTimeCombinedRegex = combineRegexes(isoTimeRegex);\n\nconst extractISOYmdTimeAndOffset = combineExtractors(\n  extractISOYmd,\n  extractISOTime,\n  extractISOOffset\n);\nconst extractISOWeekTimeAndOffset = combineExtractors(\n  extractISOWeekData,\n  extractISOTime,\n  extractISOOffset\n);\nconst extractISOOrdinalDataAndTime = combineExtractors(extractISOOrdinalData, extractISOTime);\nconst extractISOTimeAndOffset = combineExtractors(extractISOTime, extractISOOffset);\n\n/**\n * @private\n */\n\nexport function parseISODate(s) {\n  return parse(\n    s,\n    [isoYmdWithTimeExtensionRegex, extractISOYmdTimeAndOffset],\n    [isoWeekWithTimeExtensionRegex, extractISOWeekTimeAndOffset],\n    [isoOrdinalWithTimeExtensionRegex, extractISOOrdinalDataAndTime],\n    [isoTimeCombinedRegex, extractISOTimeAndOffset]\n  );\n}\n\nexport function parseRFC2822Date(s) {\n  return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n}\n\nexport function parseHTTPDate(s) {\n  return parse(\n    s,\n    [rfc1123, extractRFC1123Or850],\n    [rfc850, extractRFC1123Or850],\n    [ascii, extractASCII]\n  );\n}\n\nexport function parseISODuration(s) {\n  return parse(s, [isoDuration, extractISODuration]);\n}\n\nconst sqlYmdWithTimeExtensionRegex = combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex);\nconst sqlTimeCombinedRegex = combineRegexes(sqlTimeRegex);\n\nconst extractISOYmdTimeOffsetAndIANAZone = combineExtractors(\n  extractISOYmd,\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\nconst extractISOTimeOffsetAndIANAZone = combineExtractors(\n  extractISOTime,\n  extractISOOffset,\n  extractIANAZone\n);\n\nexport function parseSQL(s) {\n  return parse(\n    s,\n    [sqlYmdWithTimeExtensionRegex, extractISOYmdTimeOffsetAndIANAZone],\n    [sqlTimeCombinedRegex, extractISOTimeOffsetAndIANAZone]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}