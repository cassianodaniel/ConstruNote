{"ast":null,"code":"'use strict'; // https://xmpp.org/rfcs/rfc6120.html#rfc.section.4.9.2\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\n\nvar XMPPError = /*#__PURE__*/function (_Error) {\n  _inherits(XMPPError, _Error);\n\n  var _super = _createSuper(XMPPError);\n\n  function XMPPError(condition, text, application) {\n    var _this;\n\n    _classCallCheck(this, XMPPError);\n\n    _this = _super.call(this, condition + (text ? \" - \".concat(text) : ''));\n    _this.name = 'XMPPError';\n    _this.condition = condition;\n    _this.text = text;\n    _this.application = application;\n    return _this;\n  }\n\n  _createClass(XMPPError, null, [{\n    key: \"fromElement\",\n    value: function fromElement(element) {\n      var _element$children = _slicedToArray(element.children, 3),\n          condition = _element$children[0],\n          second = _element$children[1],\n          third = _element$children[2];\n\n      var text;\n      var application;\n\n      if (second) {\n        if (second.is('text')) {\n          text = second;\n        } else if (second) {\n          application = second;\n        }\n\n        if (third) application = third;\n      }\n\n      var error = new this(condition.name, text ? text.text() : '', application);\n      error.element = element;\n      return error;\n    }\n  }]);\n\n  return XMPPError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nmodule.exports = XMPPError;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/error/index.js"],"names":["XMPPError","condition","text","application","name","element","children","second","third","is","error","Error","module","exports"],"mappings":"AAAA,a,CAEA;;;;;;;;;;;;;;IAEMA,S;;;;;AACJ,qBAAYC,SAAZ,EAAuBC,IAAvB,EAA6BC,WAA7B,EAA0C;AAAA;;AAAA;;AACxC,8BAAMF,SAAS,IAAIC,IAAI,gBAASA,IAAT,IAAkB,EAA1B,CAAf;AACA,UAAKE,IAAL,GAAY,WAAZ;AACA,UAAKH,SAAL,GAAiBA,SAAjB;AACA,UAAKC,IAAL,GAAYA,IAAZ;AACA,UAAKC,WAAL,GAAmBA,WAAnB;AALwC;AAMzC;;;;gCAEkBE,O,EAAS;AAAA,6CACSA,OAAO,CAACC,QADjB;AAAA,UACnBL,SADmB;AAAA,UACRM,MADQ;AAAA,UACAC,KADA;;AAE1B,UAAIN,IAAJ;AACA,UAAIC,WAAJ;;AAEA,UAAII,MAAJ,EAAY;AACV,YAAIA,MAAM,CAACE,EAAP,CAAU,MAAV,CAAJ,EAAuB;AACrBP,UAAAA,IAAI,GAAGK,MAAP;AACD,SAFD,MAEO,IAAIA,MAAJ,EAAY;AACjBJ,UAAAA,WAAW,GAAGI,MAAd;AACD;;AAED,YAAIC,KAAJ,EAAWL,WAAW,GAAGK,KAAd;AACZ;;AAED,UAAME,KAAK,GAAG,IAAI,IAAJ,CAAST,SAAS,CAACG,IAAnB,EAAyBF,IAAI,GAAGA,IAAI,CAACA,IAAL,EAAH,GAAiB,EAA9C,EAAkDC,WAAlD,CAAd;AACAO,MAAAA,KAAK,CAACL,OAAN,GAAgBA,OAAhB;AACA,aAAOK,KAAP;AACD;;;;iCA3BqBC,K;;AA8BxBC,MAAM,CAACC,OAAP,GAAiBb,SAAjB","sourcesContent":["'use strict'\n\n// https://xmpp.org/rfcs/rfc6120.html#rfc.section.4.9.2\n\nclass XMPPError extends Error {\n  constructor(condition, text, application) {\n    super(condition + (text ? ` - ${text}` : ''))\n    this.name = 'XMPPError'\n    this.condition = condition\n    this.text = text\n    this.application = application\n  }\n\n  static fromElement(element) {\n    const [condition, second, third] = element.children\n    let text\n    let application\n\n    if (second) {\n      if (second.is('text')) {\n        text = second\n      } else if (second) {\n        application = second\n      }\n\n      if (third) application = third\n    }\n\n    const error = new this(condition.name, text ? text.text() : '', application)\n    error.element = element\n    return error\n  }\n}\n\nmodule.exports = XMPPError\n"]},"metadata":{},"sourceType":"script"}