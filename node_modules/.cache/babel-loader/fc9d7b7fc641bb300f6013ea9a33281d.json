{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport { useModal } from \"../contexts/ModalContext\";\nimport UserType from \"../enuns/UserType\";\nimport { useConference } from \"../contexts/ConferenceContext\";\nimport moment from \"moment\";\nimport { ConferenceRoomParticipantType } from \"./business/Conferences\";\nimport PresenceStatus from \"../enuns/PresenceStatus\";\nimport { DateTime } from 'luxon';\nlet squadService;\nlet typingTimeout = new Map();\n\nconst SquadCommunicator = () => {\n  var _squadService59;\n\n  const {\n    chats,\n    setChats,\n    activeChat,\n    replyMsg,\n    setReplyMsg,\n    setActiveChat,\n    forwardMessageList,\n    setForwardMessageList,\n    setShowChat,\n    showChatProfileSidebar\n  } = useChat();\n  const {\n    contactsSearch,\n    setContactsSearched,\n    newFavorite,\n    setNewFavorite,\n    contacts,\n    setContacts,\n    setContactsOutsideUserContacts,\n    toggleAddingContacts,\n    setToggleAddingContacts,\n    checkedContacts,\n    setCheckedContacts,\n    removedContact,\n    setRemovedContact,\n    checkedMembers,\n    setCheckedMembers,\n    groupToInsertMember,\n    setGroupToInsertMember,\n    clickedContact,\n    setClickedContact\n  } = useContact();\n  const {\n    user,\n    setUser,\n    changedUserData,\n    changedUserPassword,\n    setChangedUserPassword\n  } = useAuth();\n  const {\n    showModalForwardMessageTo,\n    setShowModalForwardMessageTo,\n    showModalAddContact\n  } = useModal();\n  const {\n    setGroups,\n    groups,\n    memberQuit,\n    groupIdOfLeaveRequest,\n    setGroupIdOfLeaveRequest,\n    setMemberQuit,\n    groupToRemoveContact,\n    setGroupToRemoveContact,\n    removedMember,\n    setRemovedMember,\n    toggleMemberRole,\n    setToggleMemberRole,\n    changeGroupData,\n    setChangeGroupData,\n    groupToCreate,\n    setGroupToCreate,\n    groupJid,\n    setGroupJid\n  } = useGroup();\n  const {\n    listRooms,\n    setListRooms,\n    setConferenceList,\n    setCreateConference,\n    createConference\n  } = useConference();\n\n  const init = () => {\n    var _squadService;\n\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"71e1503a96d94e1e231444bc5c0399ca\",\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      user_name: \"ZZ Romero 2\",\n      expires_in: 2592000,\n      email: \"romero2@digivox.com.br\",\n      baseUrl: \"https://app.citrussquad.com/api/v1/\"\n    }));\n    squadService = SquadService.getInstance({\n      chatCommunicatorSubscribe: chatCommunicatorSubscribe\n    });\n    (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.user.get(user => {\n      setUser(user);\n    });\n  };\n\n  const clearSendFile = (chatId, messageId) => {\n    setChats(chats.map(chat => {\n      if (chat.id === chatId) {\n        chat.messages = chat.messages.map(message => {\n          if (message.id === messageId) {\n            message.deliverStatus = DeliverStatus.QUEUED;\n            message.sendFile = undefined;\n          }\n\n          return message;\n        });\n      }\n\n      return chat;\n    }));\n  };\n\n  const onChatsChange = () => {// chats.forEach((chat) => {\n    // });\n  };\n\n  const onActiveChatChange = () => {\n    checkSendMessage(activeChat);\n    checkAttachedFiles(activeChat);\n    checkNewContact(activeChat); // checkTyping(activeChat)\n  }; // const checkTyping = (chat: IChat) => {\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\n  //     if (oldTimeoutData)\n  //       clearTimeout(oldTimeoutData.timeout)\n  //     else\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\n  //     const timeoutData = {\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\n  //       msgStr: `${chat.inputMessage}`\n  //     }\n  //     typingTimeout.set(chat.jid, timeoutData)\n  //   }\n  // }\n\n\n  const checkNewContact = cht => {\n    if (!cht.added) {\n      var _squadService2;\n\n      (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.contacts.add(cht, success => {\n        if (success) {\n          var _squadService3;\n\n          setChats(chats.map(chat => {\n            if (chat.jid === cht.jid) {\n              chat.added = true;\n            }\n\n            if (activeChat.jid === chat.jid) setActiveChat(chat);\n            return chat;\n          }));\n          (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.contacts.list(ctcs => {\n            setContacts(ctcs);\n          });\n        }\n      });\n    }\n  };\n\n  const checkAttachedFiles = cht => {\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\n      var _squadService4;\n\n      (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : _squadService4.attachments.list(cht, attachments => {\n        if (attachments.length > 0) {\n          setActiveChat({ ...cht,\n            attachedFileList: attachments\n          });\n        } else setActiveChat({ ...cht,\n          attachedFileList: null\n        });\n      });\n    }\n  };\n  /* getMessageUserProfilePicture = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.profilePicture;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])\r\n        ?.profilePicture;\r\n    }\r\n  }; */\n\n\n  const checkSearchMessages = () => {\n    if (activeChat.messageLoaded) {\n      var _squadService5;\n\n      (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.messages.list(activeChat, messages => {\n        if (messages.length) {\n          setChats(chats.map(cht => {\n            if (cht.id === activeChat.id) {\n              messages.forEach(msg => {\n                if (!activeChat.messages.find(m => m.id === msg.id)) cht.messages.unshift(msg);\n              });\n              cht.messageLoaded = false;\n              setActiveChat(cht);\n            }\n\n            return cht;\n          }));\n        } else {\n          const chat = { ...activeChat,\n            messageLoaded: false\n          };\n          setActiveChat(chat);\n        }\n      });\n    }\n  };\n\n  const getFileExtension = url => {\n    return url.split('.')[1];\n  };\n\n  const checkSendMessage = chat => {\n    chat.messages.forEach(msg => {\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\n        if (msg.sendFile && !replyMsg) {\n          var _squadService6, _squadService6$chat;\n\n          const files = [msg.sendFile];\n          clearSendFile(chat.id, msg.id);\n          (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : (_squadService6$chat = _squadService6.chat) === null || _squadService6$chat === void 0 ? void 0 : _squadService6$chat.sendFiles(chat, files, data => {\n            var _squadService7;\n\n            updateMessageFiles(data, chat, msg);\n            (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : _squadService7.attachments.saveData({\n              createdAt: JSON.stringify(DateTime.local()),\n              src: msg.fromUser,\n              dst: chat.jid,\n              fileExtension: getFileExtension(data.url),\n              fileName: getFileName(data.url),\n              fileUrl: data.url,\n              kind: chat.chatType\n            }, () => true);\n          });\n        } else {\n          if (!msg.isForwardMessage && !replyMsg) {\n            sendMessage(chat, msg.message, msgId => updateMessage(msgId, chat, msg));\n          } else if (replyMsg) {\n            var _squadService8, _squadService8$chat;\n\n            const replyMsgCopy = { ...replyMsg\n            };\n            setReplyMsg(undefined);\n            (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : (_squadService8$chat = _squadService8.chat) === null || _squadService8$chat === void 0 ? void 0 : _squadService8$chat.replyMsg(chat, msg, replyMsgCopy, msgId => {\n              updateMessage(msgId, chat, msg, replyMsgCopy);\n            });\n          }\n        }\n      }\n    });\n  };\n\n  const updateMessageFiles = (data, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        const booleans = getUrlBooleans(data.url);\n        message.id = data.msgId;\n        message.fileUrl = data.url;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n        message.message = getFileName(data.url);\n        message.isFileMessage = booleans.isFileMessage;\n        message.isImageMessage = booleans.isImageMessage;\n        message.isVideoMessage = booleans.isVideoMessage;\n        message.isAudioMessage = booleans.isAudioMessage;\n      }\n\n      return message;\n    });\n    setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      const newChats = [];\n      chats.forEach(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n          newChats.unshift(cht);\n        } else {\n          newChats.push(cht);\n        }\n      });\n      setChats(newChats);\n    }\n  };\n\n  const updateMessage = (msgId, chat, msg, replyedMsg = undefined) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        message.id = msgId;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n\n        if (replyedMsg) {\n          var _squadService9, _squadService9$contac, _squadService10, _squadService10$user, _squadService10$user$, _squadService11, _squadService11$user, _squadService11$user$;\n\n          message.isReplyMessage = true;\n          message.replyedMessage = replyedMsg.message || replyedMsg.fileUrl;\n          message.replyedMessageId = replyedMsg.id;\n          message.replyedMessageTo = ((_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : (_squadService9$contac = _squadService9.contacts.getContacts().get(replyedMsg.fromUser.split(\"@\")[0])) === null || _squadService9$contac === void 0 ? void 0 : _squadService9$contac.name) || ((_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : (_squadService10$user = _squadService10.user) === null || _squadService10$user === void 0 ? void 0 : (_squadService10$user$ = _squadService10$user.user) === null || _squadService10$user$ === void 0 ? void 0 : _squadService10$user$.id) === replyedMsg.fromUser.split(\"@\")[0] ? (_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : (_squadService11$user = _squadService11.user) === null || _squadService11$user === void 0 ? void 0 : (_squadService11$user$ = _squadService11$user.user) === null || _squadService11$user$ === void 0 ? void 0 : _squadService11$user$.name : \"Participant\";\n        }\n\n        if (isUrl(message.message)) {\n          const booleans = getUrlBooleans(message.message);\n          message.isFileMessage = booleans.isFileMessage;\n          message.isImageMessage = booleans.isImageMessage;\n          message.isAudioMessage = booleans.isAudioMessage;\n          message.isVideoMessage = booleans.isVideoMessage;\n          message.fileUrl = message.message;\n        }\n      }\n\n      return message;\n    });\n    if (activeChat.jid === newChat.jid) setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      const newChats = [];\n      chats.forEach(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n          newChats.unshift(cht);\n        } else {\n          newChats.push(cht);\n        }\n      });\n      setChats(newChats);\n    }\n  };\n\n  const forwardMessage = () => {\n    if (forwardMessageList && showModalForwardMessageTo) {\n      const ctcs = [...forwardMessageList];\n      const message = { ...showModalForwardMessageTo\n      };\n      setForwardMessageList(undefined);\n      setShowModalForwardMessageTo(undefined);\n      const chatsFinded = [];\n      const oldChats = [...chats.map(chat => {\n        return { ...chat\n        };\n      })];\n      ctcs === null || ctcs === void 0 ? void 0 : ctcs.forEach((ctc, i) => {\n        const cht = oldChats.find(cht => cht.jid === ctc.jid);\n\n        if (cht) {\n          var _squadService12, _squadService12$chat;\n\n          const msg = { ...message,\n            id: `${cht.messages.length + 1}`,\n            userName: user.name,\n            fromUser: user.id,\n            toUser: ctc.jid.split(\"@\")[0],\n            message: message.fileUrl || message.message,\n            deliverStatus: DeliverStatus.QUEUED,\n            isForwardMessage: true\n          };\n          (_squadService12 = squadService) === null || _squadService12 === void 0 ? void 0 : (_squadService12$chat = _squadService12.chat) === null || _squadService12$chat === void 0 ? void 0 : _squadService12$chat.forwardMessage(cht, msg, msgId => {\n            msg.id = msgId;\n            cht.messages.push(msg);\n            chatsFinded.push(cht);\n          });\n        }\n      });\n      const newChats = oldChats.map(chat => chatsFinded.find(cht => cht.id === chat.id) || chat);\n      const ctcsNotInChat = ctcs.filter(ctc => !newChats.find(cht => ctc.jid === cht.jid));\n      ctcsNotInChat.forEach((ctc, i) => {\n        var _squadService13, _squadService13$chat;\n\n        const chat = {\n          id: ctc.jid.split(\"@\")[0],\n          jid: ctc.jid,\n          name: ctc.name,\n          profilePicture: ctc.profilePicture,\n          status: ctc.status || undefined,\n          unRead: 0,\n          chatType: ctc.jid.includes(\"@conference.\") ? ChatType.GROUP : ChatType.USER,\n          inputMessage: \"\",\n          messageLoaded: false,\n          isTyping: false,\n          messages: [],\n          email: ctc.email || undefined,\n          favorite: ctc.favorite,\n          added: ctc.added\n        };\n        const newMessage = { ...message,\n          id: `${1}`,\n          userName: user.name,\n          fromUser: user.id,\n          toUser: ctc.jid.split(\"@\")[0],\n          deliverStatus: DeliverStatus.QUEUED,\n          isForwardMessage: true\n        };\n        (_squadService13 = squadService) === null || _squadService13 === void 0 ? void 0 : (_squadService13$chat = _squadService13.chat) === null || _squadService13$chat === void 0 ? void 0 : _squadService13$chat.forwardMessage(chat, newMessage, msgId => {\n          newMessage.id = msgId;\n          chat.messages.push(newMessage);\n          newChats.unshift(chat);\n        });\n      });\n      setChats(newChats);\n    }\n  };\n\n  const onChangeStatus = () => {\n    var _squadService14, _squadService14$chat, _squadService14$chat$, _squadService14$chat$2;\n\n    if (((_squadService14 = squadService) === null || _squadService14 === void 0 ? void 0 : (_squadService14$chat = _squadService14.chat) === null || _squadService14$chat === void 0 ? void 0 : (_squadService14$chat$ = _squadService14$chat.chat) === null || _squadService14$chat$ === void 0 ? void 0 : (_squadService14$chat$2 = _squadService14$chat$.client) === null || _squadService14$chat$2 === void 0 ? void 0 : _squadService14$chat$2.status) === \"online\") {\n      var _squadService15, _squadService15$chat;\n\n      (_squadService15 = squadService) === null || _squadService15 === void 0 ? void 0 : (_squadService15$chat = _squadService15.chat) === null || _squadService15$chat === void 0 ? void 0 : _squadService15$chat.changeStatus(user.status);\n    }\n  };\n\n  const onSearchContacts = () => {\n    if (contactsSearch.length > 2) {\n      var _squadService16;\n\n      (_squadService16 = squadService) === null || _squadService16 === void 0 ? void 0 : _squadService16.contacts.search(contactsSearch, searchList => {\n        setContactsSearched(searchList);\n      });\n    } else {\n      setContactsSearched(undefined);\n    }\n  };\n\n  const onSearchContactsOutsideUserContacts = () => {\n    var _squadService17;\n\n    (_squadService17 = squadService) === null || _squadService17 === void 0 ? void 0 : _squadService17.contacts.getContactsOutsideUserLists(contacts => {\n      if (contacts) {\n        setContactsOutsideUserContacts(contacts);\n      }\n    });\n  };\n\n  const onToggleSidebarMenu = () => {\n    var _squadService18;\n\n    (_squadService18 = squadService) === null || _squadService18 === void 0 ? void 0 : _squadService18.contacts.getContactsOutsideUserLists(contacts => {\n      if (contacts) {\n        setContactsOutsideUserContacts(contacts);\n      }\n    });\n  };\n\n  const onRemovingMember = () => {\n    if (removedMember && groupToRemoveContact) {\n      var _squadService19;\n\n      let group = groups.find(grp => grp.groupId === groupToRemoveContact);\n      if (group) (_squadService19 = squadService) === null || _squadService19 === void 0 ? void 0 : _squadService19.groups.removeMember(group.groupId, removedMember, success => {\n        if (success) {\n          setGroups(groups.map(grp => {\n            if (grp.groupId === (group === null || group === void 0 ? void 0 : group.groupId)) grp.members = grp.members.filter(mb => mb.userId !== removedMember.userId);\n            return grp;\n          }));\n          setChats(chats.map(cht => {\n            if (cht.groupId === (group === null || group === void 0 ? void 0 : group.groupId)) {\n              var _cht$members;\n\n              cht.members = (_cht$members = cht.members) === null || _cht$members === void 0 ? void 0 : _cht$members.filter(mb => mb.userId !== removedMember.userId);\n              if (cht.groupId === activeChat.groupId) setActiveChat(cht);\n            }\n\n            return cht;\n          }));\n\n          if (group) {\n            var _squadService20, _squadService20$chat;\n\n            (_squadService20 = squadService) === null || _squadService20 === void 0 ? void 0 : (_squadService20$chat = _squadService20.chat) === null || _squadService20$chat === void 0 ? void 0 : _squadService20$chat.chat.sendEvent(group === null || group === void 0 ? void 0 : group.jid, removedMember.userId, \"6\");\n          }\n\n          setRemovedMember(undefined);\n          setGroupToRemoveContact(undefined);\n        }\n      });\n    }\n  };\n\n  const onLeavingGroup = () => {\n    if (memberQuit && groupIdOfLeaveRequest && groupJid) {\n      var _squadService21;\n\n      (_squadService21 = squadService) === null || _squadService21 === void 0 ? void 0 : _squadService21.groups.leftingGroup({\n        groupId: groupIdOfLeaveRequest,\n        memberId: memberQuit.userId\n      }, success => {\n        if (success) {\n          var _squadService22, _squadService22$chat, _squadService23, _squadService23$chat;\n\n          (_squadService22 = squadService) === null || _squadService22 === void 0 ? void 0 : (_squadService22$chat = _squadService22.chat) === null || _squadService22$chat === void 0 ? void 0 : _squadService22$chat.chat.sendPresence(PresenceStatus.UNAVAILABLE, `${groupJid}/${memberQuit.userId}`);\n          (_squadService23 = squadService) === null || _squadService23 === void 0 ? void 0 : (_squadService23$chat = _squadService23.chat) === null || _squadService23$chat === void 0 ? void 0 : _squadService23$chat.chat.sendEvent(groupIdOfLeaveRequest, memberQuit.userId, \"3\", undefined);\n          setChats(chats.filter(cht => cht.groupId !== groupIdOfLeaveRequest));\n          setGroups(groups.filter(grp => grp.groupId !== groupIdOfLeaveRequest));\n\n          if (activeChat.groupId === groupIdOfLeaveRequest) {\n            setShowChat(false);\n          }\n        }\n\n        setGroupJid(undefined);\n        setMemberQuit(undefined);\n        setGroupIdOfLeaveRequest(\"\");\n      });\n    }\n  };\n\n  const onAddingMembers = () => {\n    let asynchronousFlag = 0;\n\n    if (checkedMembers && groupToInsertMember) {\n      let copiaCheckedMembers = [...checkedMembers],\n          copiaGroupToInsertMember = { ...groupToInsertMember\n      };\n      copiaCheckedMembers.forEach(ctt => {\n        var _squadService24;\n\n        (_squadService24 = squadService) === null || _squadService24 === void 0 ? void 0 : _squadService24.groups.addMember(copiaGroupToInsertMember, ctt, success => {\n          if (success) {\n            var _squadService25, _squadService25$chat;\n\n            (_squadService25 = squadService) === null || _squadService25 === void 0 ? void 0 : (_squadService25$chat = _squadService25.chat) === null || _squadService25$chat === void 0 ? void 0 : _squadService25$chat.chat.sendEvent(copiaGroupToInsertMember.jid, ctt.id, \"2\");\n            asynchronousFlag++;\n\n            if (copiaCheckedMembers.length === asynchronousFlag) {\n              var _squadService26;\n\n              (_squadService26 = squadService) === null || _squadService26 === void 0 ? void 0 : _squadService26.groups.list(grps => {\n                setGroups(grps);\n                setChats(chats.map(cht => {\n                  if (cht.groupId === copiaGroupToInsertMember.groupId) {\n                    let foundedGroup = grps.find(grp => grp.groupId === cht.groupId);\n                    cht.members = foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.members;\n\n                    if (activeChat.groupId === cht.groupId) {\n                      activeChat.members = foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.members;\n                      setActiveChat(activeChat);\n                    }\n                  }\n\n                  return cht;\n                }));\n              });\n            }\n          }\n        });\n      });\n      setCheckedMembers([]);\n      setToggleAddingContacts(false);\n      setGroupToInsertMember(undefined);\n    }\n  };\n\n  const onAddingContacts = () => {\n    let asynchronousFlag = 0;\n\n    if (checkedContacts && toggleAddingContacts) {\n      checkedContacts.forEach(ctt => {\n        if (!ctt.added) {\n          var _squadService27;\n\n          (_squadService27 = squadService) === null || _squadService27 === void 0 ? void 0 : _squadService27.contacts.addContacts(ctt, success => {\n            if (success) {\n              asynchronousFlag++;\n\n              if (checkedContacts.length === asynchronousFlag) {\n                var _squadService28;\n\n                (_squadService28 = squadService) === null || _squadService28 === void 0 ? void 0 : _squadService28.contacts.list(contacts => {\n                  setContacts(contacts);\n                  setCheckedContacts([]);\n                  setToggleAddingContacts(false);\n                });\n              }\n            }\n          });\n        }\n      });\n    }\n  };\n\n  const onAddingContactOnGroupList = () => {\n    if (clickedContact) {\n      if (!clickedContact.added) {\n        var _squadService29;\n\n        (_squadService29 = squadService) === null || _squadService29 === void 0 ? void 0 : _squadService29.contacts.addContacts(clickedContact, success => {\n          if (success) {\n            var _squadService30;\n\n            (_squadService30 = squadService) === null || _squadService30 === void 0 ? void 0 : _squadService30.contacts.list(contacts => {\n              setContacts(contacts);\n              setClickedContact(undefined);\n            });\n          }\n        });\n      }\n    }\n  };\n\n  const onToggleMemberRole = () => {\n    if (toggleMemberRole) {\n      var _squadService31;\n\n      (_squadService31 = squadService) === null || _squadService31 === void 0 ? void 0 : _squadService31.groups.list(grps => {\n        grps.forEach(gp => {\n          if (gp.groupId === toggleMemberRole.gpId) {\n            gp.members.forEach(mb => {\n              if (mb.userId === toggleMemberRole.mbId) {\n                var _squadService32;\n\n                (_squadService32 = squadService) === null || _squadService32 === void 0 ? void 0 : _squadService32.contacts.toggleMemberRole(toggleMemberRole.mbId, toggleMemberRole.gpId, toggleMemberRole.mbRole, success => {\n                  if (success) {\n                    const newRole = toggleMemberRole.mbRole === UserType.USER ? UserType.ADMIN : UserType.USER;\n                    setToggleMemberRole(undefined);\n                    setChats(chats.map(cht => {\n                      if (cht.groupId === toggleMemberRole.gpId) {\n                        var _cht$members2;\n\n                        cht.members = (_cht$members2 = cht.members) === null || _cht$members2 === void 0 ? void 0 : _cht$members2.map(mb => {\n                          if (mb.userId === toggleMemberRole.mbId) {\n                            mb.role = newRole;\n\n                            if (cht.groupId) {\n                              if (mb.role === UserType.ADMIN) {\n                                var _squadService33, _squadService33$chat;\n\n                                (_squadService33 = squadService) === null || _squadService33 === void 0 ? void 0 : (_squadService33$chat = _squadService33.chat) === null || _squadService33$chat === void 0 ? void 0 : _squadService33$chat.chat.sendEvent(cht.groupId, mb.userId, \"8\");\n                              } else {\n                                var _squadService34, _squadService34$chat;\n\n                                (_squadService34 = squadService) === null || _squadService34 === void 0 ? void 0 : (_squadService34$chat = _squadService34.chat) === null || _squadService34$chat === void 0 ? void 0 : _squadService34$chat.chat.sendEvent(cht.groupId, mb.userId, \"9\");\n                              }\n                            }\n                          }\n\n                          return mb;\n                        });\n                        if (activeChat.groupId === cht.groupId) setActiveChat(cht);\n                      }\n\n                      return cht;\n                    }));\n                    setGroups(groups.map(grp => {\n                      if (grp.groupId === toggleMemberRole.gpId) {\n                        grp.members = grp.members.map(member => {\n                          if (member.userId === toggleMemberRole.mbId) member.role = newRole;\n                          return member;\n                        });\n                      }\n\n                      return grp;\n                    }));\n                  }\n                });\n              }\n            });\n          }\n        });\n      });\n    }\n  };\n\n  const onChangeGroupData = () => {\n    if (changeGroupData) {\n      var _squadService35;\n\n      (_squadService35 = squadService) === null || _squadService35 === void 0 ? void 0 : _squadService35.groups.editGroupInfo({\n        groupId: changeGroupData.groupId,\n        groupName: changeGroupData.groupName,\n        members: changeGroupData.members,\n        description: changeGroupData.description\n      }, success => {\n        if (success) {\n          var _squadService36;\n\n          (_squadService36 = squadService) === null || _squadService36 === void 0 ? void 0 : _squadService36.groups.list(grps => {\n            var _squadService37, _squadService37$chat;\n\n            let foundedGroup = grps.find(grp => grp.groupId === changeGroupData.groupId);\n            setGroups(grps);\n            setChats(chats.map(cht => {\n              if (cht.groupId === changeGroupData.groupId) {\n                if (foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.name) {\n                  cht.name = foundedGroup.name;\n                }\n\n                if (activeChat.groupId === cht.groupId) {\n                  if (foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.name) {\n                    cht.name = foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.name;\n                  }\n\n                  setActiveChat(cht);\n                }\n              }\n\n              return cht;\n            }));\n            (_squadService37 = squadService) === null || _squadService37 === void 0 ? void 0 : (_squadService37$chat = _squadService37.chat) === null || _squadService37$chat === void 0 ? void 0 : _squadService37$chat.chat.sendEvent(foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.jid, undefined, \"10\", undefined);\n            setChangeGroupData(undefined);\n          });\n        }\n      });\n    }\n  };\n\n  const createGroup = () => {\n    var _squadService38;\n\n    (_squadService38 = squadService) === null || _squadService38 === void 0 ? void 0 : _squadService38.groups.create(groupToCreate, parsedGroup => {\n      if (parsedGroup) {\n        var _squadService39, _squadService39$chat, _squadService40, _squadService41, _squadService41$chat;\n\n        (_squadService39 = squadService) === null || _squadService39 === void 0 ? void 0 : (_squadService39$chat = _squadService39.chat) === null || _squadService39$chat === void 0 ? void 0 : _squadService39$chat.chat.sendEvent(parsedGroup.jid, parsedGroup.jid, \"1\");\n        (_squadService40 = squadService) === null || _squadService40 === void 0 ? void 0 : _squadService40.groups.list(groups => {\n          setGroups(groups);\n          setGroupToCreate(undefined);\n        });\n        (_squadService41 = squadService) === null || _squadService41 === void 0 ? void 0 : (_squadService41$chat = _squadService41.chat) === null || _squadService41$chat === void 0 ? void 0 : _squadService41$chat.chat.sendEvent(parsedGroup.jid, undefined, \"1\", undefined);\n      }\n    });\n  };\n\n  const onListRooms = () => {\n    if (listRooms) {\n      var _squadService42;\n\n      (_squadService42 = squadService) === null || _squadService42 === void 0 ? void 0 : _squadService42.conferences.list(conferences => {\n        var _squadService43, _squadService43$chat;\n\n        setConferenceList(conferences);\n        (_squadService43 = squadService) === null || _squadService43 === void 0 ? void 0 : (_squadService43$chat = _squadService43.chat) === null || _squadService43$chat === void 0 ? void 0 : _squadService43$chat.joinGroups(conferences.map(conf => conf.jid));\n      });\n      setListRooms(false);\n    }\n  };\n\n  const onCreateRoom = () => {\n    if (createConference) {\n      var _squadService44;\n\n      const momentStartDate = moment(`${createConference.startDate} ${createConference.startTime}:00`);\n      const momentFinalDate = moment(momentStartDate).add(createConference.duration.split(\":\")[0], \"hours\").add(createConference.duration.split(\":\")[1], \"minutes\");\n      const parsedConference = {\n        name: createConference.name,\n        waitMod: createConference.mdCheck,\n        startDatetime: `${momentStartDate.format(\"DD-MM-YYYY hh:mm:ss\")}`,\n        stopDatetime: `${momentFinalDate.format(\"DD-MM-YYYY hh:mm:ss\")}`\n      };\n      (_squadService44 = squadService) === null || _squadService44 === void 0 ? void 0 : _squadService44.conferences.create(parsedConference, createdConference => {\n        const participantList = [];\n\n        if (createdConference === null || createdConference === void 0 ? void 0 : createdConference.id) {\n          var _createConference$sel, _createConference$ema, _squadService45;\n\n          (_createConference$sel = createConference.selectedContact) === null || _createConference$sel === void 0 ? void 0 : _createConference$sel.forEach(ctc => {\n            participantList.push({\n              userUuid: ctc.id,\n              description: \"\",\n              email: ctc.email,\n              name: ctc.name,\n              type: ConferenceRoomParticipantType.PARTICIPANT,\n              userModerator: false\n            });\n          });\n          (_createConference$ema = createConference.emailList) === null || _createConference$ema === void 0 ? void 0 : _createConference$ema.forEach(participant => {\n            participantList.push({\n              userUuid: null,\n              description: \"\",\n              email: participant.email,\n              name: participant.name,\n              type: ConferenceRoomParticipantType.PARTICIPANT_EXTERNAL,\n              userModerator: false\n            });\n          });\n          (_squadService45 = squadService) === null || _squadService45 === void 0 ? void 0 : _squadService45.conferences.addParticipants(createdConference.id, participantList, s => {\n            if (s) {\n              setCreateConference(undefined);\n              setListRooms(true);\n            }\n          });\n        }\n      });\n    }\n  };\n\n  useEffect(onChatsChange, [chats]);\n  useEffect(onNewFavorite, [newFavorite]);\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\n  useEffect(onActiveChatChange, [activeChat]);\n  useEffect(onUserDataChange, [changedUserData]);\n  useEffect(onUserPasswordChange, [changedUserPassword]);\n  useEffect(onChangeStatus, [user.status]);\n  useEffect(forwardMessage, [forwardMessageList]);\n  useEffect(onSearchContacts, [contactsSearch]);\n  useEffect(onSearchContactsOutsideUserContacts, [showModalAddContact]);\n  useEffect(onAddingContacts, [toggleAddingContacts]);\n  useEffect(onRemovingMember, [removedMember, groupToRemoveContact]);\n  useEffect(onLeavingGroup, [memberQuit, groupIdOfLeaveRequest, groupJid]);\n  useEffect(onRemovingContact, [removedContact]);\n  useEffect(onAddingMembers, [groupToInsertMember, checkedMembers]);\n  useEffect(onToggleMemberRole, [toggleMemberRole]);\n  useEffect(onChangeGroupData, [changeGroupData]);\n  useEffect(onAddingContactOnGroupList, [clickedContact]);\n  useEffect(createGroup, [groupToCreate]);\n  useEffect(onToggleSidebarMenu, [showChatProfileSidebar]);\n  useEffect(onListRooms, [listRooms]);\n  useEffect(onCreateRoom, [createConference]);\n\n  function onRemovingContact() {\n    if (removedContact) {\n      contacts.forEach(ctc => {\n        if (ctc.id === removedContact.id) {\n          var _squadService46;\n\n          if (ctc.added) (_squadService46 = squadService) === null || _squadService46 === void 0 ? void 0 : _squadService46.contacts.remove(ctc, success => {\n            if (success) {\n              var _squadService47;\n\n              (_squadService47 = squadService) === null || _squadService47 === void 0 ? void 0 : _squadService47.contacts.list(ctcs => {\n                setContacts(ctcs);\n                setRemovedContact(undefined);\n              });\n            }\n          });\n        }\n      });\n    }\n  }\n\n  function onUserPasswordChange() {\n    if (changedUserPassword) {\n      var _squadService48;\n\n      (_squadService48 = squadService) === null || _squadService48 === void 0 ? void 0 : _squadService48.user.changePassword(changedUserPassword, password => {\n        if (password) {\n          setChangedUserPassword({\n            oldPassword: \"\",\n            newPassword: \"\"\n          });\n        }\n      });\n    }\n  }\n\n  function onUserDataChange() {\n    if (changedUserData) {\n      var _squadService49;\n\n      (_squadService49 = squadService) === null || _squadService49 === void 0 ? void 0 : _squadService49.user.changeUserData(changedUserData, chgd => {\n        if (chgd) {\n          setUser({ ...user,\n            email: changedUserData.email,\n            name: changedUserData.name\n          });\n        }\n      });\n    }\n  }\n\n  function onNewFavorite() {\n    if (newFavorite) {\n      var _squadService50;\n\n      const newFavoriteLoad = { ...newFavorite\n      };\n      (_squadService50 = squadService) === null || _squadService50 === void 0 ? void 0 : _squadService50.contacts.setFavorite(newFavorite, favorite => {\n        if (favorite) {\n          setChats(chats.map(cht => {\n            if (cht.jid === newFavoriteLoad.jid) {\n              cht.favorite = !newFavoriteLoad.favorite;\n            }\n\n            return cht;\n          }));\n          setGroups(groups.map(grp => {\n            if (grp.jid === newFavoriteLoad.jid) {\n              return { ...grp,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return grp;\n          }));\n          setContacts(contacts.map(ctt => {\n            if (ctt.jid === newFavoriteLoad.jid) {\n              return { ...ctt,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return ctt;\n          }));\n        }\n      });\n      setNewFavorite(undefined);\n    }\n  }\n\n  function chatCommunicatorSubscribe(event, data) {\n    var _squadService51;\n\n    switch (event) {\n      case Events.ONLINE:\n        (_squadService51 = squadService) === null || _squadService51 === void 0 ? void 0 : _squadService51.chats.list(receivedChats => {\n          var _squadService52, _squadService54;\n\n          const chats = [];\n          receivedChats.forEach(cht => {\n            if (!chats.find(chat => chat.id === cht.id)) {\n              chats.push(cht);\n            }\n          });\n          setChats(chats); //populating groups\n\n          (_squadService52 = squadService) === null || _squadService52 === void 0 ? void 0 : _squadService52.groups.list(groups => {\n            var _squadService53, _squadService53$chat;\n\n            setGroups(groups); //Joining Groups Rooms in XMPP\n\n            (_squadService53 = squadService) === null || _squadService53 === void 0 ? void 0 : (_squadService53$chat = _squadService53.chat) === null || _squadService53$chat === void 0 ? void 0 : _squadService53$chat.joinGroups(groups.map(group => group.jid));\n          }); //populating contacts\n\n          (_squadService54 = squadService) === null || _squadService54 === void 0 ? void 0 : _squadService54.contacts.list(contacts => setContacts(contacts)); //populating conferences\n\n          setListRooms(true); //populating chat's with messages\n          // receivedChats.forEach((chat) => {\n          //   squadService?.messages.list(chat, (messages) => {\n          //     const chatWithMessages = { ...chat };\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\n          //       messages\n          //     );\n          //     setChats([\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\n          //       chatWithMessages,\n          //     ]);\n          //   });\n          // });\n        });\n        break;\n\n      case Events.MESSAGE:\n        if (data.fromUser === user.jid) break;\n        let find = false;\n        let newChats = [];\n        chats.forEach(chat => {\n          if (data.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || data.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\n            find = true;\n            if (!chat.messages.filter(msg => msg.id === data.id)[0]) chat.messages.push(data);\n\n            if (chat.id === activeChat.id) {\n              let chatTemporary = { ...chat\n              };\n              setActiveChat(chatTemporary);\n            } else {\n              chat.unRead++;\n            }\n\n            newChats.unshift(chat);\n          } else {\n            newChats.push(chat);\n          }\n        });\n\n        if (!find) {\n          var _squadService55;\n\n          let newChat = {};\n          (_squadService55 = squadService) === null || _squadService55 === void 0 ? void 0 : _squadService55.contacts.list(listContacts => {\n            listContacts.forEach(c => {\n              if (data.fromUser.split(\"@\")[0] === c.jid.split(\"@\")[0] || data.toUser.split(\"@\")[0] === c.jid.split(\"@\")[0]) {\n                if (c.jid === data.fromUser) {\n                  find = true;\n                  newChat = {\n                    id: c.id,\n                    jid: c.jid,\n                    name: c.name,\n                    profilePicture: c.profilePicture,\n                    status: c.status,\n                    unRead: 1,\n                    chatType: ChatType.USER,\n                    inputMessage: \"\",\n                    isTyping: false,\n                    messages: [],\n                    favorite: c.favorite,\n                    added: c.added\n                  };\n                  newChat.messages.push(data);\n                  newChats.unshift(newChat);\n                }\n              }\n            });\n          });\n        }\n\n        if (!find) {\n          var _squadService56;\n\n          let newChat = {};\n          (_squadService56 = squadService) === null || _squadService56 === void 0 ? void 0 : _squadService56.groups.list(listGroups => {\n            listGroups.forEach(g => {\n              if (data.fromUser.split(\"@\")[0] === g.jid.split(\"@\")[0] || data.toUser.split(\"@\")[0] === g.jid.split(\"@\")[0]) {\n                if (g.jid === data.fromUser) {\n                  find = true;\n                  newChat = {\n                    id: g.groupId,\n                    jid: g.jid,\n                    name: g.name,\n                    profilePicture: g.profilePicture,\n                    attachedFileList: undefined,\n                    conferenceRoomParticipants: undefined,\n                    department: undefined,\n                    email: undefined,\n                    groupId: g.groupId,\n                    members: g.members,\n                    messageLoaded: undefined,\n                    userDescription: undefined,\n                    status: undefined,\n                    unRead: 1,\n                    chatType: ChatType.GROUP,\n                    inputMessage: \"\",\n                    isTyping: false,\n                    messages: [],\n                    favorite: g.favorite,\n                    added: g.added\n                  };\n                  newChat.messages.push(data);\n                  newChats.unshift(newChat);\n                }\n              }\n            });\n          });\n        }\n\n        setChats(newChats);\n        break;\n\n      case Events.RECEIVED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.deliverStatus = DeliverStatus.DELIVERED;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.DISPLAYED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.readStatus = ReadStatus.READ;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.COMPOSING:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = true;\n            if (activeChat.jid === data) setActiveChat(chat);\n            deleteTypingTimeout(chat.jid);\n            setTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.ACTIVE:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = false;\n\n            if (activeChat.jid === data) {\n              let chatUpdate = { ...chat\n              };\n              setActiveChat(chatUpdate);\n            }\n\n            deleteTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.PRESENCE:\n        setChats(chats.map(cht => {\n          if (cht.jid && data.from) {\n            if (cht.jid === data.from.split(\"/\")[0] && !cht.jid.includes(\"@conference.\")) {\n              cht.status = data.status;\n            }\n          }\n\n          return cht;\n        }));\n        setContacts(contacts.map(ctc => {\n          if (ctc.jid && data.from) {\n            if (ctc.jid === data.from.split(\"/\")[0] && !ctc.jid.includes(\"@conference.\")) {\n              ctc.status = data.status;\n            }\n          }\n\n          return ctc;\n        }));\n        break;\n\n      case Events.SEND_EVENT:\n        const event = data;\n        let finded;\n        let newChat = [];\n        chats.forEach(chat => {\n          if (event.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || event.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\n            finded = true;\n            if (!chat.messages.filter(msg => msg.id === event.id)[0]) chat.messages.push(event);\n\n            if (chat.id === activeChat.id) {\n              let chatTemporary = { ...chat\n              };\n              setActiveChat(chatTemporary);\n            } else {\n              chat.unRead++;\n            }\n\n            newChat.unshift(chat);\n          } else {\n            newChat.push(chat);\n          }\n        });\n\n        if (!finded) {\n          groups.forEach(grp => {\n            if (event.fromUser.split(\"@\")[0] === grp.jid.split(\"@\")[0] || event.toUser.split(\"@\")[0] === grp.jid.split(\"@\")[0]) {\n              finded = true;\n              let groupToBeInserted = {\n                added: grp.added,\n                chatType: ChatType.GROUP,\n                favorite: grp.favorite,\n                id: grp.groupId,\n                inputMessage: \"\",\n                isTyping: false,\n                jid: grp.jid,\n                messages: [event],\n                name: grp.name,\n                unRead: 0,\n                attachedFileList: undefined,\n                department: undefined,\n                email: undefined,\n                groupId: grp.groupId,\n                members: grp.members,\n                messageLoaded: undefined,\n                profilePicture: grp.profilePicture,\n                status: undefined,\n                userDescription: grp.description\n              };\n              newChat.unshift(groupToBeInserted);\n              setActiveChat(groupToBeInserted);\n            }\n          });\n        }\n\n        if (!finded) {\n          var _squadService57;\n\n          (_squadService57 = squadService) === null || _squadService57 === void 0 ? void 0 : _squadService57.groups.list(grps => {\n            setGroups(grps);\n            grps.forEach(grp => {\n              if (event.fromUser.split(\"@\")[0] === grp.jid.split(\"@\")[0] || event.toUser.split(\"@\")[0] === grp.jid.split(\"@\")[0]) {\n                finded = true;\n                let groupToBeInserted = {\n                  added: grp.added,\n                  chatType: ChatType.GROUP,\n                  favorite: grp.favorite,\n                  id: grp.groupId,\n                  inputMessage: \"\",\n                  isTyping: false,\n                  jid: grp.jid,\n                  messages: [event],\n                  name: grp.name,\n                  unRead: 1,\n                  attachedFileList: undefined,\n                  department: undefined,\n                  email: undefined,\n                  groupId: grp.groupId,\n                  members: grp.members,\n                  messageLoaded: undefined,\n                  profilePicture: grp.profilePicture,\n                  status: undefined,\n                  userDescription: grp.description\n                };\n                newChat.unshift(groupToBeInserted);\n              }\n            });\n          });\n        }\n\n        setChats(newChat);\n\n        if (event.eventId === 6 || event.eventId === 2) {\n          refreshMembers(event);\n        }\n\n        break;\n    }\n  }\n\n  const refreshMembers = event => {\n    var _squadService58;\n\n    (_squadService58 = squadService) === null || _squadService58 === void 0 ? void 0 : _squadService58.groups.list(grps => {\n      setGroups(grps);\n      setChats(chats.map(chat => {\n        if (event.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || event.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\n          var _grps$find;\n\n          chat.members = (_grps$find = grps.find(grp => grp.groupId === chat.id)) === null || _grps$find === void 0 ? void 0 : _grps$find.members;\n\n          if (chat.id === activeChat.id) {\n            setActiveChat(chat);\n          }\n        }\n\n        return chat;\n      }));\n    });\n  };\n\n  const deleteTypingTimeout = jid => {\n    var _typingTimeout$get;\n\n    clearTimeout(((_typingTimeout$get = typingTimeout.get(jid)) === null || _typingTimeout$get === void 0 ? void 0 : _typingTimeout$get.timeout) || setTimeout(() => {}, 1));\n    typingTimeout.delete(jid);\n  };\n\n  const setTypingTimeout = jid => {\n    const timeoutData = {\n      msgStr: \"\",\n      timeout: setTimeout(() => {\n        setChats(chats.map(cht => {\n          if (cht.jid === jid) {\n            cht.isTyping = false;\n            if (activeChat.jid === jid) setActiveChat(cht);\n          }\n\n          return cht;\n        }));\n      }, 20000)\n    };\n    typingTimeout.set(jid, timeoutData);\n  };\n\n  (_squadService59 = squadService) === null || _squadService59 === void 0 ? void 0 : _squadService59.updateChatSubscribeFuncition(chatCommunicatorSubscribe); // Comentado para evitar warnings no console enquanto não é usado\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\n  //     squadService?.groups.list((groups) => {\n  //       setGroups(groups);\n  //       callback(true);\n  //     });\n  //   });\n  // }\n\n  function sendMessage(chat, message, callback) {\n    var _squadService60, _squadService60$chat;\n\n    (_squadService60 = squadService) === null || _squadService60 === void 0 ? void 0 : (_squadService60$chat = _squadService60.chat) === null || _squadService60$chat === void 0 ? void 0 : _squadService60$chat.chat.sendMessage(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message, callback);\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","DeliverStatus","XMPPChatType","getFileName","getUrlBooleans","isUrl","ReadStatus","useGroup","useContact","useModal","UserType","useConference","moment","ConferenceRoomParticipantType","PresenceStatus","DateTime","squadService","typingTimeout","Map","chats","setChats","activeChat","replyMsg","setReplyMsg","setActiveChat","forwardMessageList","setForwardMessageList","setShowChat","showChatProfileSidebar","contactsSearch","setContactsSearched","newFavorite","setNewFavorite","contacts","setContacts","setContactsOutsideUserContacts","toggleAddingContacts","setToggleAddingContacts","checkedContacts","setCheckedContacts","removedContact","setRemovedContact","checkedMembers","setCheckedMembers","groupToInsertMember","setGroupToInsertMember","clickedContact","setClickedContact","user","setUser","changedUserData","changedUserPassword","setChangedUserPassword","showModalForwardMessageTo","setShowModalForwardMessageTo","showModalAddContact","setGroups","groups","memberQuit","groupIdOfLeaveRequest","setGroupIdOfLeaveRequest","setMemberQuit","groupToRemoveContact","setGroupToRemoveContact","removedMember","setRemovedMember","toggleMemberRole","setToggleMemberRole","changeGroupData","setChangeGroupData","groupToCreate","setGroupToCreate","groupJid","setGroupJid","listRooms","setListRooms","setConferenceList","setCreateConference","createConference","init","localStorage","setItem","JSON","stringify","access_token","user_id","user_name","expires_in","email","baseUrl","getInstance","chatCommunicatorSubscribe","get","clearSendFile","chatId","messageId","map","chat","id","messages","message","deliverStatus","QUEUED","sendFile","undefined","onChatsChange","onActiveChatChange","checkSendMessage","checkAttachedFiles","checkNewContact","cht","added","add","success","jid","list","ctcs","attachedFileList","attachments","length","checkSearchMessages","messageLoaded","forEach","msg","find","m","unshift","getFileExtension","url","split","SENDING","files","sendFiles","data","updateMessageFiles","saveData","createdAt","local","src","fromUser","dst","fileExtension","fileName","fileUrl","kind","chatType","isForwardMessage","sendMessage","msgId","updateMessage","replyMsgCopy","newChat","booleans","time","Date","toISOString","isFileMessage","isImageMessage","isVideoMessage","isAudioMessage","filter","newChats","push","replyedMsg","isReplyMessage","replyedMessage","replyedMessageId","replyedMessageTo","getContacts","name","forwardMessage","chatsFinded","oldChats","ctc","i","userName","toUser","ctcsNotInChat","profilePicture","status","unRead","includes","GROUP","USER","inputMessage","isTyping","favorite","newMessage","onChangeStatus","client","changeStatus","onSearchContacts","search","searchList","onSearchContactsOutsideUserContacts","getContactsOutsideUserLists","onToggleSidebarMenu","onRemovingMember","group","grp","groupId","removeMember","members","mb","userId","sendEvent","onLeavingGroup","leftingGroup","memberId","sendPresence","UNAVAILABLE","onAddingMembers","asynchronousFlag","copiaCheckedMembers","copiaGroupToInsertMember","ctt","addMember","grps","foundedGroup","onAddingContacts","addContacts","onAddingContactOnGroupList","onToggleMemberRole","gp","gpId","mbId","mbRole","newRole","ADMIN","role","member","onChangeGroupData","editGroupInfo","groupName","description","createGroup","create","parsedGroup","onListRooms","conferences","joinGroups","conf","onCreateRoom","momentStartDate","startDate","startTime","momentFinalDate","duration","parsedConference","waitMod","mdCheck","startDatetime","format","stopDatetime","createdConference","participantList","selectedContact","userUuid","type","PARTICIPANT","userModerator","emailList","participant","PARTICIPANT_EXTERNAL","addParticipants","s","onNewFavorite","onUserDataChange","onUserPasswordChange","onRemovingContact","remove","changePassword","password","oldPassword","newPassword","changeUserData","chgd","newFavoriteLoad","setFavorite","event","ONLINE","receivedChats","MESSAGE","chatTemporary","listContacts","c","listGroups","g","conferenceRoomParticipants","department","userDescription","RECEIVED","DELIVERED","DISPLAYED","readStatus","READ","COMPOSING","deleteTypingTimeout","setTypingTimeout","ACTIVE","chatUpdate","PRESENCE","from","SEND_EVENT","finded","groupToBeInserted","eventId","refreshMembers","clearTimeout","timeout","setTimeout","delete","timeoutData","msgStr","set","updateChatSubscribeFuncition","callback","GROUPCHAT","CHAT"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\nimport { Events, SendImageCallbackReturn } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\r\nimport { SendMessageCallback } from \"./types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport { useModal } from \"../contexts/ModalContext\";\r\nimport IContact from \"../alias/IContact\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport UserType from \"../enuns/UserType\";\r\nimport { useConference } from \"../contexts/ConferenceContext\";\r\nimport moment from \"moment\";\r\nimport { ConferenceRoomParticipantType } from \"./business/Conferences\";\r\nimport { ConferenceRoomParticipant } from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport PresenceStatus from \"../enuns/PresenceStatus\";\r\nimport { DateTime } from 'luxon'\r\nimport { getMessagFileUrl } from \"./chat/util/stanzaUtils\";\r\n\r\n//import { callbackify } from \"util\";\r\n\r\n// import IContact from \"../alias/IContact\";\r\n//Comentar para Evitar Warnings no console\r\ninterface CreateGroupCallback {\r\n  (success: boolean): void;\r\n}\r\ninterface TypingTimeoutData {\r\n  timeout: NodeJS.Timeout;\r\n  msgStr: string;\r\n}\r\nlet squadService: SquadService | undefined;\r\nlet typingTimeout: Map<string, TypingTimeoutData> = new Map<\r\n  string,\r\n  TypingTimeoutData\r\n>();\r\n\r\nconst SquadCommunicator: React.FC = () => {\r\n  const {\r\n    chats,\r\n    setChats,\r\n    activeChat,\r\n    replyMsg,\r\n    setReplyMsg,\r\n    setActiveChat,\r\n    forwardMessageList,\r\n    setForwardMessageList,\r\n    setShowChat,\r\n    showChatProfileSidebar,\r\n  } = useChat();\r\n  const {\r\n    contactsSearch,\r\n    setContactsSearched,\r\n    newFavorite,\r\n    setNewFavorite,\r\n    contacts,\r\n    setContacts,\r\n    setContactsOutsideUserContacts,\r\n    toggleAddingContacts,\r\n    setToggleAddingContacts,\r\n    checkedContacts,\r\n    setCheckedContacts,\r\n    removedContact,\r\n    setRemovedContact,\r\n    checkedMembers,\r\n    setCheckedMembers,\r\n    groupToInsertMember,\r\n    setGroupToInsertMember,\r\n    clickedContact,\r\n    setClickedContact,\r\n  } = useContact();\r\n  const {\r\n    user,\r\n    setUser,\r\n    changedUserData,\r\n    changedUserPassword,\r\n    setChangedUserPassword,\r\n  } = useAuth();\r\n  const {\r\n    showModalForwardMessageTo,\r\n    setShowModalForwardMessageTo,\r\n    showModalAddContact,\r\n  } = useModal();\r\n\r\n  const {\r\n    setGroups,\r\n    groups,\r\n    memberQuit,\r\n    groupIdOfLeaveRequest,\r\n    setGroupIdOfLeaveRequest,\r\n    setMemberQuit,\r\n    groupToRemoveContact,\r\n    setGroupToRemoveContact,\r\n    removedMember,\r\n    setRemovedMember,\r\n    toggleMemberRole,\r\n    setToggleMemberRole,\r\n    changeGroupData,\r\n    setChangeGroupData,\r\n    groupToCreate,\r\n    setGroupToCreate,\r\n    groupJid,\r\n    setGroupJid\r\n  } = useGroup();\r\n  const {\r\n    listRooms,\r\n    setListRooms,\r\n    setConferenceList,\r\n    setCreateConference,\r\n    createConference,\r\n  } = useConference();\r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"71e1503a96d94e1e231444bc5c0399ca\",\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        user_name: \"ZZ Romero 2\",\r\n        expires_in: 2592000,\r\n        email: \"romero2@digivox.com.br\",\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n      })\r\n    );\r\n    squadService = SquadService.getInstance({\r\n      chatCommunicatorSubscribe: chatCommunicatorSubscribe,\r\n    });\r\n    squadService?.user.get((user: IUser) => {\r\n      setUser(user);\r\n    });\r\n  };\r\n\r\n  const clearSendFile = (chatId: string, messageId: string) => {\r\n    setChats(\r\n      chats.map((chat) => {\r\n        if (chat.id === chatId) {\r\n          chat.messages = chat.messages.map((message) => {\r\n            if (message.id === messageId) {\r\n              message.deliverStatus = DeliverStatus.QUEUED;\r\n              message.sendFile = undefined;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return chat;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onChatsChange = () => {\r\n    // chats.forEach((chat) => {\r\n    // });\r\n  };\r\n  const onActiveChatChange = () => {\r\n    checkSendMessage(activeChat);\r\n    checkAttachedFiles(activeChat);\r\n    checkNewContact(activeChat);\r\n    // checkTyping(activeChat)\r\n  };\r\n  // const checkTyping = (chat: IChat) => {\r\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\r\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\r\n  //     if (oldTimeoutData)\r\n  //       clearTimeout(oldTimeoutData.timeout)\r\n  //     else\r\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\r\n  //     const timeoutData = {\r\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\r\n  //       msgStr: `${chat.inputMessage}`\r\n  //     }\r\n  //     typingTimeout.set(chat.jid, timeoutData)\r\n  //   }\r\n  // }\r\n  const checkNewContact = (cht: IChat) => {\r\n    if (!cht.added) {\r\n      squadService?.contacts.add(cht, (success: boolean) => {\r\n        if (success) {\r\n          setChats(\r\n            chats.map((chat) => {\r\n              if (chat.jid === cht.jid) {\r\n                chat.added = true;\r\n              }\r\n              if (activeChat.jid === chat.jid) setActiveChat(chat);\r\n              return chat;\r\n            })\r\n          );\r\n          squadService?.contacts.list((ctcs) => {\r\n            setContacts(ctcs);\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkAttachedFiles = (cht: IChat) => {\r\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\r\n      squadService?.attachments.list(cht, (attachments) => {\r\n        if (attachments.length > 0){\r\n          setActiveChat({ ...cht, attachedFileList: attachments });\r\n        }\r\n        else setActiveChat({ ...cht, attachedFileList: null });\r\n      });\r\n    }\r\n  };\r\n\r\n  /* getMessageUserProfilePicture = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.profilePicture;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])\r\n        ?.profilePicture;\r\n    }\r\n  }; */\r\n\r\n  const checkSearchMessages = () => {\r\n    if (activeChat.messageLoaded) {\r\n      squadService?.messages.list(activeChat, (messages) => {\r\n        if (messages.length) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.id === activeChat.id) {\r\n                messages.forEach((msg) => {\r\n                  if (!activeChat.messages.find((m) => m.id === msg.id))\r\n                    cht.messages.unshift(msg);\r\n                });\r\n                cht.messageLoaded = false;\r\n                setActiveChat(cht);\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n        } else {\r\n          const chat = { ...activeChat, messageLoaded: false };\r\n          setActiveChat(chat);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const getFileExtension = (url: string) => {\r\n    return url.split('.')[1];\r\n  }\r\n\r\n  const checkSendMessage = (chat: IChat) => {\r\n    chat.messages.forEach((msg) => {\r\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\r\n        if (msg.sendFile && !replyMsg) {\r\n          const files = [msg.sendFile];\r\n          clearSendFile(chat.id, msg.id);\r\n          squadService?.chat?.sendFiles(\r\n            chat,\r\n            files,\r\n            (data: SendImageCallbackReturn) => {\r\n              updateMessageFiles(data, chat, msg);\r\n              squadService?.attachments.saveData({\r\n                createdAt: JSON.stringify(DateTime.local()),\r\n                src: msg.fromUser,\r\n                dst: chat.jid,\r\n                fileExtension: getFileExtension(data.url),\r\n                fileName: getFileName(data.url),\r\n                fileUrl: data.url,\r\n                kind: chat.chatType,\r\n              }, () => true)\r\n            }\r\n          );\r\n        } else {\r\n          if (!msg.isForwardMessage && !replyMsg) {\r\n            sendMessage(chat, msg.message, (msgId) =>\r\n              updateMessage(msgId, chat, msg)\r\n            );\r\n          } else if (replyMsg) {\r\n            const replyMsgCopy = { ...replyMsg };\r\n            setReplyMsg(undefined);\r\n            squadService?.chat?.replyMsg(chat, msg, replyMsgCopy, (msgId) => {\r\n              updateMessage(msgId, chat, msg, replyMsgCopy);\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const updateMessageFiles = (\r\n    data: SendImageCallbackReturn,\r\n    chat: IChat,\r\n    msg: IMessage\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        const booleans = getUrlBooleans(data.url);\r\n        message.id = data.msgId;\r\n        message.fileUrl = data.url;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        message.message = getFileName(data.url);\r\n        message.isFileMessage = booleans.isFileMessage;\r\n        message.isImageMessage = booleans.isImageMessage;\r\n        message.isVideoMessage = booleans.isVideoMessage;\r\n        message.isAudioMessage = booleans.isAudioMessage;\r\n      }\r\n      return message;\r\n    });\r\n    setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      const newChats: IChat[] = [];\r\n      chats.forEach((cht) => {\r\n        if (cht.id === chat.id) {\r\n          cht.messages = newChat.messages;\r\n          newChats.unshift(cht);\r\n        } else {\r\n          newChats.push(cht);\r\n        }\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const updateMessage = (\r\n    msgId: string,\r\n    chat: IChat,\r\n    msg: IMessage,\r\n    replyedMsg: IMessage | undefined = undefined\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        message.id = msgId;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        if (replyedMsg) {\r\n          message.isReplyMessage = true;\r\n          message.replyedMessage = replyedMsg.message || replyedMsg.fileUrl;\r\n          message.replyedMessageId = replyedMsg.id;\r\n          message.replyedMessageTo =\r\n            squadService?.contacts\r\n              .getContacts()\r\n              .get(replyedMsg.fromUser.split(\"@\")[0])?.name ||\r\n            squadService?.user?.user?.id === replyedMsg.fromUser.split(\"@\")[0]\r\n              ? squadService?.user?.user?.name\r\n              : \"Participant\";\r\n        }\r\n        if (isUrl(message.message)) {\r\n          const booleans = getUrlBooleans(message.message);\r\n          message.isFileMessage = booleans.isFileMessage;\r\n          message.isImageMessage = booleans.isImageMessage;\r\n          message.isAudioMessage = booleans.isAudioMessage;\r\n          message.isVideoMessage = booleans.isVideoMessage;\r\n          message.fileUrl = message.message;\r\n        }\r\n      }\r\n      return message;\r\n    });\r\n    if (activeChat.jid === newChat.jid) setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      const newChats: IChat[] = [];\r\n      chats.forEach((cht) => {\r\n        if (cht.id === chat.id) {\r\n          cht.messages = newChat.messages;\r\n          newChats.unshift(cht);\r\n        } else {\r\n          newChats.push(cht);\r\n        }\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const forwardMessage = () => {\r\n    if (forwardMessageList && showModalForwardMessageTo) {\r\n      const ctcs = [...forwardMessageList];\r\n      const message = { ...showModalForwardMessageTo };\r\n      setForwardMessageList(undefined);\r\n      setShowModalForwardMessageTo(undefined);\r\n      const chatsFinded: IChat[] = [];\r\n      const oldChats = [\r\n        ...chats.map((chat) => {\r\n          return { ...chat };\r\n        }),\r\n      ];\r\n      ctcs?.forEach((ctc, i) => {\r\n        const cht = oldChats.find((cht) => cht.jid === ctc.jid);\r\n        if (cht) {\r\n          const msg = {\r\n            ...message,\r\n            id: `${cht.messages.length + 1}`,\r\n            userName: user.name,\r\n            fromUser: user.id,\r\n            toUser: ctc.jid.split(\"@\")[0],\r\n            message: message.fileUrl || message.message,\r\n            deliverStatus: DeliverStatus.QUEUED,\r\n            isForwardMessage: true,\r\n          };\r\n          squadService?.chat?.forwardMessage(cht, msg, (msgId) => {\r\n            msg.id = msgId;\r\n            cht.messages.push(msg);\r\n            chatsFinded.push(cht);\r\n          });\r\n        }\r\n      });\r\n      const newChats = oldChats.map(\r\n        (chat) => chatsFinded.find((cht) => cht.id === chat.id) || chat\r\n      );\r\n      const ctcsNotInChat: (IContact | IGroup)[] = ctcs.filter(\r\n        (ctc) => !newChats.find((cht) => ctc.jid === cht.jid)\r\n      );\r\n      ctcsNotInChat.forEach((ctc, i) => {\r\n        const chat = {\r\n          id: ctc.jid.split(\"@\")[0],\r\n          jid: ctc.jid,\r\n          name: ctc.name,\r\n          profilePicture: ctc.profilePicture,\r\n          status: (ctc as IContact).status || undefined,\r\n          unRead: 0,\r\n          chatType: ctc.jid.includes(\"@conference.\")\r\n            ? ChatType.GROUP\r\n            : ChatType.USER,\r\n          inputMessage: \"\",\r\n          messageLoaded: false,\r\n          isTyping: false,\r\n          messages: [] as IMessage[],\r\n          email: (ctc as IContact).email || undefined,\r\n          favorite: ctc.favorite,\r\n          added: ctc.added,\r\n        };\r\n        const newMessage: IMessage = {\r\n          ...message,\r\n          id: `${1}`,\r\n          userName: user.name,\r\n          fromUser: user.id,\r\n          toUser: ctc.jid.split(\"@\")[0],\r\n          deliverStatus: DeliverStatus.QUEUED,\r\n          isForwardMessage: true,\r\n        };\r\n        squadService?.chat?.forwardMessage(chat, newMessage, (msgId) => {\r\n          newMessage.id = msgId;\r\n          chat.messages.push(newMessage);\r\n          newChats.unshift(chat);\r\n        });\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const onChangeStatus = () => {\r\n    if (squadService?.chat?.chat?.client?.status === \"online\") {\r\n      squadService?.chat?.changeStatus(user.status);\r\n    }\r\n  };\r\n  const onSearchContacts = () => {\r\n    if (contactsSearch.length > 2) {\r\n      squadService?.contacts.search(contactsSearch, (searchList) => {\r\n        setContactsSearched(searchList);\r\n      });\r\n    } else {\r\n      setContactsSearched(undefined);\r\n    }\r\n  };\r\n\r\n  const onSearchContactsOutsideUserContacts = () => {\r\n    squadService?.contacts.getContactsOutsideUserLists((contacts) => {\r\n      if (contacts) {\r\n        setContactsOutsideUserContacts(contacts);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onToggleSidebarMenu = () => {\r\n    squadService?.contacts.getContactsOutsideUserLists((contacts) => {\r\n      if (contacts) {\r\n        setContactsOutsideUserContacts(contacts);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onRemovingMember = () => {\r\n    if (removedMember && groupToRemoveContact) {\r\n      let group = groups.find((grp) => grp.groupId === groupToRemoveContact);\r\n      if (group)\r\n        squadService?.groups.removeMember(\r\n          group.groupId,\r\n          removedMember,\r\n          (success: boolean) => {\r\n            if (success) {\r\n              setGroups(\r\n                groups.map((grp) => {\r\n                  if (grp.groupId === group?.groupId)\r\n                    grp.members = grp.members.filter(\r\n                      (mb) => mb.userId !== removedMember.userId\r\n                    );\r\n                  return grp;\r\n                })\r\n              );\r\n              setChats(\r\n                chats.map((cht) => {\r\n                  if (cht.groupId === group?.groupId) {\r\n                    cht.members = cht.members?.filter(\r\n                      (mb) => mb.userId !== removedMember.userId\r\n                    );\r\n                    if (cht.groupId === activeChat.groupId) setActiveChat(cht);\r\n                  }\r\n                  return cht;\r\n                })\r\n              );\r\n              if (group) {\r\n                squadService?.chat?.chat.sendEvent(\r\n                  group?.jid,\r\n                  removedMember.userId,\r\n                  \"6\"\r\n                );\r\n              }\r\n              setRemovedMember(undefined);\r\n              setGroupToRemoveContact(undefined);\r\n            }\r\n          }\r\n        );\r\n    }\r\n  };\r\n\r\n  const onLeavingGroup = () => {\r\n    if (memberQuit && groupIdOfLeaveRequest && groupJid) {\r\n      squadService?.groups.leftingGroup(\r\n        { groupId: groupIdOfLeaveRequest, memberId: memberQuit.userId },\r\n        (success: boolean) => { \r\n          if (success) {\r\n            squadService?.chat?.chat.sendPresence(PresenceStatus.UNAVAILABLE, `${groupJid}/${memberQuit.userId}`);  \r\n            squadService?.chat?.chat.sendEvent(\r\n              groupIdOfLeaveRequest,\r\n              memberQuit.userId,\r\n              \"3\",\r\n              undefined\r\n              );\r\n            setChats(\r\n              chats.filter((cht) => cht.groupId !== groupIdOfLeaveRequest)\r\n            );\r\n            setGroups(\r\n              groups.filter((grp) => grp.groupId !== groupIdOfLeaveRequest)\r\n            );\r\n              if (activeChat.groupId === groupIdOfLeaveRequest) {\r\n                setShowChat(false);\r\n              }\r\n            }\r\n            setGroupJid(undefined);\r\n            setMemberQuit(undefined);\r\n            setGroupIdOfLeaveRequest(\"\");\r\n          }\r\n          \r\n      );\r\n    }\r\n  };\r\n\r\n  const onAddingMembers = () => {\r\n    let asynchronousFlag = 0;\r\n    if (checkedMembers && groupToInsertMember) {\r\n      let copiaCheckedMembers = [...checkedMembers],\r\n        copiaGroupToInsertMember = { ...groupToInsertMember };\r\n      copiaCheckedMembers.forEach((ctt) => {\r\n        squadService?.groups.addMember(\r\n          copiaGroupToInsertMember,\r\n          ctt,\r\n          (success: boolean) => {\r\n            if (success) {\r\n              squadService?.chat?.chat.sendEvent(\r\n                copiaGroupToInsertMember.jid,\r\n                ctt.id,\r\n                \"2\"\r\n              );\r\n              asynchronousFlag++;\r\n\r\n              if (copiaCheckedMembers.length === asynchronousFlag) {\r\n                squadService?.groups.list((grps) => {\r\n                  setGroups(grps);\r\n                  setChats(\r\n                    chats.map((cht) => {\r\n                      if (cht.groupId === copiaGroupToInsertMember.groupId) {\r\n                        let foundedGroup = grps.find(\r\n                          (grp) => grp.groupId === cht.groupId\r\n                        );\r\n                        cht.members = foundedGroup?.members;\r\n                        if (activeChat.groupId === cht.groupId) {\r\n                          activeChat.members = foundedGroup?.members;\r\n                          setActiveChat(activeChat);\r\n                        }\r\n                      }\r\n                      return cht;\r\n                    })\r\n                  );\r\n                });\r\n              }\r\n            }\r\n          }\r\n        );\r\n      });\r\n      setCheckedMembers([]);\r\n      setToggleAddingContacts(false);\r\n      setGroupToInsertMember(undefined);\r\n    }\r\n  };\r\n\r\n  const onAddingContacts = () => {\r\n    let asynchronousFlag = 0;\r\n    if (checkedContacts && toggleAddingContacts) {\r\n      checkedContacts.forEach((ctt) => {\r\n        if (!ctt.added) {\r\n          squadService?.contacts.addContacts(ctt, (success: boolean) => {\r\n            if (success) {\r\n              asynchronousFlag++;\r\n              if (checkedContacts.length === asynchronousFlag) {\r\n                squadService?.contacts.list((contacts) => {\r\n                  setContacts(contacts);\r\n                  setCheckedContacts([]);\r\n                  setToggleAddingContacts(false);\r\n                });\r\n              }\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const onAddingContactOnGroupList = () => {\r\n    if (clickedContact) {\r\n      if (!clickedContact.added) {\r\n        squadService?.contacts.addContacts(\r\n          clickedContact,\r\n          (success: boolean) => {\r\n            if (success) {\r\n              squadService?.contacts.list((contacts) => {\r\n                setContacts(contacts);\r\n                setClickedContact(undefined);\r\n              });\r\n            }\r\n          }\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const onToggleMemberRole = () => {\r\n    if (toggleMemberRole) {\r\n      squadService?.groups.list((grps) => {\r\n        grps.forEach((gp) => {\r\n          if (gp.groupId === toggleMemberRole.gpId) {\r\n            gp.members.forEach((mb) => {\r\n              if (mb.userId === toggleMemberRole.mbId) {\r\n                squadService?.contacts.toggleMemberRole(\r\n                  toggleMemberRole.mbId,\r\n                  toggleMemberRole.gpId,\r\n                  toggleMemberRole.mbRole,\r\n                  (success: boolean) => {\r\n                    if (success) {\r\n                      const newRole =\r\n                        toggleMemberRole.mbRole === UserType.USER\r\n                          ? UserType.ADMIN\r\n                          : UserType.USER;\r\n                      setToggleMemberRole(undefined);\r\n                      setChats(\r\n                        chats.map((cht) => {\r\n                          if (cht.groupId === toggleMemberRole.gpId) {\r\n                            cht.members = cht.members?.map((mb) => {\r\n                              if (mb.userId === toggleMemberRole.mbId) {\r\n                                mb.role = newRole;\r\n                                if (cht.groupId) {\r\n                                  if (mb.role === UserType.ADMIN) {\r\n                                    squadService?.chat?.chat.sendEvent(\r\n                                      cht.groupId,\r\n                                      mb.userId,\r\n                                      \"8\"\r\n                                    );\r\n                                  } else {\r\n                                    squadService?.chat?.chat.sendEvent(\r\n                                      cht.groupId,\r\n                                      mb.userId,\r\n                                      \"9\"\r\n                                    );\r\n                                  }\r\n                                }\r\n                              }\r\n                              return mb;\r\n                            });\r\n                            if (activeChat.groupId === cht.groupId)\r\n                              setActiveChat(cht);\r\n                          }\r\n                          return cht;\r\n                        })\r\n                      );\r\n                      setGroups(\r\n                        groups.map((grp) => {\r\n                          if (grp.groupId === toggleMemberRole.gpId) {\r\n                            grp.members = grp.members.map((member) => {\r\n                              if (member.userId === toggleMemberRole.mbId)\r\n                                member.role = newRole;\r\n                              return member;\r\n                            });\r\n                          }\r\n                          return grp;\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                );\r\n              }\r\n            });\r\n          }\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const onChangeGroupData = () => {\r\n    if (changeGroupData) {\r\n      squadService?.groups.editGroupInfo(\r\n        {\r\n          groupId: changeGroupData.groupId as string,\r\n          groupName: changeGroupData.groupName,\r\n          members: changeGroupData.members,\r\n          description: changeGroupData.description,\r\n        },\r\n        (success: boolean) => {\r\n          if (success) {\r\n            squadService?.groups.list((grps) => {\r\n              let foundedGroup = grps.find(\r\n                (grp) => grp.groupId === changeGroupData.groupId\r\n              );\r\n              setGroups(grps);\r\n              setChats(\r\n                chats.map((cht) => {\r\n                  if (cht.groupId === changeGroupData.groupId) {\r\n                    if (foundedGroup?.name) {\r\n                      cht.name = foundedGroup.name;\r\n                    }\r\n                    if (activeChat.groupId === cht.groupId) {\r\n                      if (foundedGroup?.name) {\r\n                        cht.name = foundedGroup?.name;\r\n                      }\r\n                      setActiveChat(cht);\r\n                    }\r\n                  }\r\n                  return cht;\r\n                })\r\n              );\r\n              squadService?.chat?.chat.sendEvent(\r\n                foundedGroup?.jid as string,\r\n                undefined,\r\n                \"10\",\r\n                undefined\r\n              );\r\n              setChangeGroupData(undefined);\r\n            });\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const createGroup = () => {\r\n    squadService?.groups.create(groupToCreate, (parsedGroup) => {\r\n      if (parsedGroup) {\r\n        squadService?.chat?.chat.sendEvent(\r\n          parsedGroup.jid,\r\n          parsedGroup.jid,\r\n          \"1\"\r\n        );\r\n        squadService?.groups.list((groups) => {\r\n          setGroups(groups);\r\n          setGroupToCreate(undefined);\r\n        });\r\n        squadService?.chat?.chat.sendEvent(\r\n          parsedGroup.jid,\r\n          undefined,\r\n          \"1\",\r\n          undefined\r\n        );\r\n      }\r\n    });\r\n  };\r\n  const onListRooms = () => {\r\n    if (listRooms) {\r\n      squadService?.conferences.list((conferences) => {\r\n        setConferenceList(conferences);\r\n        squadService?.chat?.joinGroups(conferences.map((conf) => conf.jid));\r\n      });\r\n      setListRooms(false);\r\n    }\r\n  };\r\n  const onCreateRoom = () => {\r\n    if (createConference) {\r\n      const momentStartDate = moment(\r\n        `${createConference.startDate} ${createConference.startTime}:00`\r\n      );\r\n      const momentFinalDate = moment(momentStartDate)\r\n        .add(createConference.duration.split(\":\")[0], \"hours\")\r\n        .add(createConference.duration.split(\":\")[1], \"minutes\");\r\n      const parsedConference = {\r\n        name: createConference.name,\r\n        waitMod: createConference.mdCheck,\r\n        startDatetime: `${momentStartDate.format(\"DD-MM-YYYY hh:mm:ss\")}`,\r\n        stopDatetime: `${momentFinalDate.format(\"DD-MM-YYYY hh:mm:ss\")}`,\r\n      };\r\n      squadService?.conferences.create(\r\n        parsedConference,\r\n        (createdConference) => {\r\n          const participantList: ConferenceRoomParticipant[] = [];\r\n          if (createdConference?.id) {\r\n            createConference.selectedContact?.forEach((ctc) => {\r\n              participantList.push({\r\n                userUuid: ctc.id,\r\n                description: \"\",\r\n                email: ctc.email,\r\n                name: ctc.name,\r\n                type: ConferenceRoomParticipantType.PARTICIPANT,\r\n                userModerator: false,\r\n              });\r\n            });\r\n            createConference.emailList?.forEach((participant) => {\r\n              participantList.push({\r\n                userUuid: null,\r\n                description: \"\",\r\n                email: participant.email,\r\n                name: participant.name,\r\n                type: ConferenceRoomParticipantType.PARTICIPANT_EXTERNAL,\r\n                userModerator: false,\r\n              });\r\n            });\r\n            squadService?.conferences.addParticipants(\r\n              createdConference.id,\r\n              participantList,\r\n              (s) => {\r\n                if (s) {\r\n                  setCreateConference(undefined);\r\n                  setListRooms(true);\r\n                }\r\n              }\r\n            );\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n  useEffect(onChatsChange, [chats]);\r\n  useEffect(onNewFavorite, [newFavorite]);\r\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\r\n  useEffect(onActiveChatChange, [activeChat]);\r\n  useEffect(onUserDataChange, [changedUserData]);\r\n  useEffect(onUserPasswordChange, [changedUserPassword]);\r\n  useEffect(onChangeStatus, [user.status]);\r\n  useEffect(forwardMessage, [forwardMessageList]);\r\n  useEffect(onSearchContacts, [contactsSearch]);\r\n  useEffect(onSearchContactsOutsideUserContacts, [showModalAddContact]);\r\n  useEffect(onAddingContacts, [toggleAddingContacts]);\r\n  useEffect(onRemovingMember, [removedMember, groupToRemoveContact]);\r\n  useEffect(onLeavingGroup, [memberQuit, groupIdOfLeaveRequest, groupJid]);\r\n  useEffect(onRemovingContact, [removedContact]);\r\n  useEffect(onAddingMembers, [groupToInsertMember, checkedMembers]);\r\n  useEffect(onToggleMemberRole, [toggleMemberRole]);\r\n  useEffect(onChangeGroupData, [changeGroupData]);\r\n  useEffect(onAddingContactOnGroupList, [clickedContact]);\r\n  useEffect(createGroup, [groupToCreate]);\r\n  useEffect(onToggleSidebarMenu, [showChatProfileSidebar]);\r\n  useEffect(onListRooms, [listRooms]);\r\n  useEffect(onCreateRoom, [createConference]);\r\n\r\n  function onRemovingContact() {\r\n    if (removedContact) {\r\n      contacts.forEach((ctc) => {\r\n        if (ctc.id === removedContact.id) {\r\n          if (ctc.added)\r\n            squadService?.contacts.remove(ctc, (success: boolean) => {\r\n              if (success) {\r\n                squadService?.contacts.list((ctcs) => {\r\n                  setContacts(ctcs);\r\n                  setRemovedContact(undefined);\r\n                });\r\n              }\r\n            });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onUserPasswordChange() {\r\n    if (changedUserPassword) {\r\n      squadService?.user.changePassword(changedUserPassword, (password) => {\r\n        if (password) {\r\n          setChangedUserPassword({ oldPassword: \"\", newPassword: \"\" });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onUserDataChange() {\r\n    if (changedUserData) {\r\n      squadService?.user.changeUserData(changedUserData, (chgd) => {\r\n        if (chgd) {\r\n          setUser({\r\n            ...user,\r\n            email: changedUserData.email,\r\n            name: changedUserData.name,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onNewFavorite() {\r\n    if (newFavorite) {\r\n      const newFavoriteLoad = { ...newFavorite };\r\n      squadService?.contacts.setFavorite(newFavorite, (favorite) => {\r\n        if (favorite) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.jid === newFavoriteLoad.jid) {\r\n                cht.favorite = !newFavoriteLoad.favorite;\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n          setGroups(\r\n            groups.map((grp) => {\r\n              if (grp.jid === newFavoriteLoad.jid) {\r\n                return {\r\n                  ...grp,\r\n                  favorite: !newFavoriteLoad.favorite,\r\n                };\r\n              }\r\n              return grp;\r\n            })\r\n          );\r\n          setContacts(\r\n            contacts.map((ctt) => {\r\n              if (ctt.jid === newFavoriteLoad.jid) {\r\n                return {\r\n                  ...ctt,\r\n                  favorite: !newFavoriteLoad.favorite,\r\n                };\r\n              }\r\n              return ctt;\r\n            })\r\n          );\r\n        }\r\n      });\r\n      setNewFavorite(undefined);\r\n    }\r\n  }\r\n  function chatCommunicatorSubscribe(event: string, data: any) {\r\n    switch (event) {\r\n      case Events.ONLINE:\r\n        squadService?.chats.list((receivedChats) => {\r\n          const chats: IChat[] = [];\r\n          receivedChats.forEach((cht) => {\r\n            if (!chats.find((chat) => chat.id === cht.id)) {\r\n              chats.push(cht);\r\n            }\r\n          });\r\n          setChats(chats);\r\n          //populating groups\r\n          squadService?.groups.list((groups) => {\r\n            setGroups(groups);\r\n            //Joining Groups Rooms in XMPP\r\n            squadService?.chat?.joinGroups(groups.map((group) => group.jid));\r\n          });\r\n          //populating contacts\r\n          squadService?.contacts.list((contacts) => setContacts(contacts));\r\n\r\n          //populating conferences\r\n          setListRooms(true);\r\n          //populating chat's with messages\r\n\r\n          // receivedChats.forEach((chat) => {\r\n          //   squadService?.messages.list(chat, (messages) => {\r\n          //     const chatWithMessages = { ...chat };\r\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\r\n          //       messages\r\n          //     );\r\n          //     setChats([\r\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n          //       chatWithMessages,\r\n          //     ]);\r\n          //   });\r\n          // });\r\n        });\r\n        break;\r\n      case Events.MESSAGE:\r\n        if (data.fromUser === user.jid) break;\r\n        let find = false;\r\n\r\n        let newChats: IChat[] = [];\r\n        chats.forEach((chat) => {\r\n          if (\r\n            data.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] ||\r\n            data.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]\r\n          ) {\r\n            find = true;\r\n            if (!chat.messages.filter((msg) => msg.id === data.id)[0])\r\n              chat.messages.push(data);\r\n            if (chat.id === activeChat.id) {\r\n              let chatTemporary = { ...chat };\r\n              setActiveChat(chatTemporary);\r\n            } else {\r\n              chat.unRead++;\r\n            }\r\n            newChats.unshift(chat);\r\n          } else {\r\n            newChats.push(chat);\r\n          }\r\n        });\r\n\r\n        if (!find) {\r\n          \r\n          let newChat: IChat = {} as IChat;\r\n          squadService?.contacts.list((listContacts) => {\r\n            listContacts.forEach((c) => {\r\n            if (\r\n              data.fromUser.split(\"@\")[0] === c.jid.split(\"@\")[0] ||\r\n              data.toUser.split(\"@\")[0] === c.jid.split(\"@\")[0]\r\n            ){\r\n              if (c.jid === data.fromUser) {\r\n                find = true;\r\n                newChat = {\r\n                  id: c.id,\r\n                  jid: c.jid,\r\n                  name: c.name,\r\n                  profilePicture: c.profilePicture,\r\n                  status: c.status,\r\n                  unRead: 1,\r\n                  chatType: ChatType.USER,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  messages: [],\r\n                  favorite: c.favorite,\r\n                  added: c.added,\r\n                };\r\n                newChat.messages.push(data);\r\n                newChats.unshift(newChat);\r\n              }\r\n            }\r\n            });\r\n          });\r\n        }\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.groups.list((listGroups) => {\r\n            listGroups.forEach((g) => {\r\n              if (\r\n                data.fromUser.split(\"@\")[0] === g.jid.split(\"@\")[0] ||\r\n                data.toUser.split(\"@\")[0] === g.jid.split(\"@\")[0]\r\n              ){\r\n              if (g.jid === data.fromUser) {\r\n                find = true;\r\n                newChat = {\r\n                  id: g.groupId,\r\n                  jid: g.jid,\r\n                  name: g.name,\r\n                  profilePicture: g.profilePicture,\r\n                  attachedFileList: undefined,\r\n                  conferenceRoomParticipants: undefined,\r\n                  department: undefined,\r\n                  email: undefined,\r\n                  groupId: g.groupId,\r\n                  members: g.members,\r\n                  messageLoaded: undefined,\r\n                  userDescription: undefined,\r\n                  status: undefined,\r\n                  unRead: 1,\r\n                  chatType: ChatType.GROUP,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  messages: [],\r\n                  favorite: g.favorite,\r\n                  added: g.added,\r\n                };\r\n                newChat.messages.push(data);\r\n                newChats.unshift(newChat);\r\n              }\r\n            }\r\n            });\r\n          });\r\n        }\r\n\r\n        setChats(newChats);\r\n\r\n        break;\r\n      case Events.RECEIVED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.messages.find((msg) => msg.id === data.id))\r\n              chat.messages = chat.messages.map((message) => {\r\n                message.deliverStatus = DeliverStatus.DELIVERED;\r\n                return message;\r\n              });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.DISPLAYED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.messages.find((msg) => msg.id === data.id))\r\n              chat.messages = chat.messages.map((message) => {\r\n                message.readStatus = ReadStatus.READ;\r\n                return message;\r\n              });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.COMPOSING:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = true;\r\n              if (activeChat.jid === data) setActiveChat(chat);\r\n              deleteTypingTimeout(chat.jid);\r\n              setTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.ACTIVE:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = false;\r\n              if (activeChat.jid === data) {\r\n                let chatUpdate = { ...chat };\r\n                setActiveChat(chatUpdate);\r\n              }\r\n              deleteTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.PRESENCE:\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if(cht.jid && data.from){\r\n              if(\r\n                cht.jid === data.from.split(\"/\")[0] &&\r\n                !cht.jid.includes(\"@conference.\")\r\n              ) {\r\n                cht.status = data.status;\r\n              }  \r\n            }    \r\n            return cht;\r\n          })\r\n        );\r\n        setContacts(\r\n          contacts.map((ctc) => {\r\n            if(ctc.jid && data.from){\r\n              if (\r\n                ctc.jid === data.from.split(\"/\")[0] &&\r\n                !ctc.jid.includes(\"@conference.\")\r\n              ) {\r\n                ctc.status = data.status;\r\n              }\r\n            }\r\n            return ctc;\r\n          })\r\n        );\r\n        break;\r\n        \r\n   \r\n        case Events.SEND_EVENT:\r\n        const event = data as IMessage;\r\n        let finded;\r\n        let newChat: IChat[] = [];\r\n        chats.forEach((chat) => {\r\n          if (\r\n            event.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] ||\r\n            event.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]\r\n          ) {\r\n            finded = true;\r\n            if (!chat.messages.filter((msg) => msg.id === event.id)[0])\r\n              chat.messages.push(event);\r\n            if (chat.id === activeChat.id) {\r\n              let chatTemporary = { ...chat };\r\n              setActiveChat(chatTemporary);\r\n            } else {\r\n              chat.unRead++;\r\n            }\r\n            newChat.unshift(chat);\r\n          } else {\r\n            newChat.push(chat);\r\n          }\r\n        });\r\n        if (!finded) {\r\n          groups.forEach((grp) => {\r\n            if (\r\n              event.fromUser.split(\"@\")[0] === grp.jid.split(\"@\")[0] ||\r\n              event.toUser.split(\"@\")[0] === grp.jid.split(\"@\")[0]\r\n            ) {\r\n              finded = true;\r\n              let groupToBeInserted: IChat = {\r\n                added: grp.added,\r\n                chatType: ChatType.GROUP,\r\n                favorite: grp.favorite,\r\n                id: grp.groupId,\r\n                inputMessage: \"\",\r\n                isTyping: false,\r\n                jid: grp.jid,\r\n                messages: [event],\r\n                name: grp.name,\r\n                unRead: 0,\r\n                attachedFileList: undefined,\r\n                department: undefined,\r\n                email: undefined,\r\n                groupId: grp.groupId,\r\n                members: grp.members,\r\n                messageLoaded: undefined,\r\n                profilePicture: grp.profilePicture,\r\n                status: undefined,\r\n                userDescription: grp.description,\r\n              };\r\n              newChat.unshift(groupToBeInserted);\r\n              setActiveChat(groupToBeInserted);\r\n            }\r\n          });\r\n        }\r\n        if (!finded) {\r\n          squadService?.groups.list((grps) => {\r\n            setGroups(grps);\r\n            grps.forEach((grp) => {\r\n              if (\r\n                event.fromUser.split(\"@\")[0] === grp.jid.split(\"@\")[0] ||\r\n                event.toUser.split(\"@\")[0] === grp.jid.split(\"@\")[0]\r\n              ) {\r\n                finded = true;\r\n                let groupToBeInserted: IChat = {\r\n                  added: grp.added,\r\n                  chatType: ChatType.GROUP,\r\n                  favorite: grp.favorite,\r\n                  id: grp.groupId,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  jid: grp.jid,\r\n                  messages: [event],\r\n                  name: grp.name,\r\n                  unRead: 1,\r\n                  attachedFileList: undefined,\r\n                  department: undefined,\r\n                  email: undefined,\r\n                  groupId: grp.groupId,\r\n                  members: grp.members,\r\n                  messageLoaded: undefined,\r\n                  profilePicture: grp.profilePicture,\r\n                  status: undefined,\r\n                  userDescription: grp.description,\r\n                };\r\n                newChat.unshift(groupToBeInserted);\r\n              }\r\n            });\r\n          });\r\n        }\r\n        setChats(newChat);\r\n        if (event.eventId === 6 || event.eventId === 2) {\r\n          refreshMembers(event);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  const refreshMembers = (event: IMessage) => {\r\n    squadService?.groups.list((grps) => {\r\n      setGroups(grps);\r\n      setChats(\r\n        chats.map((chat) => {\r\n          if (\r\n            event.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] ||\r\n            event.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]\r\n          ) {\r\n            chat.members = grps.find((grp) => grp.groupId === chat.id)?.members;\r\n            if (chat.id === activeChat.id) {\r\n              setActiveChat(chat);\r\n            }\r\n          }\r\n          return chat;\r\n        })\r\n      );\r\n    });\r\n  };\r\n\r\n  const deleteTypingTimeout = (jid: string) => {\r\n    clearTimeout(typingTimeout.get(jid)?.timeout || setTimeout(() => {}, 1));\r\n    typingTimeout.delete(jid);\r\n  };\r\n  const setTypingTimeout = (jid: string) => {\r\n    const timeoutData: TypingTimeoutData = {\r\n      msgStr: \"\",\r\n      timeout: setTimeout(() => {\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.jid === jid) {\r\n              cht.isTyping = false;\r\n              if (activeChat.jid === jid) setActiveChat(cht);\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n      }, 20000),\r\n    };\r\n    typingTimeout.set(jid, timeoutData);\r\n  };\r\n\r\n  squadService?.updateChatSubscribeFuncition(chatCommunicatorSubscribe);\r\n  // Comentado para evitar warnings no console enquanto não é usado\r\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\r\n  //     squadService?.groups.list((groups) => {\r\n  //       setGroups(groups);\r\n  //       callback(true);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  function sendMessage(\r\n    chat: IChat,\r\n    message: string,\r\n    callback: SendMessageCallback\r\n  ) {\r\n    squadService?.chat?.chat.sendMessage(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message,\r\n      callback\r\n    );\r\n  }\r\n\r\n  useEffect(init, []);\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}