{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\nimport ReadStatus from \"../enuns/ReadStatus\"; // import IContact from \"../alias/IContact\";\n// Comentado para Evitar Warnings no console\n// interface CreateGroupCallback {\n//   (groupCreated: boolean): void;\n// }\n\nlet squadService;\nlet typingTimeout = new Map();\n\nconst SquadCommunicator = ({\n  children\n}) => {\n  var _squadService10;\n\n  const {\n    chats,\n    activeChat,\n    // contacts,\n    // groups,\n    setActiveChat,\n    setChats,\n    setGroups,\n    setContacts\n  } = useChat();\n  const {\n    user,\n    setUser\n  } = useAuth();\n\n  const init = () => {\n    var _squadService;\n\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"b4c1fa651399a3eb63aee51777d3d508\",\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      email: \"romero2@digivox.com.br\",\n      user_name: \"ZZ Romero 2\",\n      expires_in: 2592000,\n      baseUrl: \"https://app.citrussquad.com/api/v1/\"\n    }));\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\n    (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.user.get(user => {\n      setUser(user);\n    });\n  };\n\n  const clearSendFile = (chatId, messageId) => {\n    setChats(chats.map(chat => {\n      if (chat.id === chatId) {\n        chat.messages = chat.messages.map(message => {\n          if (message.id === messageId) {\n            message.deliverStatus = DeliverStatus.QUEUED;\n            message.sendFile = undefined;\n          }\n\n          return message;\n        });\n      }\n\n      return chat;\n    }));\n  };\n\n  const onChatsChange = () => {// chats.forEach((chat) => {\n    //   // checkTyping(chat);\n    // });\n  };\n\n  const onActiveChatChange = () => {\n    checkSendMessage(activeChat);\n    checkAttachedFiles(activeChat);\n    checkSearchMessages(activeChat); // checkTyping(activeChat)\n  }; // const checkTyping = (chat: IChat) => {\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\n  //     if (oldTimeoutData)\n  //       clearTimeout(oldTimeoutData.timeout)\n  //     else\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\n  //     const timeoutData = {\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\n  //       msgStr: `${chat.inputMessage}`\n  //     }\n  //     typingTimeout.set(chat.jid, timeoutData)\n  //   }\n  // }\n\n\n  const checkAttachedFiles = cht => {\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\n      var _squadService2;\n\n      (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.attachments.list(cht, attachments => {\n        if (attachments.length > 0) setActiveChat({ ...cht,\n          attachedFileList: attachments\n        });else setActiveChat({ ...cht,\n          attachedFileList: null\n        });\n      });\n    }\n  };\n\n  const checkSearchMessages = chat => {\n    if (chat.messageLoaded) {\n      var _squadService3;\n\n      (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.messages.list(chat, messages => {\n        setChats(chats.map(cht => {\n          if (cht.id === chat.id) {\n            messages.forEach(msg => {\n              if (!chat.messages.find(m => m.id === msg.id)) cht.messages.unshift(msg);\n            });\n            cht.messageLoaded = false;\n            setActiveChat(cht);\n          }\n\n          return cht;\n        }));\n      });\n    }\n  };\n\n  const checkSendMessage = chat => {\n    chat.messages.forEach(msg => {\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\n        if (msg.sendFile) {\n          var _squadService4, _squadService4$chat;\n\n          const files = [msg.sendFile];\n          clearSendFile(chat.id, msg.id);\n          (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : (_squadService4$chat = _squadService4.chat) === null || _squadService4$chat === void 0 ? void 0 : _squadService4$chat.sendFiles(chat, files, data => {\n            updateMessageFiles(data, chat, msg);\n          });\n        } else {\n          sendMessage(chat, msg.message, msgId => updateMessage(msgId, chat, msg));\n        }\n      }\n    });\n  };\n\n  const updateMessageFiles = (data, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        const booleans = getUrlBooleans(data.url);\n        message.id = data.msgId;\n        message.fileUrl = data.url;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n        message.message = getFileName(data.url);\n        message.isFileMessage = booleans.isFileMessage;\n        message.isImageMessage = booleans.isImageMessage;\n        message.isVideoMessage = booleans.isVideoMessage;\n        message.isAudioMessage = booleans.isAudioMessage;\n      }\n\n      return message;\n    });\n    setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      setChats(chats.map(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n        }\n\n        return cht;\n      }));\n    }\n  };\n\n  const updateMessage = (msgId, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        message.id = msgId;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n\n        if (isUrl(message.message)) {\n          const booleans = getUrlBooleans(message.message);\n          message.isFileMessage = booleans.isFileMessage;\n          message.isImageMessage = booleans.isImageMessage;\n          message.isAudioMessage = booleans.isAudioMessage;\n          message.isVideoMessage = booleans.isVideoMessage;\n        }\n      }\n\n      return message;\n    });\n    setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      setChats(chats.map(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n        }\n\n        return cht;\n      }));\n    }\n  }; // const forwardMessages = (ctcs: IContact[], message: IMessage) => {\n  //   const chatsFinded: IChat[] = [];\n  //   ctcs.forEach((ctc) => {\n  //     const cht = chats.find((cht) => cht.id === ctc.id);\n  //     if (cht) {\n  //       cht.messages.push({\n  //         ...message,\n  //         message: message.fileUrl || message.message,\n  //         deliverStatus: DeliverStatus.SENDING,\n  //       });\n  //       chatsFinded.push(cht);\n  //     }\n  //   });\n  //   const newChats = chats.map(\n  //     (chat) => chatsFinded.find((cht) => cht.id === chat.id) || chat\n  //   );\n  //   const ctcsNotInChat: IContact[] = ctcs.filter(\n  //     (ctc) => !chatsFinded.find((cht) => ctc.id === cht.id)\n  //   );\n  //   ctcsNotInChat.forEach((ctc) => {\n  //     newChats.push({\n  //       id: ctc.id,\n  //       jid: ctc.jid,\n  //       name: ctc.name,\n  //       profilePicture: ctc.profilePicture,\n  //       status: ctc.status,\n  //       unRead: 0,\n  //       chatType: ChatType.USER,\n  //       inputMessage: \"\",\n  //       messageLoaded: false,\n  //       isTyping: false,\n  //       messages: [{ ...message, deliverStatus: DeliverStatus.SENDING }],\n  //       email: ctc.email,\n  //     });\n  //   });\n  //   setChats(newChats);\n  // };\n\n\n  useEffect(onChatsChange, [chats]);\n  useEffect(onActiveChatChange, [activeChat]);\n\n  function chatCommunicatorSubscribe(event, data) {\n    var _squadService5;\n\n    switch (event) {\n      case Events.ONLINE:\n        (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.chats.list(receivedChats => {\n          var _squadService6, _squadService8;\n\n          setChats(receivedChats); //populating groups\n\n          (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : _squadService6.groups.list(groups => {\n            var _squadService7, _squadService7$chat;\n\n            setGroups(groups); //Joining Groups Rooms in XMPP\n\n            (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : (_squadService7$chat = _squadService7.chat) === null || _squadService7$chat === void 0 ? void 0 : _squadService7$chat.joinGroups(groups.map(group => group.jid));\n          }); //populating contacts\n\n          (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : _squadService8.contacts.list(contacts => setContacts(contacts)); //populating chat's with messages\n          // receivedChats.forEach((chat) => {\n          //   squadService?.messages.list(chat, (messages) => {\n          //     const chatWithMessages = { ...chat };\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\n          //       messages\n          //     );\n          //     setChats([\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\n          //       chatWithMessages,\n          //     ]);\n          //   });\n          // });\n        });\n        break;\n\n      case Events.MESSAGE:\n        if (data.fromUser === user.jid) break;\n        let find = false;\n        let newChats = chats.map(chat => {\n          if (data.fromUser === chat.jid) {\n            find = true;\n            if (!chat.messages.filter(msg => msg.id === data.id)[0]) chat.messages.push(data);\n\n            if (chat.id === activeChat.id) {\n              let chatTemporary = { ...chat\n              };\n              setActiveChat(chatTemporary);\n            } else {\n              chat.unRead++;\n            }\n          }\n\n          return chat;\n        });\n\n        if (!find) {\n          var _squadService9;\n\n          let newChat = {};\n          (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : _squadService9.contacts.list(listContacts => {\n            listContacts.forEach(c => {\n              if (c.jid === data.fromUser) {\n                newChat = {\n                  id: c.id,\n                  jid: c.jid,\n                  name: c.name,\n                  profilePicture: c.profilePicture,\n                  status: c.status,\n                  unRead: 1,\n                  chatType: ChatType.USER,\n                  inputMessage: \"\",\n                  isTyping: false,\n                  messages: []\n                };\n                newChat.messages.push(data);\n                newChats.unshift(newChat);\n                setChats(newChats);\n              }\n            });\n          });\n        } else {\n          setChats(newChats);\n        }\n\n        break;\n\n      case Events.RECEIVED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.deliverStatus = DeliverStatus.DELIVERED;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.DISPLAYED:\n        setChats(chats.map(chat => {\n          chat.messages = chat.messages.map(message => {\n            if (message.id === data.id) {\n              message.readStatus = ReadStatus.READ;\n            }\n\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.COMPOSING:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = true;\n            if (activeChat.jid === data) setActiveChat(chat);\n            deleteTypingTimeout(chat.jid);\n            setTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.ACTIVE:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = false;\n\n            if (activeChat.jid === data) {\n              let chatUpdate = { ...chat\n              };\n              setActiveChat(chatUpdate);\n            }\n\n            deleteTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.PRESENCE:\n        break;\n    }\n  }\n\n  const deleteTypingTimeout = jid => {\n    var _typingTimeout$get;\n\n    clearTimeout(((_typingTimeout$get = typingTimeout.get(jid)) === null || _typingTimeout$get === void 0 ? void 0 : _typingTimeout$get.timeout) || setTimeout(() => {}, 1));\n    typingTimeout.delete(jid);\n  };\n\n  const setTypingTimeout = jid => {\n    const timeoutData = {\n      msgStr: \"\",\n      timeout: setTimeout(() => {\n        setChats(chats.map(cht => {\n          if (cht.jid === jid) {\n            cht.isTyping = false;\n            if (activeChat.jid === jid) setActiveChat(cht);\n          }\n\n          return cht;\n        }));\n      }, 20000)\n    };\n    typingTimeout.set(jid, timeoutData);\n  };\n\n  (_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : _squadService10.updateSubscribeFunction(chatCommunicatorSubscribe); // Comentado para evitar warnings no console enquanto não é usado\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\n  //     squadService?.groups.list((groups) => {\n  //       setGroups(groups);\n  //       callback(true);\n  //     });\n  //   });\n  // }\n\n  function sendMessage(chat, message, callback) {\n    var _squadService11, _squadService11$chat;\n\n    (_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : (_squadService11$chat = _squadService11.chat) === null || _squadService11$chat === void 0 ? void 0 : _squadService11$chat.chat.sendMessage(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message, callback);\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","DeliverStatus","XMPPChatType","getFileName","getUrlBooleans","isUrl","ReadStatus","squadService","typingTimeout","Map","children","chats","activeChat","setActiveChat","setChats","setGroups","setContacts","user","setUser","init","localStorage","setItem","JSON","stringify","access_token","user_id","email","user_name","expires_in","baseUrl","getInstance","chatCommunicatorSubscribe","get","clearSendFile","chatId","messageId","map","chat","id","messages","message","deliverStatus","QUEUED","sendFile","undefined","onChatsChange","onActiveChatChange","checkSendMessage","checkAttachedFiles","checkSearchMessages","cht","attachedFileList","attachments","list","length","messageLoaded","forEach","msg","find","m","unshift","SENDING","files","sendFiles","data","updateMessageFiles","sendMessage","msgId","updateMessage","newChat","booleans","url","fileUrl","time","Date","toISOString","isFileMessage","isImageMessage","isVideoMessage","isAudioMessage","filter","newChats","event","ONLINE","receivedChats","groups","joinGroups","group","jid","contacts","MESSAGE","fromUser","push","chatTemporary","unRead","listContacts","c","name","profilePicture","status","chatType","USER","inputMessage","isTyping","RECEIVED","DELIVERED","DISPLAYED","readStatus","READ","COMPOSING","deleteTypingTimeout","setTypingTimeout","ACTIVE","chatUpdate","PRESENCE","clearTimeout","timeout","setTimeout","delete","timeoutData","msgStr","set","updateSubscribeFunction","callback","includes","GROUPCHAT","CHAT"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\n\r\nimport { Events, SendImageCallbackReturn } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\r\nimport { SendMessageCallback } from \"./types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\n// import IContact from \"../alias/IContact\";\r\n// Comentado para Evitar Warnings no console\r\n// interface CreateGroupCallback {\r\n//   (groupCreated: boolean): void;\r\n// }\r\ninterface TypingTimeoutData {\r\n  timeout: NodeJS.Timeout;\r\n  msgStr: string;\r\n}\r\nlet squadService: SquadService | undefined;\r\nlet typingTimeout: Map<string, TypingTimeoutData> = new Map<\r\n  string,\r\n  TypingTimeoutData\r\n>();\r\n\r\nconst SquadCommunicator: React.FC = ({ children }) => {\r\n  const {\r\n    chats,\r\n    activeChat,\r\n    // contacts,\r\n    // groups,\r\n    setActiveChat,\r\n    setChats,\r\n    setGroups,\r\n    setContacts,\r\n  } = useChat();\r\n  const { user, setUser } = useAuth();\r\n\r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"b4c1fa651399a3eb63aee51777d3d508\",\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        email: \"romero2@digivox.com.br\",\r\n        user_name: \"ZZ Romero 2\",\r\n        expires_in: 2592000,\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n      })\r\n    );\r\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\r\n    squadService?.user.get((user: IUser) => {\r\n      setUser(user);\r\n    });\r\n  };\r\n\r\n  const clearSendFile = (chatId: string, messageId: string) => {\r\n    setChats(\r\n      chats.map((chat) => {\r\n        if (chat.id === chatId) {\r\n          chat.messages = chat.messages.map((message) => {\r\n            if (message.id === messageId) {\r\n              message.deliverStatus = DeliverStatus.QUEUED;\r\n              message.sendFile = undefined;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return chat;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onChatsChange = () => {\r\n    // chats.forEach((chat) => {\r\n    //   // checkTyping(chat);\r\n    // });\r\n  };\r\n  const onActiveChatChange = () => {\r\n    checkSendMessage(activeChat);\r\n    checkAttachedFiles(activeChat);\r\n    checkSearchMessages(activeChat);\r\n    // checkTyping(activeChat)\r\n  };\r\n  // const checkTyping = (chat: IChat) => {\r\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\r\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\r\n  //     if (oldTimeoutData)\r\n  //       clearTimeout(oldTimeoutData.timeout)\r\n  //     else\r\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\r\n  //     const timeoutData = {\r\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\r\n  //       msgStr: `${chat.inputMessage}`\r\n  //     }\r\n  //     typingTimeout.set(chat.jid, timeoutData)\r\n  //   }\r\n  // }\r\n  const checkAttachedFiles = (cht: IChat) => {\r\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\r\n      squadService?.attachments.list(cht, (attachments) => {\r\n        if (attachments.length > 0)\r\n          setActiveChat({ ...cht, attachedFileList: attachments });\r\n        else setActiveChat({ ...cht, attachedFileList: null });\r\n      });\r\n    }\r\n  };\r\n  const checkSearchMessages = (chat: IChat) => {\r\n    if (chat.messageLoaded) {\r\n      squadService?.messages.list(chat, (messages) => {\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.id === chat.id) {\r\n              messages.forEach((msg) => {\r\n                if (!chat.messages.find((m) => m.id === msg.id))\r\n                  cht.messages.unshift(msg);\r\n              });\r\n              cht.messageLoaded = false;\r\n              setActiveChat(cht);\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkSendMessage = (chat: IChat) => {\r\n    chat.messages.forEach((msg) => {\r\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\r\n        if (msg.sendFile) {\r\n          const files = [msg.sendFile];\r\n          clearSendFile(chat.id, msg.id);\r\n          squadService?.chat?.sendFiles(\r\n            chat,\r\n            files,\r\n            (data: SendImageCallbackReturn) => {\r\n              updateMessageFiles(data, chat, msg);\r\n            }\r\n          );\r\n        } else {\r\n          sendMessage(chat, msg.message, (msgId) =>\r\n            updateMessage(msgId, chat, msg)\r\n          );\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const updateMessageFiles = (\r\n    data: SendImageCallbackReturn,\r\n    chat: IChat,\r\n    msg: IMessage\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        const booleans = getUrlBooleans(data.url);\r\n        message.id = data.msgId;\r\n        message.fileUrl = data.url;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        message.message = getFileName(data.url);\r\n        message.isFileMessage = booleans.isFileMessage;\r\n        message.isImageMessage = booleans.isImageMessage;\r\n        message.isVideoMessage = booleans.isVideoMessage;\r\n        message.isAudioMessage = booleans.isAudioMessage;\r\n      }\r\n      return message;\r\n    });\r\n    setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      setChats(\r\n        chats.map((cht) => {\r\n          if (cht.id === chat.id) {\r\n            cht.messages = newChat.messages;\r\n          }\r\n          return cht;\r\n        })\r\n      );\r\n    }\r\n  };\r\n  const updateMessage = (msgId: string, chat: IChat, msg: IMessage) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        message.id = msgId;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        if (isUrl(message.message)) {\r\n          const booleans = getUrlBooleans(message.message);\r\n          message.isFileMessage = booleans.isFileMessage;\r\n          message.isImageMessage = booleans.isImageMessage;\r\n          message.isAudioMessage = booleans.isAudioMessage;\r\n          message.isVideoMessage = booleans.isVideoMessage;\r\n        }\r\n      }\r\n      return message;\r\n    });\r\n    setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      setChats(\r\n        chats.map((cht) => {\r\n          if (cht.id === chat.id) {\r\n            cht.messages = newChat.messages;\r\n          }\r\n          return cht;\r\n        })\r\n      );\r\n    }\r\n  };\r\n  // const forwardMessages = (ctcs: IContact[], message: IMessage) => {\r\n  //   const chatsFinded: IChat[] = [];\r\n  //   ctcs.forEach((ctc) => {\r\n  //     const cht = chats.find((cht) => cht.id === ctc.id);\r\n  //     if (cht) {\r\n  //       cht.messages.push({\r\n  //         ...message,\r\n  //         message: message.fileUrl || message.message,\r\n  //         deliverStatus: DeliverStatus.SENDING,\r\n  //       });\r\n  //       chatsFinded.push(cht);\r\n  //     }\r\n  //   });\r\n  //   const newChats = chats.map(\r\n  //     (chat) => chatsFinded.find((cht) => cht.id === chat.id) || chat\r\n  //   );\r\n  //   const ctcsNotInChat: IContact[] = ctcs.filter(\r\n  //     (ctc) => !chatsFinded.find((cht) => ctc.id === cht.id)\r\n  //   );\r\n  //   ctcsNotInChat.forEach((ctc) => {\r\n  //     newChats.push({\r\n  //       id: ctc.id,\r\n  //       jid: ctc.jid,\r\n  //       name: ctc.name,\r\n  //       profilePicture: ctc.profilePicture,\r\n  //       status: ctc.status,\r\n  //       unRead: 0,\r\n  //       chatType: ChatType.USER,\r\n  //       inputMessage: \"\",\r\n  //       messageLoaded: false,\r\n  //       isTyping: false,\r\n  //       messages: [{ ...message, deliverStatus: DeliverStatus.SENDING }],\r\n  //       email: ctc.email,\r\n  //     });\r\n  //   });\r\n  //   setChats(newChats);\r\n  // };\r\n  useEffect(onChatsChange, [chats]);\r\n  useEffect(onActiveChatChange, [activeChat]);\r\n  function chatCommunicatorSubscribe(event: string, data: any) {\r\n    switch (event) {\r\n      case Events.ONLINE:\r\n        squadService?.chats.list((receivedChats) => {\r\n          setChats(receivedChats);\r\n          //populating groups\r\n          squadService?.groups.list((groups) => {\r\n            setGroups(groups);\r\n            //Joining Groups Rooms in XMPP\r\n            squadService?.chat?.joinGroups(groups.map((group) => group.jid));\r\n          });\r\n          //populating contacts\r\n          squadService?.contacts.list((contacts) => setContacts(contacts));\r\n          //populating chat's with messages\r\n\r\n          // receivedChats.forEach((chat) => {\r\n          //   squadService?.messages.list(chat, (messages) => {\r\n          //     const chatWithMessages = { ...chat };\r\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\r\n          //       messages\r\n          //     );\r\n          //     setChats([\r\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n          //       chatWithMessages,\r\n          //     ]);\r\n          //   });\r\n          // });\r\n        });\r\n        break;\r\n      case Events.MESSAGE:\r\n        if (data.fromUser === user.jid) break;\r\n        let find = false;\r\n\r\n        let newChats = chats.map((chat) => {\r\n          if (data.fromUser === chat.jid) {\r\n            find = true;\r\n            if (!chat.messages.filter((msg) => msg.id === data.id)[0])\r\n              chat.messages.push(data);\r\n            if (chat.id === activeChat.id) {\r\n              let chatTemporary = { ...chat };\r\n              setActiveChat(chatTemporary);\r\n            } else {\r\n              chat.unRead++;\r\n            }\r\n          }\r\n          return chat;\r\n        });\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.contacts.list((listContacts) => {\r\n            listContacts.forEach((c) => {\r\n              if (c.jid === data.fromUser) {\r\n                newChat = {\r\n                  id: c.id,\r\n                  jid: c.jid,\r\n                  name: c.name,\r\n                  profilePicture: c.profilePicture,\r\n                  status: c.status,\r\n                  unRead: 1,\r\n                  chatType: ChatType.USER,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  messages: [],\r\n                };\r\n                newChat.messages.push(data);\r\n                newChats.unshift(newChat);\r\n                setChats(newChats);\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          setChats(newChats);\r\n        }\r\n\r\n        break;\r\n      case Events.RECEIVED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.messages.find((msg) => msg.id === data.id))\r\n              chat.messages = chat.messages.map((message) => {\r\n                message.deliverStatus = DeliverStatus.DELIVERED;\r\n                return message;\r\n              });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.DISPLAYED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            chat.messages = chat.messages.map((message) => {\r\n              if (message.id === data.id) {\r\n                message.readStatus = ReadStatus.READ;\r\n              }\r\n              return message;\r\n            });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.COMPOSING:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = true;\r\n              if (activeChat.jid === data) setActiveChat(chat);\r\n              deleteTypingTimeout(chat.jid);\r\n              setTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.ACTIVE:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = false;\r\n              if (activeChat.jid === data) {\r\n                let chatUpdate = { ...chat };\r\n                setActiveChat(chatUpdate);\r\n              }\r\n              deleteTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.PRESENCE:\r\n        break;\r\n    }\r\n  }\r\n  const deleteTypingTimeout = (jid: string) => {\r\n    clearTimeout(typingTimeout.get(jid)?.timeout || setTimeout(() => {}, 1));\r\n    typingTimeout.delete(jid);\r\n  };\r\n  const setTypingTimeout = (jid: string) => {\r\n    const timeoutData: TypingTimeoutData = {\r\n      msgStr: \"\",\r\n      timeout: setTimeout(() => {\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.jid === jid) {\r\n              cht.isTyping = false;\r\n              if (activeChat.jid === jid) setActiveChat(cht);\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n      }, 20000),\r\n    };\r\n    typingTimeout.set(jid, timeoutData);\r\n  };\r\n\r\n  squadService?.updateSubscribeFunction(chatCommunicatorSubscribe);\r\n  // Comentado para evitar warnings no console enquanto não é usado\r\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\r\n  //     squadService?.groups.list((groups) => {\r\n  //       setGroups(groups);\r\n  //       callback(true);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  function sendMessage(\r\n    chat: IChat,\r\n    message: string,\r\n    callback: SendMessageCallback\r\n  ) {\r\n    squadService?.chat?.chat.sendMessage(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message,\r\n      callback\r\n    );\r\n  }\r\n\r\n  useEffect(init, []);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}