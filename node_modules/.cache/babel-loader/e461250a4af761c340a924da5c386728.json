{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\n/**\n * An {@link Emitter} implementation.\n * @internal\n */\nexport var EmitterImpl = /*#__PURE__*/function () {\n  function EmitterImpl() {\n    _classCallCheck(this, EmitterImpl);\n\n    this.listeners = new Array();\n  }\n  /**\n   * Sets up a function that will be called whenever the target changes.\n   * @param listener - Callback function.\n   * @param options - An options object that specifies characteristics about the listener.\n   *                  If once true, indicates that the listener should be invoked at most once after being added.\n   *                  If once true, the listener would be automatically removed when invoked.\n   */\n\n\n  _createClass(EmitterImpl, [{\n    key: \"addListener\",\n    value: function addListener(listener, options) {\n      var _this = this;\n\n      var onceWrapper = function onceWrapper(data) {\n        _this.removeListener(onceWrapper);\n\n        listener(data);\n      };\n\n      (options === null || options === void 0 ? void 0 : options.once) === true ? this.listeners.push(onceWrapper) : this.listeners.push(listener);\n    }\n    /**\n     * Emit change.\n     * @param data - Data to emit.\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(data) {\n      this.listeners.slice().forEach(function (listener) {\n        return listener(data);\n      });\n    }\n    /**\n     * Removes all listeners previously registered with addListener.\n     */\n\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      this.listeners = [];\n    }\n    /**\n     * Removes a listener previously registered with addListener.\n     * @param listener - Callback function.\n     */\n\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(listener) {\n      this.listeners = this.listeners.filter(function (l) {\n        return l !== listener;\n      });\n    }\n    /**\n     * Registers a listener.\n     * @param listener - Callback function.\n     * @deprecated Use addListener.\n     */\n\n  }, {\n    key: \"on\",\n    value: function on(listener) {\n      return this.addListener(listener);\n    }\n    /**\n     * Unregisters a listener.\n     * @param listener - Callback function.\n     * @deprecated Use removeListener.\n     */\n\n  }, {\n    key: \"off\",\n    value: function off(listener) {\n      return this.removeListener(listener);\n    }\n    /**\n     * Registers a listener then unregisters the listener after one event emission.\n     * @param listener - Callback function.\n     * @deprecated Use addListener.\n     */\n\n  }, {\n    key: \"once\",\n    value: function once(listener) {\n      return this.addListener(listener, {\n        once: true\n      });\n    }\n  }]);\n\n  return EmitterImpl;\n}();","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/api/emitter.js"],"names":["EmitterImpl","listeners","Array","listener","options","onceWrapper","data","removeListener","once","push","slice","forEach","filter","l","addListener"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,WAAaA,WAAb;AACI,yBAAc;AAAA;;AACV,SAAKC,SAAL,GAAiB,IAAIC,KAAJ,EAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAVA;AAAA;AAAA,gCAWgBC,QAXhB,EAW0BC,OAX1B,EAWmC;AAAA;;AAC3B,UAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AAC1B,QAAA,KAAI,CAACC,cAAL,CAAoBF,WAApB;;AACAF,QAAAA,QAAQ,CAACG,IAAD,CAAR;AACH,OAHD;;AAIA,OAACF,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACI,IAA3D,MAAqE,IAArE,GAA4E,KAAKP,SAAL,CAAeQ,IAAf,CAAoBJ,WAApB,CAA5E,GAA+G,KAAKJ,SAAL,CAAeQ,IAAf,CAAoBN,QAApB,CAA/G;AACH;AACD;AACJ;AACA;AACA;;AArBA;AAAA;AAAA,yBAsBSG,IAtBT,EAsBe;AACP,WAAKL,SAAL,CAAeS,KAAf,GAAuBC,OAAvB,CAA+B,UAACR,QAAD;AAAA,eAAcA,QAAQ,CAACG,IAAD,CAAtB;AAAA,OAA/B;AACH;AACD;AACJ;AACA;;AA3BA;AAAA;AAAA,yCA4ByB;AACjB,WAAKL,SAAL,GAAiB,EAAjB;AACH;AACD;AACJ;AACA;AACA;;AAlCA;AAAA;AAAA,mCAmCmBE,QAnCnB,EAmC6B;AACrB,WAAKF,SAAL,GAAiB,KAAKA,SAAL,CAAeW,MAAf,CAAsB,UAACC,CAAD;AAAA,eAAOA,CAAC,KAAKV,QAAb;AAAA,OAAtB,CAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;;AA1CA;AAAA;AAAA,uBA2COA,QA3CP,EA2CiB;AACT,aAAO,KAAKW,WAAL,CAAiBX,QAAjB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;AAlDA;AAAA;AAAA,wBAmDQA,QAnDR,EAmDkB;AACV,aAAO,KAAKI,cAAL,CAAoBJ,QAApB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;AA1DA;AAAA;AAAA,yBA2DSA,QA3DT,EA2DmB;AACX,aAAO,KAAKW,WAAL,CAAiBX,QAAjB,EAA2B;AAAEK,QAAAA,IAAI,EAAE;AAAR,OAA3B,CAAP;AACH;AA7DL;;AAAA;AAAA","sourcesContent":["/**\n * An {@link Emitter} implementation.\n * @internal\n */\nexport class EmitterImpl {\n    constructor() {\n        this.listeners = new Array();\n    }\n    /**\n     * Sets up a function that will be called whenever the target changes.\n     * @param listener - Callback function.\n     * @param options - An options object that specifies characteristics about the listener.\n     *                  If once true, indicates that the listener should be invoked at most once after being added.\n     *                  If once true, the listener would be automatically removed when invoked.\n     */\n    addListener(listener, options) {\n        const onceWrapper = (data) => {\n            this.removeListener(onceWrapper);\n            listener(data);\n        };\n        (options === null || options === void 0 ? void 0 : options.once) === true ? this.listeners.push(onceWrapper) : this.listeners.push(listener);\n    }\n    /**\n     * Emit change.\n     * @param data - Data to emit.\n     */\n    emit(data) {\n        this.listeners.slice().forEach((listener) => listener(data));\n    }\n    /**\n     * Removes all listeners previously registered with addListener.\n     */\n    removeAllListeners() {\n        this.listeners = [];\n    }\n    /**\n     * Removes a listener previously registered with addListener.\n     * @param listener - Callback function.\n     */\n    removeListener(listener) {\n        this.listeners = this.listeners.filter((l) => l !== listener);\n    }\n    /**\n     * Registers a listener.\n     * @param listener - Callback function.\n     * @deprecated Use addListener.\n     */\n    on(listener) {\n        return this.addListener(listener);\n    }\n    /**\n     * Unregisters a listener.\n     * @param listener - Callback function.\n     * @deprecated Use removeListener.\n     */\n    off(listener) {\n        return this.removeListener(listener);\n    }\n    /**\n     * Registers a listener then unregisters the listener after one event emission.\n     * @param listener - Callback function.\n     * @deprecated Use addListener.\n     */\n    once(listener) {\n        return this.addListener(listener, { once: true });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}