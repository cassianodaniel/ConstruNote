{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\services\\\\SquadCommunicator.tsx\";\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nexport const SquadCommunicatorContext = createContext({});\n\nconst SquadCommunicator = ({\n  children\n}) => {\n  const {\n    setChats,\n    setGroups,\n    setContacts\n  } = useChat();\n  const {\n    setUser\n  } = useAuth();\n  const [squadService, setSquadService] = useState();\n\n  const init = () => {\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"e9e34268a0adb4b4f009b508de092e2c\",\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      user_name: \"ZZ Romero 2\",\n      email: \"romero2@digivox.com.br\",\n      expires_in: 2592000,\n      baseUrl: \"https://app.citrussquad.com/api/v1/\"\n    }));\n    const squadServiceInstance = SquadService.getInstance();\n    setSquadService(squadServiceInstance);\n\n    if (squadServiceInstance) {\n      squadServiceInstance.getUser(user => {\n        setUser(user);\n      });\n      squadServiceInstance.getChats(receivedChats => {\n        setChats(receivedChats);\n        squadServiceInstance.getGroups(groups => setGroups(groups));\n        squadServiceInstance.getContacts(contacts => setContacts(contacts));\n        receivedChats.forEach(chat => {\n          squadServiceInstance.getMessages(chat, messages => {\n            const chatWithMessages = { ...chat\n            };\n            chatWithMessages.messages = chatWithMessages.messages.concat(messages);\n            setChats([...receivedChats.filter(cht => chat.id !== cht.id), chatWithMessages]);\n          });\n        });\n      });\n    }\n  };\n\n  function createGroup(group, callback) {\n    if (squadService) {\n      squadService.createGroup(group, iGroup => {\n        squadService.getGroups(groups => {\n          setGroups(groups);\n          callback(true);\n        });\n      });\n    }\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(SquadCommunicatorContext.Provider, {\n    value: {\n      createGroup\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport function useSquadCommunicator() {\n  return useContext(SquadCommunicatorContext);\n}\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","createContext","useContext","useEffect","useState","SquadCommunicator","SquadService","useChat","useAuth","SquadCommunicatorContext","children","setChats","setGroups","setContacts","setUser","squadService","setSquadService","init","localStorage","setItem","JSON","stringify","access_token","user_id","user_name","email","expires_in","baseUrl","squadServiceInstance","getInstance","getUser","user","getChats","receivedChats","getGroups","groups","getContacts","contacts","forEach","chat","getMessages","messages","chatWithMessages","concat","filter","cht","id","createGroup","group","callback","iGroup","useSquadCommunicator"],"mappings":"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","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport INewGroup from \"../alias/INewGroup\";\r\ninterface CreateGroupCallback {\r\n  (groupCreated: boolean): void;\r\n}\r\ninterface SquadCommunicatorContextData {\r\n  createGroup(group: INewGroup, callback: CreateGroupCallback): void;\r\n}\r\nexport const SquadCommunicatorContext = createContext<\r\n  SquadCommunicatorContextData\r\n>({} as SquadCommunicatorContextData);\r\n\r\nconst SquadCommunicator: React.FC = ({ children }) => {\r\n  const { setChats, setGroups, setContacts } = useChat();\r\n  const { setUser } = useAuth();\r\n  const [squadService, setSquadService] = useState<SquadService | undefined>();\r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"e9e34268a0adb4b4f009b508de092e2c\",\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        user_name: \"ZZ Romero 2\",\r\n        email: \"romero2@digivox.com.br\",\r\n        expires_in: 2592000,\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n      })\r\n    );\r\n\r\n    const squadServiceInstance = SquadService.getInstance();\r\n    setSquadService(squadServiceInstance);\r\n    if (squadServiceInstance) {\r\n      squadServiceInstance.getUser((user: IUser) => {\r\n        setUser(user);\r\n      });\r\n      squadServiceInstance.getChats((receivedChats) => {\r\n        setChats(receivedChats);\r\n        squadServiceInstance.getGroups((groups) => setGroups(groups));\r\n        squadServiceInstance.getContacts((contacts) => setContacts(contacts));\r\n        receivedChats.forEach((chat) => {\r\n          squadServiceInstance.getMessages(chat, (messages) => {\r\n            const chatWithMessages = { ...chat };\r\n            chatWithMessages.messages = chatWithMessages.messages.concat(\r\n              messages\r\n            );\r\n            setChats([\r\n              ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n              chatWithMessages,\r\n            ]);\r\n          });\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n    if (squadService) {\r\n      squadService.createGroup(group, (iGroup: IGroup) => {\r\n        squadService.getGroups((groups) => {\r\n          setGroups(groups);\r\n          callback(true);\r\n        });\r\n      });\r\n    }\r\n  }\r\n  useEffect(init, []);\r\n\r\n  return (\r\n    <SquadCommunicatorContext.Provider value={{ createGroup }}>\r\n      {children}\r\n    </SquadCommunicatorContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useSquadCommunicator() {\r\n  return useContext(SquadCommunicatorContext);\r\n}\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}