{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ModalSelectUsers.tsx\";\nimport React, { useState } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Collapse, CardHeader, CardBody, Card } from \"reactstrap\"; //simple bar\n\nimport SimpleBar from \"simplebar-react\"; //components\n\nimport SelectContact from \"./SelectContact\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nexport const ModalSelectUsers = ({\n  show,\n  toggle,\n  message\n  /* activeChat, selectedMessage */\n\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    activeChat,\n    setActiveChat\n  } = useChat();\n  const {\n    user\n  } = useAuth();\n  const [textMessage, setTextMessage] = useState(\"\");\n\n  const forwardMessage = () => {\n    message.map(() => {});\n\n    if (textMessage !== \"\") {\n      let chat = { ...activeChat\n      };\n      chat.messages.push({\n        id: `${activeChat.messages.length + 1}`,\n        userName: user.name,\n        message: textMessage,\n        time: \"\",\n        isImageMessage: false,\n        isFileMessage: false,\n        isVideoMessage: false,\n        isAudioMessage: false,\n        fileUrl: \"\",\n        sendFile: undefined,\n        toUser: activeChat.id,\n        fromUser: user.id,\n        deliverStatus: DeliverStatus.SENDING,\n        readStatus: ReadStatus.UNREAD,\n        deliverTimestamp: \"\",\n        readTimestamp: \"\",\n        content: \"metadata\",\n        contentType: \"type\"\n      });\n      setActiveChat(chat);\n      setTextMessage(\"\");\n    }\n  };\n\n  const [isOpenCollapse] = useState(true);\n  const [selectedContact, setSelectedContact] = useState([]);\n\n  const handleCheckContact = (selected, contact) => {\n    if (selected) {\n      let selected = selectedContact;\n      selected.push(contact);\n      setSelectedContact(selected); //handleSendMessage(preciso referenciar a text message que vai ser encaminhada aqui);\n    } else {\n      setSelectedContact(selectedContact.filter(sel => {\n        if (sel.id === contact.id) {\n          return false;\n        }\n\n        return true;\n      }));\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (textMessage !== \"\") {\n      let chat = { ...activeChat\n      };\n      chat.messages.push({\n        id: `${activeChat.messages.length + 1}`,\n        userName: user.name,\n        message: textMessage,\n        time: \"\",\n        isImageMessage: false,\n        isFileMessage: false,\n        isVideoMessage: false,\n        isAudioMessage: false,\n        fileUrl: \"\",\n        sendFile: undefined,\n        toUser: activeChat.id,\n        fromUser: user.id,\n        deliverStatus: DeliverStatus.SENDING,\n        readStatus: ReadStatus.UNREAD,\n        deliverTimestamp: \"\",\n        readTimestamp: \"\",\n        content: \"metadata\",\n        contentType: \"type\"\n      });\n      setActiveChat(chat);\n      setTextMessage(\"\");\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: show,\n    centered: true,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    tag: \"h5\",\n    className: \"modal-title font-size-16\",\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, t(\"Forward message\")), /*#__PURE__*/React.createElement(ModalBody, {\n    className: \"p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Collapse, {\n    isOpen: isOpenCollapse,\n    id: \"groupmembercollapse\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: \"border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h5\", {\n    className: \"font-size-15 mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 19\n    }\n  }, t(\"Contacts\"))), /*#__PURE__*/React.createElement(CardBody, {\n    className: \"p-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SimpleBar, {\n    style: {\n      maxHeight: \"150px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"addContacts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(SelectContact, {\n    handleCheckContact: handleCheckContact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 23\n    }\n  }))))))))), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"link\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, t(\"Close\")), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"primary\",\n    onClick: () => forwardMessage(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, \"Send\")));\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ModalSelectUsers.tsx"],"names":["React","useState","Button","Modal","ModalHeader","ModalBody","ModalFooter","Form","FormGroup","Collapse","CardHeader","CardBody","Card","SimpleBar","SelectContact","useTranslation","useAuth","useChat","DeliverStatus","ReadStatus","ModalSelectUsers","show","toggle","message","t","activeChat","setActiveChat","user","textMessage","setTextMessage","forwardMessage","map","chat","messages","push","id","length","userName","name","time","isImageMessage","isFileMessage","isVideoMessage","isAudioMessage","fileUrl","sendFile","undefined","toUser","fromUser","deliverStatus","SENDING","readStatus","UNREAD","deliverTimestamp","readTimestamp","content","contentType","isOpenCollapse","selectedContact","setSelectedContact","handleCheckContact","selected","contact","filter","sel","handleSendMessage","maxHeight"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Collapse,\r\n  CardHeader,\r\n  CardBody,\r\n  Card,\r\n} from \"reactstrap\";\r\n\r\n//simple bar\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\n//components\r\nimport SelectContact from \"./SelectContact\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\nimport IContact from \"../alias/IContact\";\r\n\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport IMessage from \"../alias/IMessage\";\r\n\r\ninterface IProps {\r\n  show: boolean;\r\n  toggle(): void;\r\n  message : IMessage[];\r\n/*   activeChat: IChat;\r\n  selectedMessage: any; */\r\n}\r\n\r\nexport const ModalSelectUsers: React.FC<IProps> = ({ show, toggle, message /* activeChat, selectedMessage */}) => {\r\n  const { t } = useTranslation();\r\n\r\n  const { activeChat, setActiveChat } = useChat();\r\n  const { user } = useAuth();\r\n  const [ textMessage, setTextMessage ] = useState(\"\");\r\n\r\n  const forwardMessage = () => {\r\n    message.map(() => {\r\n      \r\n    });\r\n    if (textMessage !== \"\") {\r\n      let chat = {...activeChat};\r\n\r\n      chat.messages.push({\r\n        id: `${activeChat.messages.length + 1}`,\r\n        userName: user.name,\r\n        message: textMessage,\r\n        time: \"\",\r\n        isImageMessage: false,\r\n        isFileMessage: false,\r\n        isVideoMessage: false,\r\n        isAudioMessage: false,\r\n        fileUrl: \"\",\r\n        sendFile: undefined,\r\n        toUser: activeChat.id,\r\n        fromUser: user.id,\r\n        deliverStatus: DeliverStatus.SENDING,\r\n        readStatus: ReadStatus.UNREAD,\r\n        deliverTimestamp: \"\",\r\n        readTimestamp: \"\",\r\n        content: \"metadata\",\r\n        contentType: \"type\",\r\n      });\r\n\r\n      setActiveChat(chat);\r\n    \r\n      setTextMessage(\"\");\r\n    }\r\n  };\r\n\r\n  const [isOpenCollapse] = useState(true);\r\n  const [selectedContact, setSelectedContact] = useState<IContact[]>([]);\r\n  \r\n\r\n  const handleCheckContact = (selected: boolean, contact: IContact) => {\r\n    if (selected) {\r\n      let selected = selectedContact;\r\n      selected.push(contact);\r\n      setSelectedContact(selected);\r\n      //handleSendMessage(preciso referenciar a text message que vai ser encaminhada aqui);\r\n    } else {\r\n      setSelectedContact(\r\n        selectedContact.filter((sel) => {\r\n          if (sel.id === contact.id) {\r\n            return false;\r\n          }\r\n          return true;\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    if (textMessage !== \"\") {\r\n      let chat = { ...activeChat };\r\n\r\n      chat.messages.push({\r\n        id: `${activeChat.messages.length + 1}`,\r\n        userName: user.name,\r\n        message: textMessage,\r\n        time: \"\",\r\n        isImageMessage: false,\r\n        isFileMessage: false,\r\n        isVideoMessage: false,\r\n        isAudioMessage: false,\r\n        fileUrl: \"\",\r\n        sendFile: undefined,\r\n        toUser: activeChat.id,\r\n        fromUser: user.id,\r\n        deliverStatus: DeliverStatus.SENDING,\r\n        readStatus: ReadStatus.UNREAD,\r\n        deliverTimestamp: \"\",\r\n        readTimestamp: \"\",\r\n        content: \"metadata\",\r\n        contentType: \"type\",\r\n      });\r\n\r\n      setActiveChat(chat);\r\n      setTextMessage(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal isOpen={show} centered toggle={toggle}>\r\n      <ModalHeader\r\n        tag=\"h5\"\r\n        className=\"modal-title font-size-16\"\r\n        toggle={toggle}\r\n      >\r\n        {t(\"Forward message\")}\r\n      </ModalHeader>\r\n      <ModalBody className=\"p-4\">\r\n        <Form>\r\n          <FormGroup className=\"mb-4\">\r\n            <Collapse isOpen={isOpenCollapse} id=\"groupmembercollapse\">\r\n              <Card className=\"border\">\r\n                <CardHeader>\r\n                  <h5 className=\"font-size-15 mb-0\">{t(\"Contacts\")}</h5>\r\n                </CardHeader>\r\n                <CardBody className=\"p-2\">\r\n                  <SimpleBar style={{ maxHeight: \"150px\" }}>\r\n                    <div id=\"addContacts\">\r\n                      <SelectContact handleCheckContact={handleCheckContact}/>\r\n                    </div>\r\n                  </SimpleBar>\r\n                </CardBody>\r\n              </Card>\r\n            </Collapse>\r\n          </FormGroup>\r\n        </Form>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button type=\"button\" color=\"link\" onClick={toggle}>\r\n          {t(\"Close\")}\r\n        </Button>\r\n        <Button type=\"button\" color=\"primary\" onClick={() => forwardMessage()}>\r\n          Send\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}