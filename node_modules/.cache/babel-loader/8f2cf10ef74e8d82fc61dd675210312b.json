{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import{parseMessage}from\"../utils/parseUtils\";var MessagesBusiness=function MessagesBusiness(api,contacts,groups,user){var _this=this;_classCallCheck(this,MessagesBusiness);this.api=api;this.contacts=contacts;this.groups=groups;this.user=user;this.list=function(chat,callback){var _chat$messages$;if(!_this.api)return;var lastMessageId=(_chat$messages$=chat.messages[0])===null||_chat$messages$===void 0?void 0:_chat$messages$.id;_this.api.getMessages(chat.id,chat.jid.includes(\"@conference.\")?\"groupchat\":\"chat\",{paramsUrl:{startingByMessageId:lastMessageId}},function(data){if(data)_this.user.get(function(user){callback(data.messages.map(function(msg){return parseMessage(msg,_this.contacts.getContacts(),_this.groups.getGroups(),user);}));});else return;});};};export{MessagesBusiness as default};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Messages.ts"],"names":["parseMessage","MessagesBusiness","api","contacts","groups","user","list","chat","callback","lastMessageId","messages","id","getMessages","jid","includes","paramsUrl","startingByMessageId","data","get","map","msg","getContacts","getGroups"],"mappings":"kLAGA,OAASA,YAAT,KAA6B,qBAA7B,C,GAQqBC,CAAAA,gB,CACnB,0BACUC,GADV,CAEUC,QAFV,CAGUC,MAHV,CAIUC,IAJV,CAKE,4DAJQH,GAIR,CAJQA,GAIR,MAHQC,QAGR,CAHQA,QAGR,MAFQC,MAER,CAFQA,MAER,MADQC,IACR,CADQA,IACR,MACFC,IADE,CACK,SAACC,IAAD,CAAcC,QAAd,CAAgD,qBACrD,GAAI,CAAC,KAAI,CAACN,GAAV,CAAe,OACf,GAAMO,CAAAA,aAAa,kBAAGF,IAAI,CAACG,QAAL,CAAc,CAAd,CAAH,0CAAG,gBAAkBC,EAAxC,CACA,KAAI,CAACT,GAAL,CAASU,WAAT,CACEL,IAAI,CAACI,EADP,CAEEJ,IAAI,CAACM,GAAL,CAASC,QAAT,CAAkB,cAAlB,EAAoC,WAApC,CAAkD,MAFpD,CAGE,CAAEC,SAAS,CAAE,CAAEC,mBAAmB,CAAEP,aAAvB,CAAb,CAHF,CAIE,SAACQ,IAAD,CAAU,CACR,GAAIA,IAAJ,CACE,KAAI,CAACZ,IAAL,CAAUa,GAAV,CAAc,SAACb,IAAD,CAAU,CACtBG,QAAQ,CACNS,IAAI,CAACP,QAAL,CAAcS,GAAd,CAAkB,SAACC,GAAD,QAChBpB,CAAAA,YAAY,CACVoB,GADU,CAEV,KAAI,CAACjB,QAAL,CAAckB,WAAd,EAFU,CAGV,KAAI,CAACjB,MAAL,CAAYkB,SAAZ,EAHU,CAIVjB,IAJU,CADI,EAAlB,CADM,CAAR,CAUD,CAXD,EADF,IAaK,QACN,CAnBH,EAqBD,CAzBC,CAAE,C,QANeJ,gB","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport IChat from \"../../alias/IChat\";\r\nimport IMessage from \"../../alias/IMessage\";\r\nimport { parseMessage } from \"../utils/parseUtils\";\r\nimport ContactsBusiness from \"./Contacts\";\r\nimport GroupsBusiness from \"./Groups\";\r\nimport UserBusiness from \"./User\";\r\n\r\ninterface GetMessagesCallback {\r\n  (messages: IMessage[]): void;\r\n}\r\nexport default class MessagesBusiness {\r\n  constructor(\r\n    private api: API,\r\n    private contacts: ContactsBusiness,\r\n    private groups: GroupsBusiness,\r\n    private user: UserBusiness\r\n  ) {}\r\n  list = (chat: IChat, callback: GetMessagesCallback) => {\r\n    if (!this.api) return;\r\n    const lastMessageId = chat.messages[0]?.id;\r\n    this.api.getMessages(\r\n      chat.id,\r\n      chat.jid.includes(\"@conference.\") ? \"groupchat\" : \"chat\",\r\n      { paramsUrl: { startingByMessageId: lastMessageId } },\r\n      (data) => {\r\n        if (data)\r\n          this.user.get((user) => {\r\n            callback(\r\n              data.messages.map((msg) =>\r\n                parseMessage(\r\n                  msg,\r\n                  this.contacts.getContacts(),\r\n                  this.groups.getGroups(),\r\n                  user\r\n                )\r\n              )\r\n            );\r\n          });\r\n        else return;\r\n      }\r\n    );\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}