{"ast":null,"code":"import LocalZone from \"./zones/localZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport Locale from \"./impl/locale.js\";\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\n\nlet now = () => Date.now(),\n    defaultZone = null,\n    // not setting this directly to LocalZone.instance bc loading order issues\ndefaultLocale = null,\n    defaultNumberingSystem = null,\n    defaultOutputCalendar = null,\n    throwOnInvalid = false;\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\n\n\nexport default class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n  /**\n   * Set the callback for returning the current timestamp.\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\n   * @type {function}\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n   */\n\n\n  static set now(n) {\n    now = n;\n  }\n  /**\n   * Get the default time zone to create DateTimes in.\n   * @type {string}\n   */\n\n\n  static get defaultZoneName() {\n    return Settings.defaultZone.name;\n  }\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * @type {string}\n   */\n\n\n  static set defaultZoneName(z) {\n    if (!z) {\n      defaultZone = null;\n    } else {\n      defaultZone = normalizeZone(z);\n    }\n  }\n  /**\n   * Get the default time zone object to create DateTimes in. Does not affect existing instances.\n   * @type {Zone}\n   */\n\n\n  static get defaultZone() {\n    return defaultZone || LocalZone.instance;\n  }\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n\n\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n\n\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n\n\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n\n\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n\n\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n\n\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n\n\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n\n\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n\n\n  static resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/luxon/src/settings.js"],"names":["LocalZone","IANAZone","Locale","normalizeZone","now","Date","defaultZone","defaultLocale","defaultNumberingSystem","defaultOutputCalendar","throwOnInvalid","Settings","n","defaultZoneName","name","z","instance","locale","numberingSystem","outputCalendar","t","resetCaches","resetCache"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,sBAAtB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,SAASC,aAAT,QAA8B,oBAA9B;;AAEA,IAAIC,GAAG,GAAG,MAAMC,IAAI,CAACD,GAAL,EAAhB;AAAA,IACEE,WAAW,GAAG,IADhB;AAAA,IACsB;AACpBC,aAAa,GAAG,IAFlB;AAAA,IAGEC,sBAAsB,GAAG,IAH3B;AAAA,IAIEC,qBAAqB,GAAG,IAJ1B;AAAA,IAKEC,cAAc,GAAG,KALnB;AAOA;;;;;AAGA,eAAe,MAAMC,QAAN,CAAe;AAC5B;;;;AAIA,aAAWP,GAAX,GAAiB;AACf,WAAOA,GAAP;AACD;AAED;;;;;;;;;AAOA,aAAWA,GAAX,CAAeQ,CAAf,EAAkB;AAChBR,IAAAA,GAAG,GAAGQ,CAAN;AACD;AAED;;;;;;AAIA,aAAWC,eAAX,GAA6B;AAC3B,WAAOF,QAAQ,CAACL,WAAT,CAAqBQ,IAA5B;AACD;AAED;;;;;;AAIA,aAAWD,eAAX,CAA2BE,CAA3B,EAA8B;AAC5B,QAAI,CAACA,CAAL,EAAQ;AACNT,MAAAA,WAAW,GAAG,IAAd;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW,GAAGH,aAAa,CAACY,CAAD,CAA3B;AACD;AACF;AAED;;;;;;AAIA,aAAWT,WAAX,GAAyB;AACvB,WAAOA,WAAW,IAAIN,SAAS,CAACgB,QAAhC;AACD;AAED;;;;;;AAIA,aAAWT,aAAX,GAA2B;AACzB,WAAOA,aAAP;AACD;AAED;;;;;;AAIA,aAAWA,aAAX,CAAyBU,MAAzB,EAAiC;AAC/BV,IAAAA,aAAa,GAAGU,MAAhB;AACD;AAED;;;;;;AAIA,aAAWT,sBAAX,GAAoC;AAClC,WAAOA,sBAAP;AACD;AAED;;;;;;AAIA,aAAWA,sBAAX,CAAkCU,eAAlC,EAAmD;AACjDV,IAAAA,sBAAsB,GAAGU,eAAzB;AACD;AAED;;;;;;AAIA,aAAWT,qBAAX,GAAmC;AACjC,WAAOA,qBAAP;AACD;AAED;;;;;;AAIA,aAAWA,qBAAX,CAAiCU,cAAjC,EAAiD;AAC/CV,IAAAA,qBAAqB,GAAGU,cAAxB;AACD;AAED;;;;;;AAIA,aAAWT,cAAX,GAA4B;AAC1B,WAAOA,cAAP;AACD;AAED;;;;;;AAIA,aAAWA,cAAX,CAA0BU,CAA1B,EAA6B;AAC3BV,IAAAA,cAAc,GAAGU,CAAjB;AACD;AAED;;;;;;AAIA,SAAOC,WAAP,GAAqB;AACnBnB,IAAAA,MAAM,CAACoB,UAAP;AACArB,IAAAA,QAAQ,CAACqB,UAAT;AACD;;AAvH2B","sourcesContent":["import LocalZone from \"./zones/localZone.js\";\nimport IANAZone from \"./zones/IANAZone.js\";\nimport Locale from \"./impl/locale.js\";\n\nimport { normalizeZone } from \"./impl/zoneUtil.js\";\n\nlet now = () => Date.now(),\n  defaultZone = null, // not setting this directly to LocalZone.instance bc loading order issues\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  throwOnInvalid = false;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport default class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * The function should return a number, which will be interpreted as an Epoch millisecond count\n   * @type {function}\n   * @example Settings.now = () => Date.now() + 3000 // pretend it is 3 seconds in the future\n   * @example Settings.now = () => 0 // always pretend it's Jan 1, 1970 at midnight in UTC time\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Get the default time zone to create DateTimes in.\n   * @type {string}\n   */\n  static get defaultZoneName() {\n    return Settings.defaultZone.name;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultZoneName(z) {\n    if (!z) {\n      defaultZone = null;\n    } else {\n      defaultZone = normalizeZone(z);\n    }\n  }\n\n  /**\n   * Get the default time zone object to create DateTimes in. Does not affect existing instances.\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return defaultZone || LocalZone.instance;\n  }\n\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {boolean}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCaches() {\n    Locale.resetCache();\n    IANAZone.resetCache();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}