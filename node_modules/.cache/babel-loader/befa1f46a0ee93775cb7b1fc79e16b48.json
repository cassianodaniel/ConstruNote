{"ast":null,"code":"/**\n * Function which returns a MediaStreamFactory.\n * @public\n */\nexport function defaultMediaStreamFactory() {\n  return function (constraints) {\n    // if no audio or video, return a media stream without tracks\n    if (!constraints.audio && !constraints.video) {\n      return Promise.resolve(new MediaStream());\n    } // getUserMedia() is a powerful feature which can only be used in secure contexts; in insecure contexts,\n    // navigator.mediaDevices is undefined, preventing access to getUserMedia(). A secure context is, in short,\n    // a page loaded using HTTPS or the file:/// URL scheme, or a page loaded from localhost.\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#Privacy_and_security\n\n\n    if (navigator.mediaDevices === undefined) {\n      return Promise.reject(new Error(\"Media devices not available in insecure contexts.\"));\n    }\n\n    return navigator.mediaDevices.getUserMedia.call(navigator.mediaDevices, constraints);\n  };\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/platform/web/session-description-handler/media-stream-factory-default.js"],"names":["defaultMediaStreamFactory","constraints","audio","video","Promise","resolve","MediaStream","navigator","mediaDevices","undefined","reject","Error","getUserMedia","call"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,yBAAT,GAAqC;AACxC,SAAO,UAACC,WAAD,EAAiB;AACpB;AACA,QAAI,CAACA,WAAW,CAACC,KAAb,IAAsB,CAACD,WAAW,CAACE,KAAvC,EAA8C;AAC1C,aAAOC,OAAO,CAACC,OAAR,CAAgB,IAAIC,WAAJ,EAAhB,CAAP;AACH,KAJmB,CAKpB;AACA;AACA;AACA;;;AACA,QAAIC,SAAS,CAACC,YAAV,KAA2BC,SAA/B,EAA0C;AACtC,aAAOL,OAAO,CAACM,MAAR,CAAe,IAAIC,KAAJ,CAAU,mDAAV,CAAf,CAAP;AACH;;AACD,WAAOJ,SAAS,CAACC,YAAV,CAAuBI,YAAvB,CAAoCC,IAApC,CAAyCN,SAAS,CAACC,YAAnD,EAAiEP,WAAjE,CAAP;AACH,GAbD;AAcH","sourcesContent":["/**\n * Function which returns a MediaStreamFactory.\n * @public\n */\nexport function defaultMediaStreamFactory() {\n    return (constraints) => {\n        // if no audio or video, return a media stream without tracks\n        if (!constraints.audio && !constraints.video) {\n            return Promise.resolve(new MediaStream());\n        }\n        // getUserMedia() is a powerful feature which can only be used in secure contexts; in insecure contexts,\n        // navigator.mediaDevices is undefined, preventing access to getUserMedia(). A secure context is, in short,\n        // a page loaded using HTTPS or the file:/// URL scheme, or a page loaded from localhost.\n        // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#Privacy_and_security\n        if (navigator.mediaDevices === undefined) {\n            return Promise.reject(new Error(\"Media devices not available in insecure contexts.\"));\n        }\n        return navigator.mediaDevices.getUserMedia.call(navigator.mediaDevices, constraints);\n    };\n}\n"]},"metadata":{},"sourceType":"module"}