{"ast":null,"code":"import { Inviter, Registerer, SessionState, UserAgent } from \"sip.js\";\nexport default class SIP {\n  constructor(props) {\n    this.onInvite = invitation => {\n      const cb = session => {\n        this.currentCall = invitation;\n        this.onReceiveCall(session, invitation);\n      };\n\n      invitation.stateChange.addListener(cb);\n      this.onReceiveCall(SessionState.Initial, invitation);\n    };\n\n    Object.assign(this, props);\n    this.makeSIP();\n  }\n\n  makeSIP() {\n    const transportOptions = {\n      //   server: this.wsURL,\n      server: \"wss://test.citrussquad.com:7443\"\n    };\n    const uri = UserAgent.makeURI(`sip:${this.user}@${this.domain}`);\n    const userAgentOptions = {\n      authorizationUsername: this.user,\n      authorizationPassword: this.password,\n      transportOptions,\n      uri,\n      logBuiltinEnabled: false,\n      delegate: {\n        onInvite: this.onInvite\n      }\n    };\n    this.userAgent = new UserAgent(userAgentOptions);\n    this.registerer = new Registerer(this.userAgent);\n    this.userAgent.start().then(() => {\n      var _this$registerer, _this$registerer2;\n\n      (_this$registerer = this.registerer) === null || _this$registerer === void 0 ? void 0 : _this$registerer.register();\n      (_this$registerer2 = this.registerer) === null || _this$registerer2 === void 0 ? void 0 : _this$registerer2.stateChange.addListener(this.connectionCB);\n    });\n  }\n\n  invite(number, constraints = {\n    video: false,\n    audio: true\n  }) {\n    if (!this.currentCall && this.userAgent) {\n      const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\n      if (destination) this.currentCall = new Inviter(this.userAgent, destination, {\n        sessionDescriptionHandlerOptions: {\n          constraints\n        }\n      });\n      if (this.currentCall) this.currentCall.stateChange.addListener(state => {\n        if (this.currentCall) this.onMakeCall(state, this.currentCall);\n      });\n      this.currentCall.invite();\n      this.onMakeCall(SessionState.Initial, this.currentCall);\n    }\n  }\n\n  endCall(session) {\n    switch (session.state) {\n      case SessionState.Initial:\n      case SessionState.Establishing:\n        if (session instanceof Inviter) {\n          // An unestablished outgoing session\n          session.cancel();\n        } else {\n          // An unestablished incoming session\n          session.reject();\n        }\n\n        break;\n\n      case SessionState.Established:\n        // An established session\n        session.bye();\n        break;\n\n      case SessionState.Terminating:\n      case SessionState.Terminated:\n        // Cannot terminate a session that is already terminated\n        break;\n    }\n  }\n\n  setupRemoteMedia(session) {\n    var _ref, _ref$peerConnection;\n\n    const mediaElement = document.getElementById(\"remote-stream\");\n    const remoteStream = new MediaStream();\n    let receivingVideo = false;\n    (_ref = session.sessionDescriptionHandler) === null || _ref === void 0 ? void 0 : (_ref$peerConnection = _ref.peerConnection) === null || _ref$peerConnection === void 0 ? void 0 : _ref$peerConnection.getReceivers().forEach(receiver => {\n      if (receiver.track) {\n        remoteStream.addTrack(receiver.track);\n        if (receiver.track.kind === \"video\") receivingVideo = true;\n      }\n    });\n\n    if (mediaElement) {\n      mediaElement.srcObject = remoteStream;\n      mediaElement.play();\n    }\n\n    return receivingVideo;\n  }\n\n  cleanupMedia() {\n    const mediaElement = document.getElementById(\"remote-stream\");\n\n    if (mediaElement) {\n      mediaElement.srcObject = null;\n      mediaElement.pause();\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/voice/voicecommunicator.ts"],"names":["Inviter","Registerer","SessionState","UserAgent","SIP","constructor","props","onInvite","invitation","cb","session","currentCall","onReceiveCall","stateChange","addListener","Initial","Object","assign","makeSIP","transportOptions","server","uri","makeURI","user","domain","userAgentOptions","authorizationUsername","authorizationPassword","password","logBuiltinEnabled","delegate","userAgent","registerer","start","then","register","connectionCB","invite","number","constraints","video","audio","destination","sessionDescriptionHandlerOptions","state","onMakeCall","endCall","Establishing","cancel","reject","Established","bye","Terminating","Terminated","setupRemoteMedia","mediaElement","document","getElementById","remoteStream","MediaStream","receivingVideo","sessionDescriptionHandler","peerConnection","getReceivers","forEach","receiver","track","addTrack","kind","srcObject","play","cleanupMedia","pause"],"mappings":"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","sourcesContent":["import {\r\n  Invitation,\r\n  Inviter,\r\n  Registerer,\r\n  RegistererState,\r\n  Session,\r\n  SessionState,\r\n  UserAgent,\r\n  UserAgentOptions,\r\n  Web,\r\n} from \"sip.js\";\r\ninterface ConnectionListenerCallback {\r\n  (data: RegistererState): void;\r\n}\r\ninterface MakeCallCallback {\r\n  (state: SessionState, inviter: Inviter): void;\r\n}\r\ninterface ReceiveCallCallback {\r\n  (state: SessionState, invitation: Invitation): void;\r\n}\r\ninterface SIPConstructorPropeties {\r\n  user: string;\r\n  password: string;\r\n  wsURL: string;\r\n  domain: string;\r\n  connectionCB: ConnectionListenerCallback;\r\n  onMakeCall: MakeCallCallback;\r\n  onReceiveCall: ReceiveCallCallback;\r\n}\r\nexport default interface SIP {\r\n  user: string;\r\n  password: string;\r\n  wsURL: string;\r\n  domain: string;\r\n  connectionCB: ConnectionListenerCallback;\r\n  onMakeCall: MakeCallCallback;\r\n  onReceiveCall: ReceiveCallCallback;\r\n  userAgent?: UserAgent;\r\n  registerer?: Registerer;\r\n  currentCall?: Session;\r\n}\r\nexport default class SIP {\r\n  constructor(props: SIPConstructorPropeties) {\r\n    Object.assign(this, props);\r\n    this.makeSIP();\r\n  }\r\n  makeSIP() {\r\n    const transportOptions = {\r\n      //   server: this.wsURL,\r\n      server: \"wss://test.citrussquad.com:7443\",\r\n    };\r\n    const uri = UserAgent.makeURI(`sip:${this.user}@${this.domain}`);\r\n    const userAgentOptions: UserAgentOptions = {\r\n      authorizationUsername: this.user,\r\n      authorizationPassword: this.password,\r\n      transportOptions,\r\n      uri,\r\n      logBuiltinEnabled: false,\r\n      delegate: {\r\n        onInvite: this.onInvite,\r\n      },\r\n    };\r\n    this.userAgent = new UserAgent(userAgentOptions);\r\n    this.registerer = new Registerer(this.userAgent);\r\n    this.userAgent.start().then(() => {\r\n      this.registerer?.register();\r\n      this.registerer?.stateChange.addListener(this.connectionCB);\r\n    });\r\n  }\r\n  invite(\r\n    number: string,\r\n    constraints: MediaStreamConstraints = { video: false, audio: true }\r\n  ) {\r\n    if (!this.currentCall && this.userAgent) {\r\n      const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\r\n      if (destination)\r\n        this.currentCall = new Inviter(this.userAgent, destination, {\r\n          sessionDescriptionHandlerOptions: {\r\n            constraints,\r\n          },\r\n        });\r\n      if (this.currentCall)\r\n        (this.currentCall as Inviter).stateChange.addListener((state) => {\r\n          if (this.currentCall)\r\n            this.onMakeCall(state, this.currentCall as Inviter);\r\n        });\r\n      (this.currentCall as Inviter).invite();\r\n      this.onMakeCall(SessionState.Initial, this.currentCall as Inviter);\r\n    }\r\n  }\r\n  onInvite = (invitation: Invitation) => {\r\n    const cb = (session: SessionState) => {\r\n      this.currentCall = invitation;\r\n      this.onReceiveCall(session, invitation);\r\n    };\r\n    invitation.stateChange.addListener(cb);\r\n    this.onReceiveCall(SessionState.Initial, invitation);\r\n  };\r\n  endCall(session: Session) {\r\n    switch (session.state) {\r\n      case SessionState.Initial:\r\n      case SessionState.Establishing:\r\n        if (session instanceof Inviter) {\r\n          // An unestablished outgoing session\r\n          session.cancel();\r\n        } else {\r\n          // An unestablished incoming session\r\n          (session as Invitation).reject();\r\n        }\r\n        break;\r\n      case SessionState.Established:\r\n        // An established session\r\n        session.bye();\r\n        break;\r\n      case SessionState.Terminating:\r\n      case SessionState.Terminated:\r\n        // Cannot terminate a session that is already terminated\r\n        break;\r\n    }\r\n  }\r\n  setupRemoteMedia(session: Session) {\r\n    const mediaElement: HTMLVideoElement = document.getElementById(\r\n      \"remote-stream\"\r\n    ) as HTMLVideoElement;\r\n    const remoteStream = new MediaStream();\r\n    let receivingVideo = false;\r\n    (session.sessionDescriptionHandler as Web.SessionDescriptionHandler)?.peerConnection\r\n      ?.getReceivers()\r\n      .forEach((receiver) => {\r\n        if (receiver.track) {\r\n          remoteStream.addTrack(receiver.track);\r\n          if (receiver.track.kind === \"video\") receivingVideo = true;\r\n        }\r\n      });\r\n    if (mediaElement) {\r\n      mediaElement.srcObject = remoteStream;\r\n      mediaElement.play();\r\n    }\r\n    return receivingVideo;\r\n  }\r\n\r\n  cleanupMedia() {\r\n    const mediaElement: HTMLVideoElement = document.getElementById(\r\n      \"remote-stream\"\r\n    ) as HTMLVideoElement;\r\n    if (mediaElement) {\r\n      mediaElement.srcObject = null;\r\n      mediaElement.pause();\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}