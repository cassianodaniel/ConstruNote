{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\DathApp\\\\ConstruNote\\\\src\\\\components\\\\ChatMessageText.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport VideoMessage from \"./VideoMessage\";\nimport ImageMessage from \"./ImageMessage\";\nimport AudioMessage from \"./AudioMessage\";\nimport FileMessage from \"./FileMessage\";\nimport { useTranslation } from \"react-i18next\";\nimport \"./../assets/css/link-message-text.css\";\nimport Linkify from \"react-linkify\";\nimport { parseEmojis } from \"../helpers/MessageUtils\";\nimport { TextMessageTagParse } from \"../helpers/TextMessageTagParse\";\nimport { useContact } from \"../contexts/ContactContext\";\n\nconst ChatMessageText = ({\n  message\n}) => {\n  const [show, setShow] = useState(false);\n  const {\n    contacts,\n    openContact\n  } = useContact();\n  const {\n    t\n  } = useTranslation();\n\n  const toggle = () => setShow(!show);\n\n  const componentDecorator = (href, text, key) => /*#__PURE__*/React.createElement(\"a\", {\n    href: href,\n    key: key,\n    rel: \"noopener noreferrer\",\n    target: \"_blank\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, text);\n\n  useEffect(() => {\n    setShow(false);\n  }, [message]);\n  var smallerMessage = \"\";\n  var biggerMessage = \"\";\n  const MAXNUMBEROFCHARACTERSONAMESSAGE = 10000;\n  const MAXNUMBERTODISPLAYMESSAGE = 165;\n\n  if (message.message) {\n    if (message.message.length > MAXNUMBERTODISPLAYMESSAGE && !message.isFileMessage && !message.isImageMessage && !message.isAudioMessage && !message.isVideoMessage) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"receivedmessage\",\n        className: \"mb-0\",\n        style: {\n          wordBreak: \"break-word\",\n          textAlign: \"left\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Linkify, {\n        componentDecorator: componentDecorator,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }\n      }, !show ? (smallerMessage = message.message.slice(0, message.message.includes(\"userId\") ? MAXNUMBERTODISPLAYMESSAGE + 100 * (message.message.match(/{\"userId\":\"/g) || []).length : MAXNUMBERTODISPLAYMESSAGE)) && TextMessageTagParse(smallerMessage, contacts, openContact) : null, show ? (biggerMessage = message.message.slice(MAXNUMBERTODISPLAYMESSAGE, MAXNUMBEROFCHARACTERSONAMESSAGE)) && TextMessageTagParse(message.message.slice(0, MAXNUMBERTODISPLAYMESSAGE) + biggerMessage, contacts, openContact) : null, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"hover\",\n        id: \"more-msg\",\n        style: {\n          border: 0,\n          background: 0\n        },\n        onClick: toggle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 15\n        }\n      }, !show && message.message.length > MAXNUMBERTODISPLAYMESSAGE + 100 * (message.message.match(/{\"userId\":\"/g) || []).length ? \".. \" + t(\"Read more\") : null)));\n    }\n\n    if (message.message.length <= MAXNUMBERTODISPLAYMESSAGE - 1 || message.isFileMessage || message.isImageMessage || message.isAudioMessage || message.isVideoMessage) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"mb-0\",\n        id: \"receivedmessage\",\n        style: {\n          wordBreak: \"break-word\",\n          textAlign: \"left\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }\n      }, message.isAudioMessage && /*#__PURE__*/React.createElement(AudioMessage, {\n        url: message.fileUrl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 40\n        }\n      }), message.isFileMessage && /*#__PURE__*/React.createElement(FileMessage, {\n        url: message.fileUrl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 39\n        }\n      }), message.isVideoMessage && /*#__PURE__*/React.createElement(VideoMessage, {\n        url: message.fileUrl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 40\n        }\n      }), message.isImageMessage && /*#__PURE__*/React.createElement(ImageMessage, {\n        url: message.fileUrl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 40\n        }\n      }), !message.isAudioMessage && !message.isFileMessage && !message.isVideoMessage && !message.isImageMessage && /*#__PURE__*/React.createElement(Linkify, {\n        componentDecorator: componentDecorator,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 17\n        }\n      }, message.message ? message.message.toString().split(\"\\n\").map((msg, i) => /*#__PURE__*/React.createElement(\"div\", {\n        key: i,\n        id: message.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 27\n        }\n      }, TextMessageTagParse(parseEmojis(msg), contacts, openContact))) : null));\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n\nexport default ChatMessageText;","map":{"version":3,"sources":["C:/Users/Digivox/dev/DathApp/ConstruNote/src/components/ChatMessageText.tsx"],"names":["React","useState","useEffect","VideoMessage","ImageMessage","AudioMessage","FileMessage","useTranslation","Linkify","parseEmojis","TextMessageTagParse","useContact","ChatMessageText","message","show","setShow","contacts","openContact","t","toggle","componentDecorator","href","text","key","smallerMessage","biggerMessage","MAXNUMBEROFCHARACTERSONAMESSAGE","MAXNUMBERTODISPLAYMESSAGE","length","isFileMessage","isImageMessage","isAudioMessage","isVideoMessage","wordBreak","textAlign","slice","includes","match","border","background","fileUrl","toString","split","map","msg","i","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport IMessage from \"../alias/IMessage\";\r\n\r\nimport VideoMessage from \"./VideoMessage\";\r\nimport ImageMessage from \"./ImageMessage\";\r\nimport AudioMessage from \"./AudioMessage\";\r\nimport FileMessage from \"./FileMessage\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport \"./../assets/css/link-message-text.css\";\r\nimport Linkify from \"react-linkify\";\r\nimport { parseEmojis } from \"../helpers/MessageUtils\";\r\nimport { TextMessageTagParse } from \"../helpers/TextMessageTagParse\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\ninterface IProps {\r\n  message: IMessage;\r\n}\r\nconst ChatMessageText: React.FC<IProps> = ({ message }) => {\r\n  const [show, setShow] = useState(false);\r\n  const { contacts, openContact } = useContact();\r\n  const { t } = useTranslation();\r\n  const toggle = () => setShow(!show);\r\n  const componentDecorator = (href: string, text: string, key: any) => (\r\n    <a href={href} key={key} rel=\"noopener noreferrer\" target=\"_blank\">\r\n      {text}\r\n    </a>\r\n  );\r\n  useEffect(() => {\r\n    setShow(false);\r\n  }, [message]);\r\n  var smallerMessage = \"\";\r\n  var biggerMessage = \"\";\r\n  const MAXNUMBEROFCHARACTERSONAMESSAGE = 10000;\r\n  const MAXNUMBERTODISPLAYMESSAGE = 165;\r\n\r\n    if (message.message) {\r\n      if (\r\n        message.message.length > MAXNUMBERTODISPLAYMESSAGE &&\r\n        !message.isFileMessage &&\r\n        !message.isImageMessage &&\r\n        !message.isAudioMessage &&\r\n        !message.isVideoMessage\r\n      ) {\r\n        return (\r\n          <div\r\n            id=\"receivedmessage\"\r\n            className=\"mb-0\"\r\n            style={{ wordBreak: \"break-word\", textAlign: \"left\" }}\r\n          >\r\n            <Linkify\r\n              componentDecorator={componentDecorator}\r\n            >\r\n              {!show\r\n                ? (smallerMessage = message.message.slice(\r\n                    0,\r\n                    message.message.includes(\"userId\") ? \r\n                      MAXNUMBERTODISPLAYMESSAGE + \r\n                      (100 * (message.message.match(/{\"userId\":\"/g) || []).length) \r\n                    : \r\n                      MAXNUMBERTODISPLAYMESSAGE\r\n                  )) && TextMessageTagParse(smallerMessage, contacts, openContact)\r\n                : null\r\n                }\r\n              {show\r\n                ? (biggerMessage = message.message.slice(\r\n                    MAXNUMBERTODISPLAYMESSAGE,\r\n                    MAXNUMBEROFCHARACTERSONAMESSAGE\r\n                  )) &&\r\n                  TextMessageTagParse(message.message.slice(0, MAXNUMBERTODISPLAYMESSAGE) +\r\n                    biggerMessage, contacts, openContact)\r\n                : null}\r\n\r\n              <button\r\n                className=\"hover\"\r\n                id=\"more-msg\"\r\n                style={{\r\n                  border: 0,\r\n                  background: 0,\r\n                }}\r\n                onClick={toggle}\r\n              >\r\n                {!show && message.message.length > \r\n                MAXNUMBERTODISPLAYMESSAGE + (100 * (message.message.match(/{\"userId\":\"/g) || []).length)  ? \".. \" + t(\"Read more\") \r\n                : null}\r\n              </button>\r\n            </Linkify>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      if (\r\n        (message.message.length <= MAXNUMBERTODISPLAYMESSAGE - 1 ) ||\r\n        message.isFileMessage ||\r\n        message.isImageMessage ||\r\n        message.isAudioMessage ||\r\n        message.isVideoMessage\r\n      ) {\r\n        return (\r\n          <div\r\n            className=\"mb-0\"\r\n            id=\"receivedmessage\"\r\n            style={{ wordBreak: \"break-word\", textAlign: \"left\" }}\r\n          >\r\n            {message.isAudioMessage && <AudioMessage url={message.fileUrl} />}\r\n            {message.isFileMessage && <FileMessage url={message.fileUrl} />}\r\n            {message.isVideoMessage && <VideoMessage url={message.fileUrl} />}\r\n            {message.isImageMessage && <ImageMessage url={message.fileUrl} />}\r\n            {!message.isAudioMessage &&\r\n              !message.isFileMessage &&\r\n              !message.isVideoMessage &&\r\n              !message.isImageMessage && (\r\n                <Linkify componentDecorator={componentDecorator}>\r\n                  {message.message\r\n                    ? message.message\r\n                        .toString()\r\n                        .split(\"\\n\")\r\n                        .map((msg, i) => (\r\n                          <div key={i} id={message.id}>\r\n                            {TextMessageTagParse(\r\n                              parseEmojis(msg),\r\n                              contacts,\r\n                              openContact\r\n                            )}\r\n                          </div>\r\n                        ))\r\n                    : null}\r\n                </Linkify>\r\n              )}\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  return <></>;\r\n};\r\n\r\nexport default ChatMessageText;\r\n"]},"metadata":{},"sourceType":"module"}