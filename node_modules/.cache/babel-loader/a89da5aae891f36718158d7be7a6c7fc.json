{"ast":null,"code":"import SquadChatCommunicator from \"./SquadChatCommunicator\";\nimport API from \"@digivox/apicommunicator\";\nimport { getAuthorization } from \"./utils/localStorageUtils\";\nimport SettingsBusiness from \"./business/Settings\";\nimport ContactsBusiness from \"./business/Contacts\";\nimport GroupsBusiness from \"./business/Groups\";\nimport ChatsBusiness from \"./business/Chats\";\nimport MessagesBusiness from \"./business/Messages\";\nimport UserBusiness from \"./business/User\";\nimport AttachmentsBusiness from \"./business/Attachments\";\nexport class SquadCommunicator {\n  static getInstance(chatCommunicatorSubscribe) {\n    if (!this.instance) {\n      this.instance = new SquadCommunicator();\n    }\n\n    this.instance.updateSubscribeFunction(chatCommunicatorSubscribe);\n    this.instance.makeAPI();\n    return this.instance;\n  }\n\n  updateSubscribeFunction(chatCommunicatorSubscribe) {\n    var _this$chat, _this$chat2;\n\n    (_this$chat = this.chat) === null || _this$chat === void 0 ? void 0 : _this$chat.removeAllSubscription();\n    (_this$chat2 = this.chat) === null || _this$chat2 === void 0 ? void 0 : _this$chat2.subscribe(chatCommunicatorSubscribe);\n  } // -- Make Services --\n\n\n  makeAPI() {\n    const authorization = getAuthorization();\n\n    if (authorization) {\n      const api = new API({\n        token: authorization.access_token,\n        apiUrl: authorization.baseUrl\n      });\n      this.api = api;\n      this.makeBusiness();\n    }\n  }\n\n  makeBusiness() {\n    if (!this.api) return;\n    this.settings = new SettingsBusiness(this.api);\n    this.user = new UserBusiness(this.api, this.settings);\n    this.contacts = new ContactsBusiness(this.api, this.settings);\n    this.groups = new GroupsBusiness(this.api, this.settings);\n    this.chats = new ChatsBusiness(this.api, this.contacts, this.groups, this.user);\n    this.messages = new MessagesBusiness(this.api, this.contacts, this.groups, this.user);\n    this.attachments = new AttachmentsBusiness(this.api, this.settings);\n    this.makeChat();\n  }\n\n  makeChat() {\n    this.chat = new SquadChatCommunicator(this.settings, this.contacts, this.groups, this.interfaceChatCommunicatorSubscribe);\n  }\n\n}\nSquadCommunicator.instance = void 0;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicatorService.ts"],"names":["SquadChatCommunicator","API","getAuthorization","SettingsBusiness","ContactsBusiness","GroupsBusiness","ChatsBusiness","MessagesBusiness","UserBusiness","AttachmentsBusiness","SquadCommunicator","getInstance","chatCommunicatorSubscribe","instance","updateSubscribeFunction","makeAPI","chat","removeAllSubscription","subscribe","authorization","api","token","access_token","apiUrl","baseUrl","makeBusiness","settings","user","contacts","groups","chats","messages","attachments","makeChat","interfaceChatCommunicatorSubscribe"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,GAAP,MAAgB,0BAAhB;AAEA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,OAAOC,mBAAP,MAAgC,wBAAhC;AAeA,OAAO,MAAMC,iBAAN,CAAwB;AAE7B,SAAOC,WAAP,CAAmBC,yBAAnB,EAAoE;AAClE,QAAI,CAAC,KAAKC,QAAV,EAAoB;AAClB,WAAKA,QAAL,GAAgB,IAAIH,iBAAJ,EAAhB;AACD;;AACD,SAAKG,QAAL,CAAcC,uBAAd,CAAsCF,yBAAtC;AACA,SAAKC,QAAL,CAAcE,OAAd;AACA,WAAO,KAAKF,QAAZ;AACD;;AACDC,EAAAA,uBAAuB,CAACF,yBAAD,EAAkD;AAAA;;AACvE,uBAAKI,IAAL,0DAAWC,qBAAX;AACA,wBAAKD,IAAL,4DAAWE,SAAX,CAAqBN,yBAArB;AACD,GAb4B,CAc7B;;;AACAG,EAAAA,OAAO,GAAG;AACR,UAAMI,aAAa,GAAGjB,gBAAgB,EAAtC;;AACA,QAAIiB,aAAJ,EAAmB;AACjB,YAAMC,GAAG,GAAG,IAAInB,GAAJ,CAAQ;AAClBoB,QAAAA,KAAK,EAAEF,aAAa,CAACG,YADH;AAElBC,QAAAA,MAAM,EAAEJ,aAAa,CAACK;AAFJ,OAAR,CAAZ;AAIA,WAAKJ,GAAL,GAAWA,GAAX;AACA,WAAKK,YAAL;AACD;AACF;;AACDA,EAAAA,YAAY,GAAG;AACb,QAAI,CAAC,KAAKL,GAAV,EAAe;AACf,SAAKM,QAAL,GAAgB,IAAIvB,gBAAJ,CAAqB,KAAKiB,GAA1B,CAAhB;AACA,SAAKO,IAAL,GAAY,IAAInB,YAAJ,CAAiB,KAAKY,GAAtB,EAA2B,KAAKM,QAAhC,CAAZ;AACA,SAAKE,QAAL,GAAgB,IAAIxB,gBAAJ,CAAqB,KAAKgB,GAA1B,EAA+B,KAAKM,QAApC,CAAhB;AACA,SAAKG,MAAL,GAAc,IAAIxB,cAAJ,CAAmB,KAAKe,GAAxB,EAA6B,KAAKM,QAAlC,CAAd;AACA,SAAKI,KAAL,GAAa,IAAIxB,aAAJ,CACX,KAAKc,GADM,EAEX,KAAKQ,QAFM,EAGX,KAAKC,MAHM,EAIX,KAAKF,IAJM,CAAb;AAMA,SAAKI,QAAL,GAAgB,IAAIxB,gBAAJ,CACd,KAAKa,GADS,EAEd,KAAKQ,QAFS,EAGd,KAAKC,MAHS,EAId,KAAKF,IAJS,CAAhB;AAMA,SAAKK,WAAL,GAAmB,IAAIvB,mBAAJ,CAAwB,KAAKW,GAA7B,EAAkC,KAAKM,QAAvC,CAAnB;AACA,SAAKO,QAAL;AACD;;AACDA,EAAAA,QAAQ,GAAG;AACT,SAAKjB,IAAL,GAAY,IAAIhB,qBAAJ,CACV,KAAK0B,QADK,EAEV,KAAKE,QAFK,EAGV,KAAKC,MAHK,EAIV,KAAKK,kCAJK,CAAZ;AAMD;;AAtD4B;AAAlBxB,iB,CACIG,Q","sourcesContent":["import SquadChatCommunicator from \"./SquadChatCommunicator\";\r\nimport API from \"@digivox/apicommunicator\";\r\nimport { SubscriptionCallBack } from \"./types\";\r\nimport { getAuthorization } from \"./utils/localStorageUtils\";\r\nimport SettingsBusiness from \"./business/Settings\";\r\nimport ContactsBusiness from \"./business/Contacts\";\r\nimport GroupsBusiness from \"./business/Groups\";\r\nimport ChatsBusiness from \"./business/Chats\";\r\nimport MessagesBusiness from \"./business/Messages\";\r\nimport UserBusiness from \"./business/User\";\r\nimport AttachmentsBusiness from \"./business/Attachments\";\r\n\r\nexport interface SquadCommunicator {\r\n  interfaceChatCommunicatorSubscribe: SubscriptionCallBack;\r\n  getInstance(): SquadCommunicator;\r\n  api: API | undefined;\r\n  chat: SquadChatCommunicator | undefined;\r\n  settings: SettingsBusiness;\r\n  contacts: ContactsBusiness;\r\n  groups: GroupsBusiness;\r\n  chats: ChatsBusiness;\r\n  messages: MessagesBusiness;\r\n  user: UserBusiness;\r\n  attachments: AttachmentsBusiness;\r\n}\r\nexport class SquadCommunicator {\r\n  private static instance: SquadCommunicator | undefined;\r\n  static getInstance(chatCommunicatorSubscribe: SubscriptionCallBack) {\r\n    if (!this.instance) {\r\n      this.instance = new SquadCommunicator();\r\n    }\r\n    this.instance.updateSubscribeFunction(chatCommunicatorSubscribe);\r\n    this.instance.makeAPI();\r\n    return this.instance;\r\n  }\r\n  updateSubscribeFunction(chatCommunicatorSubscribe: SubscriptionCallBack) {\r\n    this.chat?.removeAllSubscription();\r\n    this.chat?.subscribe(chatCommunicatorSubscribe);\r\n  }\r\n  // -- Make Services --\r\n  makeAPI() {\r\n    const authorization = getAuthorization();\r\n    if (authorization) {\r\n      const api = new API({\r\n        token: authorization.access_token,\r\n        apiUrl: authorization.baseUrl,\r\n      });\r\n      this.api = api;\r\n      this.makeBusiness();\r\n    }\r\n  }\r\n  makeBusiness() {\r\n    if (!this.api) return;\r\n    this.settings = new SettingsBusiness(this.api);\r\n    this.user = new UserBusiness(this.api, this.settings);\r\n    this.contacts = new ContactsBusiness(this.api, this.settings);\r\n    this.groups = new GroupsBusiness(this.api, this.settings);\r\n    this.chats = new ChatsBusiness(\r\n      this.api,\r\n      this.contacts,\r\n      this.groups,\r\n      this.user\r\n    );\r\n    this.messages = new MessagesBusiness(\r\n      this.api,\r\n      this.contacts,\r\n      this.groups,\r\n      this.user\r\n    );\r\n    this.attachments = new AttachmentsBusiness(this.api, this.settings);\r\n    this.makeChat();\r\n  }\r\n  makeChat() {\r\n    this.chat = new SquadChatCommunicator(\r\n      this.settings,\r\n      this.contacts,\r\n      this.groups,\r\n      this.interfaceChatCommunicatorSubscribe\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}