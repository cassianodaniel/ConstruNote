{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nlet squadService;\nlet typingTimeout = new Map();\n\nconst SquadCommunicator = ({\n  children\n}) => {\n  var _squadService12;\n\n  const {\n    chats,\n    setChats,\n    activeChat,\n    setActiveChat,\n    contacts,\n    setContacts,\n    groups,\n    setGroups,\n    newFavorite,\n    setNewFavorite\n  } = useChat();\n  const {\n    user,\n    setUser\n  } = useAuth();\n\n  const init = () => {\n    var _squadService;\n\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"b4c1fa651399a3eb63aee51777d3d508\",\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      email: \"romero2@digivox.com.br\",\n      user_name: \"ZZ Romero 2\",\n      expires_in: 2592000,\n      baseUrl: \"https://app.citrussquad.com/api/v1/\"\n    }));\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\n    (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.user.get(user => {\n      setUser(user);\n    });\n  };\n\n  const clearSendFile = (chatId, messageId) => {\n    setChats(chats.map(chat => {\n      if (chat.id === chatId) {\n        chat.messages = chat.messages.map(message => {\n          if (message.id === messageId) {\n            message.deliverStatus = DeliverStatus.QUEUED;\n            message.sendFile = undefined;\n          }\n\n          return message;\n        });\n      }\n\n      return chat;\n    }));\n  };\n\n  const onChatsChange = () => {\n    /* chats.forEach((chat) => {\r\n    //   // checkTyping(chat);\r\n    // });\r\n    } */\n  };\n\n  const onActiveChatChange = () => {\n    checkSendMessage(activeChat);\n    checkAttachedFiles(activeChat);\n    checkSearchMessages(activeChat); // checkTyping(activeChat)\n  }; // const checkTyping = (chat: IChat) => {\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\n  //     if (oldTimeoutData)\n  //       clearTimeout(oldTimeoutData.timeout)\n  //     else\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\n  //     const timeoutData = {\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\n  //       msgStr: `${chat.inputMessage}`\n  //     }\n  //     typingTimeout.set(chat.jid, timeoutData)\n  //   }\n  // }\n\n\n  const checkAttachedFiles = cht => {\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\n      var _squadService2;\n\n      (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.attachments.list(cht, attachments => {\n        if (attachments.length > 0) setActiveChat({ ...cht,\n          attachedFileList: attachments\n        });else setActiveChat({ ...cht,\n          attachedFileList: null\n        });\n      });\n    }\n  };\n\n  const checkSearchMessages = chat => {\n    if (chat.messageLoaded) {\n      var _squadService3;\n\n      (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.messages.list(chat, messages => {\n        setChats(chats.map(cht => {\n          if (cht.id === chat.id) {\n            messages.forEach(msg => {\n              if (!chat.messages.find(m => m.id === msg.id)) cht.messages.unshift(msg);\n            });\n            cht.messageLoaded = false;\n            setActiveChat(cht);\n          }\n\n          return cht;\n        }));\n      });\n    }\n  };\n\n  const checkSendMessage = chat => {\n    chat.messages.forEach(msg => {\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\n        if (msg.sendFile) {\n          var _squadService4, _squadService4$chat;\n\n          const files = [msg.sendFile];\n          clearSendFile(chat.id, msg.id);\n          (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : (_squadService4$chat = _squadService4.chat) === null || _squadService4$chat === void 0 ? void 0 : _squadService4$chat.sendFiles(chat, files, data => {\n            updateMessageFiles(data, chat, msg);\n          });\n        } else {\n          sendMessage(chat, msg.message, msgId => updateMessage(msgId, chat, msg));\n        }\n      }\n    });\n  };\n\n  const updateMessageFiles = (data, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        const booleans = getUrlBooleans(data.url);\n        message.id = data.msgId;\n        message.fileUrl = data.url;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n        message.message = getFileName(data.url);\n        message.isFileMessage = booleans.isFileMessage;\n        message.isImageMessage = booleans.isImageMessage;\n        message.isVideoMessage = booleans.isVideoMessage;\n        message.isAudioMessage = booleans.isAudioMessage;\n      }\n\n      return message;\n    });\n    setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      setChats(chats.map(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n        }\n\n        return cht;\n      }));\n    }\n  };\n\n  const updateMessage = (msgId, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        message.id = msgId;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n\n        if (isUrl(message.message)) {\n          const booleans = getUrlBooleans(message.message);\n          message.isFileMessage = booleans.isFileMessage;\n          message.isImageMessage = booleans.isImageMessage;\n          message.isAudioMessage = booleans.isAudioMessage;\n          message.isVideoMessage = booleans.isVideoMessage;\n        }\n      }\n\n      return message;\n    });\n    setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      setChats(chats.map(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n        }\n\n        return cht;\n      }));\n    }\n  }; // const forwardMessages = (ctcs: IContact[], message: IMessage) => {\n  //   const chatsFinded: IChat[] = [];\n  //   ctcs.forEach((ctc) => {\n  //     const cht = chats.find((cht) => cht.id === ctc.id);\n  //     if (cht) {\n  //       cht.messages.push({\n  //         ...message,\n  //         message: message.fileUrl || message.message,\n  //         deliverStatus: DeliverStatus.SENDING,\n  //       });\n  //       chatsFinded.push(cht);\n  //     }\n  //   });\n  //   const newChats = chats.map(\n  //     (chat) => chatsFinded.find((cht) => cht.id === chat.id) || chat\n  //   );\n  //   const ctcsNotInChat: IContact[] = ctcs.filter(\n  //     (ctc) => !chatsFinded.find((cht) => ctc.id === cht.id)\n  //   );\n  //   ctcsNotInChat.forEach((ctc) => {\n  //     newChats.push({\n  //       id: ctc.id,\n  //       jid: ctc.jid,\n  //       name: ctc.name,\n  //       profilePicture: ctc.profilePicture,\n  //       status: ctc.status,\n  //       unRead: 0,\n  //       chatType: ChatType.USER,\n  //       inputMessage: \"\",\n  //       messageLoaded: false,\n  //       isTyping: false,\n  //       messages: [{ ...message, deliverStatus: DeliverStatus.SENDING }],\n  //       email: ctc.email,\n  //     });\n  //   });\n  //   setChats(newChats);\n  // };\n\n\n  useEffect(onChatsChange, [chats]);\n  useEffect(onNewFavorite, [newFavorite]);\n  useEffect(onActiveChatChange, [activeChat]);\n\n  function onNewFavorite() {\n    if (newFavorite) {\n      var _squadService5, _squadService6;\n\n      (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.contacts.setFavorite(newFavorite, favorite => {\n        if (favorite) {\n          setChats(chats.map(cht => {\n            if (cht.jid === newFavorite.jid) {\n              cht.favorite = !cht.favorite;\n            }\n\n            return cht;\n          }));\n        }\n      });\n      (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : _squadService6.groups.setFavorite(newFavorite, favorite => {\n        if (favorite) {\n          setGroups(groups.map(grp => {\n            if (grp.jid === newFavorite.jid) {\n              grp.favorite = !grp.favorite;\n            }\n\n            return grp;\n          }));\n        }\n      });\n    }\n  }\n\n  function chatCommunicatorSubscribe(event, data) {\n    var _squadService7;\n\n    switch (event) {\n      case Events.ONLINE:\n        (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : _squadService7.chats.list(receivedChats => {\n          var _squadService8, _squadService10;\n\n          setChats(receivedChats); //populating groups\n\n          (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : _squadService8.groups.list(groups => {\n            var _squadService9, _squadService9$chat;\n\n            setGroups(groups); //Joining Groups Rooms in XMPP\n\n            (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : (_squadService9$chat = _squadService9.chat) === null || _squadService9$chat === void 0 ? void 0 : _squadService9$chat.joinGroups(groups.map(group => group.jid));\n          }); //populating contacts\n\n          (_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : _squadService10.contacts.list(contacts => setContacts(contacts)); //populating chat's with messages\n          // receivedChats.forEach((chat) => {\n          //   squadService?.messages.list(chat, (messages) => {\n          //     const chatWithMessages = { ...chat };\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\n          //       messages\n          //     );\n          //     setChats([\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\n          //       chatWithMessages,\n          //     ]);\n          //   });\n          // });\n        });\n        break;\n\n      case Events.MESSAGE:\n        if (data.fromUser === user.jid) break;\n        let find = false;\n        let newChats = chats.map(chat => {\n          if (data.fromUser === chat.jid) {\n            find = true;\n            if (!chat.messages.filter(msg => msg.id === data.id)[0]) chat.messages.push(data);\n\n            if (chat.id === activeChat.id) {\n              let chatTemporary = { ...chat\n              };\n              setActiveChat(chatTemporary);\n            } else {\n              chat.unRead++;\n            }\n          }\n\n          return chat;\n        });\n\n        if (!find) {\n          var _squadService11;\n\n          let newChat = {};\n          (_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : _squadService11.contacts.list(listContacts => {\n            listContacts.forEach(c => {\n              if (c.jid === data.fromUser) {\n                newChat = {\n                  id: c.id,\n                  jid: c.jid,\n                  name: c.name,\n                  profilePicture: c.profilePicture,\n                  status: c.status,\n                  unRead: 1,\n                  chatType: ChatType.USER,\n                  inputMessage: \"\",\n                  isTyping: false,\n                  messages: [],\n                  favorite: c.favorite\n                };\n                newChat.messages.push(data);\n                newChats.unshift(newChat);\n                setChats(newChats);\n              }\n            });\n          });\n        } else {\n          setChats(newChats);\n        }\n\n        break;\n\n      case Events.RECEIVED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.deliverStatus = DeliverStatus.DELIVERED;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.DISPLAYED:\n        setChats(chats.map(chat => {\n          chat.messages = chat.messages.map(message => {\n            if (message.id === data.id) {\n              message.readStatus = ReadStatus.READ;\n            }\n\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.COMPOSING:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = true;\n            if (activeChat.jid === data) setActiveChat(chat);\n            deleteTypingTimeout(chat.jid);\n            setTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.ACTIVE:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = false;\n\n            if (activeChat.jid === data) {\n              let chatUpdate = { ...chat\n              };\n              setActiveChat(chatUpdate);\n            }\n\n            deleteTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.PRESENCE:\n        break;\n    }\n  }\n\n  const deleteTypingTimeout = jid => {\n    var _typingTimeout$get;\n\n    clearTimeout(((_typingTimeout$get = typingTimeout.get(jid)) === null || _typingTimeout$get === void 0 ? void 0 : _typingTimeout$get.timeout) || setTimeout(() => {}, 1));\n    typingTimeout.delete(jid);\n  };\n\n  const setTypingTimeout = jid => {\n    const timeoutData = {\n      msgStr: \"\",\n      timeout: setTimeout(() => {\n        setChats(chats.map(cht => {\n          if (cht.jid === jid) {\n            cht.isTyping = false;\n            if (activeChat.jid === jid) setActiveChat(cht);\n          }\n\n          return cht;\n        }));\n      }, 20000)\n    };\n    typingTimeout.set(jid, timeoutData);\n  };\n\n  (_squadService12 = squadService) === null || _squadService12 === void 0 ? void 0 : _squadService12.updateSubscribeFunction(chatCommunicatorSubscribe); // Comentado para evitar warnings no console enquanto não é usado\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\n  //     squadService?.groups.list((groups) => {\n  //       setGroups(groups);\n  //       callback(true);\n  //     });\n  //   });\n  // }\n\n  function sendMessage(chat, message, callback) {\n    var _squadService13, _squadService13$chat;\n\n    (_squadService13 = squadService) === null || _squadService13 === void 0 ? void 0 : (_squadService13$chat = _squadService13.chat) === null || _squadService13$chat === void 0 ? void 0 : _squadService13$chat.chat.sendMessage(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message, callback);\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","DeliverStatus","XMPPChatType","getFileName","getUrlBooleans","isUrl","ReadStatus","squadService","typingTimeout","Map","children","chats","setChats","activeChat","setActiveChat","contacts","setContacts","groups","setGroups","newFavorite","setNewFavorite","user","setUser","init","localStorage","setItem","JSON","stringify","access_token","user_id","email","user_name","expires_in","baseUrl","getInstance","chatCommunicatorSubscribe","get","clearSendFile","chatId","messageId","map","chat","id","messages","message","deliverStatus","QUEUED","sendFile","undefined","onChatsChange","onActiveChatChange","checkSendMessage","checkAttachedFiles","checkSearchMessages","cht","attachedFileList","attachments","list","length","messageLoaded","forEach","msg","find","m","unshift","SENDING","files","sendFiles","data","updateMessageFiles","sendMessage","msgId","updateMessage","newChat","booleans","url","fileUrl","time","Date","toISOString","isFileMessage","isImageMessage","isVideoMessage","isAudioMessage","filter","newChats","onNewFavorite","setFavorite","favorite","jid","grp","event","ONLINE","receivedChats","joinGroups","group","MESSAGE","fromUser","push","chatTemporary","unRead","listContacts","c","name","profilePicture","status","chatType","USER","inputMessage","isTyping","RECEIVED","DELIVERED","DISPLAYED","readStatus","READ","COMPOSING","deleteTypingTimeout","setTypingTimeout","ACTIVE","chatUpdate","PRESENCE","clearTimeout","timeout","setTimeout","delete","timeoutData","msgStr","set","updateSubscribeFunction","callback","includes","GROUPCHAT","CHAT"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\n\r\nimport { Events, SendImageCallbackReturn } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\r\nimport { SendMessageCallback } from \"./types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport FavoriteUsers from \"../components/FavoriteUsers\";\r\n// import IContact from \"../alias/IContact\";\r\n// Comentado para Evitar Warnings no console\r\n// interface CreateGroupCallback {\r\n//   (groupCreated: boolean): void;\r\n// }\r\ninterface TypingTimeoutData {\r\n  timeout: NodeJS.Timeout;\r\n  msgStr: string;\r\n}\r\nlet squadService: SquadService | undefined;\r\nlet typingTimeout: Map<string, TypingTimeoutData> = new Map<\r\n  string,\r\n  TypingTimeoutData\r\n>();\r\n\r\nconst SquadCommunicator: React.FC = ({ children }) => {\r\n  const {\r\n    chats,\r\n    setChats,\r\n    activeChat,\r\n    setActiveChat,\r\n    contacts,\r\n    setContacts,\r\n    groups,\r\n    setGroups,\r\n    newFavorite,\r\n    setNewFavorite,\r\n  } = useChat();\r\n  const { user, setUser } = useAuth();\r\n\r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"b4c1fa651399a3eb63aee51777d3d508\",\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        email: \"romero2@digivox.com.br\",\r\n        user_name: \"ZZ Romero 2\",\r\n        expires_in: 2592000,\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n      })\r\n    );\r\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\r\n    squadService?.user.get((user: IUser) => {\r\n      setUser(user);\r\n    });\r\n  };\r\n\r\n  const clearSendFile = (chatId: string, messageId: string) => {\r\n    setChats(\r\n      chats.map((chat) => {\r\n        if (chat.id === chatId) {\r\n          chat.messages = chat.messages.map((message) => {\r\n            if (message.id === messageId) {\r\n              message.deliverStatus = DeliverStatus.QUEUED;\r\n              message.sendFile = undefined;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return chat;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onChatsChange = () => {\r\n    /* chats.forEach((chat) => {\r\n    //   // checkTyping(chat);\r\n    // });\r\n    } */\r\n  };\r\n  const onActiveChatChange = () => {\r\n    checkSendMessage(activeChat);\r\n    checkAttachedFiles(activeChat);\r\n    checkSearchMessages(activeChat);\r\n    // checkTyping(activeChat)\r\n  };\r\n  // const checkTyping = (chat: IChat) => {\r\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\r\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\r\n  //     if (oldTimeoutData)\r\n  //       clearTimeout(oldTimeoutData.timeout)\r\n  //     else\r\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\r\n  //     const timeoutData = {\r\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\r\n  //       msgStr: `${chat.inputMessage}`\r\n  //     }\r\n  //     typingTimeout.set(chat.jid, timeoutData)\r\n  //   }\r\n  // }\r\n  const checkAttachedFiles = (cht: IChat) => {\r\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\r\n      squadService?.attachments.list(cht, (attachments) => {\r\n        if (attachments.length > 0)\r\n          setActiveChat({ ...cht, attachedFileList: attachments });\r\n        else setActiveChat({ ...cht, attachedFileList: null });\r\n      });\r\n    }\r\n  };\r\n  const checkSearchMessages = (chat: IChat) => {\r\n    if (chat.messageLoaded) {\r\n      squadService?.messages.list(chat, (messages) => {\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.id === chat.id) {\r\n              messages.forEach((msg) => {\r\n                if (!chat.messages.find((m) => m.id === msg.id))\r\n                  cht.messages.unshift(msg);\r\n              });\r\n              cht.messageLoaded = false;\r\n              setActiveChat(cht);\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkSendMessage = (chat: IChat) => {\r\n    chat.messages.forEach((msg) => {\r\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\r\n        if (msg.sendFile) {\r\n          const files = [msg.sendFile];\r\n          clearSendFile(chat.id, msg.id);\r\n          squadService?.chat?.sendFiles(\r\n            chat,\r\n            files,\r\n            (data: SendImageCallbackReturn) => {\r\n              updateMessageFiles(data, chat, msg);\r\n            }\r\n          );\r\n        } else {\r\n          sendMessage(chat, msg.message, (msgId) =>\r\n            updateMessage(msgId, chat, msg)\r\n          );\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const updateMessageFiles = (\r\n    data: SendImageCallbackReturn,\r\n    chat: IChat,\r\n    msg: IMessage\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        const booleans = getUrlBooleans(data.url);\r\n        message.id = data.msgId;\r\n        message.fileUrl = data.url;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        message.message = getFileName(data.url);\r\n        message.isFileMessage = booleans.isFileMessage;\r\n        message.isImageMessage = booleans.isImageMessage;\r\n        message.isVideoMessage = booleans.isVideoMessage;\r\n        message.isAudioMessage = booleans.isAudioMessage;\r\n      }\r\n      return message;\r\n    });\r\n    setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      setChats(\r\n        chats.map((cht) => {\r\n          if (cht.id === chat.id) {\r\n            cht.messages = newChat.messages;\r\n          }\r\n          return cht;\r\n        })\r\n      );\r\n    }\r\n  };\r\n  const updateMessage = (msgId: string, chat: IChat, msg: IMessage) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        message.id = msgId;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        if (isUrl(message.message)) {\r\n          const booleans = getUrlBooleans(message.message);\r\n          message.isFileMessage = booleans.isFileMessage;\r\n          message.isImageMessage = booleans.isImageMessage;\r\n          message.isAudioMessage = booleans.isAudioMessage;\r\n          message.isVideoMessage = booleans.isVideoMessage;\r\n        }\r\n      }\r\n      return message;\r\n    });\r\n    setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      setChats(\r\n        chats.map((cht) => {\r\n          if (cht.id === chat.id) {\r\n            cht.messages = newChat.messages;\r\n          }\r\n          return cht;\r\n        })\r\n      );\r\n    }\r\n  };\r\n  // const forwardMessages = (ctcs: IContact[], message: IMessage) => {\r\n  //   const chatsFinded: IChat[] = [];\r\n  //   ctcs.forEach((ctc) => {\r\n  //     const cht = chats.find((cht) => cht.id === ctc.id);\r\n  //     if (cht) {\r\n  //       cht.messages.push({\r\n  //         ...message,\r\n  //         message: message.fileUrl || message.message,\r\n  //         deliverStatus: DeliverStatus.SENDING,\r\n  //       });\r\n  //       chatsFinded.push(cht);\r\n  //     }\r\n  //   });\r\n  //   const newChats = chats.map(\r\n  //     (chat) => chatsFinded.find((cht) => cht.id === chat.id) || chat\r\n  //   );\r\n  //   const ctcsNotInChat: IContact[] = ctcs.filter(\r\n  //     (ctc) => !chatsFinded.find((cht) => ctc.id === cht.id)\r\n  //   );\r\n  //   ctcsNotInChat.forEach((ctc) => {\r\n  //     newChats.push({\r\n  //       id: ctc.id,\r\n  //       jid: ctc.jid,\r\n  //       name: ctc.name,\r\n  //       profilePicture: ctc.profilePicture,\r\n  //       status: ctc.status,\r\n  //       unRead: 0,\r\n  //       chatType: ChatType.USER,\r\n  //       inputMessage: \"\",\r\n  //       messageLoaded: false,\r\n  //       isTyping: false,\r\n  //       messages: [{ ...message, deliverStatus: DeliverStatus.SENDING }],\r\n  //       email: ctc.email,\r\n  //     });\r\n  //   });\r\n  //   setChats(newChats);\r\n  // };\r\n  useEffect(onChatsChange, [chats]);\r\n  useEffect(onNewFavorite, [newFavorite])\r\n  useEffect(onActiveChatChange, [activeChat]);\r\n\r\n  function onNewFavorite(){\r\n    if(newFavorite){\r\n      squadService?.contacts.setFavorite(newFavorite, (favorite) => {\r\n        if(favorite){\r\n          setChats(chats.map((cht) => {\r\n            if(cht.jid === newFavorite.jid){\r\n              cht.favorite = !cht.favorite\r\n            }\r\n            return cht;\r\n          }));\r\n        }\r\n      })\r\n      squadService?.groups.setFavorite(newFavorite, (favorite) => {\r\n        if(favorite){\r\n          setGroups(groups.map((grp) => {\r\n            if(grp.jid === newFavorite.jid){\r\n              grp.favorite = !grp.favorite\r\n            }\r\n            return grp;\r\n          }));\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  function chatCommunicatorSubscribe(event: string, data: any) {\r\n    switch (event) {\r\n      case Events.ONLINE:\r\n        squadService?.chats.list((receivedChats) => {\r\n          setChats(receivedChats);\r\n          //populating groups\r\n          squadService?.groups.list((groups) => {\r\n            setGroups(groups);\r\n            //Joining Groups Rooms in XMPP\r\n            squadService?.chat?.joinGroups(groups.map((group) => group.jid));\r\n          });\r\n          //populating contacts\r\n          squadService?.contacts.list((contacts) => setContacts(contacts));\r\n          //populating chat's with messages\r\n\r\n          // receivedChats.forEach((chat) => {\r\n          //   squadService?.messages.list(chat, (messages) => {\r\n          //     const chatWithMessages = { ...chat };\r\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\r\n          //       messages\r\n          //     );\r\n          //     setChats([\r\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n          //       chatWithMessages,\r\n          //     ]);\r\n          //   });\r\n          // });\r\n        });\r\n        break;\r\n      case Events.MESSAGE:\r\n        if (data.fromUser === user.jid) break;\r\n        let find = false;\r\n\r\n        let newChats = chats.map((chat) => {\r\n          if (data.fromUser === chat.jid) {\r\n            find = true;\r\n            if (!chat.messages.filter((msg) => msg.id === data.id)[0])\r\n              chat.messages.push(data);\r\n            if (chat.id === activeChat.id) {\r\n              let chatTemporary = { ...chat };\r\n              setActiveChat(chatTemporary);\r\n            } else {\r\n              chat.unRead++;\r\n            }\r\n          }\r\n          return chat;\r\n        });\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.contacts.list((listContacts) => {\r\n            listContacts.forEach((c) => {\r\n              if (c.jid === data.fromUser) {\r\n                newChat = {\r\n                  id: c.id,\r\n                  jid: c.jid,\r\n                  name: c.name,\r\n                  profilePicture: c.profilePicture,\r\n                  status: c.status,\r\n                  unRead: 1,\r\n                  chatType: ChatType.USER,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  messages: [],\r\n                  favorite: c.favorite,\r\n                };\r\n                newChat.messages.push(data);\r\n                newChats.unshift(newChat);\r\n                setChats(newChats);\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          setChats(newChats);\r\n        }\r\n\r\n        break;\r\n      case Events.RECEIVED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.messages.find((msg) => msg.id === data.id))\r\n              chat.messages = chat.messages.map((message) => {\r\n                message.deliverStatus = DeliverStatus.DELIVERED;\r\n                return message;\r\n              });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.DISPLAYED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            chat.messages = chat.messages.map((message) => {\r\n              if (message.id === data.id) {\r\n                message.readStatus = ReadStatus.READ;\r\n              }\r\n              return message;\r\n            });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.COMPOSING:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = true;\r\n              if (activeChat.jid === data) setActiveChat(chat);\r\n              deleteTypingTimeout(chat.jid);\r\n              setTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.ACTIVE:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = false;\r\n              if (activeChat.jid === data) {\r\n                let chatUpdate = { ...chat };\r\n                setActiveChat(chatUpdate);\r\n              }\r\n              deleteTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.PRESENCE:\r\n        break;\r\n    }\r\n  }\r\n  const deleteTypingTimeout = (jid: string) => {\r\n    clearTimeout(typingTimeout.get(jid)?.timeout || setTimeout(() => {}, 1));\r\n    typingTimeout.delete(jid);\r\n  };\r\n  const setTypingTimeout = (jid: string) => {\r\n    const timeoutData: TypingTimeoutData = {\r\n      msgStr: \"\",\r\n      timeout: setTimeout(() => {\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.jid === jid) {\r\n              cht.isTyping = false;\r\n              if (activeChat.jid === jid) setActiveChat(cht);\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n      }, 20000),\r\n    };\r\n    typingTimeout.set(jid, timeoutData);\r\n  };\r\n\r\n  squadService?.updateSubscribeFunction(chatCommunicatorSubscribe);\r\n  // Comentado para evitar warnings no console enquanto não é usado\r\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\r\n  //     squadService?.groups.list((groups) => {\r\n  //       setGroups(groups);\r\n  //       callback(true);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  function sendMessage(\r\n    chat: IChat,\r\n    message: string,\r\n    callback: SendMessageCallback\r\n  ) {\r\n    squadService?.chat?.chat.sendMessage(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message,\r\n      callback\r\n    );\r\n  }\r\n\r\n  useEffect(init, []);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}