{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport { useModal } from \"../contexts/ModalContext\";\nimport UserType from \"../enuns/UserType\";\nimport { useConference } from \"../contexts/ConferenceContext\";\nimport moment from \"moment\";\nimport { ConferenceRoomParticipantType } from \"./business/Conferences\";\nimport PresenceStatus from \"../enuns/PresenceStatus\";\nimport { DateTime } from \"luxon\";\nimport { useLoading } from \"../contexts/LoadingContext\";\nimport { ParseUserTag } from \"../helpers/TextMessageTagParse\";\nimport ScreenType from \"../enuns/ScreenType\";\nimport { useMainBox } from \"../contexts/MainBoxContext\"; // import { activeChat as actChtData } from \"../data/chat\";\n//import { callbackify } from \"util\";\n// import IContact from \"../alias/IContact\";\n//Comentar para Evitar Warnings no console\n\nlet squadService;\nlet typingTimeout = new Map();\n\nconst SquadCommunicator = () => {\n  var _squadService72;\n\n  const {\n    chats,\n    setChats,\n    activeChat,\n    replyMsg,\n    setReplyMsg,\n    setActiveChat,\n    forwardMessageList,\n    setForwardMessageList,\n    showChatProfileSidebar,\n    setFavoriteMessagePayload,\n    favoriteMessagePayload,\n    flagToLoadFavoriteMessages,\n    setFlagToLoadFavoriteMessages,\n    setFavoriteMessages,\n    deleteFavoriteMessage,\n    setDeleteFavoriteMessage,\n    readMessagePayload,\n    setReadMessagePayload\n  } = useChat();\n  const {\n    contactsSearch,\n    setContactsSearched,\n    newFavorite,\n    setNewFavorite,\n    contacts,\n    setContacts,\n    setContactsOutsideUserContacts,\n    toggleAddingContacts,\n    setToggleAddingContacts,\n    checkedContacts,\n    setCheckedContacts,\n    removedContact,\n    setRemovedContact,\n    checkedMembers,\n    setCheckedMembers,\n    groupToInsertMember,\n    setGroupToInsertMember,\n    clickedContact,\n    setClickedContact\n  } = useContact();\n  const {\n    user,\n    setUser,\n    changedUserData,\n    setChangedUserData,\n    changedUserPassword,\n    setChangedUserPassword,\n    visualNotificationEnabled,\n    soundNotificationEnabled\n  } = useAuth();\n  const {\n    showModalForwardMessageTo,\n    setShowModalForwardMessageTo,\n    showModalAddContact\n  } = useModal();\n  const {\n    setDisconnected\n  } = useLoading();\n  const {\n    setGroups,\n    groups,\n    memberQuit,\n    groupIdOfLeaveRequest,\n    setGroupIdOfLeaveRequest,\n    setMemberQuit,\n    groupToRemoveContact,\n    setGroupToRemoveContact,\n    removedMember,\n    setRemovedMember,\n    toggleMemberRole,\n    setToggleMemberRole,\n    changeGroupData,\n    setChangeGroupData,\n    groupToCreate,\n    setGroupToCreate,\n    groupJid,\n    setGroupJid\n  } = useGroup();\n  const {\n    listRooms,\n    setListRooms,\n    setConferenceList,\n    setCreateConference,\n    createConference,\n    conferenceToUpdate,\n    setConferenceToUpdate,\n    conferenceToRemove,\n    setConferenceToRemove,\n    addingParticipantsPayload,\n    setAddingParticipantsPayload,\n    removingParticipantsPayload,\n    setRemovingParticipantsPayload\n  } = useConference();\n  const {\n    setScreen\n  } = useMainBox();\n\n  const init = () => {\n    var _squadService;\n\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"c9b0dbe6bd8d38110a9a76d2bbed2b48\",\n      baseUrl: \"https://app.citrussquad.com/api/v1/\",\n      email: \"romero2@digivox.com.br\",\n      expires_in: 2592000,\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      user_name: \"ZZ Romero 2\"\n    }));\n    squadService = SquadService.getInstance({\n      chatCommunicatorSubscribe: chatCommunicatorSubscribe\n    });\n    (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.user.get(user => {\n      setUser(user); //Ao iniciar o website\n\n      Notification.requestPermission();\n    });\n  };\n\n  const clearSendFile = (chatId, messageId) => {\n    setChats(chats.map(chat => {\n      if (chat.id === chatId) {\n        chat.messages = chat.messages.map(message => {\n          if (message.id === messageId) {\n            message.deliverStatus = DeliverStatus.QUEUED;\n            message.sendFile = undefined;\n          }\n\n          return message;\n        });\n      }\n\n      return chat;\n    }));\n  };\n\n  const onChatsChange = () => {// chats.forEach((chat) => {\n    // });\n  };\n\n  const onActiveChatChange = () => {\n    checkSendMessage(activeChat);\n    checkAttachedFiles(activeChat);\n    checkNewContact(activeChat); // checkTyping(activeChat)\n  }; // const checkTyping = (chat: IChat) => {\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\n  //     if (oldTimeoutData)\n  //       clearTimeout(oldTimeoutData.timeout)\n  //     else\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\n  //     const timeoutData = {\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\n  //       msgStr: `${chat.inputMessage}`\n  //     }\n  //     typingTimeout.set(chat.jid, timeoutData)\n  //   }\n  // }\n\n\n  const checkNewContact = cht => {\n    if (!cht.added) {\n      var _squadService2;\n\n      (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.contacts.add(cht, success => {\n        if (success) {\n          var _squadService3;\n\n          setChats(chats.map(chat => {\n            if (chat.jid === cht.jid) {\n              chat.added = true;\n            }\n\n            if (activeChat.jid === chat.jid) setActiveChat(chat);\n            return chat;\n          }));\n          (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.contacts.list(ctcs => {\n            setContacts(ctcs);\n          });\n        }\n      });\n    }\n  };\n\n  const checkAttachedFiles = cht => {\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\n      var _squadService4;\n\n      (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : _squadService4.attachments.list(cht, attachments => {\n        if (attachments.length > 0) {\n          setActiveChat({ ...cht,\n            attachedFileList: attachments\n          });\n        } else setActiveChat({ ...cht,\n          attachedFileList: null\n        });\n      });\n    }\n  };\n  /* getMessageUserProfilePicture = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.profilePicture;\r\n    } else {\r\n      return this.contacts.getAllUsers().get(msg.from.split(\"@\")[0])\r\n        ?.profilePicture;\r\n    }\r\n  }; */\n\n\n  const checkSearchMessages = () => {\n    if (activeChat.messageLoaded) {\n      var _squadService5;\n\n      (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.messages.list(activeChat, messages => {\n        if (messages.length) {\n          let find = false;\n          let newChats = [...chats.map(cht => {\n            if (cht.id === activeChat.id) {\n              find = true;\n              messages.forEach(msg => {\n                if (!activeChat.messages.find(m => m.id === msg.id)) cht.messages.unshift(msg);\n              });\n              cht.messageLoaded = null;\n              setActiveChat(cht);\n            }\n\n            return cht;\n          })];\n\n          if (!find) {\n            const object = contacts.find(ctc => ctc.id === activeChat.id) || groups.find(grp => grp.groupId === activeChat.groupId);\n\n            if (object) {\n              find = true;\n              const cht = {\n                id: object.jid.split(\"@\")[0],\n                favorite: object.favorite,\n                chatType: object.groupId ? ChatType.GROUP : ChatType.USER,\n                added: true,\n                jid: object.jid,\n                name: object.name,\n                profilePicture: object.profilePicture,\n                messageLoaded: null,\n                unRead: 0,\n                inputMessage: \"\",\n                isTyping: false,\n                messages: messages,\n                members: object.members,\n                groupId: object.groupId,\n                mencioned: 0\n              };\n              setActiveChat(cht);\n              newChats.unshift(cht);\n            }\n          }\n\n          if (!find) setActiveChat({ ...activeChat,\n            messageLoaded: null\n          });\n          setChats(newChats);\n        } else {\n          const chat = { ...activeChat,\n            messageLoaded: null\n          };\n          setActiveChat(chat);\n        }\n      });\n    }\n  };\n\n  const checkSUpdateMessages = () => {\n    if (activeChat.messageLoadedUpdate) {\n      var _squadService6;\n\n      (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : _squadService6.messages.list(activeChat, messages => {\n        if (messages.length) {\n          setChats(chats.map(cht => {\n            if (cht.id === activeChat.id) {\n              messages.forEach(msg => {\n                if (!activeChat.messages.find(m => m.id === msg.id)) cht.messages.unshift(msg);\n              });\n              cht.messageLoadedUpdate = false;\n              setActiveChat(cht);\n            }\n\n            return cht;\n          }));\n        } else {\n          setChats(chats.map(cht => {\n            if (cht.id === activeChat.id) {\n              cht.messageLoadedUpdate = null;\n              setActiveChat(cht);\n            }\n\n            return cht;\n          }));\n        }\n      });\n    }\n  };\n\n  const getFileExtension = url => {\n    return url.split(\".\")[1];\n  };\n\n  const checkSendMessage = chat => {\n    chat.messages.forEach(msg => {\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\n        if (msg.sendFile && !replyMsg) {\n          var _squadService7, _squadService7$chat;\n\n          const files = [msg.sendFile];\n          clearSendFile(chat.id, msg.id);\n          (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : (_squadService7$chat = _squadService7.chat) === null || _squadService7$chat === void 0 ? void 0 : _squadService7$chat.sendFiles(chat, files, data => {\n            var _squadService8, _squadService8$user$u, _squadService9, _squadService$user$us;\n\n            updateMessageFiles(data, chat, msg);\n            console.log(\"jidFromUser:\", (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : (_squadService8$user$u = _squadService8.user.user) === null || _squadService8$user$u === void 0 ? void 0 : _squadService8$user$u.jid);\n            (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : _squadService9.attachments.saveData({\n              createdAt: DateTime.local().toISO().split(\"T\").join(\" \").slice(0, 18),\n              src: (_squadService$user$us = squadService.user.user) === null || _squadService$user$us === void 0 ? void 0 : _squadService$user$us.jid,\n              dst: chat.jid,\n              fileExtension: getFileExtension(getFileName(data.url)),\n              fileName: getFileName(data.url),\n              fileUrl: data.url,\n              kind: chat.chatType\n            }, () => true);\n          });\n        } else {\n          if (!msg.isForwardMessage && !replyMsg) {\n            sendMessage(chat, msg.message, msgId => updateMessage(msgId, chat, msg));\n          } else if (replyMsg) {\n            var _squadService10, _squadService10$chat;\n\n            const replyMsgCopy = { ...replyMsg\n            };\n            setReplyMsg(undefined);\n            (_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : (_squadService10$chat = _squadService10.chat) === null || _squadService10$chat === void 0 ? void 0 : _squadService10$chat.replyMsg(chat, msg, replyMsgCopy, msgId => {\n              updateMessage(msgId, chat, msg, replyMsgCopy);\n            });\n          }\n        }\n      }\n    });\n  };\n\n  const updateMessageFiles = (data, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        const booleans = getUrlBooleans(data.url);\n        message.id = data.msgId;\n        message.fileUrl = data.url;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n        message.message = getFileName(data.url);\n        message.isFileMessage = booleans.isFileMessage;\n        message.isImageMessage = booleans.isImageMessage;\n        message.isVideoMessage = booleans.isVideoMessage;\n        message.isAudioMessage = booleans.isAudioMessage;\n      }\n\n      return message;\n    });\n    setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      const newChats = [];\n      chats.forEach(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n          newChats.unshift(cht);\n        } else {\n          newChats.push(cht);\n        }\n      });\n      setChats(newChats);\n    }\n  };\n\n  const updateMessage = (msgId, chat, msg, replyedMsg = undefined) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        message.id = msgId;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n\n        if (replyedMsg) {\n          var _squadService11, _squadService11$conta, _squadService12, _squadService12$user, _squadService12$user$, _squadService13, _squadService13$user, _squadService13$user$;\n\n          message.isReplyMessage = true;\n          message.replyedMessage = replyedMsg.message || replyedMsg.fileUrl;\n          message.replyedMessageId = replyedMsg.id;\n          message.replyedMessageTo = ((_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : (_squadService11$conta = _squadService11.contacts.getAllUsers().get(replyedMsg.fromUser.split(\"@\")[0])) === null || _squadService11$conta === void 0 ? void 0 : _squadService11$conta.name) || (((_squadService12 = squadService) === null || _squadService12 === void 0 ? void 0 : (_squadService12$user = _squadService12.user) === null || _squadService12$user === void 0 ? void 0 : (_squadService12$user$ = _squadService12$user.user) === null || _squadService12$user$ === void 0 ? void 0 : _squadService12$user$.id) === replyedMsg.fromUser.split(\"@\")[0] ? (_squadService13 = squadService) === null || _squadService13 === void 0 ? void 0 : (_squadService13$user = _squadService13.user) === null || _squadService13$user === void 0 ? void 0 : (_squadService13$user$ = _squadService13$user.user) === null || _squadService13$user$ === void 0 ? void 0 : _squadService13$user$.name : \"Participant\");\n        }\n\n        if (isUrl(message.message)) {\n          const booleans = getUrlBooleans(message.message);\n          message.isFileMessage = booleans.isFileMessage;\n          message.isImageMessage = booleans.isImageMessage;\n          message.isAudioMessage = booleans.isAudioMessage;\n          message.isVideoMessage = booleans.isVideoMessage;\n          message.fileUrl = message.message;\n        }\n      }\n\n      return message;\n    });\n    if (activeChat.jid === newChat.jid) setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      const newChats = [];\n      chats.forEach(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n          newChats.unshift(cht);\n        } else {\n          newChats.push(cht);\n        }\n      });\n      setChats(newChats);\n    }\n  };\n\n  const forwardMessage = () => {\n    if (forwardMessageList && showModalForwardMessageTo) {\n      const ctcs = [...forwardMessageList];\n      const message = { ...showModalForwardMessageTo\n      };\n      setForwardMessageList(undefined);\n      setShowModalForwardMessageTo(undefined);\n      const chatsFinded = [];\n      const oldChats = [...chats.map(chat => {\n        return { ...chat\n        };\n      })];\n      ctcs === null || ctcs === void 0 ? void 0 : ctcs.forEach((ctc, i) => {\n        const cht = oldChats.find(cht => cht.jid === ctc.jid);\n\n        if (cht) {\n          var _squadService14, _squadService14$chat;\n\n          const msg = { ...message,\n            id: `${cht.messages.length + 1}`,\n            userName: user.name,\n            fromUser: user.id,\n            toUser: ctc.jid.split(\"@\")[0],\n            message: message.fileUrl || message.message,\n            deliverStatus: DeliverStatus.QUEUED,\n            isForwardMessage: true\n          };\n          (_squadService14 = squadService) === null || _squadService14 === void 0 ? void 0 : (_squadService14$chat = _squadService14.chat) === null || _squadService14$chat === void 0 ? void 0 : _squadService14$chat.forwardMessage(cht, msg, msgId => {\n            msg.id = msgId;\n            cht.messages.push(msg);\n            chatsFinded.push(cht);\n          });\n        }\n      });\n      const newChats = oldChats.map(chat => chatsFinded.find(cht => cht.id === chat.id) || chat);\n      const ctcsNotInChat = ctcs.filter(ctc => !newChats.find(cht => ctc.jid === cht.jid));\n      ctcsNotInChat.forEach((ctc, i) => {\n        var _squadService15, _squadService15$chat;\n\n        const chat = {\n          id: ctc.jid.split(\"@\")[0],\n          jid: ctc.jid,\n          name: ctc.name,\n          profilePicture: ctc.profilePicture,\n          status: ctc.status || undefined,\n          unRead: 0,\n          chatType: ctc.jid.includes(\"@conference.\") ? ChatType.GROUP : ChatType.USER,\n          inputMessage: \"\",\n          messageLoaded: false,\n          isTyping: false,\n          messages: [],\n          email: ctc.email || undefined,\n          favorite: ctc.favorite,\n          added: ctc.added,\n          mencioned: 0\n        };\n        const newMessage = { ...message,\n          id: `${1}`,\n          userName: user.name,\n          fromUser: user.id,\n          toUser: ctc.jid.split(\"@\")[0],\n          deliverStatus: DeliverStatus.QUEUED,\n          isForwardMessage: true\n        };\n        (_squadService15 = squadService) === null || _squadService15 === void 0 ? void 0 : (_squadService15$chat = _squadService15.chat) === null || _squadService15$chat === void 0 ? void 0 : _squadService15$chat.forwardMessage(chat, newMessage, msgId => {\n          newMessage.id = msgId;\n          chat.messages.push(newMessage);\n          newChats.unshift(chat);\n        });\n      });\n      setChats(newChats);\n    }\n  };\n\n  const onChangeStatus = () => {\n    var _squadService16, _squadService16$chat, _squadService16$chat$, _squadService16$chat$2;\n\n    if (((_squadService16 = squadService) === null || _squadService16 === void 0 ? void 0 : (_squadService16$chat = _squadService16.chat) === null || _squadService16$chat === void 0 ? void 0 : (_squadService16$chat$ = _squadService16$chat.chat) === null || _squadService16$chat$ === void 0 ? void 0 : (_squadService16$chat$2 = _squadService16$chat$.client) === null || _squadService16$chat$2 === void 0 ? void 0 : _squadService16$chat$2.status) === \"online\") {\n      var _squadService17, _squadService17$chat;\n\n      (_squadService17 = squadService) === null || _squadService17 === void 0 ? void 0 : (_squadService17$chat = _squadService17.chat) === null || _squadService17$chat === void 0 ? void 0 : _squadService17$chat.changeStatus(user.status);\n    }\n  };\n\n  const onSearchContacts = () => {\n    if (contactsSearch.length > 2) {\n      var _squadService18;\n\n      (_squadService18 = squadService) === null || _squadService18 === void 0 ? void 0 : _squadService18.contacts.search(contactsSearch, searchList => {\n        setContactsSearched(searchList);\n      });\n    } else {\n      setContactsSearched(undefined);\n    }\n  };\n\n  const onSearchContactsOutsideUserContacts = () => {\n    var _squadService19;\n\n    (_squadService19 = squadService) === null || _squadService19 === void 0 ? void 0 : _squadService19.contacts.getContactsOutsideUserLists(contacts => {\n      if (contacts) {\n        setContactsOutsideUserContacts(contacts);\n      }\n    });\n  };\n\n  const onToggleSidebarMenu = () => {\n    var _squadService20;\n\n    (_squadService20 = squadService) === null || _squadService20 === void 0 ? void 0 : _squadService20.contacts.getContactsOutsideUserLists(contacts => {\n      if (contacts) {\n        setContactsOutsideUserContacts(contacts);\n      }\n    });\n  };\n\n  const onRemovingMember = () => {\n    if (removedMember && groupToRemoveContact) {\n      var _squadService21;\n\n      let group = groups.find(grp => grp.groupId === groupToRemoveContact);\n      if (group) (_squadService21 = squadService) === null || _squadService21 === void 0 ? void 0 : _squadService21.groups.removeMember(group.groupId, removedMember, success => {\n        if (success) {\n          setGroups(groups.map(grp => {\n            if (grp.groupId === (group === null || group === void 0 ? void 0 : group.groupId)) grp.members = grp.members.filter(mb => mb.userId !== removedMember.userId);\n            return grp;\n          }));\n          setChats(chats.map(cht => {\n            if (cht.groupId === (group === null || group === void 0 ? void 0 : group.groupId)) {\n              var _cht$members;\n\n              cht.members = (_cht$members = cht.members) === null || _cht$members === void 0 ? void 0 : _cht$members.filter(mb => mb.userId !== removedMember.userId);\n              if (cht.groupId === activeChat.groupId) setActiveChat(cht);\n            }\n\n            return cht;\n          }));\n\n          if (group) {\n            var _squadService22, _squadService22$chat;\n\n            (_squadService22 = squadService) === null || _squadService22 === void 0 ? void 0 : (_squadService22$chat = _squadService22.chat) === null || _squadService22$chat === void 0 ? void 0 : _squadService22$chat.chat.sendEvent(group === null || group === void 0 ? void 0 : group.jid, removedMember.userId, \"6\");\n          }\n\n          setRemovedMember(undefined);\n          setGroupToRemoveContact(undefined);\n        }\n      });\n    }\n  };\n\n  const onLeavingGroup = () => {\n    if (memberQuit && groupIdOfLeaveRequest && groupJid) {\n      var _squadService23;\n\n      (_squadService23 = squadService) === null || _squadService23 === void 0 ? void 0 : _squadService23.groups.leftingGroup({\n        groupId: groupIdOfLeaveRequest,\n        memberId: memberQuit.userId\n      }, success => {\n        if (success) {\n          var _squadService24, _squadService24$chat, _squadService25, _squadService25$chat;\n\n          (_squadService24 = squadService) === null || _squadService24 === void 0 ? void 0 : (_squadService24$chat = _squadService24.chat) === null || _squadService24$chat === void 0 ? void 0 : _squadService24$chat.chat.sendPresence(PresenceStatus.UNAVAILABLE, `${groupJid}/${memberQuit.userId}`);\n          (_squadService25 = squadService) === null || _squadService25 === void 0 ? void 0 : (_squadService25$chat = _squadService25.chat) === null || _squadService25$chat === void 0 ? void 0 : _squadService25$chat.chat.sendEvent(groupIdOfLeaveRequest, memberQuit.userId, \"3\", undefined);\n          setChats(chats.filter(cht => cht.groupId !== groupIdOfLeaveRequest));\n          setGroups(groups.filter(grp => grp.groupId !== groupIdOfLeaveRequest));\n\n          if (activeChat.groupId === groupIdOfLeaveRequest) {\n            setScreen(ScreenType.CHAT);\n          }\n        }\n\n        setGroupJid(undefined);\n        setMemberQuit(undefined);\n        setGroupIdOfLeaveRequest(\"\");\n        setScreen(ScreenType.WELCOME);\n      });\n    }\n  };\n\n  const showNotification = async (chat, msg) => {\n    if (Notification.permission !== \"granted\") {\n      await Notification.requestPermission();\n    }\n\n    if (Notification.permission === \"granted\") {\n      let notificationBody = msg.message;\n\n      if (chat.groupId) {\n        notificationBody = `${msg.userName}: ${msg.message}`;\n      }\n\n      if (visualNotificationEnabled) new Notification(chat.name, {\n        body: notificationBody,\n        icon: chat.profilePicture || require(\"../assets/images/logo.png\"),\n        silent: true\n      });\n      if (soundNotificationEnabled) new Audio(\"https://m.toqueparacelular.com.br/a/download3/iPhone_Ding.mp3\").play();\n    }\n  };\n\n  const onFavoriteMessage = () => {\n    if (favoriteMessagePayload) {\n      var _squadService26;\n\n      (_squadService26 = squadService) === null || _squadService26 === void 0 ? void 0 : _squadService26.messages.save(favoriteMessagePayload, success => {\n        if (success) {\n          setFavoriteMessagePayload(undefined);\n          setFlagToLoadFavoriteMessages({\n            contactType: favoriteMessagePayload.contactType\n          });\n        }\n      });\n    }\n  };\n\n  const onAddingMembers = () => {\n    let asynchronousFlag = 0;\n\n    if (checkedMembers && groupToInsertMember) {\n      let copiaCheckedMembers = [...checkedMembers],\n          copiaGroupToInsertMember = { ...groupToInsertMember\n      };\n      copiaCheckedMembers.forEach(ctt => {\n        var _squadService27;\n\n        (_squadService27 = squadService) === null || _squadService27 === void 0 ? void 0 : _squadService27.groups.addMember(copiaGroupToInsertMember, ctt, success => {\n          if (success) {\n            var _squadService28, _squadService28$chat;\n\n            (_squadService28 = squadService) === null || _squadService28 === void 0 ? void 0 : (_squadService28$chat = _squadService28.chat) === null || _squadService28$chat === void 0 ? void 0 : _squadService28$chat.chat.sendEvent(copiaGroupToInsertMember.jid, ctt.id, \"2\");\n            asynchronousFlag++;\n\n            if (copiaCheckedMembers.length === asynchronousFlag) {\n              var _squadService29;\n\n              (_squadService29 = squadService) === null || _squadService29 === void 0 ? void 0 : _squadService29.groups.list(grps => {\n                setGroups(grps);\n                setChats(chats.map(cht => {\n                  if (cht.groupId === copiaGroupToInsertMember.groupId) {\n                    let foundedGroup = grps.find(grp => grp.groupId === cht.groupId);\n                    cht.members = foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.members;\n\n                    if (activeChat.groupId === cht.groupId) {\n                      activeChat.members = foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.members;\n                      setActiveChat(activeChat);\n                    }\n                  }\n\n                  return cht;\n                }));\n              });\n            }\n          }\n        });\n      });\n      setCheckedMembers([]);\n      setToggleAddingContacts(false);\n      setGroupToInsertMember(undefined);\n    }\n  };\n\n  const onAddingContacts = () => {\n    let asynchronousFlag = 0;\n\n    if (checkedContacts && toggleAddingContacts) {\n      checkedContacts.forEach(ctt => {\n        if (!ctt.added) {\n          var _squadService30;\n\n          (_squadService30 = squadService) === null || _squadService30 === void 0 ? void 0 : _squadService30.contacts.addContacts(ctt, success => {\n            if (success) {\n              asynchronousFlag++;\n\n              if (checkedContacts.length === asynchronousFlag) {\n                var _squadService31;\n\n                (_squadService31 = squadService) === null || _squadService31 === void 0 ? void 0 : _squadService31.contacts.list(contacts => {\n                  setContacts(contacts);\n                  setCheckedContacts([]);\n                  setToggleAddingContacts(false);\n                });\n              }\n            }\n          });\n        }\n      });\n    }\n  };\n\n  const onAddingContactOnGroupList = () => {\n    if (clickedContact) {\n      if (!clickedContact.added) {\n        var _squadService32;\n\n        (_squadService32 = squadService) === null || _squadService32 === void 0 ? void 0 : _squadService32.contacts.addContacts(clickedContact, success => {\n          if (success) {\n            var _squadService33;\n\n            (_squadService33 = squadService) === null || _squadService33 === void 0 ? void 0 : _squadService33.contacts.list(contacts => {\n              setContacts(contacts);\n              setClickedContact(undefined);\n            });\n          }\n        });\n      }\n    }\n  };\n\n  const onToggleMemberRole = () => {\n    if (toggleMemberRole) {\n      var _squadService34;\n\n      (_squadService34 = squadService) === null || _squadService34 === void 0 ? void 0 : _squadService34.groups.list(grps => {\n        grps.forEach(gp => {\n          if (gp.groupId === toggleMemberRole.gpId) {\n            gp.members.forEach(mb => {\n              if (mb.userId === toggleMemberRole.mbId) {\n                var _squadService35;\n\n                (_squadService35 = squadService) === null || _squadService35 === void 0 ? void 0 : _squadService35.contacts.toggleMemberRole(toggleMemberRole.mbId, toggleMemberRole.gpId, toggleMemberRole.mbRole, success => {\n                  if (success) {\n                    const newRole = toggleMemberRole.mbRole === UserType.USER ? UserType.ADMIN : UserType.USER;\n                    setToggleMemberRole(undefined);\n                    setChats(chats.map(cht => {\n                      if (cht.groupId === toggleMemberRole.gpId) {\n                        var _cht$members2;\n\n                        cht.members = (_cht$members2 = cht.members) === null || _cht$members2 === void 0 ? void 0 : _cht$members2.map(mb => {\n                          if (mb.userId === toggleMemberRole.mbId) {\n                            mb.role = newRole;\n\n                            if (cht.groupId) {\n                              if (mb.role === UserType.ADMIN) {\n                                var _squadService36, _squadService36$chat;\n\n                                (_squadService36 = squadService) === null || _squadService36 === void 0 ? void 0 : (_squadService36$chat = _squadService36.chat) === null || _squadService36$chat === void 0 ? void 0 : _squadService36$chat.chat.sendEvent(cht.groupId, mb.userId, \"8\");\n                              } else {\n                                var _squadService37, _squadService37$chat;\n\n                                (_squadService37 = squadService) === null || _squadService37 === void 0 ? void 0 : (_squadService37$chat = _squadService37.chat) === null || _squadService37$chat === void 0 ? void 0 : _squadService37$chat.chat.sendEvent(cht.groupId, mb.userId, \"9\");\n                              }\n                            }\n                          }\n\n                          return mb;\n                        });\n                        if (activeChat.groupId === cht.groupId) setActiveChat(cht);\n                      }\n\n                      return cht;\n                    }));\n                    setGroups(groups.map(grp => {\n                      if (grp.groupId === toggleMemberRole.gpId) {\n                        grp.members = grp.members.map(member => {\n                          if (member.userId === toggleMemberRole.mbId) member.role = newRole;\n                          return member;\n                        });\n                      }\n\n                      return grp;\n                    }));\n                  }\n                });\n              }\n            });\n          }\n        });\n      });\n    }\n  };\n\n  const onChangeGroupData = () => {\n    if (changeGroupData) {\n      var _squadService38;\n\n      (_squadService38 = squadService) === null || _squadService38 === void 0 ? void 0 : _squadService38.groups.editGroupInfo({\n        groupId: changeGroupData.groupId,\n        groupName: changeGroupData.groupName,\n        members: changeGroupData.members,\n        description: changeGroupData.description\n      }, success => {\n        if (success) {\n          var _squadService39;\n\n          (_squadService39 = squadService) === null || _squadService39 === void 0 ? void 0 : _squadService39.groups.list(grps => {\n            var _squadService40, _squadService40$chat;\n\n            let foundedGroup = grps.find(grp => grp.groupId === changeGroupData.groupId);\n            setGroups(grps);\n            setChats(chats.map(cht => {\n              if (cht.groupId === changeGroupData.groupId) {\n                if (foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.name) {\n                  cht.name = foundedGroup.name;\n                }\n\n                if (activeChat.groupId === cht.groupId) {\n                  if (foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.name) {\n                    cht.name = foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.name;\n                  }\n\n                  setActiveChat(cht);\n                }\n              }\n\n              return cht;\n            }));\n            (_squadService40 = squadService) === null || _squadService40 === void 0 ? void 0 : (_squadService40$chat = _squadService40.chat) === null || _squadService40$chat === void 0 ? void 0 : _squadService40$chat.chat.sendEvent(foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.jid, undefined, \"10\", undefined);\n            setChangeGroupData(undefined);\n          });\n        }\n      });\n    }\n  };\n\n  const createGroup = () => {\n    var _squadService41;\n\n    (_squadService41 = squadService) === null || _squadService41 === void 0 ? void 0 : _squadService41.groups.create(groupToCreate, parsedGroup => {\n      if (parsedGroup) {\n        var _squadService42, _squadService42$chat, _squadService43, _squadService44, _squadService44$chat;\n\n        (_squadService42 = squadService) === null || _squadService42 === void 0 ? void 0 : (_squadService42$chat = _squadService42.chat) === null || _squadService42$chat === void 0 ? void 0 : _squadService42$chat.chat.sendEvent(parsedGroup.jid, parsedGroup.jid, \"1\");\n        (_squadService43 = squadService) === null || _squadService43 === void 0 ? void 0 : _squadService43.groups.list(groups => {\n          setGroups(groups);\n          setGroupToCreate(undefined);\n        });\n        (_squadService44 = squadService) === null || _squadService44 === void 0 ? void 0 : (_squadService44$chat = _squadService44.chat) === null || _squadService44$chat === void 0 ? void 0 : _squadService44$chat.chat.sendEvent(parsedGroup.jid, undefined, \"1\", undefined);\n      }\n    });\n  };\n\n  const onListRooms = () => {\n    if (listRooms) {\n      var _squadService45;\n\n      (_squadService45 = squadService) === null || _squadService45 === void 0 ? void 0 : _squadService45.conferences.list(conferences => {\n        var _squadService46, _squadService46$chat;\n\n        setConferenceList(conferences);\n        console.log(conferences);\n        (_squadService46 = squadService) === null || _squadService46 === void 0 ? void 0 : (_squadService46$chat = _squadService46.chat) === null || _squadService46$chat === void 0 ? void 0 : _squadService46$chat.joinGroups(conferences.map(conf => conf.jid));\n      });\n      setListRooms(false);\n    }\n  };\n\n  const onCreatingConference = () => {\n    if (createConference) {\n      var _squadService47;\n\n      const momentStartDate = moment(`${createConference.startDate} ${createConference.startTime}:00`);\n      const momentFinalDate = moment(momentStartDate).add(parseInt(createConference.duration.split(\":\")[0]), \"hours\").add(parseInt(createConference.duration.split(\":\")[1]), \"minutes\");\n      const parsedConference = {\n        name: createConference.name,\n        waitMod: createConference.mdCheck,\n        startDatetime: `${momentStartDate.format(\"DD/MM/YYYY HH:mm:ss\")}`,\n        stopDatetime: `${momentFinalDate.format(\"DD/MM/YYYY HH:mm:ss\")}`\n      };\n      (_squadService47 = squadService) === null || _squadService47 === void 0 ? void 0 : _squadService47.conferences.create(parsedConference, createdConference => {\n        const participantList = [];\n\n        if (createdConference === null || createdConference === void 0 ? void 0 : createdConference.id) {\n          var _createConference$sel, _createConference$ema, _squadService48;\n\n          (_createConference$sel = createConference.selectedContact) === null || _createConference$sel === void 0 ? void 0 : _createConference$sel.forEach(ctc => {\n            participantList.push({\n              userUuid: ctc.id,\n              description: \"\",\n              email: ctc.email,\n              name: ctc.name,\n              type: ConferenceRoomParticipantType.PARTICIPANT,\n              userModerator: false\n            });\n          });\n          (_createConference$ema = createConference.emailList) === null || _createConference$ema === void 0 ? void 0 : _createConference$ema.forEach(participant => {\n            participantList.push({\n              userUuid: null,\n              description: \"\",\n              email: participant.email,\n              name: participant.name,\n              type: ConferenceRoomParticipantType.PARTICIPANT_EXTERNAL,\n              userModerator: false\n            });\n          });\n          (_squadService48 = squadService) === null || _squadService48 === void 0 ? void 0 : _squadService48.conferences.addParticipants(createdConference.id, participantList, s => {\n            if (s) {\n              setCreateConference(undefined);\n              setListRooms(true);\n            }\n          });\n        }\n      });\n    }\n  };\n\n  const onAddingParticipants = () => {\n    if (addingParticipantsPayload) {\n      var _squadService49;\n\n      (_squadService49 = squadService) === null || _squadService49 === void 0 ? void 0 : _squadService49.conferences.addParticipants(addingParticipantsPayload.conferenceId, addingParticipantsPayload.data, success => {\n        if (success) {\n          setAddingParticipantsPayload(undefined);\n          setListRooms(true);\n        }\n      });\n    }\n  };\n\n  const onReadingMessage = () => {\n    if (readMessagePayload) {\n      var _squadService50;\n\n      (_squadService50 = squadService) === null || _squadService50 === void 0 ? void 0 : _squadService50.messages.read({\n        authUser: readMessagePayload.authUser,\n        between: readMessagePayload.between,\n        chatType: readMessagePayload.chatType,\n        id: readMessagePayload.id\n      }, success => {\n        if (success) {\n          setReadMessagePayload(undefined);\n        }\n      });\n    }\n  };\n\n  useEffect(onChatsChange, [chats]);\n  useEffect(onNewFavorite, [newFavorite]);\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\n  useEffect(checkSUpdateMessages, [activeChat.messageLoadedUpdate]);\n  useEffect(onActiveChatChange, [activeChat]);\n  useEffect(onUserDataChange, [changedUserData]);\n  useEffect(onUserPasswordChange, [changedUserPassword]);\n  useEffect(onChangeStatus, [user.status]);\n  useEffect(forwardMessage, [forwardMessageList]);\n  useEffect(onSearchContacts, [contactsSearch]);\n  useEffect(onSearchContactsOutsideUserContacts, [showModalAddContact]);\n  useEffect(onAddingContacts, [toggleAddingContacts]);\n  useEffect(onRemovingMember, [removedMember, groupToRemoveContact]);\n  useEffect(onLeavingGroup, [memberQuit, groupIdOfLeaveRequest, groupJid]);\n  useEffect(onRemovingContact, [removedContact]);\n  useEffect(onAddingMembers, [groupToInsertMember, checkedMembers]);\n  useEffect(onToggleMemberRole, [toggleMemberRole]);\n  useEffect(onChangeGroupData, [changeGroupData]);\n  useEffect(onAddingContactOnGroupList, [clickedContact]);\n  useEffect(createGroup, [groupToCreate]);\n  useEffect(onToggleSidebarMenu, [showChatProfileSidebar]);\n  useEffect(onListRooms, [listRooms]);\n  useEffect(onCreatingConference, [createConference]);\n  useEffect(onFavoriteMessage, [favoriteMessagePayload]);\n  useEffect(onListFavoriteMessages, [flagToLoadFavoriteMessages]);\n  useEffect(onRemoveFavoriteMessage, [deleteFavoriteMessage]);\n  useEffect(onUpdatingConference, [conferenceToUpdate]);\n  useEffect(onRemovingConference, [conferenceToRemove]);\n  useEffect(onAddingParticipants, [addingParticipantsPayload]);\n  useEffect(onRemovingParticipant, [removingParticipantsPayload]);\n  useEffect(onReadingMessage, [readMessagePayload]);\n\n  function onRemovingParticipant() {\n    if (removingParticipantsPayload) {\n      var _squadService51;\n\n      (_squadService51 = squadService) === null || _squadService51 === void 0 ? void 0 : _squadService51.conferences.removeParticipant(removingParticipantsPayload.conferenceId, removingParticipantsPayload.participantId, success => {\n        if (success) {\n          setListRooms(true);\n          setRemovingParticipantsPayload(undefined);\n        }\n      });\n    }\n  }\n\n  function onUpdatingConference() {\n    if (conferenceToUpdate) {\n      var _squadService52;\n\n      /* const parsedConference = {\r\n        name: createConference.name,\r\n        waitMod: createConference.mdCheck,\r\n        startDatetime: `${momentStartDate.format(\"DD/MM/YYYY HH:mm:ss\")}`,\r\n        stopDatetime: `${momentFinalDate.format(\"DD/MM/YYYY HH:mm:ss\")}`,\r\n      }; */\n      (_squadService52 = squadService) === null || _squadService52 === void 0 ? void 0 : _squadService52.conferences.update(conferenceToUpdate.id, {\n        name: conferenceToUpdate.name,\n        waitMod: conferenceToUpdate.waitMod,\n        startDatetime: conferenceToUpdate.startDatetime,\n        stopDatetime: conferenceToUpdate.stopDatetime\n      }, successOnUpdate => {\n        if (successOnUpdate) {\n          setListRooms(true);\n          setConferenceToUpdate(undefined);\n        }\n      });\n    }\n  }\n\n  function onRemovingConference() {\n    if (conferenceToRemove) {\n      var _squadService53;\n\n      (_squadService53 = squadService) === null || _squadService53 === void 0 ? void 0 : _squadService53.conferences.remove(conferenceToRemove.id, successOnRemove => {\n        if (successOnRemove) {\n          setListRooms(true);\n          setConferenceToRemove(undefined);\n          setScreen(ScreenType.WELCOME);\n          /* chats.find((cht) => {\r\n          if(cht.conferenceRoomParticipants){\r\n            setActiveChat(cht);\r\n          }\r\n          return cht;\r\n          }) */\n        }\n      });\n    }\n  }\n\n  function onRemoveFavoriteMessage() {\n    if (deleteFavoriteMessage) {\n      var _squadService54;\n\n      (_squadService54 = squadService) === null || _squadService54 === void 0 ? void 0 : _squadService54.messages.deleteFavorite({\n        messageId: deleteFavoriteMessage === null || deleteFavoriteMessage === void 0 ? void 0 : deleteFavoriteMessage.messageId\n      }, success => {\n        if (success) {\n          setFlagToLoadFavoriteMessages({\n            contactType: deleteFavoriteMessage === null || deleteFavoriteMessage === void 0 ? void 0 : deleteFavoriteMessage.contactType\n          });\n          setDeleteFavoriteMessage(undefined);\n        }\n      });\n    }\n  }\n\n  function onListFavoriteMessages() {\n    if (flagToLoadFavoriteMessages) {\n      var _squadService55;\n\n      (_squadService55 = squadService) === null || _squadService55 === void 0 ? void 0 : _squadService55.messages.listFavorites({\n        contactTo: \"\",\n        contactType: \"\",\n        content: \"\",\n        contentType: \"\",\n        messageDate: \"\",\n        messageId: \"\",\n        message: \"\"\n      }, success => {\n        if (success) {\n          setFavoriteMessages(success.messages.map(item => item));\n          setFlagToLoadFavoriteMessages(undefined);\n        }\n      });\n    }\n  }\n\n  function onRemovingContact() {\n    if (removedContact) {\n      contacts.forEach(ctc => {\n        if (ctc.id === removedContact.id) {\n          var _squadService56;\n\n          if (ctc.added) (_squadService56 = squadService) === null || _squadService56 === void 0 ? void 0 : _squadService56.contacts.remove(ctc, success => {\n            if (success) {\n              var _squadService57;\n\n              (_squadService57 = squadService) === null || _squadService57 === void 0 ? void 0 : _squadService57.contacts.list(ctcs => {\n                setContacts(ctcs);\n                setRemovedContact(undefined);\n              });\n            }\n          });\n        }\n      });\n    }\n  }\n\n  function onUserPasswordChange() {\n    if (changedUserPassword.oldPassword && changedUserPassword.newPassword) {\n      var _squadService58;\n\n      (_squadService58 = squadService) === null || _squadService58 === void 0 ? void 0 : _squadService58.user.changePassword(changedUserPassword, password => {\n        if (password) {\n          setChangedUserPassword({\n            oldPassword: \"\",\n            newPassword: \"\"\n          });\n        }\n      });\n    }\n  }\n\n  function onUserDataChange() {\n    if (changedUserData.email && changedUserData.name) {\n      var _squadService59;\n\n      (_squadService59 = squadService) === null || _squadService59 === void 0 ? void 0 : _squadService59.user.changeUserData(changedUserData, chgd => {\n        setChangedUserData({\n          email: \"\",\n          name: \"\"\n        });\n\n        if (chgd) {\n          setUser({ ...user,\n            email: changedUserData.email,\n            name: changedUserData.name\n          });\n        }\n      });\n    }\n  }\n\n  function onNewFavorite() {\n    if (newFavorite) {\n      var _squadService60;\n\n      const newFavoriteLoad = { ...newFavorite\n      };\n      (_squadService60 = squadService) === null || _squadService60 === void 0 ? void 0 : _squadService60.contacts.setFavorite(newFavorite, favorite => {\n        if (favorite) {\n          setChats(chats.map(cht => {\n            if (cht.jid === newFavoriteLoad.jid) {\n              cht.favorite = !newFavoriteLoad.favorite;\n            }\n\n            return cht;\n          }));\n          setGroups(groups.map(grp => {\n            if (grp.jid === newFavoriteLoad.jid) {\n              return { ...grp,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return grp;\n          }));\n          setContacts(contacts.map(ctt => {\n            if (ctt.jid === newFavoriteLoad.jid) {\n              return { ...ctt,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return ctt;\n          }));\n        }\n      });\n      setNewFavorite(undefined);\n    }\n  }\n\n  function chatCommunicatorSubscribe(evt, data) {\n    var _squadService61;\n\n    switch (evt) {\n      case Events.RECONNECTED:\n        setDisconnected(false);\n      // eslint-disable-next-line\n\n      case Events.ONLINE:\n        (_squadService61 = squadService) === null || _squadService61 === void 0 ? void 0 : _squadService61.chats.list(receivedChats => {\n          var _squadService62, _squadService64;\n\n          const chats = [];\n          receivedChats.forEach(cht => {\n            if (!chats.find(chat => chat.id === cht.id)) {\n              chats.push(cht);\n            }\n          });\n          setChats(chats); //populating groups\n\n          (_squadService62 = squadService) === null || _squadService62 === void 0 ? void 0 : _squadService62.groups.list(groups => {\n            var _squadService63, _squadService63$chat;\n\n            setGroups(groups); //Joining Groups Rooms in XMPP\n\n            (_squadService63 = squadService) === null || _squadService63 === void 0 ? void 0 : (_squadService63$chat = _squadService63.chat) === null || _squadService63$chat === void 0 ? void 0 : _squadService63$chat.joinGroups(groups.map(group => group.jid));\n          }); //populating contacts\n\n          (_squadService64 = squadService) === null || _squadService64 === void 0 ? void 0 : _squadService64.contacts.list(contacts => {\n            setContacts(contacts);\n          }); //populating conferences\n\n          setListRooms(true);\n          setFlagToLoadFavoriteMessages({\n            contactType: \"\"\n          });\n        });\n        break;\n\n      case Events.ERROR:\n      case Events.OFFLINE:\n        if (localStorage.getItem(\"logout\") !== \"true\") {\n          var _squadService65, _squadService65$chat;\n\n          (_squadService65 = squadService) === null || _squadService65 === void 0 ? void 0 : (_squadService65$chat = _squadService65.chat) === null || _squadService65$chat === void 0 ? void 0 : _squadService65$chat.makeChat(chatCommunicatorSubscribe);\n        }\n\n        localStorage.removeItem(\"logout\");\n        console.log(evt);\n        break;\n\n      case Events.RECONNECTING:\n        // setShowChat(false);\n        // setActiveChat(actChtData);\n        // setChats([]);\n        // setGroups([]);\n        // setContacts([]);\n        // setConferenceList([]);\n        console.log(\"Reconnecting\");\n        setDisconnected(true);\n        break;\n\n      case Events.MESSAGE:\n        if (data.fromUser === user.jid) break;\n        let find = false;\n        let newChats = [];\n        chats.forEach(chat => {\n          if (data.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || data.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\n            find = true;\n            if (!chat.messages.filter(msg => msg.id === data.id)[0]) chat.messages.push(data);\n\n            if (chat.id === activeChat.id) {\n              let chatTemporary = { ...chat\n              };\n              setActiveChat(chatTemporary);\n              setReadMessagePayload({\n                authUser: user.jid,\n                between: activeChat.jid,\n                chatType: activeChat.chatType,\n                id: activeChat.messages[activeChat.messages.length - 1].id\n              });\n            } else {\n              chat.unRead++;\n              chat.mencioned += ParseUserTag(user.id, data.message);\n              showNotification(chat, data);\n            }\n\n            newChats.unshift(chat);\n          } else {\n            newChats.push(chat);\n          }\n        });\n\n        if (!find) {\n          var _squadService66;\n\n          let newChat = {};\n          (_squadService66 = squadService) === null || _squadService66 === void 0 ? void 0 : _squadService66.contacts.listAllUsers(listContacts => {\n            listContacts.forEach(c => {\n              if (data.fromUser.split(\"@\")[0] === c.jid.split(\"@\")[0] || data.toUser.split(\"@\")[0] === c.jid.split(\"@\")[0]) {\n                if (c.jid === data.fromUser) {\n                  find = true;\n                  newChat = {\n                    id: c.id,\n                    jid: c.jid,\n                    name: c.name,\n                    profilePicture: c.profilePicture,\n                    status: c.status,\n                    unRead: 1,\n                    chatType: ChatType.USER,\n                    inputMessage: \"\",\n                    isTyping: false,\n                    messages: [],\n                    favorite: c.favorite,\n                    added: true,\n                    mencioned: 0\n                  };\n                  newChat.messages.push(data);\n                  newChats.unshift(newChat);\n\n                  if (!c.added) {\n                    var _squadService67;\n\n                    (_squadService67 = squadService) === null || _squadService67 === void 0 ? void 0 : _squadService67.contacts.add(newChat, s => {\n                      if (s) {\n                        var _squadService68;\n\n                        (_squadService68 = squadService) === null || _squadService68 === void 0 ? void 0 : _squadService68.contacts.list(ctcs => {\n                          setContacts(ctcs);\n                        });\n                      }\n                    });\n                  }\n                }\n              }\n            });\n          });\n        }\n\n        if (!find) {\n          var _squadService69;\n\n          let newChat = {};\n          (_squadService69 = squadService) === null || _squadService69 === void 0 ? void 0 : _squadService69.groups.list(listGroups => {\n            listGroups.forEach(g => {\n              if (data.fromUser.split(\"@\")[0] === g.jid.split(\"@\")[0] || data.toUser.split(\"@\")[0] === g.jid.split(\"@\")[0]) {\n                if (g.jid === data.fromUser) {\n                  find = true;\n                  newChat = {\n                    id: g.groupId,\n                    jid: g.jid,\n                    name: g.name,\n                    profilePicture: g.profilePicture,\n                    attachedFileList: undefined,\n                    conferenceRoomParticipants: undefined,\n                    department: undefined,\n                    email: undefined,\n                    groupId: g.groupId,\n                    members: g.members,\n                    messageLoaded: undefined,\n                    userDescription: undefined,\n                    status: undefined,\n                    unRead: 1,\n                    chatType: ChatType.GROUP,\n                    inputMessage: \"\",\n                    isTyping: false,\n                    messages: [],\n                    favorite: g.favorite,\n                    added: g.added,\n                    mencioned: 0\n                  };\n                  newChat.messages.push(data);\n                  newChats.unshift(newChat);\n                }\n              }\n            });\n          });\n        }\n\n        setChats(newChats);\n        break;\n\n      case Events.RECEIVED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.deliverStatus = DeliverStatus.DELIVERED;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.DISPLAYED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.readStatus = ReadStatus.READ;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.COMPOSING:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = true;\n            if (activeChat.jid === data) setActiveChat(chat);\n            deleteTypingTimeout(chat.jid);\n            setTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.ACTIVE:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = false;\n\n            if (activeChat.jid === data) {\n              let chatUpdate = { ...chat\n              };\n              setActiveChat(chatUpdate);\n            }\n\n            deleteTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.PRESENCE:\n        setChats(chats.map(cht => {\n          if (cht.jid && data.from) {\n            if (cht.jid === data.from.split(\"/\")[0] && !cht.jid.includes(\"@conference.\")) {\n              cht.status = data.status;\n            }\n          }\n\n          return cht;\n        }));\n        setContacts(contacts.map(ctc => {\n          if (ctc.jid && data.from) {\n            if (ctc.jid === data.from.split(\"/\")[0] && !ctc.jid.includes(\"@conference.\")) {\n              ctc.status = data.status;\n            }\n          }\n\n          return ctc;\n        }));\n        break;\n\n      case Events.SEND_EVENT:\n        const event = data;\n        let finded;\n        let newChat = [];\n        chats.forEach(chat => {\n          if (event.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || event.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\n            finded = true;\n            if (!chat.messages.filter(msg => msg.id === event.id)[0]) chat.messages.push(event);\n\n            if (chat.id === activeChat.id) {\n              let chatTemporary = { ...chat\n              };\n              setActiveChat(chatTemporary);\n              setReadMessagePayload({\n                authUser: user.jid,\n                between: activeChat.jid,\n                chatType: activeChat.chatType,\n                id: chat.messages.filter(msg => msg.id === data.id)[0].id\n              });\n            } else {\n              chat.unRead++;\n              chat.mencioned += ParseUserTag(user.id, data.message);\n              showNotification(chat, data);\n            }\n\n            newChat.unshift(chat);\n          } else {\n            newChat.push(chat);\n          }\n        });\n\n        if (!finded) {\n          groups.forEach(grp => {\n            if (event.fromUser.split(\"@\")[0] === grp.jid.split(\"@\")[0] || event.toUser.split(\"@\")[0] === grp.jid.split(\"@\")[0]) {\n              finded = true;\n              let groupToBeInserted = {\n                added: grp.added,\n                chatType: ChatType.GROUP,\n                favorite: grp.favorite,\n                id: grp.groupId,\n                inputMessage: \"\",\n                isTyping: false,\n                jid: grp.jid,\n                messages: [event],\n                name: grp.name,\n                unRead: 0,\n                attachedFileList: undefined,\n                department: undefined,\n                email: undefined,\n                groupId: grp.groupId,\n                members: grp.members,\n                messageLoaded: undefined,\n                profilePicture: grp.profilePicture,\n                status: undefined,\n                userDescription: grp.description,\n                mencioned: 0\n              };\n              newChat.unshift(groupToBeInserted);\n              setActiveChat(groupToBeInserted);\n            }\n          });\n        }\n\n        if (!finded) {\n          var _squadService70;\n\n          (_squadService70 = squadService) === null || _squadService70 === void 0 ? void 0 : _squadService70.groups.list(grps => {\n            setGroups(grps);\n            grps.forEach(grp => {\n              if (event.fromUser.split(\"@\")[0] === grp.jid.split(\"@\")[0] || event.toUser.split(\"@\")[0] === grp.jid.split(\"@\")[0]) {\n                finded = true;\n                let groupToBeInserted = {\n                  added: grp.added,\n                  chatType: ChatType.GROUP,\n                  favorite: grp.favorite,\n                  id: grp.groupId,\n                  inputMessage: \"\",\n                  isTyping: false,\n                  jid: grp.jid,\n                  messages: [event],\n                  name: grp.name,\n                  unRead: 1,\n                  attachedFileList: undefined,\n                  department: undefined,\n                  email: undefined,\n                  groupId: grp.groupId,\n                  members: grp.members,\n                  messageLoaded: undefined,\n                  profilePicture: grp.profilePicture,\n                  status: undefined,\n                  userDescription: grp.description,\n                  mencioned: 0\n                };\n                newChat.unshift(groupToBeInserted);\n              }\n            });\n          });\n        }\n\n        setChats(newChat);\n\n        if (event.eventId === 6 || event.eventId === 2) {\n          refreshMembers(event);\n        }\n\n        break;\n\n      default:\n        console.log(evt);\n        break;\n    }\n  }\n\n  const refreshMembers = event => {\n    var _squadService71;\n\n    (_squadService71 = squadService) === null || _squadService71 === void 0 ? void 0 : _squadService71.groups.list(grps => {\n      setGroups(grps);\n      setChats(chats.map(chat => {\n        if (event.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || event.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\n          var _grps$find;\n\n          chat.members = (_grps$find = grps.find(grp => grp.groupId === chat.id)) === null || _grps$find === void 0 ? void 0 : _grps$find.members;\n\n          if (chat.id === activeChat.id) {\n            setActiveChat(chat);\n          }\n        }\n\n        return chat;\n      }));\n    });\n  };\n\n  const deleteTypingTimeout = jid => {\n    var _typingTimeout$get;\n\n    clearTimeout(((_typingTimeout$get = typingTimeout.get(jid)) === null || _typingTimeout$get === void 0 ? void 0 : _typingTimeout$get.timeout) || setTimeout(() => {}, 1));\n    typingTimeout.delete(jid);\n  };\n\n  const setTypingTimeout = jid => {\n    const timeoutData = {\n      msgStr: \"\",\n      timeout: setTimeout(() => {\n        setChats(chats.map(cht => {\n          if (cht.jid === jid) {\n            cht.isTyping = false;\n            if (activeChat.jid === jid) setActiveChat(cht);\n          }\n\n          return cht;\n        }));\n      }, 20000)\n    };\n    typingTimeout.set(jid, timeoutData);\n  };\n\n  (_squadService72 = squadService) === null || _squadService72 === void 0 ? void 0 : _squadService72.updateChatSubscribeFuncition(chatCommunicatorSubscribe); // Comentado para evitar warnings no console enquanto não é usado\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\n  //     squadService?.groups.list((groups) => {\n  //       setGroups(groups);\n  //       callback(true);\n  //     });\n  //   });\n  // }\n\n  function sendMessage(chat, message, callback) {\n    var _squadService73, _squadService73$chat;\n\n    (_squadService73 = squadService) === null || _squadService73 === void 0 ? void 0 : (_squadService73$chat = _squadService73.chat) === null || _squadService73$chat === void 0 ? void 0 : _squadService73$chat.chat.sendMessage(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message, callback);\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","DeliverStatus","XMPPChatType","getFileName","getUrlBooleans","isUrl","ReadStatus","useGroup","useContact","useModal","UserType","useConference","moment","ConferenceRoomParticipantType","PresenceStatus","DateTime","useLoading","ParseUserTag","ScreenType","useMainBox","squadService","typingTimeout","Map","chats","setChats","activeChat","replyMsg","setReplyMsg","setActiveChat","forwardMessageList","setForwardMessageList","showChatProfileSidebar","setFavoriteMessagePayload","favoriteMessagePayload","flagToLoadFavoriteMessages","setFlagToLoadFavoriteMessages","setFavoriteMessages","deleteFavoriteMessage","setDeleteFavoriteMessage","readMessagePayload","setReadMessagePayload","contactsSearch","setContactsSearched","newFavorite","setNewFavorite","contacts","setContacts","setContactsOutsideUserContacts","toggleAddingContacts","setToggleAddingContacts","checkedContacts","setCheckedContacts","removedContact","setRemovedContact","checkedMembers","setCheckedMembers","groupToInsertMember","setGroupToInsertMember","clickedContact","setClickedContact","user","setUser","changedUserData","setChangedUserData","changedUserPassword","setChangedUserPassword","visualNotificationEnabled","soundNotificationEnabled","showModalForwardMessageTo","setShowModalForwardMessageTo","showModalAddContact","setDisconnected","setGroups","groups","memberQuit","groupIdOfLeaveRequest","setGroupIdOfLeaveRequest","setMemberQuit","groupToRemoveContact","setGroupToRemoveContact","removedMember","setRemovedMember","toggleMemberRole","setToggleMemberRole","changeGroupData","setChangeGroupData","groupToCreate","setGroupToCreate","groupJid","setGroupJid","listRooms","setListRooms","setConferenceList","setCreateConference","createConference","conferenceToUpdate","setConferenceToUpdate","conferenceToRemove","setConferenceToRemove","addingParticipantsPayload","setAddingParticipantsPayload","removingParticipantsPayload","setRemovingParticipantsPayload","setScreen","init","localStorage","setItem","JSON","stringify","access_token","baseUrl","email","expires_in","user_id","user_name","getInstance","chatCommunicatorSubscribe","get","Notification","requestPermission","clearSendFile","chatId","messageId","map","chat","id","messages","message","deliverStatus","QUEUED","sendFile","undefined","onChatsChange","onActiveChatChange","checkSendMessage","checkAttachedFiles","checkNewContact","cht","added","add","success","jid","list","ctcs","attachedFileList","attachments","length","checkSearchMessages","messageLoaded","find","newChats","forEach","msg","m","unshift","object","ctc","grp","groupId","split","favorite","chatType","GROUP","USER","name","profilePicture","unRead","inputMessage","isTyping","members","mencioned","checkSUpdateMessages","messageLoadedUpdate","getFileExtension","url","SENDING","files","sendFiles","data","updateMessageFiles","console","log","saveData","createdAt","local","toISO","join","slice","src","dst","fileExtension","fileName","fileUrl","kind","isForwardMessage","sendMessage","msgId","updateMessage","replyMsgCopy","newChat","booleans","time","Date","toISOString","isFileMessage","isImageMessage","isVideoMessage","isAudioMessage","filter","push","replyedMsg","isReplyMessage","replyedMessage","replyedMessageId","replyedMessageTo","getAllUsers","fromUser","forwardMessage","chatsFinded","oldChats","i","userName","toUser","ctcsNotInChat","status","includes","newMessage","onChangeStatus","client","changeStatus","onSearchContacts","search","searchList","onSearchContactsOutsideUserContacts","getContactsOutsideUserLists","onToggleSidebarMenu","onRemovingMember","group","removeMember","mb","userId","sendEvent","onLeavingGroup","leftingGroup","memberId","sendPresence","UNAVAILABLE","CHAT","WELCOME","showNotification","permission","notificationBody","body","icon","require","silent","Audio","play","onFavoriteMessage","save","contactType","onAddingMembers","asynchronousFlag","copiaCheckedMembers","copiaGroupToInsertMember","ctt","addMember","grps","foundedGroup","onAddingContacts","addContacts","onAddingContactOnGroupList","onToggleMemberRole","gp","gpId","mbId","mbRole","newRole","ADMIN","role","member","onChangeGroupData","editGroupInfo","groupName","description","createGroup","create","parsedGroup","onListRooms","conferences","joinGroups","conf","onCreatingConference","momentStartDate","startDate","startTime","momentFinalDate","parseInt","duration","parsedConference","waitMod","mdCheck","startDatetime","format","stopDatetime","createdConference","participantList","selectedContact","userUuid","type","PARTICIPANT","userModerator","emailList","participant","PARTICIPANT_EXTERNAL","addParticipants","s","onAddingParticipants","conferenceId","onReadingMessage","read","authUser","between","onNewFavorite","onUserDataChange","onUserPasswordChange","onRemovingContact","onListFavoriteMessages","onRemoveFavoriteMessage","onUpdatingConference","onRemovingConference","onRemovingParticipant","removeParticipant","participantId","update","successOnUpdate","remove","successOnRemove","deleteFavorite","listFavorites","contactTo","content","contentType","messageDate","item","oldPassword","newPassword","changePassword","password","changeUserData","chgd","newFavoriteLoad","setFavorite","evt","RECONNECTED","ONLINE","receivedChats","ERROR","OFFLINE","getItem","makeChat","removeItem","RECONNECTING","MESSAGE","chatTemporary","listAllUsers","listContacts","c","listGroups","g","conferenceRoomParticipants","department","userDescription","RECEIVED","DELIVERED","DISPLAYED","readStatus","READ","COMPOSING","deleteTypingTimeout","setTypingTimeout","ACTIVE","chatUpdate","PRESENCE","from","SEND_EVENT","event","finded","groupToBeInserted","eventId","refreshMembers","clearTimeout","timeout","setTimeout","delete","timeoutData","msgStr","set","updateChatSubscribeFuncition","callback","GROUPCHAT"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\nimport { Events, SendImageCallbackReturn } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\r\nimport { SendMessageCallback } from \"./types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport { useModal } from \"../contexts/ModalContext\";\r\nimport IContact from \"../alias/IContact\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport UserType from \"../enuns/UserType\";\r\nimport { useConference } from \"../contexts/ConferenceContext\";\r\nimport moment from \"moment\";\r\nimport { ConferenceRoomParticipantType } from \"./business/Conferences\";\r\nimport { ConferenceRoomParticipant } from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport PresenceStatus from \"../enuns/PresenceStatus\";\r\nimport { DateTime } from \"luxon\";\r\nimport { useLoading } from \"../contexts/LoadingContext\";\r\nimport { ParseUserTag } from \"../helpers/TextMessageTagParse\";\r\nimport ScreenType from \"../enuns/ScreenType\";\r\nimport { useMainBox } from \"../contexts/MainBoxContext\";\r\n// import { activeChat as actChtData } from \"../data/chat\";\r\n//import { callbackify } from \"util\";\r\n\r\n// import IContact from \"../alias/IContact\";\r\n//Comentar para Evitar Warnings no console\r\ninterface CreateGroupCallback {\r\n  (success: boolean): void;\r\n}\r\ninterface TypingTimeoutData {\r\n  timeout: NodeJS.Timeout;\r\n  msgStr: string;\r\n}\r\nlet squadService: SquadService | undefined;\r\nlet typingTimeout: Map<string, TypingTimeoutData> = new Map<\r\n  string,\r\n  TypingTimeoutData\r\n>();\r\nconst SquadCommunicator: React.FC = () => {\r\n  const {\r\n    chats,\r\n    setChats,\r\n    activeChat,\r\n    replyMsg,\r\n    setReplyMsg,\r\n    setActiveChat,\r\n    forwardMessageList,\r\n    setForwardMessageList,\r\n    showChatProfileSidebar,\r\n    setFavoriteMessagePayload,\r\n    favoriteMessagePayload,\r\n    flagToLoadFavoriteMessages,\r\n    setFlagToLoadFavoriteMessages,\r\n    setFavoriteMessages,\r\n    deleteFavoriteMessage,\r\n    setDeleteFavoriteMessage,\r\n    readMessagePayload,\r\n    setReadMessagePayload,\r\n  } = useChat();\r\n  const {\r\n    contactsSearch,\r\n    setContactsSearched,\r\n    newFavorite,\r\n    setNewFavorite,\r\n    contacts,\r\n    setContacts,\r\n    setContactsOutsideUserContacts,\r\n    toggleAddingContacts,\r\n    setToggleAddingContacts,\r\n    checkedContacts,\r\n    setCheckedContacts,\r\n    removedContact,\r\n    setRemovedContact,\r\n    checkedMembers,\r\n    setCheckedMembers,\r\n    groupToInsertMember,\r\n    setGroupToInsertMember,\r\n    clickedContact,\r\n    setClickedContact,\r\n  } = useContact();\r\n  const {\r\n    user,\r\n    setUser,\r\n    changedUserData,\r\n    setChangedUserData,\r\n    changedUserPassword,\r\n    setChangedUserPassword,\r\n    visualNotificationEnabled,\r\n    soundNotificationEnabled,\r\n  } = useAuth();\r\n  const {\r\n    showModalForwardMessageTo,\r\n    setShowModalForwardMessageTo,\r\n    showModalAddContact,\r\n  } = useModal();\r\n  const { setDisconnected } = useLoading();\r\n  const {\r\n    setGroups,\r\n    groups,\r\n    memberQuit,\r\n    groupIdOfLeaveRequest,\r\n    setGroupIdOfLeaveRequest,\r\n    setMemberQuit,\r\n    groupToRemoveContact,\r\n    setGroupToRemoveContact,\r\n    removedMember,\r\n    setRemovedMember,\r\n    toggleMemberRole,\r\n    setToggleMemberRole,\r\n    changeGroupData,\r\n    setChangeGroupData,\r\n    groupToCreate,\r\n    setGroupToCreate,\r\n    groupJid,\r\n    setGroupJid,\r\n  } = useGroup();\r\n  const {\r\n    listRooms,\r\n    setListRooms,\r\n    setConferenceList,\r\n    setCreateConference,\r\n    createConference,\r\n    conferenceToUpdate,\r\n    setConferenceToUpdate,\r\n    conferenceToRemove,\r\n    setConferenceToRemove,\r\n    addingParticipantsPayload,\r\n    setAddingParticipantsPayload,\r\n    removingParticipantsPayload,\r\n    setRemovingParticipantsPayload,\r\n  } = useConference();\r\n\r\n  const { setScreen } = useMainBox();\r\n\r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"c9b0dbe6bd8d38110a9a76d2bbed2b48\",\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n        email: \"romero2@digivox.com.br\",\r\n        expires_in: 2592000,\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        user_name: \"ZZ Romero 2\",\r\n      })\r\n    );\r\n    squadService = SquadService.getInstance({\r\n      chatCommunicatorSubscribe: chatCommunicatorSubscribe,\r\n    });\r\n    squadService?.user.get((user: IUser) => {\r\n      setUser(user);\r\n      //Ao iniciar o website\r\n      Notification.requestPermission();\r\n    });\r\n  };\r\n\r\n  const clearSendFile = (chatId: string, messageId: string) => {\r\n    setChats(\r\n      chats.map((chat) => {\r\n        if (chat.id === chatId) {\r\n          chat.messages = chat.messages.map((message) => {\r\n            if (message.id === messageId) {\r\n              message.deliverStatus = DeliverStatus.QUEUED;\r\n              message.sendFile = undefined;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return chat;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onChatsChange = () => {\r\n    // chats.forEach((chat) => {\r\n    // });\r\n  };\r\n  const onActiveChatChange = () => {\r\n    checkSendMessage(activeChat);\r\n    checkAttachedFiles(activeChat);\r\n    checkNewContact(activeChat);\r\n    // checkTyping(activeChat)\r\n  };\r\n  // const checkTyping = (chat: IChat) => {\r\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\r\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\r\n  //     if (oldTimeoutData)\r\n  //       clearTimeout(oldTimeoutData.timeout)\r\n  //     else\r\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\r\n  //     const timeoutData = {\r\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\r\n  //       msgStr: `${chat.inputMessage}`\r\n  //     }\r\n  //     typingTimeout.set(chat.jid, timeoutData)\r\n  //   }\r\n  // }\r\n  const checkNewContact = (cht: IChat) => {\r\n    if (!cht.added) {\r\n      squadService?.contacts.add(cht, (success: boolean) => {\r\n        if (success) {\r\n          setChats(\r\n            chats.map((chat) => {\r\n              if (chat.jid === cht.jid) {\r\n                chat.added = true;\r\n              }\r\n              if (activeChat.jid === chat.jid) setActiveChat(chat);\r\n              return chat;\r\n            })\r\n          );\r\n          squadService?.contacts.list((ctcs) => {\r\n            setContacts(ctcs);\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkAttachedFiles = (cht: IChat) => {\r\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\r\n      squadService?.attachments.list(cht, (attachments) => {\r\n        if (attachments.length > 0) {\r\n          setActiveChat({ ...cht, attachedFileList: attachments });\r\n        } else setActiveChat({ ...cht, attachedFileList: null });\r\n      });\r\n    }\r\n  };\r\n\r\n  /* getMessageUserProfilePicture = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.profilePicture;\r\n    } else {\r\n      return this.contacts.getAllUsers().get(msg.from.split(\"@\")[0])\r\n        ?.profilePicture;\r\n    }\r\n  }; */\r\n\r\n  const checkSearchMessages = () => {\r\n    if (activeChat.messageLoaded) {\r\n      squadService?.messages.list(activeChat, (messages) => {\r\n        if (messages.length) {\r\n          let find = false;\r\n          let newChats = [\r\n            ...chats.map((cht) => {\r\n              if (cht.id === activeChat.id) {\r\n                find = true;\r\n                messages.forEach((msg) => {\r\n                  if (!activeChat.messages.find((m) => m.id === msg.id))\r\n                    cht.messages.unshift(msg);\r\n                });\r\n                cht.messageLoaded = null;\r\n                setActiveChat(cht);\r\n              }\r\n              return cht;\r\n            }),\r\n          ];\r\n          if (!find) {\r\n            const object =\r\n              contacts.find((ctc) => ctc.id === activeChat.id) ||\r\n              groups.find((grp) => grp.groupId === activeChat.groupId);\r\n            if (object) {\r\n              find = true;\r\n              const cht = {\r\n                id: object.jid.split(\"@\")[0],\r\n                favorite: object.favorite,\r\n                chatType: (object as IGroup).groupId\r\n                  ? ChatType.GROUP\r\n                  : ChatType.USER,\r\n                added: true,\r\n                jid: object.jid,\r\n                name: object.name,\r\n                profilePicture: object.profilePicture,\r\n                messageLoaded: null,\r\n                unRead: 0,\r\n                inputMessage: \"\",\r\n                isTyping: false,\r\n                messages: messages,\r\n                members: (object as IGroup).members,\r\n                groupId: (object as IGroup).groupId,\r\n                mencioned: 0,\r\n              };\r\n              setActiveChat(cht);\r\n              newChats.unshift(cht);\r\n            }\r\n          }\r\n          if (!find) setActiveChat({ ...activeChat, messageLoaded: null });\r\n          setChats(newChats);\r\n        } else {\r\n          const chat = { ...activeChat, messageLoaded: null };\r\n          setActiveChat(chat);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkSUpdateMessages = () => {\r\n    if (activeChat.messageLoadedUpdate) {\r\n      squadService?.messages.list(activeChat, (messages) => {\r\n        if (messages.length) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.id === activeChat.id) {\r\n                messages.forEach((msg) => {\r\n                  if (!activeChat.messages.find((m) => m.id === msg.id))\r\n                    cht.messages.unshift(msg);\r\n                });\r\n                cht.messageLoadedUpdate = false;\r\n                setActiveChat(cht);\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n        } else {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.id === activeChat.id) {\r\n                cht.messageLoadedUpdate = null;\r\n                setActiveChat(cht);\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const getFileExtension = (url: string) => {\r\n    return url.split(\".\")[1];\r\n  };\r\n\r\n  const checkSendMessage = (chat: IChat) => {\r\n    chat.messages.forEach((msg) => {\r\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\r\n        if (msg.sendFile && !replyMsg) {\r\n          const files = [msg.sendFile];\r\n          clearSendFile(chat.id, msg.id);\r\n          squadService?.chat?.sendFiles(\r\n            chat,\r\n            files,\r\n            (data: SendImageCallbackReturn) => {\r\n              updateMessageFiles(data, chat, msg);\r\n              console.log(\r\n                \"jidFromUser:\",\r\n                squadService?.user.user?.jid as string\r\n              );\r\n              squadService?.attachments.saveData(\r\n                {\r\n                  createdAt: DateTime.local()\r\n                    .toISO()\r\n                    .split(\"T\")\r\n                    .join(\" \")\r\n                    .slice(0, 18),\r\n                  src: squadService.user.user?.jid as string,\r\n                  dst: chat.jid,\r\n                  fileExtension: getFileExtension(getFileName(data.url)),\r\n                  fileName: getFileName(data.url),\r\n                  fileUrl: data.url,\r\n                  kind: chat.chatType,\r\n                },\r\n                () => true\r\n              );\r\n            }\r\n          );\r\n        } else {\r\n          if (!msg.isForwardMessage && !replyMsg) {\r\n            sendMessage(chat, msg.message, (msgId) =>\r\n              updateMessage(msgId, chat, msg)\r\n            );\r\n          } else if (replyMsg) {\r\n            const replyMsgCopy = { ...replyMsg };\r\n            setReplyMsg(undefined);\r\n            squadService?.chat?.replyMsg(chat, msg, replyMsgCopy, (msgId) => {\r\n              updateMessage(msgId, chat, msg, replyMsgCopy);\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const updateMessageFiles = (\r\n    data: SendImageCallbackReturn,\r\n    chat: IChat,\r\n    msg: IMessage\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        const booleans = getUrlBooleans(data.url);\r\n        message.id = data.msgId;\r\n        message.fileUrl = data.url;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        message.message = getFileName(data.url);\r\n        message.isFileMessage = booleans.isFileMessage;\r\n        message.isImageMessage = booleans.isImageMessage;\r\n        message.isVideoMessage = booleans.isVideoMessage;\r\n        message.isAudioMessage = booleans.isAudioMessage;\r\n      }\r\n      return message;\r\n    });\r\n    setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      const newChats: IChat[] = [];\r\n      chats.forEach((cht) => {\r\n        if (cht.id === chat.id) {\r\n          cht.messages = newChat.messages;\r\n          newChats.unshift(cht);\r\n        } else {\r\n          newChats.push(cht);\r\n        }\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const updateMessage = (\r\n    msgId: string,\r\n    chat: IChat,\r\n    msg: IMessage,\r\n    replyedMsg: IMessage | undefined = undefined\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        message.id = msgId;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        if (replyedMsg) {\r\n          message.isReplyMessage = true;\r\n          message.replyedMessage = replyedMsg.message || replyedMsg.fileUrl;\r\n          message.replyedMessageId = replyedMsg.id;\r\n          message.replyedMessageTo =\r\n            squadService?.contacts\r\n              .getAllUsers()\r\n              .get(replyedMsg.fromUser.split(\"@\")[0])?.name ||\r\n            (squadService?.user?.user?.id === replyedMsg.fromUser.split(\"@\")[0]\r\n              ? squadService?.user?.user?.name\r\n              : \"Participant\");\r\n        }\r\n        if (isUrl(message.message)) {\r\n          const booleans = getUrlBooleans(message.message);\r\n          message.isFileMessage = booleans.isFileMessage;\r\n          message.isImageMessage = booleans.isImageMessage;\r\n          message.isAudioMessage = booleans.isAudioMessage;\r\n          message.isVideoMessage = booleans.isVideoMessage;\r\n          message.fileUrl = message.message;\r\n        }\r\n      }\r\n      return message;\r\n    });\r\n    if (activeChat.jid === newChat.jid) setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      const newChats: IChat[] = [];\r\n      chats.forEach((cht) => {\r\n        if (cht.id === chat.id) {\r\n          cht.messages = newChat.messages;\r\n          newChats.unshift(cht);\r\n        } else {\r\n          newChats.push(cht);\r\n        }\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const forwardMessage = () => {\r\n    if (forwardMessageList && showModalForwardMessageTo) {\r\n      const ctcs = [...forwardMessageList];\r\n      const message = { ...showModalForwardMessageTo };\r\n      setForwardMessageList(undefined);\r\n      setShowModalForwardMessageTo(undefined);\r\n      const chatsFinded: IChat[] = [];\r\n      const oldChats = [\r\n        ...chats.map((chat) => {\r\n          return { ...chat };\r\n        }),\r\n      ];\r\n      ctcs?.forEach((ctc, i) => {\r\n        const cht = oldChats.find((cht) => cht.jid === ctc.jid);\r\n        if (cht) {\r\n          const msg = {\r\n            ...message,\r\n            id: `${cht.messages.length + 1}`,\r\n            userName: user.name,\r\n            fromUser: user.id,\r\n            toUser: ctc.jid.split(\"@\")[0],\r\n            message: message.fileUrl || message.message,\r\n            deliverStatus: DeliverStatus.QUEUED,\r\n            isForwardMessage: true,\r\n          };\r\n          squadService?.chat?.forwardMessage(cht, msg, (msgId) => {\r\n            msg.id = msgId;\r\n            cht.messages.push(msg);\r\n            chatsFinded.push(cht);\r\n          });\r\n        }\r\n      });\r\n      const newChats = oldChats.map(\r\n        (chat) => chatsFinded.find((cht) => cht.id === chat.id) || chat\r\n      );\r\n      const ctcsNotInChat: (IContact | IGroup)[] = ctcs.filter(\r\n        (ctc) => !newChats.find((cht) => ctc.jid === cht.jid)\r\n      );\r\n      ctcsNotInChat.forEach((ctc, i) => {\r\n        const chat = {\r\n          id: ctc.jid.split(\"@\")[0],\r\n          jid: ctc.jid,\r\n          name: ctc.name,\r\n          profilePicture: ctc.profilePicture,\r\n          status: (ctc as IContact).status || undefined,\r\n          unRead: 0,\r\n          chatType: ctc.jid.includes(\"@conference.\")\r\n            ? ChatType.GROUP\r\n            : ChatType.USER,\r\n          inputMessage: \"\",\r\n          messageLoaded: false,\r\n          isTyping: false,\r\n          messages: [] as IMessage[],\r\n          email: (ctc as IContact).email || undefined,\r\n          favorite: ctc.favorite,\r\n          added: ctc.added,\r\n          mencioned: 0,\r\n        };\r\n        const newMessage: IMessage = {\r\n          ...message,\r\n          id: `${1}`,\r\n          userName: user.name,\r\n          fromUser: user.id,\r\n          toUser: ctc.jid.split(\"@\")[0],\r\n          deliverStatus: DeliverStatus.QUEUED,\r\n          isForwardMessage: true,\r\n        };\r\n        squadService?.chat?.forwardMessage(chat, newMessage, (msgId) => {\r\n          newMessage.id = msgId;\r\n          chat.messages.push(newMessage);\r\n          newChats.unshift(chat);\r\n        });\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const onChangeStatus = () => {\r\n    if (squadService?.chat?.chat?.client?.status === \"online\") {\r\n      squadService?.chat?.changeStatus(user.status);\r\n    }\r\n  };\r\n  const onSearchContacts = () => {\r\n    if (contactsSearch.length > 2) {\r\n      squadService?.contacts.search(contactsSearch, (searchList) => {\r\n        setContactsSearched(searchList);\r\n      });\r\n    } else {\r\n      setContactsSearched(undefined);\r\n    }\r\n  };\r\n\r\n  const onSearchContactsOutsideUserContacts = () => {\r\n    squadService?.contacts.getContactsOutsideUserLists((contacts) => {\r\n      if (contacts) {\r\n        setContactsOutsideUserContacts(contacts);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onToggleSidebarMenu = () => {\r\n    squadService?.contacts.getContactsOutsideUserLists((contacts) => {\r\n      if (contacts) {\r\n        setContactsOutsideUserContacts(contacts);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onRemovingMember = () => {\r\n    if (removedMember && groupToRemoveContact) {\r\n      let group = groups.find((grp) => grp.groupId === groupToRemoveContact);\r\n      if (group)\r\n        squadService?.groups.removeMember(\r\n          group.groupId,\r\n          removedMember,\r\n          (success: boolean) => {\r\n            if (success) {\r\n              setGroups(\r\n                groups.map((grp) => {\r\n                  if (grp.groupId === group?.groupId)\r\n                    grp.members = grp.members.filter(\r\n                      (mb) => mb.userId !== removedMember.userId\r\n                    );\r\n                  return grp;\r\n                })\r\n              );\r\n              setChats(\r\n                chats.map((cht) => {\r\n                  if (cht.groupId === group?.groupId) {\r\n                    cht.members = cht.members?.filter(\r\n                      (mb) => mb.userId !== removedMember.userId\r\n                    );\r\n                    if (cht.groupId === activeChat.groupId) setActiveChat(cht);\r\n                  }\r\n                  return cht;\r\n                })\r\n              );\r\n              if (group) {\r\n                squadService?.chat?.chat.sendEvent(\r\n                  group?.jid,\r\n                  removedMember.userId,\r\n                  \"6\"\r\n                );\r\n              }\r\n              setRemovedMember(undefined);\r\n              setGroupToRemoveContact(undefined);\r\n            }\r\n          }\r\n        );\r\n    }\r\n  };\r\n\r\n  const onLeavingGroup = () => {\r\n    if (memberQuit && groupIdOfLeaveRequest && groupJid) {\r\n      squadService?.groups.leftingGroup(\r\n        { groupId: groupIdOfLeaveRequest, memberId: memberQuit.userId },\r\n        (success: boolean) => {\r\n          if (success) {\r\n            squadService?.chat?.chat.sendPresence(\r\n              PresenceStatus.UNAVAILABLE,\r\n              `${groupJid}/${memberQuit.userId}`\r\n            );\r\n            squadService?.chat?.chat.sendEvent(\r\n              groupIdOfLeaveRequest,\r\n              memberQuit.userId,\r\n              \"3\",\r\n              undefined\r\n            );\r\n            setChats(\r\n              chats.filter((cht) => cht.groupId !== groupIdOfLeaveRequest)\r\n            );\r\n            setGroups(\r\n              groups.filter((grp) => grp.groupId !== groupIdOfLeaveRequest)\r\n            );\r\n            if (activeChat.groupId === groupIdOfLeaveRequest) {\r\n              setScreen(ScreenType.CHAT);\r\n            }\r\n          }\r\n          setGroupJid(undefined);\r\n          setMemberQuit(undefined);\r\n          setGroupIdOfLeaveRequest(\"\");\r\n          setScreen(ScreenType.WELCOME);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const showNotification = async (chat: IChat, msg: IMessage) => {\r\n    if (Notification.permission !== \"granted\") {\r\n      await Notification.requestPermission();\r\n    }\r\n    if (Notification.permission === \"granted\") {\r\n      let notificationBody = msg.message;\r\n      if (chat.groupId) {\r\n        notificationBody = `${msg.userName}: ${msg.message}`;\r\n      }\r\n      if (visualNotificationEnabled)\r\n        new Notification(chat.name, {\r\n          body: notificationBody,\r\n          icon: chat.profilePicture || require(\"../assets/images/logo.png\"),\r\n          silent: true,\r\n        });\r\n      if (soundNotificationEnabled)\r\n        new Audio(\r\n          \"https://m.toqueparacelular.com.br/a/download3/iPhone_Ding.mp3\"\r\n        ).play();\r\n    }\r\n  };\r\n\r\n  const onFavoriteMessage = () => {\r\n    if (favoriteMessagePayload) {\r\n      squadService?.messages.save(favoriteMessagePayload, (success) => {\r\n        if (success) {\r\n          setFavoriteMessagePayload(undefined);\r\n          setFlagToLoadFavoriteMessages({\r\n            contactType: favoriteMessagePayload.contactType as string,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const onAddingMembers = () => {\r\n    let asynchronousFlag = 0;\r\n    if (checkedMembers && groupToInsertMember) {\r\n      let copiaCheckedMembers = [...checkedMembers],\r\n        copiaGroupToInsertMember = { ...groupToInsertMember };\r\n      copiaCheckedMembers.forEach((ctt) => {\r\n        squadService?.groups.addMember(\r\n          copiaGroupToInsertMember,\r\n          ctt,\r\n          (success: boolean) => {\r\n            if (success) {\r\n              squadService?.chat?.chat.sendEvent(\r\n                copiaGroupToInsertMember.jid,\r\n                ctt.id,\r\n                \"2\"\r\n              );\r\n              asynchronousFlag++;\r\n\r\n              if (copiaCheckedMembers.length === asynchronousFlag) {\r\n                squadService?.groups.list((grps) => {\r\n                  setGroups(grps);\r\n                  setChats(\r\n                    chats.map((cht) => {\r\n                      if (cht.groupId === copiaGroupToInsertMember.groupId) {\r\n                        let foundedGroup = grps.find(\r\n                          (grp) => grp.groupId === cht.groupId\r\n                        );\r\n                        cht.members = foundedGroup?.members;\r\n                        if (activeChat.groupId === cht.groupId) {\r\n                          activeChat.members = foundedGroup?.members;\r\n                          setActiveChat(activeChat);\r\n                        }\r\n                      }\r\n                      return cht;\r\n                    })\r\n                  );\r\n                });\r\n              }\r\n            }\r\n          }\r\n        );\r\n      });\r\n      setCheckedMembers([]);\r\n      setToggleAddingContacts(false);\r\n      setGroupToInsertMember(undefined);\r\n    }\r\n  };\r\n\r\n  const onAddingContacts = () => {\r\n    let asynchronousFlag = 0;\r\n    if (checkedContacts && toggleAddingContacts) {\r\n      checkedContacts.forEach((ctt) => {\r\n        if (!ctt.added) {\r\n          squadService?.contacts.addContacts(ctt, (success: boolean) => {\r\n            if (success) {\r\n              asynchronousFlag++;\r\n              if (checkedContacts.length === asynchronousFlag) {\r\n                squadService?.contacts.list((contacts) => {\r\n                  setContacts(contacts);\r\n                  setCheckedContacts([]);\r\n                  setToggleAddingContacts(false);\r\n                });\r\n              }\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const onAddingContactOnGroupList = () => {\r\n    if (clickedContact) {\r\n      if (!clickedContact.added) {\r\n        squadService?.contacts.addContacts(\r\n          clickedContact,\r\n          (success: boolean) => {\r\n            if (success) {\r\n              squadService?.contacts.list((contacts) => {\r\n                setContacts(contacts);\r\n                setClickedContact(undefined);\r\n              });\r\n            }\r\n          }\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const onToggleMemberRole = () => {\r\n    if (toggleMemberRole) {\r\n      squadService?.groups.list((grps) => {\r\n        grps.forEach((gp) => {\r\n          if (gp.groupId === toggleMemberRole.gpId) {\r\n            gp.members.forEach((mb) => {\r\n              if (mb.userId === toggleMemberRole.mbId) {\r\n                squadService?.contacts.toggleMemberRole(\r\n                  toggleMemberRole.mbId,\r\n                  toggleMemberRole.gpId,\r\n                  toggleMemberRole.mbRole,\r\n                  (success: boolean) => {\r\n                    if (success) {\r\n                      const newRole =\r\n                        toggleMemberRole.mbRole === UserType.USER\r\n                          ? UserType.ADMIN\r\n                          : UserType.USER;\r\n                      setToggleMemberRole(undefined);\r\n                      setChats(\r\n                        chats.map((cht) => {\r\n                          if (cht.groupId === toggleMemberRole.gpId) {\r\n                            cht.members = cht.members?.map((mb) => {\r\n                              if (mb.userId === toggleMemberRole.mbId) {\r\n                                mb.role = newRole;\r\n                                if (cht.groupId) {\r\n                                  if (mb.role === UserType.ADMIN) {\r\n                                    squadService?.chat?.chat.sendEvent(\r\n                                      cht.groupId,\r\n                                      mb.userId,\r\n                                      \"8\"\r\n                                    );\r\n                                  } else {\r\n                                    squadService?.chat?.chat.sendEvent(\r\n                                      cht.groupId,\r\n                                      mb.userId,\r\n                                      \"9\"\r\n                                    );\r\n                                  }\r\n                                }\r\n                              }\r\n                              return mb;\r\n                            });\r\n                            if (activeChat.groupId === cht.groupId)\r\n                              setActiveChat(cht);\r\n                          }\r\n                          return cht;\r\n                        })\r\n                      );\r\n                      setGroups(\r\n                        groups.map((grp) => {\r\n                          if (grp.groupId === toggleMemberRole.gpId) {\r\n                            grp.members = grp.members.map((member) => {\r\n                              if (member.userId === toggleMemberRole.mbId)\r\n                                member.role = newRole;\r\n                              return member;\r\n                            });\r\n                          }\r\n                          return grp;\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                );\r\n              }\r\n            });\r\n          }\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const onChangeGroupData = () => {\r\n    if (changeGroupData) {\r\n      squadService?.groups.editGroupInfo(\r\n        {\r\n          groupId: changeGroupData.groupId as string,\r\n          groupName: changeGroupData.groupName,\r\n          members: changeGroupData.members,\r\n          description: changeGroupData.description,\r\n        },\r\n        (success: boolean) => {\r\n          if (success) {\r\n            squadService?.groups.list((grps) => {\r\n              let foundedGroup = grps.find(\r\n                (grp) => grp.groupId === changeGroupData.groupId\r\n              );\r\n              setGroups(grps);\r\n              setChats(\r\n                chats.map((cht) => {\r\n                  if (cht.groupId === changeGroupData.groupId) {\r\n                    if (foundedGroup?.name) {\r\n                      cht.name = foundedGroup.name;\r\n                    }\r\n                    if (activeChat.groupId === cht.groupId) {\r\n                      if (foundedGroup?.name) {\r\n                        cht.name = foundedGroup?.name;\r\n                      }\r\n                      setActiveChat(cht);\r\n                    }\r\n                  }\r\n                  return cht;\r\n                })\r\n              );\r\n              squadService?.chat?.chat.sendEvent(\r\n                foundedGroup?.jid as string,\r\n                undefined,\r\n                \"10\",\r\n                undefined\r\n              );\r\n              setChangeGroupData(undefined);\r\n            });\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const createGroup = () => {\r\n    squadService?.groups.create(groupToCreate, (parsedGroup) => {\r\n      if (parsedGroup) {\r\n        squadService?.chat?.chat.sendEvent(\r\n          parsedGroup.jid,\r\n          parsedGroup.jid,\r\n          \"1\"\r\n        );\r\n        squadService?.groups.list((groups) => {\r\n          setGroups(groups);\r\n          setGroupToCreate(undefined);\r\n        });\r\n        squadService?.chat?.chat.sendEvent(\r\n          parsedGroup.jid,\r\n          undefined,\r\n          \"1\",\r\n          undefined\r\n        );\r\n      }\r\n    });\r\n  };\r\n  const onListRooms = () => {\r\n    if (listRooms) {\r\n      squadService?.conferences.list((conferences) => {\r\n        setConferenceList(conferences);\r\n        console.log(conferences);\r\n        squadService?.chat?.joinGroups(conferences.map((conf) => conf.jid));\r\n      });\r\n      setListRooms(false);\r\n    }\r\n  };\r\n\r\n  const onCreatingConference = () => {\r\n    if (createConference) {\r\n      const momentStartDate = moment(\r\n        `${createConference.startDate} ${createConference.startTime}:00`\r\n      );\r\n      const momentFinalDate = moment(momentStartDate)\r\n        .add(parseInt(createConference.duration.split(\":\")[0]), \"hours\")\r\n        .add(parseInt(createConference.duration.split(\":\")[1]), \"minutes\");\r\n      const parsedConference = {\r\n        name: createConference.name,\r\n        waitMod: createConference.mdCheck,\r\n        startDatetime: `${momentStartDate.format(\"DD/MM/YYYY HH:mm:ss\")}`,\r\n        stopDatetime: `${momentFinalDate.format(\"DD/MM/YYYY HH:mm:ss\")}`,\r\n      };\r\n      squadService?.conferences.create(\r\n        parsedConference,\r\n        (createdConference) => {\r\n          const participantList: ConferenceRoomParticipant[] = [];\r\n          if (createdConference?.id) {\r\n            createConference.selectedContact?.forEach((ctc) => {\r\n              participantList.push({\r\n                userUuid: ctc.id,\r\n                description: \"\",\r\n                email: ctc.email,\r\n                name: ctc.name,\r\n                type: ConferenceRoomParticipantType.PARTICIPANT,\r\n                userModerator: false,\r\n              });\r\n            });\r\n            createConference.emailList?.forEach((participant) => {\r\n              participantList.push({\r\n                userUuid: null,\r\n                description: \"\",\r\n                email: participant.email,\r\n                name: participant.name,\r\n                type: ConferenceRoomParticipantType.PARTICIPANT_EXTERNAL,\r\n                userModerator: false,\r\n              });\r\n            });\r\n            squadService?.conferences.addParticipants(\r\n              createdConference.id,\r\n              participantList,\r\n              (s) => {\r\n                if (s) {\r\n                  setCreateConference(undefined);\r\n                  setListRooms(true);\r\n                }\r\n              }\r\n            );\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const onAddingParticipants = () => {\r\n    if (addingParticipantsPayload) {\r\n      squadService?.conferences.addParticipants(\r\n        addingParticipantsPayload.conferenceId,\r\n        addingParticipantsPayload.data,\r\n        (success) => {\r\n          if (success) {\r\n            setAddingParticipantsPayload(undefined);\r\n            setListRooms(true);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const onReadingMessage = () => {\r\n    if (readMessagePayload) {\r\n      squadService?.messages.read(\r\n        {\r\n          authUser: readMessagePayload.authUser,\r\n          between: readMessagePayload.between,\r\n          chatType: readMessagePayload.chatType,\r\n          id: readMessagePayload.id,\r\n        },\r\n        (success) => {\r\n          if (success) {\r\n            setReadMessagePayload(undefined);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(onChatsChange, [chats]);\r\n  useEffect(onNewFavorite, [newFavorite]);\r\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\r\n  useEffect(checkSUpdateMessages, [activeChat.messageLoadedUpdate]);\r\n  useEffect(onActiveChatChange, [activeChat]);\r\n  useEffect(onUserDataChange, [changedUserData]);\r\n  useEffect(onUserPasswordChange, [changedUserPassword]);\r\n  useEffect(onChangeStatus, [user.status]);\r\n  useEffect(forwardMessage, [forwardMessageList]);\r\n  useEffect(onSearchContacts, [contactsSearch]);\r\n  useEffect(onSearchContactsOutsideUserContacts, [showModalAddContact]);\r\n  useEffect(onAddingContacts, [toggleAddingContacts]);\r\n  useEffect(onRemovingMember, [removedMember, groupToRemoveContact]);\r\n  useEffect(onLeavingGroup, [memberQuit, groupIdOfLeaveRequest, groupJid]);\r\n  useEffect(onRemovingContact, [removedContact]);\r\n  useEffect(onAddingMembers, [groupToInsertMember, checkedMembers]);\r\n  useEffect(onToggleMemberRole, [toggleMemberRole]);\r\n  useEffect(onChangeGroupData, [changeGroupData]);\r\n  useEffect(onAddingContactOnGroupList, [clickedContact]);\r\n  useEffect(createGroup, [groupToCreate]);\r\n  useEffect(onToggleSidebarMenu, [showChatProfileSidebar]);\r\n  useEffect(onListRooms, [listRooms]);\r\n  useEffect(onCreatingConference, [createConference]);\r\n  useEffect(onFavoriteMessage, [favoriteMessagePayload]);\r\n  useEffect(onListFavoriteMessages, [flagToLoadFavoriteMessages]);\r\n  useEffect(onRemoveFavoriteMessage, [deleteFavoriteMessage]);\r\n  useEffect(onUpdatingConference, [conferenceToUpdate]);\r\n  useEffect(onRemovingConference, [conferenceToRemove]);\r\n  useEffect(onAddingParticipants, [addingParticipantsPayload]);\r\n  useEffect(onRemovingParticipant, [removingParticipantsPayload]);\r\n  useEffect(onReadingMessage, [readMessagePayload]);\r\n\r\n  function onRemovingParticipant() {\r\n    if (removingParticipantsPayload) {\r\n      squadService?.conferences.removeParticipant(\r\n        removingParticipantsPayload.conferenceId,\r\n        removingParticipantsPayload.participantId,\r\n        (success) => {\r\n          if (success) {\r\n            setListRooms(true);\r\n            setRemovingParticipantsPayload(undefined);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  function onUpdatingConference() {\r\n    if (conferenceToUpdate) {\r\n      /* const parsedConference = {\r\n        name: createConference.name,\r\n        waitMod: createConference.mdCheck,\r\n        startDatetime: `${momentStartDate.format(\"DD/MM/YYYY HH:mm:ss\")}`,\r\n        stopDatetime: `${momentFinalDate.format(\"DD/MM/YYYY HH:mm:ss\")}`,\r\n      }; */\r\n      squadService?.conferences.update(\r\n        conferenceToUpdate.id,\r\n        {\r\n          name: conferenceToUpdate.name,\r\n          waitMod: conferenceToUpdate.waitMod,\r\n          startDatetime: conferenceToUpdate.startDatetime,\r\n          stopDatetime: conferenceToUpdate.stopDatetime,\r\n        },\r\n        (successOnUpdate) => {\r\n          if (successOnUpdate) {\r\n            setListRooms(true);\r\n            setConferenceToUpdate(undefined);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  function onRemovingConference() {\r\n    if (conferenceToRemove) {\r\n      squadService?.conferences.remove(\r\n        conferenceToRemove.id,\r\n        (successOnRemove) => {\r\n          if (successOnRemove) {\r\n            setListRooms(true);\r\n            setConferenceToRemove(undefined);\r\n            setScreen(ScreenType.WELCOME);\r\n            /* chats.find((cht) => {\r\n            if(cht.conferenceRoomParticipants){\r\n              setActiveChat(cht);\r\n            }\r\n            return cht;\r\n          }) */\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  function onRemoveFavoriteMessage() {\r\n    if (deleteFavoriteMessage) {\r\n      squadService?.messages.deleteFavorite(\r\n        { messageId: deleteFavoriteMessage?.messageId as string },\r\n        (success) => {\r\n          if (success) {\r\n            setFlagToLoadFavoriteMessages({\r\n              contactType: deleteFavoriteMessage?.contactType as string,\r\n            });\r\n            setDeleteFavoriteMessage(undefined);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  function onListFavoriteMessages() {\r\n    if (flagToLoadFavoriteMessages) {\r\n      squadService?.messages.listFavorites(\r\n        {\r\n          contactTo: \"\",\r\n          contactType: \"\",\r\n          content: \"\",\r\n          contentType: \"\",\r\n          messageDate: \"\",\r\n          messageId: \"\",\r\n          message: \"\",\r\n        },\r\n        (success) => {\r\n          if (success) {\r\n            setFavoriteMessages(success.messages.map((item) => item));\r\n            setFlagToLoadFavoriteMessages(undefined);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  function onRemovingContact() {\r\n    if (removedContact) {\r\n      contacts.forEach((ctc) => {\r\n        if (ctc.id === removedContact.id) {\r\n          if (ctc.added)\r\n            squadService?.contacts.remove(ctc, (success: boolean) => {\r\n              if (success) {\r\n                squadService?.contacts.list((ctcs) => {\r\n                  setContacts(ctcs);\r\n                  setRemovedContact(undefined);\r\n                });\r\n              }\r\n            });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onUserPasswordChange() {\r\n    if (changedUserPassword.oldPassword && changedUserPassword.newPassword) {\r\n      squadService?.user.changePassword(changedUserPassword, (password) => {\r\n        if (password) {\r\n          setChangedUserPassword({ oldPassword: \"\", newPassword: \"\" });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onUserDataChange() {\r\n    if (changedUserData.email && changedUserData.name) {\r\n      squadService?.user.changeUserData(changedUserData, (chgd) => {\r\n        setChangedUserData({ email: \"\", name: \"\" });\r\n        if (chgd) {\r\n          setUser({\r\n            ...user,\r\n            email: changedUserData.email,\r\n            name: changedUserData.name,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onNewFavorite() {\r\n    if (newFavorite) {\r\n      const newFavoriteLoad = { ...newFavorite };\r\n      squadService?.contacts.setFavorite(newFavorite, (favorite) => {\r\n        if (favorite) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.jid === newFavoriteLoad.jid) {\r\n                cht.favorite = !newFavoriteLoad.favorite;\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n          setGroups(\r\n            groups.map((grp) => {\r\n              if (grp.jid === newFavoriteLoad.jid) {\r\n                return {\r\n                  ...grp,\r\n                  favorite: !newFavoriteLoad.favorite,\r\n                };\r\n              }\r\n              return grp;\r\n            })\r\n          );\r\n          setContacts(\r\n            contacts.map((ctt) => {\r\n              if (ctt.jid === newFavoriteLoad.jid) {\r\n                return {\r\n                  ...ctt,\r\n                  favorite: !newFavoriteLoad.favorite,\r\n                };\r\n              }\r\n              return ctt;\r\n            })\r\n          );\r\n        }\r\n      });\r\n      setNewFavorite(undefined);\r\n    }\r\n  }\r\n  function chatCommunicatorSubscribe(evt: string, data: any) {\r\n    switch (evt) {\r\n      case Events.RECONNECTED:\r\n        setDisconnected(false);\r\n      // eslint-disable-next-line\r\n      case Events.ONLINE:\r\n        squadService?.chats.list((receivedChats) => {\r\n          const chats: IChat[] = [];\r\n          receivedChats.forEach((cht) => {\r\n            if (!chats.find((chat) => chat.id === cht.id)) {\r\n              chats.push(cht);\r\n            }\r\n          });\r\n          setChats(chats);\r\n          //populating groups\r\n          squadService?.groups.list((groups) => {\r\n            setGroups(groups);\r\n            //Joining Groups Rooms in XMPP\r\n            squadService?.chat?.joinGroups(groups.map((group) => group.jid));\r\n          });\r\n          //populating contacts\r\n          squadService?.contacts.list((contacts) => {\r\n            setContacts(contacts);\r\n          });\r\n\r\n          //populating conferences\r\n          setListRooms(true);\r\n          setFlagToLoadFavoriteMessages({ contactType: \"\" });\r\n        });\r\n        break;\r\n      case Events.ERROR:\r\n      case Events.OFFLINE:\r\n        if (localStorage.getItem(\"logout\") !== \"true\") {\r\n          squadService?.chat?.makeChat(chatCommunicatorSubscribe);\r\n        }\r\n        localStorage.removeItem(\"logout\");\r\n        console.log(evt);\r\n        break;\r\n      case Events.RECONNECTING:\r\n        // setShowChat(false);\r\n        // setActiveChat(actChtData);\r\n        // setChats([]);\r\n        // setGroups([]);\r\n        // setContacts([]);\r\n        // setConferenceList([]);\r\n        console.log(\"Reconnecting\");\r\n        setDisconnected(true);\r\n        break;\r\n      case Events.MESSAGE:\r\n        if (data.fromUser === user.jid) break;\r\n        let find = false;\r\n\r\n        let newChats: IChat[] = [];\r\n        chats.forEach((chat) => {\r\n          if (\r\n            data.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] ||\r\n            data.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]\r\n          ) {\r\n            find = true;\r\n            if (!chat.messages.filter((msg) => msg.id === data.id)[0])\r\n              chat.messages.push(data);\r\n            if (chat.id === activeChat.id) {\r\n              let chatTemporary = { ...chat };\r\n              setActiveChat(chatTemporary);\r\n              setReadMessagePayload({\r\n                authUser: user.jid as string,\r\n                between: activeChat.jid,\r\n                chatType: activeChat.chatType,\r\n                id: activeChat.messages[activeChat.messages.length - 1].id,\r\n              });\r\n            } else {\r\n              chat.unRead++;\r\n              chat.mencioned += ParseUserTag(user.id, data.message);\r\n              showNotification(chat, data);\r\n            }\r\n            newChats.unshift(chat);\r\n          } else {\r\n            newChats.push(chat);\r\n          }\r\n        });\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n          squadService?.contacts.listAllUsers((listContacts) => {\r\n            listContacts.forEach((c) => {\r\n              if (\r\n                data.fromUser.split(\"@\")[0] === c.jid.split(\"@\")[0] ||\r\n                data.toUser.split(\"@\")[0] === c.jid.split(\"@\")[0]\r\n              ) {\r\n                if (c.jid === data.fromUser) {\r\n                  find = true;\r\n                  newChat = {\r\n                    id: c.id,\r\n                    jid: c.jid,\r\n                    name: c.name,\r\n                    profilePicture: c.profilePicture,\r\n                    status: c.status,\r\n                    unRead: 1,\r\n                    chatType: ChatType.USER,\r\n                    inputMessage: \"\",\r\n                    isTyping: false,\r\n                    messages: [],\r\n                    favorite: c.favorite,\r\n                    added: true,\r\n                    mencioned: 0,\r\n                  };\r\n                  newChat.messages.push(data);\r\n                  newChats.unshift(newChat);\r\n                  if (!c.added) {\r\n                    squadService?.contacts.add(newChat, (s) => {\r\n                      if (s) {\r\n                        squadService?.contacts.list((ctcs) => {\r\n                          setContacts(ctcs);\r\n                        });\r\n                      }\r\n                    });\r\n                  }\r\n                }\r\n              }\r\n            });\r\n          });\r\n        }\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.groups.list((listGroups) => {\r\n            listGroups.forEach((g) => {\r\n              if (\r\n                data.fromUser.split(\"@\")[0] === g.jid.split(\"@\")[0] ||\r\n                data.toUser.split(\"@\")[0] === g.jid.split(\"@\")[0]\r\n              ) {\r\n                if (g.jid === data.fromUser) {\r\n                  find = true;\r\n                  newChat = {\r\n                    id: g.groupId,\r\n                    jid: g.jid,\r\n                    name: g.name,\r\n                    profilePicture: g.profilePicture,\r\n                    attachedFileList: undefined,\r\n                    conferenceRoomParticipants: undefined,\r\n                    department: undefined,\r\n                    email: undefined,\r\n                    groupId: g.groupId,\r\n                    members: g.members,\r\n                    messageLoaded: undefined,\r\n                    userDescription: undefined,\r\n                    status: undefined,\r\n                    unRead: 1,\r\n                    chatType: ChatType.GROUP,\r\n                    inputMessage: \"\",\r\n                    isTyping: false,\r\n                    messages: [],\r\n                    favorite: g.favorite,\r\n                    added: g.added,\r\n                    mencioned: 0,\r\n                  };\r\n                  newChat.messages.push(data);\r\n                  newChats.unshift(newChat);\r\n                }\r\n              }\r\n            });\r\n          });\r\n        }\r\n\r\n        setChats(newChats);\r\n\r\n        break;\r\n      case Events.RECEIVED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.messages.find((msg) => msg.id === data.id))\r\n              chat.messages = chat.messages.map((message) => {\r\n                message.deliverStatus = DeliverStatus.DELIVERED;\r\n                return message;\r\n              });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.DISPLAYED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.messages.find((msg) => msg.id === data.id))\r\n              chat.messages = chat.messages.map((message) => {\r\n                message.readStatus = ReadStatus.READ;\r\n                return message;\r\n              });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.COMPOSING:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = true;\r\n              if (activeChat.jid === data) setActiveChat(chat);\r\n              deleteTypingTimeout(chat.jid);\r\n              setTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.ACTIVE:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = false;\r\n              if (activeChat.jid === data) {\r\n                let chatUpdate = { ...chat };\r\n                setActiveChat(chatUpdate);\r\n              }\r\n              deleteTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.PRESENCE:\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.jid && data.from) {\r\n              if (\r\n                cht.jid === data.from.split(\"/\")[0] &&\r\n                !cht.jid.includes(\"@conference.\")\r\n              ) {\r\n                cht.status = data.status;\r\n              }\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n        setContacts(\r\n          contacts.map((ctc) => {\r\n            if (ctc.jid && data.from) {\r\n              if (\r\n                ctc.jid === data.from.split(\"/\")[0] &&\r\n                !ctc.jid.includes(\"@conference.\")\r\n              ) {\r\n                ctc.status = data.status;\r\n              }\r\n            }\r\n            return ctc;\r\n          })\r\n        );\r\n        break;\r\n\r\n      case Events.SEND_EVENT:\r\n        const event = data as IMessage;\r\n        let finded;\r\n        let newChat: IChat[] = [];\r\n        chats.forEach((chat) => {\r\n          if (\r\n            event.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] ||\r\n            event.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]\r\n          ) {\r\n            finded = true;\r\n            if (!chat.messages.filter((msg) => msg.id === event.id)[0])\r\n              chat.messages.push(event);\r\n            if (chat.id === activeChat.id) {\r\n              let chatTemporary = { ...chat };\r\n              setActiveChat(chatTemporary);\r\n              setReadMessagePayload({\r\n                authUser: user.jid as string,\r\n                between: activeChat.jid,\r\n                chatType: activeChat.chatType,\r\n                id: chat.messages.filter(\r\n                  (msg: IMessage) => msg.id === data.id\r\n                )[0].id,\r\n              });\r\n            } else {\r\n              chat.unRead++;\r\n              chat.mencioned += ParseUserTag(user.id, data.message);\r\n              showNotification(chat, data);\r\n            }\r\n            newChat.unshift(chat);\r\n          } else {\r\n            newChat.push(chat);\r\n          }\r\n        });\r\n        if (!finded) {\r\n          groups.forEach((grp) => {\r\n            if (\r\n              event.fromUser.split(\"@\")[0] === grp.jid.split(\"@\")[0] ||\r\n              event.toUser.split(\"@\")[0] === grp.jid.split(\"@\")[0]\r\n            ) {\r\n              finded = true;\r\n              let groupToBeInserted: IChat = {\r\n                added: grp.added,\r\n                chatType: ChatType.GROUP,\r\n                favorite: grp.favorite,\r\n                id: grp.groupId,\r\n                inputMessage: \"\",\r\n                isTyping: false,\r\n                jid: grp.jid,\r\n                messages: [event],\r\n                name: grp.name,\r\n                unRead: 0,\r\n                attachedFileList: undefined,\r\n                department: undefined,\r\n                email: undefined,\r\n                groupId: grp.groupId,\r\n                members: grp.members,\r\n                messageLoaded: undefined,\r\n                profilePicture: grp.profilePicture,\r\n                status: undefined,\r\n                userDescription: grp.description,\r\n                mencioned: 0,\r\n              };\r\n              newChat.unshift(groupToBeInserted);\r\n              setActiveChat(groupToBeInserted);\r\n            }\r\n          });\r\n        }\r\n        if (!finded) {\r\n          squadService?.groups.list((grps) => {\r\n            setGroups(grps);\r\n            grps.forEach((grp) => {\r\n              if (\r\n                event.fromUser.split(\"@\")[0] === grp.jid.split(\"@\")[0] ||\r\n                event.toUser.split(\"@\")[0] === grp.jid.split(\"@\")[0]\r\n              ) {\r\n                finded = true;\r\n                let groupToBeInserted: IChat = {\r\n                  added: grp.added,\r\n                  chatType: ChatType.GROUP,\r\n                  favorite: grp.favorite,\r\n                  id: grp.groupId,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  jid: grp.jid,\r\n                  messages: [event],\r\n                  name: grp.name,\r\n                  unRead: 1,\r\n                  attachedFileList: undefined,\r\n                  department: undefined,\r\n                  email: undefined,\r\n                  groupId: grp.groupId,\r\n                  members: grp.members,\r\n                  messageLoaded: undefined,\r\n                  profilePicture: grp.profilePicture,\r\n                  status: undefined,\r\n                  userDescription: grp.description,\r\n                  mencioned: 0,\r\n                };\r\n                newChat.unshift(groupToBeInserted);\r\n              }\r\n            });\r\n          });\r\n        }\r\n        setChats(newChat);\r\n        if (event.eventId === 6 || event.eventId === 2) {\r\n          refreshMembers(event);\r\n        }\r\n        break;\r\n      default:\r\n        console.log(evt);\r\n        break;\r\n    }\r\n  }\r\n\r\n  const refreshMembers = (event: IMessage) => {\r\n    squadService?.groups.list((grps) => {\r\n      setGroups(grps);\r\n      setChats(\r\n        chats.map((chat) => {\r\n          if (\r\n            event.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] ||\r\n            event.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]\r\n          ) {\r\n            chat.members = grps.find((grp) => grp.groupId === chat.id)?.members;\r\n            if (chat.id === activeChat.id) {\r\n              setActiveChat(chat);\r\n            }\r\n          }\r\n          return chat;\r\n        })\r\n      );\r\n    });\r\n  };\r\n\r\n  const deleteTypingTimeout = (jid: string) => {\r\n    clearTimeout(typingTimeout.get(jid)?.timeout || setTimeout(() => {}, 1));\r\n    typingTimeout.delete(jid);\r\n  };\r\n  const setTypingTimeout = (jid: string) => {\r\n    const timeoutData: TypingTimeoutData = {\r\n      msgStr: \"\",\r\n      timeout: setTimeout(() => {\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.jid === jid) {\r\n              cht.isTyping = false;\r\n              if (activeChat.jid === jid) setActiveChat(cht);\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n      }, 20000),\r\n    };\r\n    typingTimeout.set(jid, timeoutData);\r\n  };\r\n\r\n  squadService?.updateChatSubscribeFuncition(chatCommunicatorSubscribe);\r\n  // Comentado para evitar warnings no console enquanto não é usado\r\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\r\n  //     squadService?.groups.list((groups) => {\r\n  //       setGroups(groups);\r\n  //       callback(true);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  function sendMessage(\r\n    chat: IChat,\r\n    message: string,\r\n    callback: SendMessageCallback\r\n  ) {\r\n    squadService?.chat?.chat.sendMessage(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message,\r\n      callback\r\n    );\r\n  }\r\n\r\n  useEffect(init, []);\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}