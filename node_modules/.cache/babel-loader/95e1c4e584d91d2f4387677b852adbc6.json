{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ChatBody.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport SimpleBar from \"simplebar-react\";\nimport { Spinner } from \"reactstrap\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport ChatMessage from \"./ChatMessage\";\nimport \"./../assets/css/reply-msg.scss\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nimport Swal from \"sweetalert2\";\nimport ChatMessageDivisionData from \"./ChatMessageDivisionData\";\nimport EventNotification from \"./EventNotification\";\nconst scrollableNodeRef = React.createRef();\n\nconst ChatBody = () => {\n  const {\n    activeChat,\n    replyMsg,\n    chats,\n    setChats\n  } = useChat();\n  const [showButtonBottom, setShowButtonBottom] = useState(false);\n  const {\n    user\n  } = useAuth();\n\n  const onAddMessage = file => {\n    setChats(chats.map(item => {\n      if (activeChat) if (item.id === (activeChat === null || activeChat === void 0 ? void 0 : activeChat.id)) {\n        item.messages.push({\n          id: `${item.messages.length + 1}`,\n          userName: user.name,\n          message: \"Carregando...\",\n          time: \"\",\n          isImageMessage: false,\n          isFileMessage: false,\n          isVideoMessage: false,\n          isAudioMessage: false,\n          fileUrl: \"\",\n          sendFile: file,\n          toUser: activeChat.id,\n          fromUser: user.id,\n          deliverStatus: DeliverStatus.SENDING,\n          readStatus: ReadStatus.UNREAD,\n          deliverTimestamp: \"\",\n          readTimestamp: \"\",\n          content: \"metadata\",\n          contentType: \"type\",\n          isReplyMessage: false,\n          isForwardMessage: false\n        });\n      }\n      return item;\n    }));\n  };\n\n  const onScroll = ev => {\n    var _ev$target, _ev$target2;\n\n    if ((ev === null || ev === void 0 ? void 0 : (_ev$target = ev.target) === null || _ev$target === void 0 ? void 0 : _ev$target.scrollTop) <= (ev === null || ev === void 0 ? void 0 : (_ev$target2 = ev.target) === null || _ev$target2 === void 0 ? void 0 : _ev$target2.scrollHeight) - 1000) {\n      setShowButtonBottom(true);\n    } else {\n      setShowButtonBottom(false);\n    }\n  };\n\n  const scrolltoBottom = () => {\n    var _scrollableNodeRef$cu;\n\n    (_scrollableNodeRef$cu = scrollableNodeRef.current) === null || _scrollableNodeRef$cu === void 0 ? void 0 : _scrollableNodeRef$cu.scrollTo({\n      top: 99999999\n    });\n    setShowButtonBottom(false);\n  };\n\n  const checkScroll = () => {\n    scrolltoBottom();\n\n    if (scrollableNodeRef === null || scrollableNodeRef === void 0 ? void 0 : scrollableNodeRef.current) {\n      scrollableNodeRef.current.onscroll = onScroll;\n    }\n  };\n\n  const checkLoading = () => {\n    if (!activeChat.messageLoaded) {\n      scrolltoBottom();\n    }\n  };\n\n  useEffect(checkLoading, [activeChat.messageLoaded]);\n  useEffect(checkScroll, [activeChat]);\n\n  const dropHandler = ev => {\n    console.log(\"File(s) dropped\"); // Impedir o comportamento padrão (impedir que o arquivo seja aberto)\n\n    ev.preventDefault();\n\n    if (ev.dataTransfer.items) {\n      // Use a interface DataTransferItemList para acessar o (s) arquivo (s)\n      for (var i = 0; i < ev.dataTransfer.items.length; i++) {\n        // Se os itens soltos não forem arquivos, rejeite-os\n        if (ev.dataTransfer.items[i].kind === \"file\") {\n          var file = ev.dataTransfer.items[i].getAsFile();\n\n          if (file && file.size > 15728640) {\n            Swal.fire({\n              icon: \"error\",\n              title: \"Oops...\",\n              text: \"File size must be less than 15mb!\",\n              footer: \"\",\n              customClass: {\n                popup: \"swal-big-popup\"\n              }\n            });\n            return;\n          } else {\n            if (file) {\n              onAddMessage(file);\n            }\n          }\n        }\n      }\n    } else {\n      // Use a interface DataTransfer para acessar o (s) arquivo (s)\n      // eslint-disable-next-line no-redeclare\n      for (var i = 0; i < ev.dataTransfer.files.length; i++) {\n        console.log(\"ELSE ... file[\" + i + \"].name = \" + ev.dataTransfer.files[i].name);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SimpleBar, {\n    className: `chat-conversation ${replyMsg ? \"reply\" : \"\"} p-3 p-lg-4`,\n    id: \"messages\",\n    scrollableNodeProps: {\n      ref: scrollableNodeRef\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: `d-flex justify-content-center`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    color: \"primary\",\n    className: `${activeChat.messageLoaded ? \"\" : \"d-none\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"ul\", {\n    onDragOver: e => e.preventDefault(),\n    onDrop: dropHandler,\n    className: `list-unstyled mb-0 ${activeChat.messageLoaded ? \"d-none\" : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, activeChat.messages.map((message, key) => /*#__PURE__*/React.createElement(\"div\", {\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ChatMessageDivisionData, {\n    message: message,\n    messages: activeChat.messages,\n    i: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 15\n    }\n  }), message.eventId ? /*#__PURE__*/React.createElement(EventNotification, {\n    msg: message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(ChatMessage, {\n    activeChat: activeChat,\n    message: message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }))))), showButtonBottom && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-chat-down\",\n    style: replyMsg ? {\n      bottom: \"190px\"\n    } : {},\n    onClick: scrolltoBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"ri-arrow-down-s-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default ChatBody;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ChatBody.tsx"],"names":["React","useState","useEffect","SimpleBar","Spinner","useChat","ChatMessage","useAuth","DeliverStatus","ReadStatus","Swal","ChatMessageDivisionData","EventNotification","scrollableNodeRef","createRef","ChatBody","activeChat","replyMsg","chats","setChats","showButtonBottom","setShowButtonBottom","user","onAddMessage","file","map","item","id","messages","push","length","userName","name","message","time","isImageMessage","isFileMessage","isVideoMessage","isAudioMessage","fileUrl","sendFile","toUser","fromUser","deliverStatus","SENDING","readStatus","UNREAD","deliverTimestamp","readTimestamp","content","contentType","isReplyMessage","isForwardMessage","onScroll","ev","target","scrollTop","scrollHeight","scrolltoBottom","current","scrollTo","top","checkScroll","onscroll","checkLoading","messageLoaded","dropHandler","console","log","preventDefault","dataTransfer","items","i","kind","getAsFile","size","fire","icon","title","text","footer","customClass","popup","files","ref","e","key","eventId","bottom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport ChatMessage from \"./ChatMessage\";\r\nimport \"./../assets/css/reply-msg.scss\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport Swal from \"sweetalert2\";\r\nimport ChatMessageDivisionData from \"./ChatMessageDivisionData\";\r\nimport EventNotification from \"./EventNotification\";\r\n\r\nconst scrollableNodeRef = React.createRef<HTMLDivElement>();\r\n\r\nconst ChatBody: React.FC = () => {\r\n  const { activeChat, replyMsg, chats, setChats } = useChat();\r\n  const [showButtonBottom, setShowButtonBottom] = useState(false);\r\n  const { user } = useAuth();\r\n\r\n  const onAddMessage = (file: File) => {\r\n    setChats(\r\n      chats.map((item) => {\r\n        if (activeChat)\r\n          if (item.id === activeChat?.id) {\r\n            item.messages.push({\r\n              id: `${item.messages.length + 1}`,\r\n              userName: user.name,\r\n              message: \"Carregando...\",\r\n              time: \"\",\r\n              isImageMessage: false,\r\n              isFileMessage: false,\r\n              isVideoMessage: false,\r\n              isAudioMessage: false,\r\n              fileUrl: \"\",\r\n              sendFile: file,\r\n              toUser: activeChat.id,\r\n              fromUser: user.id,\r\n              deliverStatus: DeliverStatus.SENDING,\r\n              readStatus: ReadStatus.UNREAD,\r\n              deliverTimestamp: \"\",\r\n              readTimestamp: \"\",\r\n              content: \"metadata\",\r\n              contentType: \"type\",\r\n              isReplyMessage: false,\r\n              isForwardMessage: false,\r\n            });\r\n          }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onScroll = (ev: any) => {\r\n    if (ev?.target?.scrollTop <= ev?.target?.scrollHeight - 1000) {\r\n      setShowButtonBottom(true);\r\n    } else {\r\n      setShowButtonBottom(false);\r\n    }\r\n  };\r\n\r\n  const scrolltoBottom = () => {\r\n    scrollableNodeRef.current?.scrollTo({\r\n      top: 99999999,\r\n    });\r\n    setShowButtonBottom(false);\r\n  };\r\n\r\n  const checkScroll = () => {\r\n    scrolltoBottom();\r\n    if (scrollableNodeRef?.current) {\r\n      scrollableNodeRef.current.onscroll = onScroll;\r\n    }\r\n  };\r\n\r\n  const checkLoading = () => {\r\n    if (!activeChat.messageLoaded) {\r\n      scrolltoBottom();\r\n    }\r\n  };\r\n\r\n  useEffect(checkLoading, [activeChat.messageLoaded]);\r\n  useEffect(checkScroll, [activeChat]);\r\n\r\n  const dropHandler = (ev: React.DragEvent<HTMLElement>) => {\r\n    console.log(\"File(s) dropped\");\r\n\r\n    // Impedir o comportamento padrão (impedir que o arquivo seja aberto)\r\n    ev.preventDefault();\r\n\r\n    if (ev.dataTransfer.items) {\r\n      // Use a interface DataTransferItemList para acessar o (s) arquivo (s)\r\n      for (var i = 0; i < ev.dataTransfer.items.length; i++) {\r\n        // Se os itens soltos não forem arquivos, rejeite-os\r\n        if (ev.dataTransfer.items[i].kind === \"file\") {\r\n          var file = ev.dataTransfer.items[i].getAsFile();\r\n          if (file && file.size > 15728640) {\r\n            Swal.fire({\r\n              icon: \"error\",\r\n              title: \"Oops...\",\r\n              text: \"File size must be less than 15mb!\",\r\n              footer: \"\",\r\n              customClass: {\r\n                popup: \"swal-big-popup\"\r\n              }\r\n            });\r\n            return;\r\n          } else {\r\n            if (file) {\r\n              onAddMessage(file);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      // Use a interface DataTransfer para acessar o (s) arquivo (s)\r\n      // eslint-disable-next-line no-redeclare\r\n      for (var i = 0; i < ev.dataTransfer.files.length; i++) {\r\n        console.log(\r\n          \"ELSE ... file[\" + i + \"].name = \" + ev.dataTransfer.files[i].name\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* <DragNDropCaller /> */}\r\n      <SimpleBar\r\n        className={`chat-conversation ${replyMsg ? \"reply\" : \"\"} p-3 p-lg-4`}\r\n        id=\"messages\"\r\n        scrollableNodeProps={{ ref: scrollableNodeRef }}\r\n      >\r\n        <div className={`d-flex justify-content-center`}>\r\n          <Spinner\r\n            color=\"primary\"\r\n            className={`${activeChat.messageLoaded ? \"\" : \"d-none\"}`}\r\n          />\r\n        </div>\r\n        <ul\r\n          onDragOver={(e) => e.preventDefault()}\r\n          onDrop={dropHandler}\r\n          className={`list-unstyled mb-0 ${\r\n            activeChat.messageLoaded ? \"d-none\" : \"\"\r\n          }`}\r\n        >\r\n          {activeChat.messages.map((message, key) => (\r\n            <div key={key}>\r\n              <ChatMessageDivisionData\r\n                message={message}\r\n                messages={activeChat.messages}\r\n                i={key}\r\n              />\r\n              {message.eventId ? \r\n                <EventNotification msg={message}/>\r\n              :\r\n                <ChatMessage activeChat={activeChat} message={message} />\r\n              }\r\n            </div>\r\n          ))}\r\n        </ul>\r\n      </SimpleBar>\r\n      {showButtonBottom && (\r\n        <div\r\n          className=\"btn-chat-down\"\r\n          style={replyMsg ? { bottom: \"190px\" } : {}}\r\n          onClick={scrolltoBottom}\r\n        >\r\n          <i className=\"ri-arrow-down-s-line\"></i>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatBody;\r\n"]},"metadata":{},"sourceType":"module"}