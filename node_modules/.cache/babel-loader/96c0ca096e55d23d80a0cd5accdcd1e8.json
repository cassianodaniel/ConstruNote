{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport { useModal } from \"../contexts/ModalContext\";\nlet squadService;\nlet typingTimeout = new Map();\n\nconst SquadCommunicator = ({\n  children\n}) => {\n  var _squadService22;\n\n  const {\n    chats,\n    setChats,\n    activeChat,\n    replyMsg,\n    setReplyMsg,\n    setActiveChat,\n    forwardMessageList,\n    setForwardMessageList\n  } = useChat();\n  const {\n    contactsSearch,\n    setContactsSearched,\n    newFavorite,\n    setNewFavorite,\n    contacts,\n    setContacts,\n    setContactsOutsideUserContacts,\n    contactChecks,\n    setContactChecks\n  } = useContact();\n  const {\n    user,\n    setUser,\n    changedUserData,\n    changedUserPassword,\n    setChangedUserPassword\n  } = useAuth();\n  const {\n    showModalForwardMessageTo,\n    setShowModalForwardMessageTo,\n    showModalAddContact\n  } = useModal();\n  const {\n    setGroups,\n    groups\n  } = useGroup();\n\n  const init = () => {\n    var _squadService;\n\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"b4c1fa651399a3eb63aee51777d3d508\",\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      email: \"romero2@digivox.com.br\",\n      user_name: \"ZZ Romero 2\",\n      expires_in: 2592000,\n      baseUrl: \"https://app.citrussquad.com/api/v1/\"\n    }));\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\n    (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.user.get(user => {\n      setUser(user);\n    });\n  };\n\n  const clearSendFile = (chatId, messageId) => {\n    setChats(chats.map(chat => {\n      if (chat.id === chatId) {\n        chat.messages = chat.messages.map(message => {\n          if (message.id === messageId) {\n            message.deliverStatus = DeliverStatus.QUEUED;\n            message.sendFile = undefined;\n          }\n\n          return message;\n        });\n      }\n\n      return chat;\n    }));\n  };\n\n  const onChatsChange = () => {// chats.forEach((chat) => {\n    // });\n  };\n\n  const onActiveChatChange = () => {\n    checkSendMessage(activeChat);\n    checkAttachedFiles(activeChat);\n    checkNewContact(activeChat); // checkTyping(activeChat)\n  }; // const checkTyping = (chat: IChat) => {\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\n  //     if (oldTimeoutData)\n  //       clearTimeout(oldTimeoutData.timeout)\n  //     else\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\n  //     const timeoutData = {\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\n  //       msgStr: `${chat.inputMessage}`\n  //     }\n  //     typingTimeout.set(chat.jid, timeoutData)\n  //   }\n  // }\n\n\n  const checkNewContact = cht => {\n    if (!cht.added) {\n      var _squadService2;\n\n      (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.contacts.add(cht, success => {\n        if (success) {\n          var _squadService3;\n\n          setChats(chats.map(chat => {\n            if (chat.jid === cht.jid) {\n              chat.added = true;\n            }\n\n            if (activeChat.jid === chat.jid) setActiveChat(chat);\n            return chat;\n          }));\n          (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.contacts.list(ctcs => {\n            setContacts(ctcs);\n          });\n        }\n      });\n    }\n  };\n\n  const onCheckAddNewContact = () => {\n    /*     if (!ctt.added) {\r\n          squadService?.contacts.addContacts(ctt, (success: boolean) => {\r\n            if (success) {\r\n              setContacts([...contacts, ctt]);\r\n            }\r\n          });\r\n        }; */\n  };\n\n  const checkAttachedFiles = cht => {\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\n      var _squadService4;\n\n      (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : _squadService4.attachments.list(cht, attachments => {\n        if (attachments.length > 0) setActiveChat({ ...cht,\n          attachedFileList: attachments\n        });else setActiveChat({ ...cht,\n          attachedFileList: null\n        });\n      });\n    }\n  };\n  /* getMessageUserProfilePicture = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.profilePicture;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])\r\n        ?.profilePicture;\r\n    }\r\n  }; */\n\n\n  const checkSearchMessages = () => {\n    if (activeChat.messageLoaded) {\n      var _squadService5;\n\n      (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.messages.list(activeChat, messages => {\n        if (messages.length) {\n          setChats(chats.map(cht => {\n            if (cht.id === activeChat.id) {\n              messages.forEach(msg => {\n                if (!activeChat.messages.find(m => m.id === msg.id)) cht.messages.unshift(msg);\n              });\n              cht.messageLoaded = false;\n              setActiveChat(cht);\n            }\n\n            return cht;\n          }));\n        } else {\n          const chat = { ...activeChat,\n            messageLoaded: false\n          };\n          setActiveChat(chat);\n        }\n      });\n    }\n  };\n\n  const checkSendMessage = chat => {\n    chat.messages.forEach(msg => {\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\n        if (msg.sendFile && !replyMsg) {\n          var _squadService6, _squadService6$chat;\n\n          const files = [msg.sendFile];\n          clearSendFile(chat.id, msg.id);\n          (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : (_squadService6$chat = _squadService6.chat) === null || _squadService6$chat === void 0 ? void 0 : _squadService6$chat.sendFiles(chat, files, data => {\n            updateMessageFiles(data, chat, msg);\n          });\n        } else {\n          if (!msg.isForwardMessage && !replyMsg) {\n            sendMessage(chat, msg.message, msgId => updateMessage(msgId, chat, msg));\n          } else if (replyMsg) {\n            var _squadService7, _squadService7$chat;\n\n            const replyMsgCopy = { ...replyMsg\n            };\n            setReplyMsg(undefined);\n            (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : (_squadService7$chat = _squadService7.chat) === null || _squadService7$chat === void 0 ? void 0 : _squadService7$chat.replyMsg(chat, msg, replyMsgCopy, msgId => {\n              updateMessage(msgId, chat, msg, replyMsgCopy);\n            });\n          }\n        }\n      }\n    });\n  };\n\n  const updateMessageFiles = (data, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        const booleans = getUrlBooleans(data.url);\n        message.id = data.msgId;\n        message.fileUrl = data.url;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n        message.message = getFileName(data.url);\n        message.isFileMessage = booleans.isFileMessage;\n        message.isImageMessage = booleans.isImageMessage;\n        message.isVideoMessage = booleans.isVideoMessage;\n        message.isAudioMessage = booleans.isAudioMessage;\n      }\n\n      return message;\n    });\n    setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      setChats(chats.map(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n        }\n\n        return cht;\n      }));\n    }\n  };\n\n  const updateMessage = (msgId, chat, msg, replyedMsg = undefined) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        message.id = msgId;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n\n        if (replyedMsg) {\n          message.isReplyMessage = true;\n          message.replyedMessage = replyedMsg.message || replyedMsg.fileUrl;\n          message.replyedMessageId = replyedMsg.id;\n          message.replyedMessageTo = replyedMsg.fromUser;\n        }\n\n        if (isUrl(message.message)) {\n          const booleans = getUrlBooleans(message.message);\n          message.isFileMessage = booleans.isFileMessage;\n          message.isImageMessage = booleans.isImageMessage;\n          message.isAudioMessage = booleans.isAudioMessage;\n          message.isVideoMessage = booleans.isVideoMessage;\n          message.fileUrl = message.message;\n        }\n      }\n\n      return message;\n    });\n    if (activeChat.jid === newChat.jid) setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      setChats(chats.map(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n        }\n\n        return cht;\n      }));\n    }\n  };\n\n  const forwardMessage = () => {\n    if (forwardMessageList && showModalForwardMessageTo) {\n      const ctcs = [...forwardMessageList];\n      const message = { ...showModalForwardMessageTo\n      };\n      setForwardMessageList(undefined);\n      setShowModalForwardMessageTo(undefined);\n      const chatsFinded = [];\n      const oldChats = [...chats.map(chat => {\n        return { ...chat\n        };\n      })];\n      ctcs === null || ctcs === void 0 ? void 0 : ctcs.forEach((ctc, i) => {\n        const cht = oldChats.find(cht => cht.jid === ctc.jid);\n\n        if (cht) {\n          var _squadService8, _squadService8$chat;\n\n          const msg = { ...message,\n            id: `${cht.messages.length + 1}`,\n            userName: user.name,\n            fromUser: user.id,\n            toUser: ctc.jid.split(\"@\")[0],\n            message: message.fileUrl || message.message,\n            deliverStatus: DeliverStatus.QUEUED,\n            isForwardMessage: true\n          };\n          (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : (_squadService8$chat = _squadService8.chat) === null || _squadService8$chat === void 0 ? void 0 : _squadService8$chat.forwardMessage(cht, msg, msgId => {\n            msg.id = msgId;\n            cht.messages.push(msg);\n            chatsFinded.push(cht);\n          });\n        }\n      });\n      const newChats = oldChats.map(chat => chatsFinded.find(cht => cht.id === chat.id) || chat);\n      const ctcsNotInChat = ctcs.filter(ctc => !newChats.find(cht => ctc.jid === cht.jid));\n      ctcsNotInChat.forEach((ctc, i) => {\n        var _squadService9, _squadService9$chat;\n\n        const chat = {\n          id: ctc.jid.split(\"@\")[0],\n          jid: ctc.jid,\n          name: ctc.name,\n          profilePicture: ctc.profilePicture,\n          status: ctc.status || undefined,\n          unRead: 0,\n          chatType: ctc.jid.includes(\"@conference.\") ? ChatType.GROUP : ChatType.USER,\n          inputMessage: \"\",\n          messageLoaded: false,\n          isTyping: false,\n          messages: [],\n          email: ctc.email || undefined,\n          favorite: ctc.favorite,\n          added: ctc.added\n        };\n        const newMessage = { ...message,\n          id: `${1}`,\n          userName: user.name,\n          fromUser: user.id,\n          toUser: ctc.jid.split(\"@\")[0],\n          deliverStatus: DeliverStatus.QUEUED,\n          isForwardMessage: true\n        };\n        (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : (_squadService9$chat = _squadService9.chat) === null || _squadService9$chat === void 0 ? void 0 : _squadService9$chat.forwardMessage(chat, newMessage, msgId => {\n          newMessage.id = msgId;\n          chat.messages.push(newMessage);\n          newChats.unshift(chat);\n        });\n      });\n      setChats(newChats);\n    }\n  };\n\n  const onChangeStatus = () => {\n    var _squadService10, _squadService10$chat;\n\n    if (((_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : (_squadService10$chat = _squadService10.chat) === null || _squadService10$chat === void 0 ? void 0 : _squadService10$chat.chat.client.status) === \"online\") {\n      var _squadService11, _squadService11$chat;\n\n      (_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : (_squadService11$chat = _squadService11.chat) === null || _squadService11$chat === void 0 ? void 0 : _squadService11$chat.changeStatus(user.status);\n    }\n  };\n\n  const onSearchContacts = () => {\n    if (contactsSearch.length > 2) {\n      var _squadService12;\n\n      (_squadService12 = squadService) === null || _squadService12 === void 0 ? void 0 : _squadService12.contacts.search(contactsSearch, searchList => {\n        setContactsSearched(searchList);\n      });\n    } else {\n      setContactsSearched(undefined);\n    }\n  };\n\n  const onSearchContactsOutsideUserContacts = () => {\n    var _squadService13;\n\n    (_squadService13 = squadService) === null || _squadService13 === void 0 ? void 0 : _squadService13.contacts.getContactsOutsideUserLists(contacts => {\n      if (contacts) {\n        setContactsOutsideUserContacts(contacts);\n      }\n    });\n  };\n\n  useEffect(onChatsChange, [chats]);\n  useEffect(onNewFavorite, [newFavorite]);\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\n  useEffect(onActiveChatChange, [activeChat]);\n  useEffect(onUserDataChange, [changedUserData]);\n  useEffect(onUserPasswordChange, [changedUserPassword]);\n  useEffect(onChangeStatus, [user.status]);\n  useEffect(forwardMessage, [forwardMessageList]);\n  useEffect(onSearchContacts, [contactsSearch]);\n  useEffect(onSearchContactsOutsideUserContacts, [showModalAddContact]);\n  useEffect(onCheckAddNewContact, [contactChecks]);\n\n  function onUserPasswordChange() {\n    if (changedUserPassword) {\n      var _squadService14;\n\n      (_squadService14 = squadService) === null || _squadService14 === void 0 ? void 0 : _squadService14.user.changePassword(changedUserPassword, password => {\n        if (password) {\n          setChangedUserPassword({\n            oldPassword: \"\",\n            newPassword: \"\"\n          });\n        }\n      });\n    }\n  }\n\n  function onUserDataChange() {\n    if (changedUserData) {\n      var _squadService15;\n\n      (_squadService15 = squadService) === null || _squadService15 === void 0 ? void 0 : _squadService15.user.changeUserData(changedUserData, chgd => {\n        if (chgd) {\n          setUser({ ...user,\n            email: changedUserData.email,\n            name: changedUserData.name\n          });\n        }\n      });\n    }\n  }\n\n  function onNewFavorite() {\n    if (newFavorite) {\n      var _squadService16;\n\n      const newFavoriteLoad = { ...newFavorite\n      };\n      (_squadService16 = squadService) === null || _squadService16 === void 0 ? void 0 : _squadService16.contacts.setFavorite(newFavorite, favorite => {\n        if (favorite) {\n          setChats(chats.map(cht => {\n            if (cht.jid === newFavoriteLoad.jid) {\n              cht.favorite = !newFavoriteLoad.favorite;\n            }\n\n            return cht;\n          }));\n          setGroups(groups.map(grp => {\n            if (grp.jid === newFavoriteLoad.jid) {\n              return { ...grp,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return grp;\n          }));\n          setContacts(contacts.map(ctt => {\n            if (ctt.jid === newFavoriteLoad.jid) {\n              return { ...ctt,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return ctt;\n          }));\n        }\n      });\n      setNewFavorite(undefined);\n    }\n  }\n\n  function chatCommunicatorSubscribe(event, data) {\n    var _squadService17;\n\n    switch (event) {\n      case Events.ONLINE:\n        (_squadService17 = squadService) === null || _squadService17 === void 0 ? void 0 : _squadService17.chats.list(receivedChats => {\n          var _squadService18, _squadService20;\n\n          const chats = [];\n          receivedChats.forEach(cht => {\n            if (!chats.find(chat => chat.id === cht.id)) {\n              chats.push(cht);\n            }\n          });\n          setChats(chats); //populating groups\n\n          (_squadService18 = squadService) === null || _squadService18 === void 0 ? void 0 : _squadService18.groups.list(groups => {\n            var _squadService19, _squadService19$chat;\n\n            setGroups(groups); //Joining Groups Rooms in XMPP\n\n            (_squadService19 = squadService) === null || _squadService19 === void 0 ? void 0 : (_squadService19$chat = _squadService19.chat) === null || _squadService19$chat === void 0 ? void 0 : _squadService19$chat.joinGroups(groups.map(group => group.jid));\n          }); //populating contacts\n\n          (_squadService20 = squadService) === null || _squadService20 === void 0 ? void 0 : _squadService20.contacts.list(contacts => setContacts(contacts)); //populating chat's with messages\n          // receivedChats.forEach((chat) => {\n          //   squadService?.messages.list(chat, (messages) => {\n          //     const chatWithMessages = { ...chat };\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\n          //       messages\n          //     );\n          //     setChats([\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\n          //       chatWithMessages,\n          //     ]);\n          //   });\n          // });\n        });\n        break;\n\n      case Events.MESSAGE:\n        if (data.fromUser === user.jid) break;\n        let find = false;\n        let newChats = chats.map(chat => {\n          if (data.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || data.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\n            find = true;\n            if (!chat.messages.filter(msg => msg.id === data.id)[0]) chat.messages.push(data);\n\n            if (chat.id === activeChat.id) {\n              let chatTemporary = { ...chat\n              };\n              setActiveChat(chatTemporary);\n            } else {\n              chat.unRead++;\n            }\n          }\n\n          return chat;\n        });\n\n        if (!find) {\n          var _squadService21;\n\n          let newChat = {};\n          (_squadService21 = squadService) === null || _squadService21 === void 0 ? void 0 : _squadService21.contacts.list(listContacts => {\n            listContacts.forEach(c => {\n              if (c.jid === data.fromUser) {\n                newChat = {\n                  id: c.id,\n                  jid: c.jid,\n                  name: c.name,\n                  profilePicture: c.profilePicture,\n                  status: c.status,\n                  unRead: 1,\n                  chatType: ChatType.USER,\n                  inputMessage: \"\",\n                  isTyping: false,\n                  messages: [],\n                  favorite: c.favorite,\n                  added: c.added\n                };\n                newChat.messages.push(data);\n                newChats.unshift(newChat);\n                setChats(newChats);\n              }\n            });\n          });\n        } else {\n          setChats(newChats);\n        }\n\n        break;\n\n      case Events.RECEIVED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.deliverStatus = DeliverStatus.DELIVERED;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.DISPLAYED:\n        setChats(chats.map(chat => {\n          chat.messages = chat.messages.map(message => {\n            if (message.id === data.id) {\n              message.readStatus = ReadStatus.READ;\n            }\n\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.COMPOSING:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = true;\n            if (activeChat.jid === data) setActiveChat(chat);\n            deleteTypingTimeout(chat.jid);\n            setTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.ACTIVE:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = false;\n\n            if (activeChat.jid === data) {\n              let chatUpdate = { ...chat\n              };\n              setActiveChat(chatUpdate);\n            }\n\n            deleteTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.PRESENCE:\n        setChats(chats.map(cht => {\n          if (cht.jid === data.from.split(\"/\")[0] && !cht.jid.includes(\"@conference.\")) {\n            cht.status = data.status;\n          }\n\n          return cht;\n        }));\n        setContacts(contacts.map(ctc => {\n          if (ctc.jid === data.from.split(\"/\")[0] && !ctc.jid.includes(\"@conference.\")) {\n            ctc.status = data.status;\n          }\n\n          return ctc;\n        }));\n        break;\n    }\n  }\n\n  const deleteTypingTimeout = jid => {\n    var _typingTimeout$get;\n\n    clearTimeout(((_typingTimeout$get = typingTimeout.get(jid)) === null || _typingTimeout$get === void 0 ? void 0 : _typingTimeout$get.timeout) || setTimeout(() => {}, 1));\n    typingTimeout.delete(jid);\n  };\n\n  const setTypingTimeout = jid => {\n    const timeoutData = {\n      msgStr: \"\",\n      timeout: setTimeout(() => {\n        setChats(chats.map(cht => {\n          if (cht.jid === jid) {\n            cht.isTyping = false;\n            if (activeChat.jid === jid) setActiveChat(cht);\n          }\n\n          return cht;\n        }));\n      }, 20000)\n    };\n    typingTimeout.set(jid, timeoutData);\n  };\n\n  (_squadService22 = squadService) === null || _squadService22 === void 0 ? void 0 : _squadService22.updateSubscribeFunction(chatCommunicatorSubscribe); // Comentado para evitar warnings no console enquanto não é usado\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\n  //     squadService?.groups.list((groups) => {\n  //       setGroups(groups);\n  //       callback(true);\n  //     });\n  //   });\n  // }\n\n  function sendMessage(chat, message, callback) {\n    var _squadService23, _squadService23$chat;\n\n    (_squadService23 = squadService) === null || _squadService23 === void 0 ? void 0 : (_squadService23$chat = _squadService23.chat) === null || _squadService23$chat === void 0 ? void 0 : _squadService23$chat.chat.sendMessage(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message, callback);\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","DeliverStatus","XMPPChatType","getFileName","getUrlBooleans","isUrl","ReadStatus","useGroup","useContact","useModal","squadService","typingTimeout","Map","children","chats","setChats","activeChat","replyMsg","setReplyMsg","setActiveChat","forwardMessageList","setForwardMessageList","contactsSearch","setContactsSearched","newFavorite","setNewFavorite","contacts","setContacts","setContactsOutsideUserContacts","contactChecks","setContactChecks","user","setUser","changedUserData","changedUserPassword","setChangedUserPassword","showModalForwardMessageTo","setShowModalForwardMessageTo","showModalAddContact","setGroups","groups","init","localStorage","setItem","JSON","stringify","access_token","user_id","email","user_name","expires_in","baseUrl","getInstance","chatCommunicatorSubscribe","get","clearSendFile","chatId","messageId","map","chat","id","messages","message","deliverStatus","QUEUED","sendFile","undefined","onChatsChange","onActiveChatChange","checkSendMessage","checkAttachedFiles","checkNewContact","cht","added","add","success","jid","list","ctcs","onCheckAddNewContact","attachedFileList","attachments","length","checkSearchMessages","messageLoaded","forEach","msg","find","m","unshift","SENDING","files","sendFiles","data","updateMessageFiles","isForwardMessage","sendMessage","msgId","updateMessage","replyMsgCopy","newChat","booleans","url","fileUrl","time","Date","toISOString","isFileMessage","isImageMessage","isVideoMessage","isAudioMessage","filter","newChats","replyedMsg","isReplyMessage","replyedMessage","replyedMessageId","replyedMessageTo","fromUser","forwardMessage","chatsFinded","oldChats","ctc","i","userName","name","toUser","split","push","ctcsNotInChat","profilePicture","status","unRead","chatType","includes","GROUP","USER","inputMessage","isTyping","favorite","newMessage","onChangeStatus","client","changeStatus","onSearchContacts","search","searchList","onSearchContactsOutsideUserContacts","getContactsOutsideUserLists","onNewFavorite","onUserDataChange","onUserPasswordChange","changePassword","password","oldPassword","newPassword","changeUserData","chgd","newFavoriteLoad","setFavorite","grp","ctt","event","ONLINE","receivedChats","joinGroups","group","MESSAGE","chatTemporary","listContacts","c","RECEIVED","DELIVERED","DISPLAYED","readStatus","READ","COMPOSING","deleteTypingTimeout","setTypingTimeout","ACTIVE","chatUpdate","PRESENCE","from","clearTimeout","timeout","setTimeout","delete","timeoutData","msgStr","set","updateSubscribeFunction","callback","GROUPCHAT","CHAT"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\n\r\nimport { Events, SendImageCallbackReturn } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\r\nimport { SendMessageCallback } from \"./types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport { useModal } from \"../contexts/ModalContext\";\r\nimport IContact from \"../alias/IContact\";\r\nimport IGroup from \"../alias/IGroup\";\r\n//import { callbackify } from \"util\";\r\n\r\n// import IContact from \"../alias/IContact\";\r\n// Comentado para Evitar Warnings no console\r\n// interface CreateGroupCallback {\r\n//   (groupCreated: boolean): void;\r\n// }\r\ninterface TypingTimeoutData {\r\n  timeout: NodeJS.Timeout;\r\n  msgStr: string;\r\n}\r\nlet squadService: SquadService | undefined;\r\nlet typingTimeout: Map<string, TypingTimeoutData> = new Map<\r\n  string,\r\n  TypingTimeoutData\r\n>();\r\n\r\nconst SquadCommunicator: React.FC = ({ children }) => {\r\n  const {\r\n    chats,\r\n    setChats,\r\n    activeChat,\r\n    replyMsg,\r\n    setReplyMsg,\r\n    setActiveChat,\r\n    forwardMessageList,\r\n    setForwardMessageList,\r\n  } = useChat();\r\n  const {\r\n    contactsSearch,\r\n    setContactsSearched,\r\n    newFavorite,\r\n    setNewFavorite,\r\n    contacts,\r\n    setContacts,\r\n    setContactsOutsideUserContacts,\r\n    contactChecks,\r\n    setContactChecks\r\n  } = useContact();\r\n  const {\r\n    user,\r\n    setUser,\r\n    changedUserData,\r\n    changedUserPassword,\r\n    setChangedUserPassword,\r\n  } = useAuth();\r\n  const {\r\n    showModalForwardMessageTo,\r\n    setShowModalForwardMessageTo,\r\n    showModalAddContact\r\n  } = useModal();\r\n  const { setGroups, groups } = useGroup();\r\n  \r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"b4c1fa651399a3eb63aee51777d3d508\",\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        email: \"romero2@digivox.com.br\",\r\n        user_name: \"ZZ Romero 2\",\r\n        expires_in: 2592000,\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n      })\r\n    );\r\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\r\n    squadService?.user.get((user: IUser) => {\r\n      setUser(user);\r\n    });\r\n  };\r\n\r\n  const clearSendFile = (chatId: string, messageId: string) => {\r\n    setChats(\r\n      chats.map((chat) => {\r\n        if (chat.id === chatId) {\r\n          chat.messages = chat.messages.map((message) => {\r\n            if (message.id === messageId) {\r\n              message.deliverStatus = DeliverStatus.QUEUED;\r\n              message.sendFile = undefined;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return chat;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onChatsChange = () => {\r\n    // chats.forEach((chat) => {\r\n    // });\r\n  };\r\n  const onActiveChatChange = () => {\r\n    checkSendMessage(activeChat);\r\n    checkAttachedFiles(activeChat);\r\n    checkNewContact(activeChat);\r\n    // checkTyping(activeChat)\r\n  };\r\n  // const checkTyping = (chat: IChat) => {\r\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\r\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\r\n  //     if (oldTimeoutData)\r\n  //       clearTimeout(oldTimeoutData.timeout)\r\n  //     else\r\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\r\n  //     const timeoutData = {\r\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\r\n  //       msgStr: `${chat.inputMessage}`\r\n  //     }\r\n  //     typingTimeout.set(chat.jid, timeoutData)\r\n  //   }\r\n  // }\r\n  const checkNewContact = (cht: IChat) => {\r\n    if (!cht.added) {\r\n      squadService?.contacts.add(cht, (success: boolean) => {\r\n        if (success) {\r\n          setChats(\r\n            chats.map((chat) => {\r\n              if (chat.jid === cht.jid) {\r\n                chat.added = true;\r\n              }\r\n              if (activeChat.jid === chat.jid) setActiveChat(chat);\r\n              return chat;\r\n            })\r\n          );\r\n          squadService?.contacts.list((ctcs) => {\r\n            setContacts(ctcs);\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const onCheckAddNewContact = () => {\r\n/*     if (!ctt.added) {\r\n      squadService?.contacts.addContacts(ctt, (success: boolean) => {\r\n        if (success) {\r\n          setContacts([...contacts, ctt]);\r\n        }\r\n      });\r\n    }; */\r\n  }\r\n\r\n  const checkAttachedFiles = (cht: IChat) => {\r\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\r\n      squadService?.attachments.list(cht, (attachments) => {\r\n        if (attachments.length > 0)\r\n          setActiveChat({ ...cht, attachedFileList: attachments });\r\n        else setActiveChat({ ...cht, attachedFileList: null });\r\n      });\r\n    }\r\n  };\r\n\r\n  /* getMessageUserProfilePicture = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.profilePicture;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])\r\n        ?.profilePicture;\r\n    }\r\n  }; */\r\n\r\n  const checkSearchMessages = () => {\r\n    if (activeChat.messageLoaded) {\r\n      squadService?.messages.list(activeChat, (messages) => {\r\n        if (messages.length) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.id === activeChat.id) {\r\n                messages.forEach((msg) => {\r\n                  if (!activeChat.messages.find((m) => m.id === msg.id))\r\n                    cht.messages.unshift(msg);\r\n                });\r\n                cht.messageLoaded = false;\r\n                setActiveChat(cht);\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n        } else {\r\n          const chat = { ...activeChat, messageLoaded: false };\r\n          setActiveChat(chat);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkSendMessage = (chat: IChat) => {\r\n    chat.messages.forEach((msg) => {\r\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\r\n        if (msg.sendFile && !replyMsg) {\r\n          const files = [msg.sendFile];\r\n          clearSendFile(chat.id, msg.id);\r\n          squadService?.chat?.sendFiles(\r\n            chat,\r\n            files,\r\n            (data: SendImageCallbackReturn) => {\r\n              updateMessageFiles(data, chat, msg);\r\n            }\r\n          );\r\n        } else {\r\n          if (!msg.isForwardMessage && !replyMsg) {\r\n            sendMessage(chat, msg.message, (msgId) =>\r\n              updateMessage(msgId, chat, msg)\r\n            );\r\n          }else if(replyMsg){\r\n            const replyMsgCopy = {...replyMsg}\r\n            setReplyMsg(undefined);\r\n            squadService?.chat?.replyMsg(chat, msg, replyMsgCopy, (msgId) => {\r\n              updateMessage(msgId, chat, msg, replyMsgCopy)\r\n            })            \r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const updateMessageFiles = (\r\n    data: SendImageCallbackReturn,\r\n    chat: IChat,\r\n    msg: IMessage\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        const booleans = getUrlBooleans(data.url);\r\n        message.id = data.msgId;\r\n        message.fileUrl = data.url;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        message.message = getFileName(data.url);\r\n        message.isFileMessage = booleans.isFileMessage;\r\n        message.isImageMessage = booleans.isImageMessage;\r\n        message.isVideoMessage = booleans.isVideoMessage;\r\n        message.isAudioMessage = booleans.isAudioMessage;\r\n      }\r\n      return message;\r\n    });\r\n    setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      setChats(\r\n        chats.map((cht) => {\r\n          if (cht.id === chat.id) {\r\n            cht.messages = newChat.messages;\r\n          }\r\n          return cht;\r\n        })\r\n      );\r\n    }\r\n  };\r\n  const updateMessage = (msgId: string, chat: IChat, msg: IMessage, replyedMsg:IMessage | undefined = undefined) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        message.id = msgId;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        if(replyedMsg){\r\n          message.isReplyMessage = true;\r\n          message.replyedMessage = replyedMsg.message || replyedMsg.fileUrl\r\n          message.replyedMessageId = replyedMsg.id\r\n          message.replyedMessageTo = replyedMsg.fromUser\r\n        }\r\n        if (isUrl(message.message)) {\r\n          const booleans = getUrlBooleans(message.message);\r\n          message.isFileMessage = booleans.isFileMessage;\r\n          message.isImageMessage = booleans.isImageMessage;\r\n          message.isAudioMessage = booleans.isAudioMessage;\r\n          message.isVideoMessage = booleans.isVideoMessage;\r\n          message.fileUrl = message.message;\r\n        }\r\n      }\r\n      return message;\r\n    });\r\n    if (activeChat.jid === newChat.jid) setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      setChats(\r\n        chats.map((cht) => {\r\n          if (cht.id === chat.id) {\r\n            cht.messages = newChat.messages;\r\n          }\r\n          return cht;\r\n        })\r\n      );\r\n    }\r\n  };\r\n  const forwardMessage = () => {\r\n    if (forwardMessageList && showModalForwardMessageTo) {\r\n      const ctcs = [...forwardMessageList];\r\n      const message = { ...showModalForwardMessageTo };\r\n      setForwardMessageList(undefined);\r\n      setShowModalForwardMessageTo(undefined);\r\n      const chatsFinded: IChat[] = [];\r\n      const oldChats = [\r\n        ...chats.map((chat) => {\r\n          return { ...chat };\r\n        }),\r\n      ];\r\n      ctcs?.forEach((ctc, i) => {\r\n        const cht = oldChats.find((cht) => cht.jid === ctc.jid);\r\n        if (cht) {\r\n          const msg = {\r\n            ...message,\r\n            id: `${cht.messages.length + 1}`,\r\n            userName: user.name,\r\n            fromUser: user.id,\r\n            toUser: ctc.jid.split(\"@\")[0],\r\n            message: message.fileUrl || message.message,\r\n            deliverStatus: DeliverStatus.QUEUED,\r\n            isForwardMessage: true,\r\n          };\r\n          squadService?.chat?.forwardMessage(cht, msg, (msgId) => {\r\n            msg.id = msgId;\r\n            cht.messages.push(msg);\r\n            chatsFinded.push(cht);\r\n          });\r\n        }\r\n      });\r\n      const newChats = oldChats.map(\r\n        (chat) => chatsFinded.find((cht) => cht.id === chat.id) || chat\r\n      );\r\n      const ctcsNotInChat: (IContact | IGroup)[] = ctcs.filter(\r\n        (ctc) => !newChats.find((cht) => ctc.jid === cht.jid)\r\n      );\r\n      ctcsNotInChat.forEach((ctc, i) => {\r\n        const chat = {\r\n          id: ctc.jid.split(\"@\")[0],\r\n          jid: ctc.jid,\r\n          name: ctc.name,\r\n          profilePicture: ctc.profilePicture,\r\n          status: (ctc as IContact).status || undefined,\r\n          unRead: 0,\r\n          chatType: ctc.jid.includes(\"@conference.\")\r\n            ? ChatType.GROUP\r\n            : ChatType.USER,\r\n          inputMessage: \"\",\r\n          messageLoaded: false,\r\n          isTyping: false,\r\n          messages: [] as IMessage[],\r\n          email: (ctc as IContact).email || undefined,\r\n          favorite: ctc.favorite,\r\n          added: ctc.added,\r\n        };\r\n        const newMessage: IMessage = {\r\n          ...message,\r\n          id: `${1}`,\r\n          userName: user.name,\r\n          fromUser: user.id,\r\n          toUser: ctc.jid.split(\"@\")[0],\r\n          deliverStatus: DeliverStatus.QUEUED,\r\n          isForwardMessage: true,\r\n        };\r\n        squadService?.chat?.forwardMessage(chat, newMessage, (msgId) => {\r\n          newMessage.id = msgId;\r\n          chat.messages.push(newMessage);\r\n          newChats.unshift(chat);\r\n        });\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const onChangeStatus = () => {\r\n    if (squadService?.chat?.chat.client.status === \"online\") {\r\n      squadService?.chat?.changeStatus(user.status);\r\n    }\r\n  };\r\n  const onSearchContacts = () => {\r\n    if (contactsSearch.length > 2) {\r\n      squadService?.contacts.search(contactsSearch, (searchList) => {\r\n        setContactsSearched(searchList);\r\n      });\r\n    } else {\r\n      setContactsSearched(undefined);\r\n    }\r\n  };\r\n\r\n  const onSearchContactsOutsideUserContacts = () => {\r\n    squadService?.contacts.getContactsOutsideUserLists(contacts => {\r\n      if(contacts){\r\n        setContactsOutsideUserContacts(contacts);\r\n      }\r\n    });\r\n  }\r\n\r\n  useEffect(onChatsChange, [chats]);\r\n  useEffect(onNewFavorite, [newFavorite]);\r\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\r\n  useEffect(onActiveChatChange, [activeChat]);\r\n  useEffect(onUserDataChange, [changedUserData]);\r\n  useEffect(onUserPasswordChange, [changedUserPassword]);\r\n  useEffect(onChangeStatus, [user.status]);\r\n  useEffect(forwardMessage, [forwardMessageList]);\r\n  useEffect(onSearchContacts, [contactsSearch]);\r\n  useEffect(onSearchContactsOutsideUserContacts, [showModalAddContact]);\r\n  useEffect(onCheckAddNewContact, [contactChecks]);\r\n\r\n  function onUserPasswordChange() {\r\n    if (changedUserPassword) {\r\n      squadService?.user.changePassword(changedUserPassword, (password) => {\r\n        if (password) {\r\n          setChangedUserPassword({ oldPassword: \"\", newPassword: \"\" });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onUserDataChange() {\r\n    if (changedUserData) {\r\n      squadService?.user.changeUserData(changedUserData, (chgd) => {\r\n        if (chgd) {\r\n          setUser({\r\n            ...user,\r\n            email: changedUserData.email,\r\n            name: changedUserData.name,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onNewFavorite() {\r\n    if (newFavorite) {\r\n      const newFavoriteLoad = { ...newFavorite };\r\n      squadService?.contacts.setFavorite(newFavorite, (favorite) => {\r\n        if (favorite) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.jid === newFavoriteLoad.jid) {\r\n                cht.favorite = !newFavoriteLoad.favorite;\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n          setGroups(\r\n            groups.map((grp) => {\r\n              if (grp.jid === newFavoriteLoad.jid) {\r\n                return {\r\n                  ...grp,\r\n                  favorite: !newFavoriteLoad.favorite,\r\n                };\r\n              }\r\n              return grp;\r\n            })\r\n          );\r\n          setContacts(\r\n            contacts.map((ctt) => {\r\n              if (ctt.jid === newFavoriteLoad.jid) {\r\n                return {\r\n                  ...ctt,\r\n                  favorite: !newFavoriteLoad.favorite,\r\n                };\r\n              }\r\n              return ctt;\r\n            })\r\n          );\r\n        }\r\n      });\r\n      setNewFavorite(undefined);\r\n    }\r\n  }\r\n\r\n  function chatCommunicatorSubscribe(event: string, data: any) {\r\n    switch (event) {\r\n      case Events.ONLINE:\r\n        squadService?.chats.list((receivedChats) => {\r\n          const chats: IChat[] = [];\r\n          receivedChats.forEach((cht) => {\r\n            if (!chats.find((chat) => chat.id === cht.id)) {\r\n              chats.push(cht);\r\n            }\r\n          });\r\n          setChats(chats);\r\n          //populating groups\r\n          squadService?.groups.list((groups) => {\r\n            setGroups(groups);\r\n            //Joining Groups Rooms in XMPP\r\n            squadService?.chat?.joinGroups(groups.map((group) => group.jid));\r\n          });\r\n          //populating contacts\r\n          squadService?.contacts.list((contacts) => setContacts(contacts));\r\n          \r\n          //populating chat's with messages\r\n\r\n          // receivedChats.forEach((chat) => {\r\n          //   squadService?.messages.list(chat, (messages) => {\r\n          //     const chatWithMessages = { ...chat };\r\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\r\n          //       messages\r\n          //     );\r\n          //     setChats([\r\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n          //       chatWithMessages,\r\n          //     ]);\r\n          //   });\r\n          // });\r\n        });\r\n        break;\r\n      case Events.MESSAGE:\r\n        if (data.fromUser === user.jid) break;\r\n        let find = false;\r\n\r\n        let newChats = chats.map((chat) => {\r\n          if (\r\n            data.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] ||\r\n            data.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]\r\n          ) {\r\n            find = true;\r\n            if (!chat.messages.filter((msg) => msg.id === data.id)[0])\r\n              chat.messages.push(data);\r\n            if (chat.id === activeChat.id) {\r\n              let chatTemporary = { ...chat };\r\n              setActiveChat(chatTemporary);\r\n            } else {\r\n              chat.unRead++;\r\n            }\r\n          }\r\n          return chat;\r\n        });\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.contacts.list((listContacts) => {\r\n            listContacts.forEach((c) => {\r\n              if (c.jid === data.fromUser) {\r\n                newChat = {\r\n                  id: c.id,\r\n                  jid: c.jid,\r\n                  name: c.name,\r\n                  profilePicture: c.profilePicture,\r\n                  status: c.status,\r\n                  unRead: 1,\r\n                  chatType: ChatType.USER,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  messages: [],\r\n                  favorite: c.favorite,\r\n                  added: c.added,\r\n                };\r\n                newChat.messages.push(data);\r\n                newChats.unshift(newChat);\r\n                setChats(newChats);\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          setChats(newChats);\r\n        }\r\n\r\n        break;\r\n      case Events.RECEIVED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.messages.find((msg) => msg.id === data.id))\r\n              chat.messages = chat.messages.map((message) => {\r\n                message.deliverStatus = DeliverStatus.DELIVERED;\r\n                return message;\r\n              });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.DISPLAYED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            chat.messages = chat.messages.map((message) => {\r\n              if (message.id === data.id) {\r\n                message.readStatus = ReadStatus.READ;\r\n              }\r\n              return message;\r\n            });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.COMPOSING:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = true;\r\n              if (activeChat.jid === data) setActiveChat(chat);\r\n              deleteTypingTimeout(chat.jid);\r\n              setTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.ACTIVE:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = false;\r\n              if (activeChat.jid === data) {\r\n                let chatUpdate = { ...chat };\r\n                setActiveChat(chatUpdate);\r\n              }\r\n              deleteTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.PRESENCE:\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (\r\n              cht.jid === data.from.split(\"/\")[0] &&\r\n              !cht.jid.includes(\"@conference.\")\r\n            ) {\r\n              cht.status = data.status;\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n        setContacts(\r\n          contacts.map((ctc) => {\r\n            if (\r\n              ctc.jid === data.from.split(\"/\")[0] &&\r\n              !ctc.jid.includes(\"@conference.\")\r\n            ) {\r\n              ctc.status = data.status;\r\n            }\r\n            return ctc;\r\n          })\r\n        );\r\n        break;\r\n    }\r\n  }\r\n  const deleteTypingTimeout = (jid: string) => {\r\n    clearTimeout(typingTimeout.get(jid)?.timeout || setTimeout(() => {}, 1));\r\n    typingTimeout.delete(jid);\r\n  };\r\n  const setTypingTimeout = (jid: string) => {\r\n    const timeoutData: TypingTimeoutData = {\r\n      msgStr: \"\",\r\n      timeout: setTimeout(() => {\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.jid === jid) {\r\n              cht.isTyping = false;\r\n              if (activeChat.jid === jid) setActiveChat(cht);\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n      }, 20000),\r\n    };\r\n    typingTimeout.set(jid, timeoutData);\r\n  };\r\n\r\n  squadService?.updateSubscribeFunction(chatCommunicatorSubscribe);\r\n  // Comentado para evitar warnings no console enquanto não é usado\r\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\r\n  //     squadService?.groups.list((groups) => {\r\n  //       setGroups(groups);\r\n  //       callback(true);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  function sendMessage(\r\n    chat: IChat,\r\n    message: string,\r\n    callback: SendMessageCallback\r\n  ) {\r\n    squadService?.chat?.chat.sendMessage(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message,\r\n      callback\r\n    );\r\n  }\r\n\r\n  useEffect(init, []);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}