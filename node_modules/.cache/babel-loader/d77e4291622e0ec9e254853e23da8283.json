{"ast":null,"code":"var sortContactGroup=function sortContactGroup(contacts){var list=[];// cria os grupos das letras\ncontacts.forEach(function(contact){var letter=contact.name.substring(0,1).toUpperCase();var foundLetter=false;list.forEach(function(li){if(li.group===letter&&!foundLetter){foundLetter=true;}});if(!foundLetter){list.push({group:letter,children:[]});}});// adiciona os contatos nas suas respectivas letras\ncontacts.forEach(function(contact){var letter=contact.name.substring(0,1).toUpperCase();list=list.map(function(li){if(li.group===letter){li.children.push(contact);}return li;});});return list.sort(function(a,b){var nameA=a.group.toUpperCase();// ignore upper and lowercase\nvar nameB=b.group.toUpperCase();// ignore upper and lowercase\nif(nameA<nameB){return-1;}if(nameA>nameB){return 1;}return 0;});};export default sortContactGroup;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/helpers/SortContactGroup.ts"],"names":["sortContactGroup","contacts","list","forEach","contact","letter","name","substring","toUpperCase","foundLetter","li","group","push","children","map","sort","a","b","nameA","nameB"],"mappings":"AAGA,GAAMA,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,QAAD,CAA0B,CACjD,GAAIC,CAAAA,IAAoB,CAAG,EAA3B,CAEA;AACAD,QAAQ,CAACE,OAAT,CAAiB,SAACC,OAAD,CAAa,CAC5B,GAAIC,CAAAA,MAAM,CAAGD,OAAO,CAACE,IAAR,CAAaC,SAAb,CAAuB,CAAvB,CAA0B,CAA1B,EAA6BC,WAA7B,EAAb,CACA,GAAIC,CAAAA,WAAW,CAAG,KAAlB,CAEAP,IAAI,CAACC,OAAL,CAAa,SAACO,EAAD,CAAQ,CACnB,GAAIA,EAAE,CAACC,KAAH,GAAaN,MAAb,EAAuB,CAACI,WAA5B,CAAyC,CACvCA,WAAW,CAAG,IAAd,CACD,CACF,CAJD,EAMA,GAAI,CAACA,WAAL,CAAkB,CAChBP,IAAI,CAACU,IAAL,CAAU,CAAED,KAAK,CAAEN,MAAT,CAAiBQ,QAAQ,CAAE,EAA3B,CAAV,EACD,CACF,CAbD,EAeA;AACAZ,QAAQ,CAACE,OAAT,CAAiB,SAACC,OAAD,CAAa,CAC5B,GAAIC,CAAAA,MAAM,CAAGD,OAAO,CAACE,IAAR,CAAaC,SAAb,CAAuB,CAAvB,CAA0B,CAA1B,EAA6BC,WAA7B,EAAb,CAEAN,IAAI,CAAGA,IAAI,CAACY,GAAL,CAAS,SAACJ,EAAD,CAAQ,CACtB,GAAIA,EAAE,CAACC,KAAH,GAAaN,MAAjB,CAAyB,CACvBK,EAAE,CAACG,QAAH,CAAYD,IAAZ,CAAiBR,OAAjB,EACD,CACD,MAAOM,CAAAA,EAAP,CACD,CALM,CAAP,CAMD,CATD,EAWA,MAAOR,CAAAA,IAAI,CAACa,IAAL,CAAU,SAAUC,CAAV,CAA2BC,CAA3B,CAA4C,CAC3D,GAAIC,CAAAA,KAAK,CAAGF,CAAC,CAACL,KAAF,CAAQH,WAAR,EAAZ,CAAmC;AACnC,GAAIW,CAAAA,KAAK,CAAGF,CAAC,CAACN,KAAF,CAAQH,WAAR,EAAZ,CAAmC;AACnC,GAAIU,KAAK,CAAGC,KAAZ,CAAmB,CACjB,MAAO,CAAC,CAAR,CACD,CACD,GAAID,KAAK,CAAGC,KAAZ,CAAmB,CACjB,MAAO,EAAP,CACD,CACD,MAAO,EAAP,CACD,CAVM,CAAP,CAWD,CA1CD,CA4CA,cAAenB,CAAAA,gBAAf","sourcesContent":["import IContact from \"../alias/IContact\";\r\nimport IContactList from \"../alias/IContactList\";\r\n\r\nconst sortContactGroup = (contacts: IContact[]) => {\r\n  let list: IContactList[] = [];\r\n\r\n  // cria os grupos das letras\r\n  contacts.forEach((contact) => {\r\n    let letter = contact.name.substring(0, 1).toUpperCase();\r\n    let foundLetter = false;\r\n\r\n    list.forEach((li) => {\r\n      if (li.group === letter && !foundLetter) {\r\n        foundLetter = true;\r\n      }\r\n    });\r\n\r\n    if (!foundLetter) {\r\n      list.push({ group: letter, children: [] });\r\n    }\r\n  });\r\n\r\n  // adiciona os contatos nas suas respectivas letras\r\n  contacts.forEach((contact) => {\r\n    let letter = contact.name.substring(0, 1).toUpperCase();\r\n\r\n    list = list.map((li) => {\r\n      if (li.group === letter) {\r\n        li.children.push(contact);\r\n      }\r\n      return li;\r\n    });\r\n  });\r\n\r\n  return list.sort(function (a: IContactList, b: IContactList) {\r\n    var nameA = a.group.toUpperCase(); // ignore upper and lowercase\r\n    var nameB = b.group.toUpperCase(); // ignore upper and lowercase\r\n    if (nameA < nameB) {\r\n      return -1;\r\n    }\r\n    if (nameA > nameB) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n};\r\n\r\nexport default sortContactGroup;\r\n"]},"metadata":{},"sourceType":"module"}