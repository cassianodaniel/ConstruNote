{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nimport { useGroup } from \"../contexts/GroupContext\";\nimport { useContact } from \"../contexts/ContactContext\";\nimport { useModal } from \"../contexts/ModalContext\";\nimport UserType from \"../enuns/UserType\"; //import { callbackify } from \"util\";\n// import IContact from \"../alias/IContact\";\n//Comentar para Evitar Warnings no console\n\nlet squadService;\nlet typingTimeout = new Map();\n\nconst SquadCommunicator = () => {\n  var _squadService46;\n\n  const {\n    chats,\n    setChats,\n    activeChat,\n    replyMsg,\n    setReplyMsg,\n    setActiveChat,\n    forwardMessageList,\n    setForwardMessageList,\n    setShowChat,\n    showChatProfileSidebar\n  } = useChat();\n  const {\n    contactsSearch,\n    setContactsSearched,\n    newFavorite,\n    setNewFavorite,\n    contacts,\n    setContacts,\n    setContactsOutsideUserContacts,\n    toggleAddingContacts,\n    setToggleAddingContacts,\n    checkedContacts,\n    setCheckedContacts,\n    removedContact,\n    setRemovedContact,\n    checkedMembers,\n    groupToInsertMember,\n    setGroupToInsertMember,\n    clickedContact,\n    setClickedContact\n  } = useContact();\n  const {\n    user,\n    setUser,\n    changedUserData,\n    changedUserPassword,\n    setChangedUserPassword\n  } = useAuth();\n  const {\n    showModalForwardMessageTo,\n    setShowModalForwardMessageTo,\n    showModalAddContact\n  } = useModal();\n  const {\n    setGroups,\n    groups,\n    memberQuit,\n    groupIdOfLeaveRequest,\n    setGroupIdOfLeaveRequest,\n    setMemberQuit,\n    groupToRemoveContact,\n    setGroupToRemoveContact,\n    removedMember,\n    setRemovedMember,\n    toggleMemberRole,\n    setToggleMemberRole,\n    changeGroupData,\n    setChangeGroupData,\n    groupToCreate,\n    setGroupToCreate\n  } = useGroup();\n\n  const init = () => {\n    var _squadService;\n\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"71e1503a96d94e1e231444bc5c0399ca\",\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      user_name: \"ZZ Romero 2\",\n      expires_in: 2592000,\n      email: \"romero2@digivox.com.br\",\n      baseUrl: \"https://app.citrussquad.com/api/v1/\"\n    }));\n    squadService = SquadService.getInstance({\n      chatCommunicatorSubscribe: chatCommunicatorSubscribe\n    });\n    (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.user.get(user => {\n      setUser(user);\n    });\n  };\n\n  const clearSendFile = (chatId, messageId) => {\n    setChats(chats.map(chat => {\n      if (chat.id === chatId) {\n        chat.messages = chat.messages.map(message => {\n          if (message.id === messageId) {\n            message.deliverStatus = DeliverStatus.QUEUED;\n            message.sendFile = undefined;\n          }\n\n          return message;\n        });\n      }\n\n      return chat;\n    }));\n  };\n\n  const onChatsChange = () => {// chats.forEach((chat) => {\n    // });\n  };\n\n  const onActiveChatChange = () => {\n    checkSendMessage(activeChat);\n    checkAttachedFiles(activeChat);\n    checkNewContact(activeChat); // checkTyping(activeChat)\n  }; // const checkTyping = (chat: IChat) => {\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\n  //     if (oldTimeoutData)\n  //       clearTimeout(oldTimeoutData.timeout)\n  //     else\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\n  //     const timeoutData = {\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\n  //       msgStr: `${chat.inputMessage}`\n  //     }\n  //     typingTimeout.set(chat.jid, timeoutData)\n  //   }\n  // }\n\n\n  const checkNewContact = cht => {\n    if (!cht.added) {\n      var _squadService2;\n\n      (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.contacts.add(cht, success => {\n        if (success) {\n          var _squadService3;\n\n          setChats(chats.map(chat => {\n            if (chat.jid === cht.jid) {\n              chat.added = true;\n            }\n\n            if (activeChat.jid === chat.jid) setActiveChat(chat);\n            return chat;\n          }));\n          (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.contacts.list(ctcs => {\n            setContacts(ctcs);\n          });\n        }\n      });\n    }\n  };\n\n  const checkAttachedFiles = cht => {\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\n      var _squadService4;\n\n      (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : _squadService4.attachments.list(cht, attachments => {\n        if (attachments.length > 0) setActiveChat({ ...cht,\n          attachedFileList: attachments\n        });else setActiveChat({ ...cht,\n          attachedFileList: null\n        });\n      });\n    }\n  };\n  /* getMessageUserProfilePicture = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.profilePicture;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])\r\n        ?.profilePicture;\r\n    }\r\n  }; */\n\n\n  const checkSearchMessages = () => {\n    if (activeChat.messageLoaded) {\n      var _squadService5;\n\n      (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.messages.list(activeChat, messages => {\n        if (messages.length) {\n          setChats(chats.map(cht => {\n            if (cht.id === activeChat.id) {\n              messages.forEach(msg => {\n                if (!activeChat.messages.find(m => m.id === msg.id)) cht.messages.unshift(msg);\n              });\n              cht.messageLoaded = false;\n              setActiveChat(cht);\n            }\n\n            return cht;\n          }));\n        } else {\n          const chat = { ...activeChat,\n            messageLoaded: false\n          };\n          setActiveChat(chat);\n        }\n      });\n    }\n  };\n\n  const checkSendMessage = chat => {\n    chat.messages.forEach(msg => {\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\n        if (msg.sendFile && !replyMsg) {\n          var _squadService6, _squadService6$chat;\n\n          const files = [msg.sendFile];\n          clearSendFile(chat.id, msg.id);\n          (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : (_squadService6$chat = _squadService6.chat) === null || _squadService6$chat === void 0 ? void 0 : _squadService6$chat.sendFiles(chat, files, data => {\n            updateMessageFiles(data, chat, msg);\n          });\n        } else {\n          if (!msg.isForwardMessage && !replyMsg) {\n            sendMessage(chat, msg.message, msgId => updateMessage(msgId, chat, msg));\n          } else if (replyMsg) {\n            var _squadService7, _squadService7$chat;\n\n            const replyMsgCopy = { ...replyMsg\n            };\n            setReplyMsg(undefined);\n            (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : (_squadService7$chat = _squadService7.chat) === null || _squadService7$chat === void 0 ? void 0 : _squadService7$chat.replyMsg(chat, msg, replyMsgCopy, msgId => {\n              updateMessage(msgId, chat, msg, replyMsgCopy);\n            });\n          }\n        }\n      }\n    });\n  };\n\n  const updateMessageFiles = (data, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        const booleans = getUrlBooleans(data.url);\n        message.id = data.msgId;\n        message.fileUrl = data.url;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n        message.message = getFileName(data.url);\n        message.isFileMessage = booleans.isFileMessage;\n        message.isImageMessage = booleans.isImageMessage;\n        message.isVideoMessage = booleans.isVideoMessage;\n        message.isAudioMessage = booleans.isAudioMessage;\n      }\n\n      return message;\n    });\n    setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      const newChats = [];\n      chats.forEach(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n          newChats.unshift(cht);\n        } else {\n          newChats.push(cht);\n        }\n      });\n      setChats(newChats);\n    }\n  };\n\n  const updateMessage = (msgId, chat, msg, replyedMsg = undefined) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        message.id = msgId;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n\n        if (replyedMsg) {\n          var _squadService8, _squadService8$contac, _squadService9, _squadService9$user, _squadService9$user$u, _squadService10, _squadService10$user, _squadService10$user$;\n\n          message.isReplyMessage = true;\n          message.replyedMessage = replyedMsg.message || replyedMsg.fileUrl;\n          message.replyedMessageId = replyedMsg.id;\n          message.replyedMessageTo = ((_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : (_squadService8$contac = _squadService8.contacts.getContacts().get(replyedMsg.fromUser.split(\"@\")[0])) === null || _squadService8$contac === void 0 ? void 0 : _squadService8$contac.name) || ((_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : (_squadService9$user = _squadService9.user) === null || _squadService9$user === void 0 ? void 0 : (_squadService9$user$u = _squadService9$user.user) === null || _squadService9$user$u === void 0 ? void 0 : _squadService9$user$u.id) === replyedMsg.fromUser.split(\"@\")[0] ? (_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : (_squadService10$user = _squadService10.user) === null || _squadService10$user === void 0 ? void 0 : (_squadService10$user$ = _squadService10$user.user) === null || _squadService10$user$ === void 0 ? void 0 : _squadService10$user$.name : \"Participant\";\n        }\n\n        if (isUrl(message.message)) {\n          const booleans = getUrlBooleans(message.message);\n          message.isFileMessage = booleans.isFileMessage;\n          message.isImageMessage = booleans.isImageMessage;\n          message.isAudioMessage = booleans.isAudioMessage;\n          message.isVideoMessage = booleans.isVideoMessage;\n          message.fileUrl = message.message;\n        }\n      }\n\n      return message;\n    });\n    if (activeChat.jid === newChat.jid) setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      const newChats = [];\n      chats.forEach(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n          newChats.unshift(cht);\n        } else {\n          newChats.push(cht);\n        }\n      });\n      setChats(newChats);\n    }\n  };\n\n  const forwardMessage = () => {\n    if (forwardMessageList && showModalForwardMessageTo) {\n      const ctcs = [...forwardMessageList];\n      const message = { ...showModalForwardMessageTo\n      };\n      setForwardMessageList(undefined);\n      setShowModalForwardMessageTo(undefined);\n      const chatsFinded = [];\n      const oldChats = [...chats.map(chat => {\n        return { ...chat\n        };\n      })];\n      ctcs === null || ctcs === void 0 ? void 0 : ctcs.forEach((ctc, i) => {\n        const cht = oldChats.find(cht => cht.jid === ctc.jid);\n\n        if (cht) {\n          var _squadService11, _squadService11$chat;\n\n          const msg = { ...message,\n            id: `${cht.messages.length + 1}`,\n            userName: user.name,\n            fromUser: user.id,\n            toUser: ctc.jid.split(\"@\")[0],\n            message: message.fileUrl || message.message,\n            deliverStatus: DeliverStatus.QUEUED,\n            isForwardMessage: true\n          };\n          (_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : (_squadService11$chat = _squadService11.chat) === null || _squadService11$chat === void 0 ? void 0 : _squadService11$chat.forwardMessage(cht, msg, msgId => {\n            msg.id = msgId;\n            cht.messages.push(msg);\n            chatsFinded.push(cht);\n          });\n        }\n      });\n      const newChats = oldChats.map(chat => chatsFinded.find(cht => cht.id === chat.id) || chat);\n      const ctcsNotInChat = ctcs.filter(ctc => !newChats.find(cht => ctc.jid === cht.jid));\n      ctcsNotInChat.forEach((ctc, i) => {\n        var _squadService12, _squadService12$chat;\n\n        const chat = {\n          id: ctc.jid.split(\"@\")[0],\n          jid: ctc.jid,\n          name: ctc.name,\n          profilePicture: ctc.profilePicture,\n          status: ctc.status || undefined,\n          unRead: 0,\n          chatType: ctc.jid.includes(\"@conference.\") ? ChatType.GROUP : ChatType.USER,\n          inputMessage: \"\",\n          messageLoaded: false,\n          isTyping: false,\n          messages: [],\n          email: ctc.email || undefined,\n          favorite: ctc.favorite,\n          added: ctc.added\n        };\n        const newMessage = { ...message,\n          id: `${1}`,\n          userName: user.name,\n          fromUser: user.id,\n          toUser: ctc.jid.split(\"@\")[0],\n          deliverStatus: DeliverStatus.QUEUED,\n          isForwardMessage: true\n        };\n        (_squadService12 = squadService) === null || _squadService12 === void 0 ? void 0 : (_squadService12$chat = _squadService12.chat) === null || _squadService12$chat === void 0 ? void 0 : _squadService12$chat.forwardMessage(chat, newMessage, msgId => {\n          newMessage.id = msgId;\n          chat.messages.push(newMessage);\n          newChats.unshift(chat);\n        });\n      });\n      setChats(newChats);\n    }\n  };\n\n  const onChangeStatus = () => {\n    var _squadService13, _squadService13$chat, _squadService13$chat$, _squadService13$chat$2;\n\n    if (((_squadService13 = squadService) === null || _squadService13 === void 0 ? void 0 : (_squadService13$chat = _squadService13.chat) === null || _squadService13$chat === void 0 ? void 0 : (_squadService13$chat$ = _squadService13$chat.chat) === null || _squadService13$chat$ === void 0 ? void 0 : (_squadService13$chat$2 = _squadService13$chat$.client) === null || _squadService13$chat$2 === void 0 ? void 0 : _squadService13$chat$2.status) === \"online\") {\n      var _squadService14, _squadService14$chat;\n\n      (_squadService14 = squadService) === null || _squadService14 === void 0 ? void 0 : (_squadService14$chat = _squadService14.chat) === null || _squadService14$chat === void 0 ? void 0 : _squadService14$chat.changeStatus(user.status);\n    }\n  };\n\n  const onSearchContacts = () => {\n    if (contactsSearch.length > 2) {\n      var _squadService15;\n\n      (_squadService15 = squadService) === null || _squadService15 === void 0 ? void 0 : _squadService15.contacts.search(contactsSearch, searchList => {\n        setContactsSearched(searchList);\n      });\n    } else {\n      setContactsSearched(undefined);\n    }\n  };\n\n  const onSearchContactsOutsideUserContacts = () => {\n    var _squadService16;\n\n    (_squadService16 = squadService) === null || _squadService16 === void 0 ? void 0 : _squadService16.contacts.getContactsOutsideUserLists(contacts => {\n      if (contacts) {\n        setContactsOutsideUserContacts(contacts);\n      }\n    });\n  };\n\n  const onToggleSidebarMenu = () => {\n    var _squadService17;\n\n    (_squadService17 = squadService) === null || _squadService17 === void 0 ? void 0 : _squadService17.contacts.getContactsOutsideUserLists(contacts => {\n      if (contacts) {\n        setContactsOutsideUserContacts(contacts);\n      }\n    });\n  };\n\n  const onRemovingMember = () => {\n    if (removedMember && groupToRemoveContact) {\n      var _squadService18;\n\n      let group = groups.find(grp => grp.groupId === groupToRemoveContact);\n      if (group) (_squadService18 = squadService) === null || _squadService18 === void 0 ? void 0 : _squadService18.groups.removeMember(group.groupId, removedMember, success => {\n        if (success) {\n          setGroups(groups.map(grp => {\n            if (grp.groupId === (group === null || group === void 0 ? void 0 : group.groupId)) grp.members = grp.members.filter(mb => mb.userId !== removedMember.userId);\n            return grp;\n          }));\n          setChats(chats.map(cht => {\n            if (cht.groupId === (group === null || group === void 0 ? void 0 : group.groupId)) {\n              var _cht$members;\n\n              cht.members = (_cht$members = cht.members) === null || _cht$members === void 0 ? void 0 : _cht$members.filter(mb => mb.userId !== removedMember.userId);\n              if (cht.groupId === activeChat.groupId) setActiveChat(cht);\n            }\n\n            return cht;\n          }));\n\n          if (group) {\n            var _squadService19, _squadService19$chat;\n\n            (_squadService19 = squadService) === null || _squadService19 === void 0 ? void 0 : (_squadService19$chat = _squadService19.chat) === null || _squadService19$chat === void 0 ? void 0 : _squadService19$chat.chat.sendEvent(group === null || group === void 0 ? void 0 : group.jid, removedMember.userId, \"6\");\n          }\n\n          setRemovedMember(undefined);\n          setGroupToRemoveContact(undefined);\n        }\n      });\n    }\n  };\n\n  const onLeavingGroup = () => {\n    if (memberQuit && groupIdOfLeaveRequest) {\n      var _squadService20;\n\n      (_squadService20 = squadService) === null || _squadService20 === void 0 ? void 0 : _squadService20.groups.leftingGroup({\n        groupId: groupIdOfLeaveRequest,\n        memberId: memberQuit.userId\n      }, success => {\n        if (success) {\n          setChats(chats.filter(cht => cht.groupId !== groupIdOfLeaveRequest));\n          setGroups(groups.filter(grp => grp.groupId !== groupIdOfLeaveRequest));\n\n          if (activeChat.groupId === groupIdOfLeaveRequest) {\n            setShowChat(false);\n          }\n\n          setMemberQuit(undefined);\n          setGroupIdOfLeaveRequest(\"\");\n        }\n      });\n    }\n  };\n\n  const onAddingMembers = () => {\n    let asynchronousFlag = 0;\n\n    if (checkedMembers && groupToInsertMember) {\n      checkedMembers.forEach(ctt => {\n        var _squadService21;\n\n        (_squadService21 = squadService) === null || _squadService21 === void 0 ? void 0 : _squadService21.groups.addMember(groupToInsertMember, ctt, success => {\n          if (success) {\n            var _squadService22, _squadService22$chat;\n\n            (_squadService22 = squadService) === null || _squadService22 === void 0 ? void 0 : (_squadService22$chat = _squadService22.chat) === null || _squadService22$chat === void 0 ? void 0 : _squadService22$chat.chat.sendEvent(groupToInsertMember.jid, ctt.id, \"2\");\n            asynchronousFlag++;\n\n            if (checkedMembers.length === asynchronousFlag) {\n              var _squadService23;\n\n              (_squadService23 = squadService) === null || _squadService23 === void 0 ? void 0 : _squadService23.groups.list(grps => {\n                setGroups(grps);\n                setChats(chats.map(cht => {\n                  if (cht.groupId === groupToInsertMember.groupId) {\n                    let foundedGroup = grps.find(grp => grp.groupId === cht.groupId);\n                    cht.members = foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.members;\n\n                    if (activeChat.groupId === cht.groupId) {\n                      activeChat.members = foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.members;\n                      setActiveChat(activeChat);\n                    }\n                  }\n\n                  return cht;\n                }));\n              });\n              setCheckedContacts([]);\n              setToggleAddingContacts(false);\n              setGroupToInsertMember(undefined);\n            }\n          }\n        });\n      });\n    }\n  };\n\n  const onAddingContacts = () => {\n    let asynchronousFlag = 0;\n\n    if (checkedContacts && toggleAddingContacts) {\n      checkedContacts.forEach(ctt => {\n        if (!ctt.added) {\n          var _squadService24;\n\n          (_squadService24 = squadService) === null || _squadService24 === void 0 ? void 0 : _squadService24.contacts.addContacts(ctt, success => {\n            if (success) {\n              asynchronousFlag++;\n\n              if (checkedContacts.length === asynchronousFlag) {\n                var _squadService25;\n\n                (_squadService25 = squadService) === null || _squadService25 === void 0 ? void 0 : _squadService25.contacts.list(contacts => {\n                  setContacts(contacts);\n                  setCheckedContacts([]);\n                  setToggleAddingContacts(false);\n                });\n              }\n            }\n          });\n        }\n      });\n    }\n  };\n\n  const onAddingContactOnGroupList = () => {\n    if (clickedContact) {\n      if (!clickedContact.added) {\n        var _squadService26;\n\n        (_squadService26 = squadService) === null || _squadService26 === void 0 ? void 0 : _squadService26.contacts.addContacts(clickedContact, success => {\n          if (success) {\n            var _squadService27;\n\n            (_squadService27 = squadService) === null || _squadService27 === void 0 ? void 0 : _squadService27.contacts.list(contacts => {\n              setContacts(contacts);\n              setClickedContact(undefined);\n            });\n          }\n        });\n      }\n    }\n  };\n\n  const onToggleMemberRole = () => {\n    if (toggleMemberRole) {\n      var _squadService28;\n\n      (_squadService28 = squadService) === null || _squadService28 === void 0 ? void 0 : _squadService28.groups.list(grps => {\n        grps.forEach(gp => {\n          if (gp.groupId === toggleMemberRole.gpId) {\n            gp.members.forEach(mb => {\n              if (mb.userId === toggleMemberRole.mbId) {\n                var _squadService29;\n\n                (_squadService29 = squadService) === null || _squadService29 === void 0 ? void 0 : _squadService29.contacts.toggleMemberRole(toggleMemberRole.mbId, toggleMemberRole.gpId, toggleMemberRole.mbRole, success => {\n                  if (success) {\n                    const newRole = toggleMemberRole.mbRole === UserType.USER ? UserType.ADMIN : UserType.USER;\n                    setToggleMemberRole(undefined);\n                    setChats(chats.map(cht => {\n                      if (cht.groupId === toggleMemberRole.gpId) {\n                        var _cht$members2;\n\n                        cht.members = (_cht$members2 = cht.members) === null || _cht$members2 === void 0 ? void 0 : _cht$members2.map(mb => {\n                          if (mb.userId === toggleMemberRole.mbId) {\n                            mb.role = newRole;\n                          }\n\n                          return mb;\n                        });\n                        if (activeChat.groupId === cht.groupId) setActiveChat(cht);\n                      }\n\n                      return cht;\n                    }));\n                    setGroups(groups.map(grp => {\n                      if (grp.groupId === toggleMemberRole.gpId) {\n                        grp.members = grp.members.map(member => {\n                          if (member.userId === toggleMemberRole.mbId) member.role = newRole;\n                          return member;\n                        });\n                      }\n\n                      return grp;\n                    }));\n                  }\n                });\n              }\n            });\n          }\n        });\n      });\n    }\n  };\n\n  const onChangeGroupData = () => {\n    if (changeGroupData) {\n      var _squadService30;\n\n      (_squadService30 = squadService) === null || _squadService30 === void 0 ? void 0 : _squadService30.groups.list(grps => grps.forEach(gp => {\n        if (gp.groupId === changeGroupData.groupId) {\n          var _squadService31;\n\n          (_squadService31 = squadService) === null || _squadService31 === void 0 ? void 0 : _squadService31.groups.editGroupInfo({\n            groupId: changeGroupData.groupId,\n            groupName: changeGroupData.groupName,\n            members: changeGroupData.members,\n            description: changeGroupData.description\n          }, success => {\n            if (success) {\n              setGroups(grps);\n              setChats(chats.map(cht => {\n                if (cht.groupId === changeGroupData.groupId) {\n                  let foundedGroup = grps.find(grp => grp.groupId === cht.groupId);\n\n                  if (foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.name) {\n                    cht.name = foundedGroup.name;\n                  }\n\n                  if (activeChat.groupId === cht.groupId) {\n                    if (foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.name) {\n                      activeChat.name = foundedGroup === null || foundedGroup === void 0 ? void 0 : foundedGroup.name;\n                    }\n\n                    setActiveChat(activeChat);\n                  }\n                }\n\n                return cht;\n              }));\n              setChangeGroupData(undefined);\n            }\n          });\n        }\n      }));\n    }\n  };\n\n  const createGroup = () => {\n    var _squadService32;\n\n    (_squadService32 = squadService) === null || _squadService32 === void 0 ? void 0 : _squadService32.groups.create(groupToCreate, parsedGroup => {\n      if (parsedGroup) {\n        var _squadService33, _squadService34, _squadService34$chat;\n\n        (_squadService33 = squadService) === null || _squadService33 === void 0 ? void 0 : _squadService33.groups.list(groups => {\n          setGroups(groups);\n          setGroupToCreate(undefined);\n        });\n        (_squadService34 = squadService) === null || _squadService34 === void 0 ? void 0 : (_squadService34$chat = _squadService34.chat) === null || _squadService34$chat === void 0 ? void 0 : _squadService34$chat.chat.sendEvent(parsedGroup.jid, parsedGroup.jid, \"1\");\n      }\n    });\n  };\n\n  useEffect(onChatsChange, [chats]);\n  useEffect(onNewFavorite, [newFavorite]);\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\n  useEffect(onActiveChatChange, [activeChat]);\n  useEffect(onUserDataChange, [changedUserData]);\n  useEffect(onUserPasswordChange, [changedUserPassword]);\n  useEffect(onChangeStatus, [user.status]);\n  useEffect(forwardMessage, [forwardMessageList]);\n  useEffect(onSearchContacts, [contactsSearch]);\n  useEffect(onSearchContactsOutsideUserContacts, [showModalAddContact]);\n  useEffect(onAddingContacts, [toggleAddingContacts]);\n  useEffect(onRemovingMember, [removedMember, groupToRemoveContact]);\n  useEffect(onLeavingGroup, [memberQuit, groupIdOfLeaveRequest]);\n  useEffect(onRemovingContact, [removedContact]);\n  useEffect(onAddingMembers, [groupToInsertMember, checkedMembers]);\n  useEffect(onToggleMemberRole, [toggleMemberRole]);\n  useEffect(onChangeGroupData, [changeGroupData]);\n  useEffect(onAddingContactOnGroupList, [clickedContact]);\n  useEffect(createGroup, [groupToCreate]);\n  useEffect(onToggleSidebarMenu, [showChatProfileSidebar]);\n\n  function onRemovingContact() {\n    if (removedContact) {\n      contacts.forEach(ctc => {\n        if (ctc.id === removedContact.id) {\n          var _squadService35;\n\n          if (ctc.added) (_squadService35 = squadService) === null || _squadService35 === void 0 ? void 0 : _squadService35.contacts.remove(ctc, success => {\n            if (success) {\n              var _squadService36;\n\n              (_squadService36 = squadService) === null || _squadService36 === void 0 ? void 0 : _squadService36.contacts.list(ctcs => {\n                setContacts(ctcs);\n                setRemovedContact(undefined);\n              });\n            }\n          });\n        }\n      });\n    }\n  }\n\n  function onUserPasswordChange() {\n    if (changedUserPassword) {\n      var _squadService37;\n\n      (_squadService37 = squadService) === null || _squadService37 === void 0 ? void 0 : _squadService37.user.changePassword(changedUserPassword, password => {\n        if (password) {\n          setChangedUserPassword({\n            oldPassword: \"\",\n            newPassword: \"\"\n          });\n        }\n      });\n    }\n  }\n\n  function onUserDataChange() {\n    if (changedUserData) {\n      var _squadService38;\n\n      (_squadService38 = squadService) === null || _squadService38 === void 0 ? void 0 : _squadService38.user.changeUserData(changedUserData, chgd => {\n        if (chgd) {\n          setUser({ ...user,\n            email: changedUserData.email,\n            name: changedUserData.name\n          });\n        }\n      });\n    }\n  }\n\n  function onNewFavorite() {\n    if (newFavorite) {\n      var _squadService39;\n\n      const newFavoriteLoad = { ...newFavorite\n      };\n      (_squadService39 = squadService) === null || _squadService39 === void 0 ? void 0 : _squadService39.contacts.setFavorite(newFavorite, favorite => {\n        if (favorite) {\n          setChats(chats.map(cht => {\n            if (cht.jid === newFavoriteLoad.jid) {\n              cht.favorite = !newFavoriteLoad.favorite;\n            }\n\n            return cht;\n          }));\n          setGroups(groups.map(grp => {\n            if (grp.jid === newFavoriteLoad.jid) {\n              return { ...grp,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return grp;\n          }));\n          setContacts(contacts.map(ctt => {\n            if (ctt.jid === newFavoriteLoad.jid) {\n              return { ...ctt,\n                favorite: !newFavoriteLoad.favorite\n              };\n            }\n\n            return ctt;\n          }));\n        }\n      });\n      setNewFavorite(undefined);\n    }\n  }\n\n  function chatCommunicatorSubscribe(event, data) {\n    var _squadService40;\n\n    switch (event) {\n      case Events.ONLINE:\n        (_squadService40 = squadService) === null || _squadService40 === void 0 ? void 0 : _squadService40.chats.list(receivedChats => {\n          var _squadService41, _squadService43;\n\n          const chats = [];\n          receivedChats.forEach(cht => {\n            if (!chats.find(chat => chat.id === cht.id)) {\n              chats.push(cht);\n            }\n          });\n          setChats(chats); //populating groups\n\n          (_squadService41 = squadService) === null || _squadService41 === void 0 ? void 0 : _squadService41.groups.list(groups => {\n            var _squadService42, _squadService42$chat;\n\n            setGroups(groups); //Joining Groups Rooms in XMPP\n\n            (_squadService42 = squadService) === null || _squadService42 === void 0 ? void 0 : (_squadService42$chat = _squadService42.chat) === null || _squadService42$chat === void 0 ? void 0 : _squadService42$chat.joinGroups(groups.map(group => group.jid));\n          }); //populating contacts\n\n          (_squadService43 = squadService) === null || _squadService43 === void 0 ? void 0 : _squadService43.contacts.list(contacts => setContacts(contacts)); //populating chat's with messages\n          // receivedChats.forEach((chat) => {\n          //   squadService?.messages.list(chat, (messages) => {\n          //     const chatWithMessages = { ...chat };\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\n          //       messages\n          //     );\n          //     setChats([\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\n          //       chatWithMessages,\n          //     ]);\n          //   });\n          // });\n        });\n        break;\n\n      case Events.MESSAGE:\n        if (data.fromUser === user.jid) break;\n        let find = false;\n        let newChats = [];\n        chats.forEach(chat => {\n          if (data.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || data.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\n            find = true;\n            if (!chat.messages.filter(msg => msg.id === data.id)[0]) chat.messages.push(data);\n\n            if (chat.id === activeChat.id) {\n              let chatTemporary = { ...chat\n              };\n              setActiveChat(chatTemporary);\n            } else {\n              chat.unRead++;\n            }\n\n            newChats.unshift(chat);\n          } else {\n            newChats.push(chat);\n          }\n        });\n\n        if (!find) {\n          var _squadService44;\n\n          let newChat = {};\n          (_squadService44 = squadService) === null || _squadService44 === void 0 ? void 0 : _squadService44.contacts.list(listContacts => {\n            listContacts.forEach(c => {\n              if (c.jid === data.fromUser) {\n                newChat = {\n                  id: c.id,\n                  jid: c.jid,\n                  name: c.name,\n                  profilePicture: c.profilePicture,\n                  status: c.status,\n                  unRead: 1,\n                  chatType: ChatType.USER,\n                  inputMessage: \"\",\n                  isTyping: false,\n                  messages: [],\n                  favorite: c.favorite,\n                  added: c.added\n                };\n                newChat.messages.push(data);\n                newChats.unshift(newChat);\n              }\n            });\n          });\n        }\n\n        setChats(newChats);\n        break;\n\n      case Events.RECEIVED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.deliverStatus = DeliverStatus.DELIVERED;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.DISPLAYED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.readStatus = ReadStatus.READ;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.COMPOSING:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = true;\n            if (activeChat.jid === data) setActiveChat(chat);\n            deleteTypingTimeout(chat.jid);\n            setTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.ACTIVE:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = false;\n\n            if (activeChat.jid === data) {\n              let chatUpdate = { ...chat\n              };\n              setActiveChat(chatUpdate);\n            }\n\n            deleteTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.PRESENCE:\n        setChats(chats.map(cht => {\n          if (cht.jid === data.from.split(\"/\")[0] && !cht.jid.includes(\"@conference.\")) {\n            cht.status = data.status;\n          }\n\n          return cht;\n        }));\n        setContacts(contacts.map(ctc => {\n          if (ctc.jid === data.from.split(\"/\")[0] && !ctc.jid.includes(\"@conference.\")) {\n            ctc.status = data.status;\n          }\n\n          return ctc;\n        }));\n        break;\n\n      case Events.SEND_EVENT:\n        const event = data;\n        let finded;\n        let newChat = [];\n        chats.forEach(chat => {\n          if (event.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || event.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\n            finded = true;\n            if (!chat.messages.filter(msg => msg.id === event.id)[0]) chat.messages.push(event);\n\n            if (chat.id === activeChat.id) {\n              let chatTemporary = { ...chat\n              };\n              setActiveChat(chatTemporary);\n            } else {\n              chat.unRead++;\n            }\n\n            newChat.unshift(chat);\n          } else {\n            newChat.push(chat);\n          }\n        });\n\n        if (!finded) {\n          groups.forEach(grp => {\n            if (event.fromUser.split(\"@\")[0] === grp.jid.split(\"@\")[0] || event.toUser.split(\"@\")[0] === grp.jid.split(\"@\")[0]) {\n              finded = true;\n              let groupToBeInserted = {\n                added: grp.added,\n                chatType: ChatType.GROUP,\n                favorite: grp.favorite,\n                id: grp.groupId,\n                inputMessage: \"\",\n                isTyping: false,\n                jid: grp.jid,\n                messages: [event],\n                name: grp.name,\n                unRead: 0,\n                attachedFileList: undefined,\n                department: undefined,\n                email: undefined,\n                groupId: grp.groupId,\n                members: grp.members,\n                messageLoaded: undefined,\n                profilePicture: grp.profilePicture,\n                status: undefined,\n                userDescription: grp.description\n              };\n              newChat.unshift(groupToBeInserted);\n            }\n          });\n        }\n\n        if (!finded) {\n          setGroups(groups);\n        }\n\n        setChats(newChat);\n\n        if (event.eventId === 6 || event.eventId === 2) {\n          refreshMembers(event);\n        }\n\n        break;\n    }\n  }\n\n  const refreshMembers = event => {\n    var _squadService45;\n\n    (_squadService45 = squadService) === null || _squadService45 === void 0 ? void 0 : _squadService45.groups.list(grps => {\n      setGroups(grps);\n      setChats(chats.map(chat => {\n        if (event.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] || event.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]) {\n          var _grps$find;\n\n          chat.members = (_grps$find = grps.find(grp => grp.groupId === chat.id)) === null || _grps$find === void 0 ? void 0 : _grps$find.members;\n\n          if (chat.id === activeChat.id) {\n            setActiveChat(chat);\n          }\n        }\n\n        return chat;\n      }));\n    });\n  };\n\n  const deleteTypingTimeout = jid => {\n    var _typingTimeout$get;\n\n    clearTimeout(((_typingTimeout$get = typingTimeout.get(jid)) === null || _typingTimeout$get === void 0 ? void 0 : _typingTimeout$get.timeout) || setTimeout(() => {}, 1));\n    typingTimeout.delete(jid);\n  };\n\n  const setTypingTimeout = jid => {\n    const timeoutData = {\n      msgStr: \"\",\n      timeout: setTimeout(() => {\n        setChats(chats.map(cht => {\n          if (cht.jid === jid) {\n            cht.isTyping = false;\n            if (activeChat.jid === jid) setActiveChat(cht);\n          }\n\n          return cht;\n        }));\n      }, 20000)\n    };\n    typingTimeout.set(jid, timeoutData);\n  };\n\n  (_squadService46 = squadService) === null || _squadService46 === void 0 ? void 0 : _squadService46.updateChatSubscribeFuncition(chatCommunicatorSubscribe); // Comentado para evitar warnings no console enquanto não é usado\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\n  //     squadService?.groups.list((groups) => {\n  //       setGroups(groups);\n  //       callback(true);\n  //     });\n  //   });\n  // }\n\n  function sendMessage(chat, message, callback) {\n    var _squadService47, _squadService47$chat;\n\n    (_squadService47 = squadService) === null || _squadService47 === void 0 ? void 0 : (_squadService47$chat = _squadService47.chat) === null || _squadService47$chat === void 0 ? void 0 : _squadService47$chat.chat.sendMessage(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message, callback);\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","DeliverStatus","XMPPChatType","getFileName","getUrlBooleans","isUrl","ReadStatus","useGroup","useContact","useModal","UserType","squadService","typingTimeout","Map","chats","setChats","activeChat","replyMsg","setReplyMsg","setActiveChat","forwardMessageList","setForwardMessageList","setShowChat","showChatProfileSidebar","contactsSearch","setContactsSearched","newFavorite","setNewFavorite","contacts","setContacts","setContactsOutsideUserContacts","toggleAddingContacts","setToggleAddingContacts","checkedContacts","setCheckedContacts","removedContact","setRemovedContact","checkedMembers","groupToInsertMember","setGroupToInsertMember","clickedContact","setClickedContact","user","setUser","changedUserData","changedUserPassword","setChangedUserPassword","showModalForwardMessageTo","setShowModalForwardMessageTo","showModalAddContact","setGroups","groups","memberQuit","groupIdOfLeaveRequest","setGroupIdOfLeaveRequest","setMemberQuit","groupToRemoveContact","setGroupToRemoveContact","removedMember","setRemovedMember","toggleMemberRole","setToggleMemberRole","changeGroupData","setChangeGroupData","groupToCreate","setGroupToCreate","init","localStorage","setItem","JSON","stringify","access_token","user_id","user_name","expires_in","email","baseUrl","getInstance","chatCommunicatorSubscribe","get","clearSendFile","chatId","messageId","map","chat","id","messages","message","deliverStatus","QUEUED","sendFile","undefined","onChatsChange","onActiveChatChange","checkSendMessage","checkAttachedFiles","checkNewContact","cht","added","add","success","jid","list","ctcs","attachedFileList","attachments","length","checkSearchMessages","messageLoaded","forEach","msg","find","m","unshift","SENDING","files","sendFiles","data","updateMessageFiles","isForwardMessage","sendMessage","msgId","updateMessage","replyMsgCopy","newChat","booleans","url","fileUrl","time","Date","toISOString","isFileMessage","isImageMessage","isVideoMessage","isAudioMessage","filter","newChats","push","replyedMsg","isReplyMessage","replyedMessage","replyedMessageId","replyedMessageTo","getContacts","fromUser","split","name","forwardMessage","chatsFinded","oldChats","ctc","i","userName","toUser","ctcsNotInChat","profilePicture","status","unRead","chatType","includes","GROUP","USER","inputMessage","isTyping","favorite","newMessage","onChangeStatus","client","changeStatus","onSearchContacts","search","searchList","onSearchContactsOutsideUserContacts","getContactsOutsideUserLists","onToggleSidebarMenu","onRemovingMember","group","grp","groupId","removeMember","members","mb","userId","sendEvent","onLeavingGroup","leftingGroup","memberId","onAddingMembers","asynchronousFlag","ctt","addMember","grps","foundedGroup","onAddingContacts","addContacts","onAddingContactOnGroupList","onToggleMemberRole","gp","gpId","mbId","mbRole","newRole","ADMIN","role","member","onChangeGroupData","editGroupInfo","groupName","description","createGroup","create","parsedGroup","onNewFavorite","onUserDataChange","onUserPasswordChange","onRemovingContact","remove","changePassword","password","oldPassword","newPassword","changeUserData","chgd","newFavoriteLoad","setFavorite","event","ONLINE","receivedChats","joinGroups","MESSAGE","chatTemporary","listContacts","c","RECEIVED","DELIVERED","DISPLAYED","readStatus","READ","COMPOSING","deleteTypingTimeout","setTypingTimeout","ACTIVE","chatUpdate","PRESENCE","from","SEND_EVENT","finded","groupToBeInserted","department","userDescription","eventId","refreshMembers","clearTimeout","timeout","setTimeout","delete","timeoutData","msgStr","set","updateChatSubscribeFuncition","callback","GROUPCHAT","CHAT"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\nimport { Events, SendImageCallbackReturn } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\r\nimport { SendMessageCallback } from \"./types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport { getFileName, getUrlBooleans, isUrl } from \"./utils/parseUtils\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport { useModal } from \"../contexts/ModalContext\";\r\nimport IContact from \"../alias/IContact\";\r\nimport IGroup from \"../alias/IGroup\";\r\nimport UserType from \"../enuns/UserType\";\r\n\r\n//import { callbackify } from \"util\";\r\n\r\n// import IContact from \"../alias/IContact\";\r\n//Comentar para Evitar Warnings no console\r\ninterface CreateGroupCallback {\r\n  (success: boolean): void;\r\n}\r\ninterface TypingTimeoutData {\r\n  timeout: NodeJS.Timeout;\r\n  msgStr: string;\r\n}\r\nlet squadService: SquadService | undefined;\r\nlet typingTimeout: Map<string, TypingTimeoutData> = new Map<\r\n  string,\r\n  TypingTimeoutData\r\n>();\r\n\r\nconst SquadCommunicator: React.FC = () => {\r\n  const {\r\n    chats,\r\n    setChats,\r\n    activeChat,\r\n    replyMsg,\r\n    setReplyMsg,\r\n    setActiveChat,\r\n    forwardMessageList,\r\n    setForwardMessageList,\r\n    setShowChat,\r\n    showChatProfileSidebar\r\n  } = useChat();\r\n  const {\r\n    contactsSearch,\r\n    setContactsSearched,\r\n    newFavorite,\r\n    setNewFavorite,\r\n    contacts,\r\n    setContacts,\r\n    setContactsOutsideUserContacts,\r\n    toggleAddingContacts,\r\n    setToggleAddingContacts,\r\n    checkedContacts,\r\n    setCheckedContacts,\r\n    removedContact,\r\n    setRemovedContact,\r\n    checkedMembers,\r\n    groupToInsertMember,\r\n    setGroupToInsertMember,\r\n    clickedContact,\r\n    setClickedContact,\r\n  } = useContact();\r\n  const {\r\n    user,\r\n    setUser,\r\n    changedUserData,\r\n    changedUserPassword,\r\n    setChangedUserPassword,\r\n  } = useAuth();\r\n  const {\r\n    showModalForwardMessageTo,\r\n    setShowModalForwardMessageTo,\r\n    showModalAddContact,\r\n  } = useModal();\r\n\r\n  const {\r\n    setGroups,\r\n    groups,\r\n    memberQuit,\r\n    groupIdOfLeaveRequest,\r\n    setGroupIdOfLeaveRequest,\r\n    setMemberQuit,\r\n    groupToRemoveContact,\r\n    setGroupToRemoveContact,\r\n    removedMember,\r\n    setRemovedMember,\r\n    toggleMemberRole,\r\n    setToggleMemberRole,\r\n    changeGroupData,\r\n    setChangeGroupData,\r\n    groupToCreate,\r\n    setGroupToCreate,\r\n  } = useGroup();\r\n\r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"71e1503a96d94e1e231444bc5c0399ca\",\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        user_name: \"ZZ Romero 2\",\r\n        expires_in: 2592000,\r\n        email: \"romero2@digivox.com.br\",\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n      })\r\n    );\r\n    squadService = SquadService.getInstance({\r\n      chatCommunicatorSubscribe: chatCommunicatorSubscribe,\r\n    });\r\n    squadService?.user.get((user: IUser) => {\r\n      setUser(user);\r\n    });\r\n  };\r\n\r\n  const clearSendFile = (chatId: string, messageId: string) => {\r\n    setChats(\r\n      chats.map((chat) => {\r\n        if (chat.id === chatId) {\r\n          chat.messages = chat.messages.map((message) => {\r\n            if (message.id === messageId) {\r\n              message.deliverStatus = DeliverStatus.QUEUED;\r\n              message.sendFile = undefined;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return chat;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onChatsChange = () => {\r\n    // chats.forEach((chat) => {\r\n    // });\r\n  };\r\n  const onActiveChatChange = () => {\r\n    checkSendMessage(activeChat);\r\n    checkAttachedFiles(activeChat);\r\n    checkNewContact(activeChat);\r\n    // checkTyping(activeChat)\r\n  };\r\n  // const checkTyping = (chat: IChat) => {\r\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\r\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\r\n  //     if (oldTimeoutData)\r\n  //       clearTimeout(oldTimeoutData.timeout)\r\n  //     else\r\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\r\n  //     const timeoutData = {\r\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\r\n  //       msgStr: `${chat.inputMessage}`\r\n  //     }\r\n  //     typingTimeout.set(chat.jid, timeoutData)\r\n  //   }\r\n  // }\r\n  const checkNewContact = (cht: IChat) => {\r\n    if (!cht.added) {\r\n      squadService?.contacts.add(cht, (success: boolean) => {\r\n        if (success) {\r\n          setChats(\r\n            chats.map((chat) => {\r\n              if (chat.jid === cht.jid) {\r\n                chat.added = true;\r\n              }\r\n              if (activeChat.jid === chat.jid) setActiveChat(chat);\r\n              return chat;\r\n            })\r\n          );\r\n          squadService?.contacts.list((ctcs) => {\r\n            setContacts(ctcs);\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkAttachedFiles = (cht: IChat) => {\r\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\r\n      squadService?.attachments.list(cht, (attachments) => {\r\n        if (attachments.length > 0)\r\n          setActiveChat({ ...cht, attachedFileList: attachments });\r\n        else setActiveChat({ ...cht, attachedFileList: null });\r\n      });\r\n    }\r\n  };\r\n\r\n  /* getMessageUserProfilePicture = (msg: Message | FileMessage) => {\r\n    if (msg.from.includes(\"@conference.\")) {\r\n      const groups = this.groups.getGroups();\r\n      const group = groups.get(msg.from.split(\"@\")[0]);\r\n      const member = group?.members.filter(\r\n        (member) => member.userId === msg.from.split(\"/\")[1]\r\n      )[0];\r\n      return member?.profilePicture;\r\n    } else {\r\n      return this.contacts.getContacts().get(msg.from.split(\"@\")[0])\r\n        ?.profilePicture;\r\n    }\r\n  }; */\r\n\r\n  const checkSearchMessages = () => {\r\n    if (activeChat.messageLoaded) {\r\n      squadService?.messages.list(activeChat, (messages) => {\r\n        if (messages.length) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.id === activeChat.id) {\r\n                messages.forEach((msg) => {\r\n                  if (!activeChat.messages.find((m) => m.id === msg.id))\r\n                    cht.messages.unshift(msg);\r\n                });\r\n                cht.messageLoaded = false;\r\n                setActiveChat(cht);\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n        } else {\r\n          const chat = { ...activeChat, messageLoaded: false };\r\n          setActiveChat(chat);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkSendMessage = (chat: IChat) => {\r\n    chat.messages.forEach((msg) => {\r\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\r\n        if (msg.sendFile && !replyMsg) {\r\n          const files = [msg.sendFile];\r\n          clearSendFile(chat.id, msg.id);\r\n          squadService?.chat?.sendFiles(\r\n            chat,\r\n            files,\r\n            (data: SendImageCallbackReturn) => {\r\n              updateMessageFiles(data, chat, msg);\r\n            }\r\n          );\r\n        } else {\r\n          if (!msg.isForwardMessage && !replyMsg) {\r\n            sendMessage(chat, msg.message, (msgId) =>\r\n              updateMessage(msgId, chat, msg)\r\n            );\r\n          } else if (replyMsg) {\r\n            const replyMsgCopy = { ...replyMsg };\r\n            setReplyMsg(undefined);\r\n            squadService?.chat?.replyMsg(chat, msg, replyMsgCopy, (msgId) => {\r\n              updateMessage(msgId, chat, msg, replyMsgCopy);\r\n            });\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const updateMessageFiles = (\r\n    data: SendImageCallbackReturn,\r\n    chat: IChat,\r\n    msg: IMessage\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        const booleans = getUrlBooleans(data.url);\r\n        message.id = data.msgId;\r\n        message.fileUrl = data.url;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        message.message = getFileName(data.url);\r\n        message.isFileMessage = booleans.isFileMessage;\r\n        message.isImageMessage = booleans.isImageMessage;\r\n        message.isVideoMessage = booleans.isVideoMessage;\r\n        message.isAudioMessage = booleans.isAudioMessage;\r\n      }\r\n      return message;\r\n    });\r\n    setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      const newChats: IChat[] = [];\r\n      chats.forEach((cht) => {\r\n        if (cht.id === chat.id) {\r\n          cht.messages = newChat.messages;\r\n          newChats.unshift(cht);\r\n        } else {\r\n          newChats.push(cht);\r\n        }\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const updateMessage = (\r\n    msgId: string,\r\n    chat: IChat,\r\n    msg: IMessage,\r\n    replyedMsg: IMessage | undefined = undefined\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        message.id = msgId;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        if (replyedMsg) {\r\n          message.isReplyMessage = true;\r\n          message.replyedMessage = replyedMsg.message || replyedMsg.fileUrl;\r\n          message.replyedMessageId = replyedMsg.id;\r\n          message.replyedMessageTo =\r\n            squadService?.contacts\r\n              .getContacts()\r\n              .get(replyedMsg.fromUser.split(\"@\")[0])?.name ||\r\n            squadService?.user?.user?.id === replyedMsg.fromUser.split(\"@\")[0]\r\n              ? squadService?.user?.user?.name\r\n              : \"Participant\";\r\n        }\r\n        if (isUrl(message.message)) {\r\n          const booleans = getUrlBooleans(message.message);\r\n          message.isFileMessage = booleans.isFileMessage;\r\n          message.isImageMessage = booleans.isImageMessage;\r\n          message.isAudioMessage = booleans.isAudioMessage;\r\n          message.isVideoMessage = booleans.isVideoMessage;\r\n          message.fileUrl = message.message;\r\n        }\r\n      }\r\n      return message;\r\n    });\r\n    if (activeChat.jid === newChat.jid) setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      const newChats: IChat[] = [];\r\n      chats.forEach((cht) => {\r\n        if (cht.id === chat.id) {\r\n          cht.messages = newChat.messages;\r\n          newChats.unshift(cht);\r\n        } else {\r\n          newChats.push(cht);\r\n        }\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const forwardMessage = () => {\r\n    if (forwardMessageList && showModalForwardMessageTo) {\r\n      const ctcs = [...forwardMessageList];\r\n      const message = { ...showModalForwardMessageTo };\r\n      setForwardMessageList(undefined);\r\n      setShowModalForwardMessageTo(undefined);\r\n      const chatsFinded: IChat[] = [];\r\n      const oldChats = [\r\n        ...chats.map((chat) => {\r\n          return { ...chat };\r\n        }),\r\n      ];\r\n      ctcs?.forEach((ctc, i) => {\r\n        const cht = oldChats.find((cht) => cht.jid === ctc.jid);\r\n        if (cht) {\r\n          const msg = {\r\n            ...message,\r\n            id: `${cht.messages.length + 1}`,\r\n            userName: user.name,\r\n            fromUser: user.id,\r\n            toUser: ctc.jid.split(\"@\")[0],\r\n            message: message.fileUrl || message.message,\r\n            deliverStatus: DeliverStatus.QUEUED,\r\n            isForwardMessage: true,\r\n          };\r\n          squadService?.chat?.forwardMessage(cht, msg, (msgId) => {\r\n            msg.id = msgId;\r\n            cht.messages.push(msg);\r\n            chatsFinded.push(cht);\r\n          });\r\n        }\r\n      });\r\n      const newChats = oldChats.map(\r\n        (chat) => chatsFinded.find((cht) => cht.id === chat.id) || chat\r\n      );\r\n      const ctcsNotInChat: (IContact | IGroup)[] = ctcs.filter(\r\n        (ctc) => !newChats.find((cht) => ctc.jid === cht.jid)\r\n      );\r\n      ctcsNotInChat.forEach((ctc, i) => {\r\n        const chat = {\r\n          id: ctc.jid.split(\"@\")[0],\r\n          jid: ctc.jid,\r\n          name: ctc.name,\r\n          profilePicture: ctc.profilePicture,\r\n          status: (ctc as IContact).status || undefined,\r\n          unRead: 0,\r\n          chatType: ctc.jid.includes(\"@conference.\")\r\n            ? ChatType.GROUP\r\n            : ChatType.USER,\r\n          inputMessage: \"\",\r\n          messageLoaded: false,\r\n          isTyping: false,\r\n          messages: [] as IMessage[],\r\n          email: (ctc as IContact).email || undefined,\r\n          favorite: ctc.favorite,\r\n          added: ctc.added,\r\n        };\r\n        const newMessage: IMessage = {\r\n          ...message,\r\n          id: `${1}`,\r\n          userName: user.name,\r\n          fromUser: user.id,\r\n          toUser: ctc.jid.split(\"@\")[0],\r\n          deliverStatus: DeliverStatus.QUEUED,\r\n          isForwardMessage: true,\r\n        };\r\n        squadService?.chat?.forwardMessage(chat, newMessage, (msgId) => {\r\n          newMessage.id = msgId;\r\n          chat.messages.push(newMessage);\r\n          newChats.unshift(chat);\r\n        });\r\n      });\r\n      setChats(newChats);\r\n    }\r\n  };\r\n  const onChangeStatus = () => {\r\n    if (squadService?.chat?.chat?.client?.status === \"online\") {\r\n      squadService?.chat?.changeStatus(user.status);\r\n    }\r\n  };\r\n  const onSearchContacts = () => {\r\n    if (contactsSearch.length > 2) {\r\n      squadService?.contacts.search(contactsSearch, (searchList) => {\r\n        setContactsSearched(searchList);\r\n      });\r\n    } else {\r\n      setContactsSearched(undefined);\r\n    }\r\n  };\r\n\r\n  const onSearchContactsOutsideUserContacts = () => {\r\n    squadService?.contacts.getContactsOutsideUserLists((contacts) => {\r\n      if (contacts) {\r\n        setContactsOutsideUserContacts(contacts);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onToggleSidebarMenu = () => {\r\n    squadService?.contacts.getContactsOutsideUserLists((contacts) => {\r\n      if (contacts) {\r\n        setContactsOutsideUserContacts(contacts);\r\n      }\r\n    });\r\n  }\r\n\r\n  const onRemovingMember = () => {\r\n    if (removedMember && groupToRemoveContact) {\r\n      let group = groups.find((grp) => grp.groupId === groupToRemoveContact);\r\n      if (group)\r\n        squadService?.groups.removeMember(\r\n          group.groupId,\r\n          removedMember,\r\n          (success: boolean) => {\r\n            if (success) {\r\n              setGroups(\r\n                groups.map((grp) => {\r\n                  if (grp.groupId === group?.groupId)\r\n                    grp.members = grp.members.filter(\r\n                      (mb) => mb.userId !== removedMember.userId\r\n                    );\r\n                  return grp;\r\n                })\r\n              );\r\n              setChats(\r\n                chats.map((cht) => {\r\n                  if (cht.groupId === group?.groupId) {\r\n                    cht.members = cht.members?.filter(\r\n                      (mb) => mb.userId !== removedMember.userId\r\n                    );\r\n                    if (cht.groupId === activeChat.groupId) setActiveChat(cht);\r\n                  }\r\n                  return cht;\r\n                })\r\n              );\r\n              if(group){\r\n                squadService?.chat?.chat.sendEvent(group?.jid, removedMember.userId, \"6\");\r\n              }\r\n              setRemovedMember(undefined);\r\n              setGroupToRemoveContact(undefined);\r\n            }\r\n          }\r\n        );\r\n    }\r\n  };\r\n  const onLeavingGroup = () => {\r\n    if (memberQuit && groupIdOfLeaveRequest) {\r\n      squadService?.groups.leftingGroup(\r\n        { groupId: groupIdOfLeaveRequest, memberId: memberQuit.userId },\r\n        (success: boolean) => {\r\n          if (success) {\r\n            setChats(\r\n              chats.filter((cht) => cht.groupId !== groupIdOfLeaveRequest)\r\n            );\r\n            setGroups(\r\n              groups.filter((grp) => grp.groupId !== groupIdOfLeaveRequest)\r\n            );\r\n            if (activeChat.groupId === groupIdOfLeaveRequest) {\r\n              setShowChat(false);\r\n            }\r\n            setMemberQuit(undefined);\r\n            setGroupIdOfLeaveRequest(\"\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  const onAddingMembers = () => {\r\n    let asynchronousFlag = 0;\r\n    if (checkedMembers && groupToInsertMember) {\r\n      checkedMembers.forEach((ctt) => {\r\n        squadService?.groups.addMember(\r\n          groupToInsertMember,\r\n          ctt,\r\n          (success: boolean) => {\r\n            if (success) {\r\n              squadService?.chat?.chat.sendEvent(groupToInsertMember.jid, ctt.id, \"2\");\r\n              asynchronousFlag++;\r\n              if (checkedMembers.length === asynchronousFlag) {\r\n                squadService?.groups.list((grps) => {\r\n                  setGroups(grps);\r\n                  setChats(\r\n                    chats.map((cht) => {\r\n                      if (cht.groupId === groupToInsertMember.groupId) {\r\n                        let foundedGroup = grps.find(\r\n                          (grp) => grp.groupId === cht.groupId\r\n                        );\r\n                        cht.members = foundedGroup?.members;\r\n                        if (activeChat.groupId === cht.groupId) {\r\n                          activeChat.members = foundedGroup?.members;\r\n                          setActiveChat(activeChat);\r\n                        }\r\n                      }\r\n                      return cht;\r\n                    })\r\n                    );\r\n                  });\r\n                setCheckedContacts([]);\r\n                setToggleAddingContacts(false);\r\n                setGroupToInsertMember(undefined);\r\n              }\r\n            }\r\n          }\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  const onAddingContacts = () => {\r\n    let asynchronousFlag = 0;\r\n    if (checkedContacts && toggleAddingContacts) {\r\n      checkedContacts.forEach((ctt) => {\r\n        if (!ctt.added) {\r\n          squadService?.contacts.addContacts(ctt, (success: boolean) => {\r\n            if (success) {\r\n              asynchronousFlag++;\r\n              if (checkedContacts.length === asynchronousFlag) {\r\n                squadService?.contacts.list((contacts) => {\r\n                  setContacts(contacts);\r\n                  setCheckedContacts([]);\r\n                  setToggleAddingContacts(false);\r\n                });\r\n              }\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const onAddingContactOnGroupList = () => {\r\n    if (clickedContact) {\r\n      if (!clickedContact.added) {\r\n        squadService?.contacts.addContacts(\r\n          clickedContact,\r\n          (success: boolean) => {\r\n            if (success) {\r\n              squadService?.contacts.list((contacts) => {\r\n                setContacts(contacts);\r\n                setClickedContact(undefined);\r\n              });\r\n            }\r\n          }\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const onToggleMemberRole = () => {\r\n    if (toggleMemberRole) {\r\n      squadService?.groups.list((grps) => {\r\n        grps.forEach((gp) => {\r\n          if (gp.groupId === toggleMemberRole.gpId) {\r\n            gp.members.forEach((mb) => {\r\n              if (mb.userId === toggleMemberRole.mbId) {\r\n                squadService?.contacts.toggleMemberRole(\r\n                  toggleMemberRole.mbId,\r\n                  toggleMemberRole.gpId,\r\n                  toggleMemberRole.mbRole,\r\n                  (success: boolean) => {\r\n                    if (success) {\r\n                      const newRole =\r\n                        toggleMemberRole.mbRole === UserType.USER\r\n                          ? UserType.ADMIN\r\n                          : UserType.USER;\r\n                      setToggleMemberRole(undefined);\r\n                      setChats(\r\n                        chats.map((cht) => {\r\n                          if (cht.groupId === toggleMemberRole.gpId) {\r\n                            cht.members = cht.members?.map((mb) => {\r\n                              if (mb.userId === toggleMemberRole.mbId) {\r\n                                mb.role = newRole;\r\n                              }\r\n                              return mb;\r\n                            });\r\n                            if (activeChat.groupId === cht.groupId)\r\n                              setActiveChat(cht);\r\n                          }\r\n                          return cht;\r\n                        })\r\n                      );\r\n                      setGroups(\r\n                        groups.map((grp) => {\r\n                          if (grp.groupId === toggleMemberRole.gpId) {\r\n                            grp.members = grp.members.map((member) => {\r\n                              if (member.userId === toggleMemberRole.mbId)\r\n                                member.role = newRole;\r\n                              return member;\r\n                            });\r\n                          }\r\n                          return grp;\r\n                        })\r\n                      );\r\n                    }\r\n                  }\r\n                );\r\n              }\r\n            });\r\n          }\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  const onChangeGroupData = () => {\r\n    if (changeGroupData) {\r\n      squadService?.groups.list((grps) =>\r\n        grps.forEach((gp) => {\r\n          if (gp.groupId === changeGroupData.groupId) {\r\n            squadService?.groups.editGroupInfo(\r\n              {\r\n                groupId: changeGroupData.groupId,\r\n                groupName: changeGroupData.groupName,\r\n                members: changeGroupData.members,\r\n                description: changeGroupData.description,\r\n              },\r\n              (success: boolean) => {\r\n                if (success) {\r\n                  setGroups(grps);\r\n                  setChats(\r\n                    chats.map((cht) => {\r\n                      if (cht.groupId === changeGroupData.groupId) {\r\n                        let foundedGroup = grps.find(\r\n                          (grp) => grp.groupId === cht.groupId\r\n                        );\r\n                        if(foundedGroup?.name){\r\n                          cht.name = foundedGroup.name;\r\n                        }\r\n                        if (activeChat.groupId === cht.groupId) {\r\n                          if(foundedGroup?.name){\r\n                            activeChat.name = foundedGroup?.name;\r\n                          }\r\n                          setActiveChat(activeChat);\r\n                        }\r\n                      }\r\n                      return cht;\r\n                    }))\r\n                  setChangeGroupData(undefined);\r\n                }\r\n              }\r\n            );\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const createGroup = () => {\r\n    squadService?.groups.create(groupToCreate, (parsedGroup) => {\r\n      if (parsedGroup) {\r\n        squadService?.groups.list((groups) => {\r\n          setGroups(groups);\r\n          setGroupToCreate(undefined);\r\n        });\r\n        squadService?.chat?.chat.sendEvent(parsedGroup.jid, parsedGroup.jid, \"1\")\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(onChatsChange, [chats]);\r\n  useEffect(onNewFavorite, [newFavorite]);\r\n  useEffect(checkSearchMessages, [activeChat.messageLoaded]);\r\n  useEffect(onActiveChatChange, [activeChat]);\r\n  useEffect(onUserDataChange, [changedUserData]);\r\n  useEffect(onUserPasswordChange, [changedUserPassword]);\r\n  useEffect(onChangeStatus, [user.status]);\r\n  useEffect(forwardMessage, [forwardMessageList]);\r\n  useEffect(onSearchContacts, [contactsSearch]);\r\n  useEffect(onSearchContactsOutsideUserContacts, [showModalAddContact]);\r\n  useEffect(onAddingContacts, [toggleAddingContacts]);\r\n  useEffect(onRemovingMember, [removedMember, groupToRemoveContact]);\r\n  useEffect(onLeavingGroup, [memberQuit, groupIdOfLeaveRequest]);\r\n  useEffect(onRemovingContact, [removedContact]);\r\n  useEffect(onAddingMembers, [groupToInsertMember, checkedMembers]);\r\n  useEffect(onToggleMemberRole, [toggleMemberRole]);\r\n  useEffect(onChangeGroupData, [changeGroupData]);\r\n  useEffect(onAddingContactOnGroupList, [clickedContact]);\r\n  useEffect(createGroup, [groupToCreate]);\r\n  useEffect(onToggleSidebarMenu, [showChatProfileSidebar]);\r\n\r\n  function onRemovingContact() {\r\n    if (removedContact) {\r\n      contacts.forEach((ctc) => {\r\n        if (ctc.id === removedContact.id) {\r\n          if (ctc.added)\r\n            squadService?.contacts.remove(ctc, (success: boolean) => {\r\n              if (success) {\r\n                squadService?.contacts.list((ctcs) => {\r\n                  setContacts(ctcs);\r\n                  setRemovedContact(undefined);\r\n                });\r\n              }\r\n            });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onUserPasswordChange() {\r\n    if (changedUserPassword) {\r\n      squadService?.user.changePassword(changedUserPassword, (password) => {\r\n        if (password) {\r\n          setChangedUserPassword({ oldPassword: \"\", newPassword: \"\" });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onUserDataChange() {\r\n    if (changedUserData) {\r\n      squadService?.user.changeUserData(changedUserData, (chgd) => {\r\n        if (chgd) {\r\n          setUser({\r\n            ...user,\r\n            email: changedUserData.email,\r\n            name: changedUserData.name,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  function onNewFavorite() {\r\n    if (newFavorite) {\r\n      const newFavoriteLoad = { ...newFavorite };\r\n      squadService?.contacts.setFavorite(newFavorite, (favorite) => {\r\n        if (favorite) {\r\n          setChats(\r\n            chats.map((cht) => {\r\n              if (cht.jid === newFavoriteLoad.jid) {\r\n                cht.favorite = !newFavoriteLoad.favorite;\r\n              }\r\n              return cht;\r\n            })\r\n          );\r\n          setGroups(\r\n            groups.map((grp) => {\r\n              if (grp.jid === newFavoriteLoad.jid) {\r\n                return {\r\n                  ...grp,\r\n                  favorite: !newFavoriteLoad.favorite,\r\n                };\r\n              }\r\n              return grp;\r\n            })\r\n          );\r\n          setContacts(\r\n            contacts.map((ctt) => {\r\n              if (ctt.jid === newFavoriteLoad.jid) {\r\n                return {\r\n                  ...ctt,\r\n                  favorite: !newFavoriteLoad.favorite,\r\n                };\r\n              }\r\n              return ctt;\r\n            })\r\n          );\r\n        }\r\n      });\r\n      setNewFavorite(undefined);\r\n    }\r\n  }\r\n  function chatCommunicatorSubscribe(event: string, data: any) {\r\n    switch (event) {\r\n      case Events.ONLINE:\r\n        squadService?.chats.list((receivedChats) => {\r\n          const chats: IChat[] = [];\r\n          receivedChats.forEach((cht) => {\r\n            if (!chats.find((chat) => chat.id === cht.id)) {\r\n              chats.push(cht);\r\n            }\r\n          });\r\n          setChats(chats);\r\n          //populating groups\r\n          squadService?.groups.list((groups) => {\r\n            setGroups(groups);\r\n            //Joining Groups Rooms in XMPP\r\n            squadService?.chat?.joinGroups(groups.map((group) => group.jid));\r\n          });\r\n          //populating contacts\r\n          squadService?.contacts.list((contacts) => setContacts(contacts));\r\n\r\n          //populating chat's with messages\r\n\r\n          // receivedChats.forEach((chat) => {\r\n          //   squadService?.messages.list(chat, (messages) => {\r\n          //     const chatWithMessages = { ...chat };\r\n          //     chatWithMessages.messages = chatWithMessages.messages.concat(\r\n          //       messages\r\n          //     );\r\n          //     setChats([\r\n          //       ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n          //       chatWithMessages,\r\n          //     ]);\r\n          //   });\r\n          // });\r\n        });\r\n        break;\r\n      case Events.MESSAGE:\r\n        if (data.fromUser === user.jid) break;\r\n        let find = false;\r\n\r\n        let newChats: IChat[] = [];\r\n        chats.forEach((chat) => {\r\n          if (\r\n            data.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] ||\r\n            data.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]\r\n          ) {\r\n            find = true;\r\n            if (!chat.messages.filter((msg) => msg.id === data.id)[0])\r\n              chat.messages.push(data);\r\n            if (chat.id === activeChat.id) {\r\n              let chatTemporary = { ...chat };\r\n              setActiveChat(chatTemporary);\r\n            } else {\r\n              chat.unRead++;\r\n            }\r\n            newChats.unshift(chat);\r\n          } else {\r\n            newChats.push(chat);\r\n          }\r\n        });\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.contacts.list((listContacts) => {\r\n            listContacts.forEach((c) => {\r\n              if (c.jid === data.fromUser) {\r\n                newChat = {\r\n                  id: c.id,\r\n                  jid: c.jid,\r\n                  name: c.name,\r\n                  profilePicture: c.profilePicture,\r\n                  status: c.status,\r\n                  unRead: 1,\r\n                  chatType: ChatType.USER,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  messages: [],\r\n                  favorite: c.favorite,\r\n                  added: c.added,\r\n                };\r\n                newChat.messages.push(data);\r\n                newChats.unshift(newChat);\r\n              }\r\n            });\r\n          });\r\n        }\r\n        setChats(newChats);\r\n\r\n        break;\r\n      case Events.RECEIVED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.messages.find((msg) => msg.id === data.id))\r\n              chat.messages = chat.messages.map((message) => {\r\n                message.deliverStatus = DeliverStatus.DELIVERED;\r\n                return message;\r\n              });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.DISPLAYED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.messages.find((msg) => msg.id === data.id))\r\n              chat.messages = chat.messages.map((message) => {\r\n                message.readStatus = ReadStatus.READ;\r\n                return message;\r\n              });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.COMPOSING:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = true;\r\n              if (activeChat.jid === data) setActiveChat(chat);\r\n              deleteTypingTimeout(chat.jid);\r\n              setTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.ACTIVE:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = false;\r\n              if (activeChat.jid === data) {\r\n                let chatUpdate = { ...chat };\r\n                setActiveChat(chatUpdate);\r\n              }\r\n              deleteTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.PRESENCE:\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (\r\n              cht.jid === data.from.split(\"/\")[0] &&\r\n              !cht.jid.includes(\"@conference.\")\r\n            ) {\r\n              cht.status = data.status;\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n        setContacts(\r\n          contacts.map((ctc) => {\r\n            if (\r\n              ctc.jid === data.from.split(\"/\")[0] &&\r\n              !ctc.jid.includes(\"@conference.\")\r\n            ) {\r\n              ctc.status = data.status;\r\n            }\r\n            return ctc;\r\n          })\r\n        );\r\n        break;\r\n      case Events.SEND_EVENT:\r\n        const event = (data as IMessage);\r\n        let finded;\r\n        let newChat: IChat[] = [];\r\n        chats.forEach((chat) => {\r\n          if (\r\n            event.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] ||\r\n            event.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]\r\n          ) {\r\n            finded = true;\r\n            if (!chat.messages.filter((msg) => msg.id === event.id)[0])\r\n              chat.messages.push(event);\r\n            if (chat.id === activeChat.id) {\r\n              let chatTemporary = { ...chat };\r\n              setActiveChat(chatTemporary);\r\n            } else {\r\n              chat.unRead++; \r\n            }\r\n            newChat.unshift(chat);\r\n          } else {\r\n            newChat.push(chat);\r\n          }\r\n        });\r\n        if(!finded){\r\n          groups.forEach((grp) => {\r\n            if (\r\n              event.fromUser.split(\"@\")[0] === grp.jid.split(\"@\")[0] ||\r\n              event.toUser.split(\"@\")[0] === grp.jid.split(\"@\")[0]\r\n            ){\r\n              finded = true;\r\n              let groupToBeInserted: IChat = {\r\n                added: grp.added,\r\n                chatType: ChatType.GROUP,\r\n                favorite: grp.favorite,\r\n                id: grp.groupId,\r\n                inputMessage: \"\",\r\n                isTyping: false,\r\n                jid: grp.jid,\r\n                messages: [event],\r\n                name: grp.name,\r\n                unRead: 0,\r\n                attachedFileList: undefined,\r\n                department: undefined,\r\n                email: undefined,\r\n                groupId: grp.groupId,\r\n                members: grp.members,\r\n                messageLoaded: undefined,\r\n                profilePicture: grp.profilePicture,\r\n                status: undefined,\r\n                userDescription: grp.description\r\n              };\r\n              newChat.unshift(groupToBeInserted);\r\n            }\r\n            }\r\n          )\r\n        }\r\n        if(!finded){\r\n          setGroups(groups);\r\n        }\r\n        setChats(newChat);\r\n        if(event.eventId === 6 || event.eventId === 2){\r\n          refreshMembers(event);\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  const refreshMembers = (event:IMessage) => {\r\n    squadService?.groups.list((grps) => {\r\n      setGroups(grps);\r\n      setChats(chats.map((chat) => {\r\n        if (\r\n          event.fromUser.split(\"@\")[0] === chat.jid.split(\"@\")[0] ||\r\n          event.toUser.split(\"@\")[0] === chat.jid.split(\"@\")[0]\r\n        ){\r\n          chat.members = grps.find((grp) => grp.groupId === chat.id)?.members;\r\n          if(chat.id === activeChat.id){\r\n            setActiveChat(chat);\r\n          }\r\n        }\r\n        return chat;\r\n      }))\r\n    }\r\n  )}\r\n\r\n  const deleteTypingTimeout = (jid: string) => {\r\n    clearTimeout(typingTimeout.get(jid)?.timeout || setTimeout(() => {}, 1));\r\n    typingTimeout.delete(jid);\r\n  };\r\n  const setTypingTimeout = (jid: string) => {\r\n    const timeoutData: TypingTimeoutData = {\r\n      msgStr: \"\",\r\n      timeout: setTimeout(() => {\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.jid === jid) {\r\n              cht.isTyping = false;\r\n              if (activeChat.jid === jid) setActiveChat(cht);\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n      }, 20000),\r\n    };\r\n    typingTimeout.set(jid, timeoutData);\r\n  };\r\n\r\n  squadService?.updateChatSubscribeFuncition(chatCommunicatorSubscribe);\r\n  // Comentado para evitar warnings no console enquanto não é usado\r\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\r\n  //     squadService?.groups.list((groups) => {\r\n  //       setGroups(groups);\r\n  //       callback(true);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  function sendMessage(\r\n    chat: IChat,\r\n    message: string,\r\n    callback: SendMessageCallback\r\n  ) {\r\n    squadService?.chat?.chat.sendMessage(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message,\r\n      callback\r\n    );\r\n  }\r\n\r\n  useEffect(init, []);\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}