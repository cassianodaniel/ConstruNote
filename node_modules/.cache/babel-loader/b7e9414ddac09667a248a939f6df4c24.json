{"ast":null,"code":"// Convert a string from kebab-case to camelCase\nvar camelCase = function camelCase(string) {\n  return string.replace(/\\-(\\w|$)/g, function (m, p1) {\n    return p1.toUpperCase();\n  });\n}; // Checks if a string starts with the characters of a specified string.\n\n\nvar startsWith = function startsWith(string, search) {\n  return string.indexOf(search) === 0;\n};\n\nvar convertPropertyName = function convertPropertyName(prop) {\n  prop = prop.toLowerCase(); // Skip CSS variables\n\n  if (startsWith(prop, '--')) {\n    return prop;\n  } // Always return 'float' as 'cssFloat'\n\n\n  if (prop === 'float') {\n    return 'cssFloat';\n  } // Handle `-ms-` prefix to camelCase as msPropertyName, not MsPropertyName\n\n\n  if (startsWith(prop, '-ms-')) {\n    prop = prop.substr(1);\n  }\n\n  return camelCase(prop);\n};\n\nvar splitDeclarations = function splitDeclarations(cssText) {\n  var declarations = [];\n  var capturing;\n  var i = cssText.length;\n  var last = i; // Split into declarations by semi-colon (outside quotes or parentheses)\n\n  while (i-- > -1) {\n    // Capture unescaped quotes\n    if ((cssText[i] === '\"' || cssText[i] === \"'\") && cssText[i - 1] !== '\\\\') {\n      if (!capturing) {\n        capturing = cssText[i];\n      } else if (cssText[i] === capturing) {\n        capturing = false;\n      }\n    } // Start capturing parentheses\n\n\n    if (!capturing && cssText[i] === ')') {\n      capturing = cssText[i];\n    } // Stop capturing parentheses\n\n\n    if (cssText[i] === '(' && capturing === ')') {\n      capturing = false;\n    } // Split at semi-colon\n\n\n    if (i < 0 || !capturing && cssText[i] === ';') {\n      declarations.unshift(cssText.slice(i + 1, last));\n      last = i;\n    }\n  }\n\n  return declarations;\n};\n\nvar splitDeclaration = function splitDeclaration(declaration) {\n  var i = declaration.indexOf(':');\n  return [declaration.substr(0, i).trim(), declaration.substr(i + 1).trim()];\n};\n\nvar cssToStyle = function cssToStyle(cssText) {\n  return splitDeclarations(cssText).map(splitDeclaration).filter(function (_ref) {\n    var name = _ref[0],\n        value = _ref[1];\n    return name && value;\n  }).reduce(function (styles, _ref2) {\n    var name = _ref2[0],\n        value = _ref2[1];\n    styles[convertPropertyName(name)] = value;\n    return styles;\n  }, {});\n};\n\nexport default cssToStyle;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/css-to-style/lib/index.esm.js"],"names":["camelCase","string","replace","m","p1","toUpperCase","startsWith","search","indexOf","convertPropertyName","prop","toLowerCase","substr","splitDeclarations","cssText","declarations","capturing","i","length","last","unshift","slice","splitDeclaration","declaration","trim","cssToStyle","map","filter","_ref","name","value","reduce","styles","_ref2"],"mappings":"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","sourcesContent":["// Convert a string from kebab-case to camelCase\nvar camelCase = function camelCase(string) {\n  return string.replace(/\\-(\\w|$)/g, function (m, p1) {\n    return p1.toUpperCase();\n  });\n}; // Checks if a string starts with the characters of a specified string.\n\n\nvar startsWith = function startsWith(string, search) {\n  return string.indexOf(search) === 0;\n};\n\nvar convertPropertyName = function convertPropertyName(prop) {\n  prop = prop.toLowerCase(); // Skip CSS variables\n\n  if (startsWith(prop, '--')) {\n    return prop;\n  } // Always return 'float' as 'cssFloat'\n\n\n  if (prop === 'float') {\n    return 'cssFloat';\n  } // Handle `-ms-` prefix to camelCase as msPropertyName, not MsPropertyName\n\n\n  if (startsWith(prop, '-ms-')) {\n    prop = prop.substr(1);\n  }\n\n  return camelCase(prop);\n};\n\nvar splitDeclarations = function splitDeclarations(cssText) {\n  var declarations = [];\n  var capturing;\n  var i = cssText.length;\n  var last = i; // Split into declarations by semi-colon (outside quotes or parentheses)\n\n  while (i-- > -1) {\n    // Capture unescaped quotes\n    if ((cssText[i] === '\"' || cssText[i] === \"'\") && cssText[i - 1] !== '\\\\') {\n      if (!capturing) {\n        capturing = cssText[i];\n      } else if (cssText[i] === capturing) {\n        capturing = false;\n      }\n    } // Start capturing parentheses\n\n\n    if (!capturing && cssText[i] === ')') {\n      capturing = cssText[i];\n    } // Stop capturing parentheses\n\n\n    if (cssText[i] === '(' && capturing === ')') {\n      capturing = false;\n    } // Split at semi-colon\n\n\n    if (i < 0 || !capturing && cssText[i] === ';') {\n      declarations.unshift(cssText.slice(i + 1, last));\n      last = i;\n    }\n  }\n\n  return declarations;\n};\n\nvar splitDeclaration = function splitDeclaration(declaration) {\n  var i = declaration.indexOf(':');\n  return [declaration.substr(0, i).trim(), declaration.substr(i + 1).trim()];\n};\n\nvar cssToStyle = function cssToStyle(cssText) {\n  return splitDeclarations(cssText).map(splitDeclaration).filter(function (_ref) {\n    var name = _ref[0],\n        value = _ref[1];\n    return name && value;\n  }).reduce(function (styles, _ref2) {\n    var name = _ref2[0],\n        value = _ref2[1];\n    styles[convertPropertyName(name)] = value;\n    return styles;\n  }, {});\n};\n\nexport default cssToStyle;\n"]},"metadata":{},"sourceType":"module"}