{"ast":null,"code":"'use strict';\n\nvar fetch = global.fetch || require('node-fetch');\n\nvar parse = require('@xmpp/xml/lib/parse');\n\nvar compareAltConnections = require('./alt-connections').compare;\n\nfunction resolve(domain) {\n  return fetch(\"https://\".concat(domain, \"/.well-known/host-meta\")).then(function (res) {\n    return res.text();\n  }).then(function (res) {\n    return parse(res).getChildren('Link').filter(function (link) {\n      return ['urn:xmpp:alt-connections:websocket', 'urn:xmpp:alt-connections:httppoll', 'urn:xmpp:alt-connections:xbosh'].includes(link.attrs.rel);\n    }).map(function (_ref) {\n      var attrs = _ref.attrs;\n      return {\n        rel: attrs.rel,\n        href: attrs.href,\n        method: attrs.rel.split(':').pop(),\n        uri: attrs.href\n      };\n    }).sort(compareAltConnections);\n  }).catch(function () {\n    return [];\n  });\n}\n\nmodule.exports.resolve = resolve;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/resolve/lib/http.js"],"names":["fetch","global","require","parse","compareAltConnections","compare","resolve","domain","then","res","text","getChildren","filter","link","includes","attrs","rel","map","href","method","split","pop","uri","sort","catch","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,KAAK,GAAGC,MAAM,CAACD,KAAP,IAAgBE,OAAO,CAAC,YAAD,CAArC;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,qBAAD,CAArB;;AACA,IAAME,qBAAqB,GAAGF,OAAO,CAAC,mBAAD,CAAP,CAA6BG,OAA3D;;AAEA,SAASC,OAAT,CAAiBC,MAAjB,EAAyB;AACvB,SAAOP,KAAK,mBAAYO,MAAZ,4BAAL,CACJC,IADI,CACC,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADJ,EAEJF,IAFI,CAEC,UAAAC,GAAG,EAAI;AACX,WAAON,KAAK,CAACM,GAAD,CAAL,CACJE,WADI,CACQ,MADR,EAEJC,MAFI,CAEG,UAAAC,IAAI;AAAA,aACV,CACE,oCADF,EAEE,mCAFF,EAGE,gCAHF,EAIEC,QAJF,CAIWD,IAAI,CAACE,KAAL,CAAWC,GAJtB,CADU;AAAA,KAFP,EASJC,GATI,CASA;AAAA,UAAEF,KAAF,QAAEA,KAAF;AAAA,aAAc;AACjBC,QAAAA,GAAG,EAAED,KAAK,CAACC,GADM;AAEjBE,QAAAA,IAAI,EAAEH,KAAK,CAACG,IAFK;AAGjBC,QAAAA,MAAM,EAAEJ,KAAK,CAACC,GAAN,CAAUI,KAAV,CAAgB,GAAhB,EAAqBC,GAArB,EAHS;AAIjBC,QAAAA,GAAG,EAAEP,KAAK,CAACG;AAJM,OAAd;AAAA,KATA,EAeJK,IAfI,CAeCnB,qBAfD,CAAP;AAgBD,GAnBI,EAoBJoB,KApBI,CAoBE,YAAM;AACX,WAAO,EAAP;AACD,GAtBI,CAAP;AAuBD;;AAEDC,MAAM,CAACC,OAAP,CAAepB,OAAf,GAAyBA,OAAzB","sourcesContent":["'use strict'\n\nconst fetch = global.fetch || require('node-fetch')\nconst parse = require('@xmpp/xml/lib/parse')\nconst compareAltConnections = require('./alt-connections').compare\n\nfunction resolve(domain) {\n  return fetch(`https://${domain}/.well-known/host-meta`)\n    .then(res => res.text())\n    .then(res => {\n      return parse(res)\n        .getChildren('Link')\n        .filter(link =>\n          [\n            'urn:xmpp:alt-connections:websocket',\n            'urn:xmpp:alt-connections:httppoll',\n            'urn:xmpp:alt-connections:xbosh',\n          ].includes(link.attrs.rel)\n        )\n        .map(({attrs}) => ({\n          rel: attrs.rel,\n          href: attrs.href,\n          method: attrs.rel.split(':').pop(),\n          uri: attrs.href,\n        }))\n        .sort(compareAltConnections)\n    })\n    .catch(() => {\n      return []\n    })\n}\n\nmodule.exports.resolve = resolve\n"]},"metadata":{},"sourceType":"script"}