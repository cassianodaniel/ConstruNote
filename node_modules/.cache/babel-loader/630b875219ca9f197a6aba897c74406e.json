{"ast":null,"code":"'use strict';\n\nconst WS = require('ws');\n\nconst WebSocket = global.WebSocket || WS;\n\nconst EventEmitter = require('events');\n\nconst CODE = 'ECONNERROR';\n\nclass Socket extends EventEmitter {\n  constructor() {\n    super();\n    this.listeners = Object.create(null);\n  }\n\n  connect(url) {\n    this.url = url;\n\n    this._attachSocket(new WebSocket(url, ['xmpp']));\n  }\n\n  _attachSocket(socket) {\n    const sock = this.socket = socket;\n    const {\n      listeners\n    } = this;\n\n    listeners.open = () => {\n      this.emit('connect');\n    };\n\n    listeners.message = ({\n      data\n    }) => this.emit('data', data);\n\n    listeners.error = event => {\n      // WS\n      let {\n        error\n      } = event; // DOM\n\n      if (!error) {\n        error = new Error(`WebSocket ${CODE} ${this.url}`);\n        error.errno = CODE;\n        error.code = CODE;\n      }\n\n      error.event = event;\n      error.url = this.url;\n      this.emit('error', error);\n    };\n\n    listeners.close = event => {\n      this._detachSocket();\n\n      this.emit('close', !event.wasClean, event);\n    };\n\n    sock.addEventListener('open', listeners.open);\n    sock.addEventListener('message', listeners.message);\n    sock.addEventListener('error', listeners.error);\n    sock.addEventListener('close', listeners.close);\n  }\n\n  _detachSocket() {\n    delete this.url;\n    const {\n      socket,\n      listeners\n    } = this;\n    Object.getOwnPropertyNames(listeners).forEach(k => {\n      socket.removeEventListener(k, listeners[k]);\n      delete listeners[k];\n    });\n    delete this.socket;\n  }\n\n  end() {\n    this.socket.close();\n  }\n\n  write(data, fn) {\n    if (WebSocket === WS) {\n      this.socket.send(data, fn);\n    } else {\n      this.socket.send(data);\n      fn();\n    }\n  }\n\n}\n\nmodule.exports = Socket;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/websocket/lib/Socket.js"],"names":["WS","require","WebSocket","global","EventEmitter","CODE","Socket","constructor","listeners","Object","create","connect","url","_attachSocket","socket","sock","open","emit","message","data","error","event","Error","errno","code","close","_detachSocket","wasClean","addEventListener","getOwnPropertyNames","forEach","k","removeEventListener","end","write","fn","send","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst WS = require('ws')\nconst WebSocket = global.WebSocket || WS\nconst EventEmitter = require('events')\n\nconst CODE = 'ECONNERROR'\n\nclass Socket extends EventEmitter {\n  constructor() {\n    super()\n    this.listeners = Object.create(null)\n  }\n\n  connect(url) {\n    this.url = url\n    this._attachSocket(new WebSocket(url, ['xmpp']))\n  }\n\n  _attachSocket(socket) {\n    const sock = (this.socket = socket)\n    const {listeners} = this\n    listeners.open = () => {\n      this.emit('connect')\n    }\n\n    listeners.message = ({data}) => this.emit('data', data)\n    listeners.error = event => {\n      // WS\n      let {error} = event\n      // DOM\n      if (!error) {\n        error = new Error(`WebSocket ${CODE} ${this.url}`)\n        error.errno = CODE\n        error.code = CODE\n      }\n\n      error.event = event\n      error.url = this.url\n      this.emit('error', error)\n    }\n\n    listeners.close = event => {\n      this._detachSocket()\n      this.emit('close', !event.wasClean, event)\n    }\n\n    sock.addEventListener('open', listeners.open)\n    sock.addEventListener('message', listeners.message)\n    sock.addEventListener('error', listeners.error)\n    sock.addEventListener('close', listeners.close)\n  }\n\n  _detachSocket() {\n    delete this.url\n    const {socket, listeners} = this\n    Object.getOwnPropertyNames(listeners).forEach(k => {\n      socket.removeEventListener(k, listeners[k])\n      delete listeners[k]\n    })\n    delete this.socket\n  }\n\n  end() {\n    this.socket.close()\n  }\n\n  write(data, fn) {\n    if (WebSocket === WS) {\n      this.socket.send(data, fn)\n    } else {\n      this.socket.send(data)\n      fn()\n    }\n  }\n}\n\nmodule.exports = Socket\n"]},"metadata":{},"sourceType":"script"}