{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { C } from \"../messages\";\nimport { InviteClientTransaction } from \"../transactions\";\nimport { UserAgentClient } from \"./user-agent-client\";\n/**\n * Re-INVITE UAC.\n * @remarks\n * 14 Modifying an Existing Session\n * https://tools.ietf.org/html/rfc3261#section-14\n * 14.1 UAC Behavior\n * https://tools.ietf.org/html/rfc3261#section-14.1\n * @public\n */\n\nexport var ReInviteUserAgentClient = /*#__PURE__*/function (_UserAgentClient) {\n  _inherits(ReInviteUserAgentClient, _UserAgentClient);\n\n  var _super = _createSuper(ReInviteUserAgentClient);\n\n  function ReInviteUserAgentClient(dialog, delegate, options) {\n    var _this;\n\n    _classCallCheck(this, ReInviteUserAgentClient);\n\n    var message = dialog.createOutgoingRequestMessage(C.INVITE, options);\n    _this = _super.call(this, InviteClientTransaction, dialog.userAgentCore, message, delegate);\n    _this.delegate = delegate;\n    dialog.signalingStateTransition(message); // FIXME: TODO: next line obviously needs to be improved...\n\n    dialog.reinviteUserAgentClient = _assertThisInitialized(_this); // let the dialog know re-invite request sent\n\n    _this.dialog = dialog;\n    return _this;\n  }\n\n  _createClass(ReInviteUserAgentClient, [{\n    key: \"receiveResponse\",\n    value: function receiveResponse(message) {\n      var _this2 = this;\n\n      if (!this.authenticationGuard(message, this.dialog)) {\n        return;\n      }\n\n      var statusCode = message.statusCode ? message.statusCode.toString() : \"\";\n\n      if (!statusCode) {\n        throw new Error(\"Response status code undefined.\");\n      }\n\n      switch (true) {\n        case /^100$/.test(statusCode):\n          if (this.delegate && this.delegate.onTrying) {\n            this.delegate.onTrying({\n              message: message\n            });\n          }\n\n          break;\n\n        case /^1[0-9]{2}$/.test(statusCode):\n          if (this.delegate && this.delegate.onProgress) {\n            this.delegate.onProgress({\n              message: message,\n              session: this.dialog,\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\n              prack: function prack(options) {\n                throw new Error(\"Unimplemented.\");\n              }\n            });\n          }\n\n          break;\n\n        case /^2[0-9]{2}$/.test(statusCode):\n          // Update dialog signaling state with offer/answer in body\n          this.dialog.signalingStateTransition(message);\n\n          if (this.delegate && this.delegate.onAccept) {\n            this.delegate.onAccept({\n              message: message,\n              session: this.dialog,\n              ack: function ack(options) {\n                var outgoingAckRequest = _this2.dialog.ack(options);\n\n                return outgoingAckRequest;\n              }\n            });\n          }\n\n          break;\n\n        case /^3[0-9]{2}$/.test(statusCode):\n          this.dialog.signalingStateRollback();\n          this.dialog.reinviteUserAgentClient = undefined; // ACK was handled by transaction\n\n          if (this.delegate && this.delegate.onRedirect) {\n            this.delegate.onRedirect({\n              message: message\n            });\n          }\n\n          break;\n\n        case /^[4-6][0-9]{2}$/.test(statusCode):\n          this.dialog.signalingStateRollback();\n          this.dialog.reinviteUserAgentClient = undefined; // ACK was handled by transaction\n\n          if (this.delegate && this.delegate.onReject) {\n            this.delegate.onReject({\n              message: message\n            });\n          } else {// If a UA receives a non-2xx final response to a re-INVITE, the session\n            // parameters MUST remain unchanged, as if no re-INVITE had been issued.\n            // Note that, as stated in Section 12.2.1.2, if the non-2xx final\n            // response is a 481 (Call/Transaction Does Not Exist), or a 408\n            // (Request Timeout), or no response at all is received for the re-\n            // INVITE (that is, a timeout is returned by the INVITE client\n            // transaction), the UAC will terminate the dialog.\n            //\n            // If a UAC receives a 491 response to a re-INVITE, it SHOULD start a\n            // timer with a value T chosen as follows:\n            //\n            //    1. If the UAC is the owner of the Call-ID of the dialog ID\n            //       (meaning it generated the value), T has a randomly chosen value\n            //       between 2.1 and 4 seconds in units of 10 ms.\n            //\n            //    2. If the UAC is not the owner of the Call-ID of the dialog ID, T\n            //       has a randomly chosen value of between 0 and 2 seconds in units\n            //       of 10 ms.\n            //\n            // When the timer fires, the UAC SHOULD attempt the re-INVITE once more,\n            // if it still desires for that session modification to take place.  For\n            // example, if the call was already hung up with a BYE, the re-INVITE\n            // would not take place.\n            // https://tools.ietf.org/html/rfc3261#section-14.1\n            // FIXME: TODO: The above.\n          }\n\n          break;\n\n        default:\n          throw new Error(\"Invalid status code \".concat(statusCode));\n      }\n    }\n  }]);\n\n  return ReInviteUserAgentClient;\n}(UserAgentClient);","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/core/user-agents/re-invite-user-agent-client.js"],"names":["C","InviteClientTransaction","UserAgentClient","ReInviteUserAgentClient","dialog","delegate","options","message","createOutgoingRequestMessage","INVITE","userAgentCore","signalingStateTransition","reinviteUserAgentClient","authenticationGuard","statusCode","toString","Error","test","onTrying","onProgress","session","prack","onAccept","ack","outgoingAckRequest","signalingStateRollback","undefined","onRedirect","onReject"],"mappings":"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","sourcesContent":["import { C } from \"../messages\";\nimport { InviteClientTransaction } from \"../transactions\";\nimport { UserAgentClient } from \"./user-agent-client\";\n/**\n * Re-INVITE UAC.\n * @remarks\n * 14 Modifying an Existing Session\n * https://tools.ietf.org/html/rfc3261#section-14\n * 14.1 UAC Behavior\n * https://tools.ietf.org/html/rfc3261#section-14.1\n * @public\n */\nexport class ReInviteUserAgentClient extends UserAgentClient {\n    constructor(dialog, delegate, options) {\n        const message = dialog.createOutgoingRequestMessage(C.INVITE, options);\n        super(InviteClientTransaction, dialog.userAgentCore, message, delegate);\n        this.delegate = delegate;\n        dialog.signalingStateTransition(message);\n        // FIXME: TODO: next line obviously needs to be improved...\n        dialog.reinviteUserAgentClient = this; // let the dialog know re-invite request sent\n        this.dialog = dialog;\n    }\n    receiveResponse(message) {\n        if (!this.authenticationGuard(message, this.dialog)) {\n            return;\n        }\n        const statusCode = message.statusCode ? message.statusCode.toString() : \"\";\n        if (!statusCode) {\n            throw new Error(\"Response status code undefined.\");\n        }\n        switch (true) {\n            case /^100$/.test(statusCode):\n                if (this.delegate && this.delegate.onTrying) {\n                    this.delegate.onTrying({ message });\n                }\n                break;\n            case /^1[0-9]{2}$/.test(statusCode):\n                if (this.delegate && this.delegate.onProgress) {\n                    this.delegate.onProgress({\n                        message,\n                        session: this.dialog,\n                        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                        prack: (options) => {\n                            throw new Error(\"Unimplemented.\");\n                        }\n                    });\n                }\n                break;\n            case /^2[0-9]{2}$/.test(statusCode):\n                // Update dialog signaling state with offer/answer in body\n                this.dialog.signalingStateTransition(message);\n                if (this.delegate && this.delegate.onAccept) {\n                    this.delegate.onAccept({\n                        message,\n                        session: this.dialog,\n                        ack: (options) => {\n                            const outgoingAckRequest = this.dialog.ack(options);\n                            return outgoingAckRequest;\n                        }\n                    });\n                }\n                break;\n            case /^3[0-9]{2}$/.test(statusCode):\n                this.dialog.signalingStateRollback();\n                this.dialog.reinviteUserAgentClient = undefined; // ACK was handled by transaction\n                if (this.delegate && this.delegate.onRedirect) {\n                    this.delegate.onRedirect({ message });\n                }\n                break;\n            case /^[4-6][0-9]{2}$/.test(statusCode):\n                this.dialog.signalingStateRollback();\n                this.dialog.reinviteUserAgentClient = undefined; // ACK was handled by transaction\n                if (this.delegate && this.delegate.onReject) {\n                    this.delegate.onReject({ message });\n                }\n                else {\n                    // If a UA receives a non-2xx final response to a re-INVITE, the session\n                    // parameters MUST remain unchanged, as if no re-INVITE had been issued.\n                    // Note that, as stated in Section 12.2.1.2, if the non-2xx final\n                    // response is a 481 (Call/Transaction Does Not Exist), or a 408\n                    // (Request Timeout), or no response at all is received for the re-\n                    // INVITE (that is, a timeout is returned by the INVITE client\n                    // transaction), the UAC will terminate the dialog.\n                    //\n                    // If a UAC receives a 491 response to a re-INVITE, it SHOULD start a\n                    // timer with a value T chosen as follows:\n                    //\n                    //    1. If the UAC is the owner of the Call-ID of the dialog ID\n                    //       (meaning it generated the value), T has a randomly chosen value\n                    //       between 2.1 and 4 seconds in units of 10 ms.\n                    //\n                    //    2. If the UAC is not the owner of the Call-ID of the dialog ID, T\n                    //       has a randomly chosen value of between 0 and 2 seconds in units\n                    //       of 10 ms.\n                    //\n                    // When the timer fires, the UAC SHOULD attempt the re-INVITE once more,\n                    // if it still desires for that session modification to take place.  For\n                    // example, if the call was already hung up with a BYE, the re-INVITE\n                    // would not take place.\n                    // https://tools.ietf.org/html/rfc3261#section-14.1\n                    // FIXME: TODO: The above.\n                }\n                break;\n            default:\n                throw new Error(`Invalid status code ${statusCode}`);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}