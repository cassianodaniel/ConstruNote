{"ast":null,"code":"import { parseGroup } from \"../utils/parseUtils\";\nexport default class GroupsBusiness {\n  constructor(api, settings) {\n    this.api = api;\n    this.settings = settings;\n    this.groups = void 0;\n\n    this.getGroups = () => {\n      return this.groups;\n    };\n\n    this.list = callback => {\n      this.api.getGroups({\n        paramsUrl: {\n          members: true,\n          limit: 5000\n        }\n      }, (apiGroups, err) => {\n        // Populando o Map de grupos\n        if (!err) {\n          if (!this.api) return;\n          this.populate(apiGroups);\n          callback(Array.from(this.groups.values()));\n        }\n      });\n    };\n\n    this.create = (group, callback) => {\n      if (!this.api) return;\n      this.settings.get(settings => {\n        const contactsId = group.contacts.map(contact => contact.id);\n        const body = {\n          name: group.name,\n          description: group.description,\n          members: contactsId,\n          domain: settings.sipDomain\n        };\n        this.api.createGroup({\n          body\n        }, (returnGroup, err) => {\n          if (err) return;\n          if (!this.api) return;\n          if (!returnGroup) return;\n          this.api.getGroup(returnGroup.id, {\n            paramsUrl: {\n              members: true\n            }\n          }, groupWithMember => {\n            const parsedGroup = parseGroup(groupWithMember);\n            this.groups.set(parsedGroup.groupId, parsedGroup);\n            callback(parsedGroup);\n          });\n        });\n      });\n    };\n\n    this.groups = new Map();\n  }\n\n  populate(apiGroups) {\n    apiGroups.groups.forEach(group => {\n      this.groups.set(group.id, parseGroup(group));\n    });\n  }\n\n  setFavorite(favorited, callback) {\n    this.api.setFavoriteUser({\n      contactID: favorited.jid.split('@')[0],\n      contactType: favorited.jid.includes('@conference.') ? \"group\" : \"contact\",\n      favorite: favorited.favorite\n    }, callback);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Groups.ts"],"names":["parseGroup","GroupsBusiness","constructor","api","settings","groups","getGroups","list","callback","paramsUrl","members","limit","apiGroups","err","populate","Array","from","values","create","group","get","contactsId","contacts","map","contact","id","body","name","description","domain","sipDomain","createGroup","returnGroup","getGroup","groupWithMember","parsedGroup","set","groupId","Map","forEach","setFavorite","favorited","setFavoriteUser","contactID","jid","split","contactType","includes","favorite"],"mappings":"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","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport { FavoriteUserCallback } from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport IGroup from \"../../alias/IGroup\";\r\nimport IChat from \"../../alias/IChat\";\r\nimport IContact from \"../../alias/IContact\";\r\nimport INewGroup from \"../../alias/INewGroup\";\r\n\r\nimport { parseGroup } from \"../utils/parseUtils\";\r\nimport SettingsBusiness from \"./Settings\";\r\n\r\nexport interface NewGroupCallback {\r\n  (group: IGroup): void;\r\n}\r\nexport interface GroupsCallBack {\r\n  (groups: IGroup[]): void;\r\n}\r\nexport default interface GroupsBusiness {\r\n  getGroups(): Map<string, IGroup>;\r\n  list(callback: GroupsCallBack): void;\r\n  create(group: INewGroup, cb: NewGroupCallback): void;\r\n}\r\nexport default class GroupsBusiness {\r\n  public groups: Map<string, IGroup>;\r\n  constructor(private api: API, private settings: SettingsBusiness) {\r\n    this.groups = new Map<string, IGroup>();\r\n  }\r\n  getGroups = () => {\r\n    return this.groups;\r\n  };\r\n  list = (callback: GroupsCallBack) => {\r\n    this.api.getGroups(\r\n      { paramsUrl: { members: true, limit: 5000 } },\r\n      (apiGroups: any, err) => {\r\n        // Populando o Map de grupos\r\n        if (!err) {\r\n          if (!this.api) return;\r\n          this.populate(apiGroups);\r\n          callback(Array.from(this.groups.values()));\r\n        }\r\n      }\r\n    );\r\n  };\r\n  create = (group: INewGroup, callback: NewGroupCallback) => {\r\n    if (!this.api) return;\r\n    this.settings.get((settings) => {\r\n      const contactsId = group.contacts.map((contact) => contact.id);\r\n      const body = {\r\n        name: group.name,\r\n        description: group.description,\r\n        members: contactsId,\r\n        domain: settings.sipDomain,\r\n      };\r\n      this.api.createGroup({ body }, (returnGroup, err) => {\r\n        if (err) return;\r\n        if (!this.api) return;\r\n        if (!returnGroup) return;\r\n        this.api.getGroup(\r\n          returnGroup.id,\r\n          { paramsUrl: { members: true } },\r\n          (groupWithMember) => {\r\n            const parsedGroup = parseGroup(groupWithMember);\r\n            this.groups.set(parsedGroup.groupId, parsedGroup);\r\n            callback(parsedGroup);\r\n          }\r\n        );\r\n      });\r\n    });\r\n  };\r\n  populate(apiGroups: any) {\r\n    apiGroups.groups.forEach((group: any) => {\r\n      this.groups.set(group.id, parseGroup(group));\r\n    });\r\n  }\r\n  setFavorite(favorited: IChat | IGroup | IContact, callback: FavoriteUserCallback){\r\n    this.api.setFavoriteUser({\r\n      contactID: favorited.jid.split('@')[0],\r\n      contactType: favorited.jid.includes('@conference.') ? \"group\" : \"contact\",\r\n      favorite: favorited.favorite\r\n    }, callback)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}