{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { NameAddrHeader } from \"../core\";\n/**\n * A request to establish a {@link Session} elsewhere (incoming REFER).\n * @public\n */\n\nexport var Referral = /*#__PURE__*/function () {\n  /** @internal */\n  function Referral(incomingReferRequest, session) {\n    _classCallCheck(this, Referral);\n\n    this.incomingReferRequest = incomingReferRequest;\n    this.session = session;\n  }\n\n  _createClass(Referral, [{\n    key: \"accept\",\n\n    /** Accept the request. */\n    value: function accept() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        statusCode: 202\n      };\n      this.incomingReferRequest.accept(options);\n      return Promise.resolve();\n    }\n    /** Reject the request. */\n\n  }, {\n    key: \"reject\",\n    value: function reject(options) {\n      this.incomingReferRequest.reject(options);\n      return Promise.resolve();\n    }\n    /**\n     * Creates an inviter which may be used to send an out of dialog INVITE request.\n     *\n     * @remarks\n     * This a helper method to create an Inviter which will execute the referral\n     * of the `Session` which was referred. The appropriate headers are set and\n     * the referred `Session` is linked to the new `Session`. Note that only a\n     * single instance of the `Inviter` will be created and returned (if called\n     * more than once a reference to the same `Inviter` will be returned every time).\n     *\n     * @param options - Options bucket.\n     * @param modifiers - Session description handler modifiers.\n     */\n\n  }, {\n    key: \"makeInviter\",\n    value: function makeInviter(options) {\n      if (this.inviter) {\n        return this.inviter;\n      }\n\n      var targetURI = this.referTo.uri.clone();\n      targetURI.clearHeaders();\n      options = options || {};\n      var extraHeaders = (options.extraHeaders || []).slice();\n      var replaces = this.replaces;\n\n      if (replaces) {\n        // decodeURIComponent is a holdover from 2c086eb4. Not sure that it is actually necessary\n        extraHeaders.push(\"Replaces: \" + decodeURIComponent(replaces));\n      }\n\n      var referredBy = this.referredBy;\n\n      if (referredBy) {\n        extraHeaders.push(\"Referred-By: \" + referredBy);\n      }\n\n      options.extraHeaders = extraHeaders;\n      this.inviter = this.session.userAgent._makeInviter(targetURI, options);\n      this.inviter._referred = this.session;\n      this.session._referral = this.inviter;\n      return this.inviter;\n    }\n  }, {\n    key: \"referTo\",\n    get: function get() {\n      var referTo = this.incomingReferRequest.message.parseHeader(\"refer-to\");\n\n      if (!(referTo instanceof NameAddrHeader)) {\n        throw new Error(\"Failed to parse Refer-To header.\");\n      }\n\n      return referTo;\n    }\n  }, {\n    key: \"referredBy\",\n    get: function get() {\n      return this.incomingReferRequest.message.getHeader(\"referred-by\");\n    }\n  }, {\n    key: \"replaces\",\n    get: function get() {\n      return this.referTo.uri.getHeader(\"replaces\");\n    }\n    /** Incoming REFER request message. */\n\n  }, {\n    key: \"request\",\n    get: function get() {\n      return this.incomingReferRequest.message;\n    }\n  }]);\n\n  return Referral;\n}();","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/api/referral.js"],"names":["NameAddrHeader","Referral","incomingReferRequest","session","options","statusCode","accept","Promise","resolve","reject","inviter","targetURI","referTo","uri","clone","clearHeaders","extraHeaders","slice","replaces","push","decodeURIComponent","referredBy","userAgent","_makeInviter","_referred","_referral","message","parseHeader","Error","getHeader"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,SAA/B;AACA;AACA;AACA;AACA;;AACA,WAAaC,QAAb;AACI;AACA,oBAAYC,oBAAZ,EAAkCC,OAAlC,EAA2C;AAAA;;AACvC,SAAKD,oBAAL,GAA4BA,oBAA5B;AACA,SAAKC,OAAL,GAAeA,OAAf;AACH;;AALL;AAAA;;AAuBI;AAvBJ,6BAwB0C;AAAA,UAA/BC,OAA+B,uEAArB;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAqB;AAClC,WAAKH,oBAAL,CAA0BI,MAA1B,CAAiCF,OAAjC;AACA,aAAOG,OAAO,CAACC,OAAR,EAAP;AACH;AACD;;AA5BJ;AAAA;AAAA,2BA6BWJ,OA7BX,EA6BoB;AACZ,WAAKF,oBAAL,CAA0BO,MAA1B,CAAiCL,OAAjC;AACA,aAAOG,OAAO,CAACC,OAAR,EAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA7CA;AAAA;AAAA,gCA8CgBJ,OA9ChB,EA8CyB;AACjB,UAAI,KAAKM,OAAT,EAAkB;AACd,eAAO,KAAKA,OAAZ;AACH;;AACD,UAAMC,SAAS,GAAG,KAAKC,OAAL,CAAaC,GAAb,CAAiBC,KAAjB,EAAlB;AACAH,MAAAA,SAAS,CAACI,YAAV;AACAX,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,UAAMY,YAAY,GAAG,CAACZ,OAAO,CAACY,YAAR,IAAwB,EAAzB,EAA6BC,KAA7B,EAArB;AACA,UAAMC,QAAQ,GAAG,KAAKA,QAAtB;;AACA,UAAIA,QAAJ,EAAc;AACV;AACAF,QAAAA,YAAY,CAACG,IAAb,CAAkB,eAAeC,kBAAkB,CAACF,QAAD,CAAnD;AACH;;AACD,UAAMG,UAAU,GAAG,KAAKA,UAAxB;;AACA,UAAIA,UAAJ,EAAgB;AACZL,QAAAA,YAAY,CAACG,IAAb,CAAkB,kBAAkBE,UAApC;AACH;;AACDjB,MAAAA,OAAO,CAACY,YAAR,GAAuBA,YAAvB;AACA,WAAKN,OAAL,GAAe,KAAKP,OAAL,CAAamB,SAAb,CAAuBC,YAAvB,CAAoCZ,SAApC,EAA+CP,OAA/C,CAAf;AACA,WAAKM,OAAL,CAAac,SAAb,GAAyB,KAAKrB,OAA9B;AACA,WAAKA,OAAL,CAAasB,SAAb,GAAyB,KAAKf,OAA9B;AACA,aAAO,KAAKA,OAAZ;AACH;AApEL;AAAA;AAAA,wBAMkB;AACV,UAAME,OAAO,GAAG,KAAKV,oBAAL,CAA0BwB,OAA1B,CAAkCC,WAAlC,CAA8C,UAA9C,CAAhB;;AACA,UAAI,EAAEf,OAAO,YAAYZ,cAArB,CAAJ,EAA0C;AACtC,cAAM,IAAI4B,KAAJ,CAAU,kCAAV,CAAN;AACH;;AACD,aAAOhB,OAAP;AACH;AAZL;AAAA;AAAA,wBAaqB;AACb,aAAO,KAAKV,oBAAL,CAA0BwB,OAA1B,CAAkCG,SAAlC,CAA4C,aAA5C,CAAP;AACH;AAfL;AAAA;AAAA,wBAgBmB;AACX,aAAO,KAAKjB,OAAL,CAAaC,GAAb,CAAiBgB,SAAjB,CAA2B,UAA3B,CAAP;AACH;AACD;;AAnBJ;AAAA;AAAA,wBAoBkB;AACV,aAAO,KAAK3B,oBAAL,CAA0BwB,OAAjC;AACH;AAtBL;;AAAA;AAAA","sourcesContent":["import { NameAddrHeader } from \"../core\";\n/**\n * A request to establish a {@link Session} elsewhere (incoming REFER).\n * @public\n */\nexport class Referral {\n    /** @internal */\n    constructor(incomingReferRequest, session) {\n        this.incomingReferRequest = incomingReferRequest;\n        this.session = session;\n    }\n    get referTo() {\n        const referTo = this.incomingReferRequest.message.parseHeader(\"refer-to\");\n        if (!(referTo instanceof NameAddrHeader)) {\n            throw new Error(\"Failed to parse Refer-To header.\");\n        }\n        return referTo;\n    }\n    get referredBy() {\n        return this.incomingReferRequest.message.getHeader(\"referred-by\");\n    }\n    get replaces() {\n        return this.referTo.uri.getHeader(\"replaces\");\n    }\n    /** Incoming REFER request message. */\n    get request() {\n        return this.incomingReferRequest.message;\n    }\n    /** Accept the request. */\n    accept(options = { statusCode: 202 }) {\n        this.incomingReferRequest.accept(options);\n        return Promise.resolve();\n    }\n    /** Reject the request. */\n    reject(options) {\n        this.incomingReferRequest.reject(options);\n        return Promise.resolve();\n    }\n    /**\n     * Creates an inviter which may be used to send an out of dialog INVITE request.\n     *\n     * @remarks\n     * This a helper method to create an Inviter which will execute the referral\n     * of the `Session` which was referred. The appropriate headers are set and\n     * the referred `Session` is linked to the new `Session`. Note that only a\n     * single instance of the `Inviter` will be created and returned (if called\n     * more than once a reference to the same `Inviter` will be returned every time).\n     *\n     * @param options - Options bucket.\n     * @param modifiers - Session description handler modifiers.\n     */\n    makeInviter(options) {\n        if (this.inviter) {\n            return this.inviter;\n        }\n        const targetURI = this.referTo.uri.clone();\n        targetURI.clearHeaders();\n        options = options || {};\n        const extraHeaders = (options.extraHeaders || []).slice();\n        const replaces = this.replaces;\n        if (replaces) {\n            // decodeURIComponent is a holdover from 2c086eb4. Not sure that it is actually necessary\n            extraHeaders.push(\"Replaces: \" + decodeURIComponent(replaces));\n        }\n        const referredBy = this.referredBy;\n        if (referredBy) {\n            extraHeaders.push(\"Referred-By: \" + referredBy);\n        }\n        options.extraHeaders = extraHeaders;\n        this.inviter = this.session.userAgent._makeInviter(targetURI, options);\n        this.inviter._referred = this.session;\n        this.session._referral = this.inviter;\n        return this.inviter;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}