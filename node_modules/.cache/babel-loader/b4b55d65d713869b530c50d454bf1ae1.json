{"ast":null,"code":"import PresenceStatus from \"../../enuns/PresenceStatus\";\nimport UserType from \"../../enuns/UserType\";\nimport { getContactName, getUserProfilePicture } from \"./formatUtils\";\nexport function getAttachmentType(extension) {\n  const booleans = {\n    isImageMessage: /jpe?g|png|gif|ico$/i.test(extension),\n    isAudioMessage: /ogg|mp3|wav|m4a|webm$/i.test(extension),\n    isVideoMessage: /mp4|avi|mov$/i.test(extension),\n    isFileMessage: true\n  };\n  booleans.isFileMessage = !booleans.isAudioMessage && !booleans.isImageMessage && !booleans.isVideoMessage;\n  return booleans;\n} //Groups\n\nexport const parseGroup = apiGroup => {\n  return {\n    groupId: apiGroup.id,\n    name: apiGroup.name,\n    description: apiGroup.description,\n    jid: `${apiGroup.id}@conference.${apiGroup.domainName}`,\n    profilePicture: apiGroup.imageUrl,\n    favorite: apiGroup.favorite,\n    added: apiGroup.added,\n    members: apiGroup.members.map(member => {\n      return {\n        userId: member.id,\n        name: member.name,\n        profilePicture: member.imageUrl,\n        role: member.admin ? UserType.ADMIN : UserType.USER,\n        status: PresenceStatus.ONLINE\n      };\n    })\n  };\n}; //Contacts\n\nexport const parseContact = apiContact => {\n  return {\n    id: apiContact.id,\n    jid: apiContact.imId,\n    name: apiContact.name,\n    department: apiContact.department,\n    domain: apiContact.domainName,\n    number: apiContact.extension,\n    profilePicture: apiContact.imageUrl,\n    email: apiContact.email,\n    blocked: apiContact.blocked,\n    added: apiContact.added,\n    status: PresenceStatus.ONLINE,\n    favorite: apiContact.favorite\n  };\n}; //Chats\n\nexport const parseChats = (chats, groups, contacts, user) => {\n  const parsedChats = [];\n  chats.forEach(chat => {\n    const parsedChat = parseChat(chat, groups, contacts, user);\n    if (parsedChat) parsedChats.push(parsedChat);\n  });\n  return parsedChats;\n};\nexport const parseChat = (chat, groups, contacts, user) => {\n  const chatUser = groups.get(chat.id) || contacts.get(chat.id);\n\n  if (chatUser) {\n    var _ref, _ref2;\n\n    const chatMessage = chat.messages[0];\n    const iChat = {\n      id: chat.id,\n      jid: chatUser.jid,\n      name: chat.name,\n      email: (_ref = chatUser) === null || _ref === void 0 ? void 0 : _ref.email,\n      department: (_ref2 = chatUser) === null || _ref2 === void 0 ? void 0 : _ref2.department,\n      profilePicture: (chatUser === null || chatUser === void 0 ? void 0 : chatUser.profilePicture) || (chatUser === null || chatUser === void 0 ? void 0 : chatUser.profilePicture),\n      status: \"status\" in chatUser ? chatUser.status : undefined,\n      unRead: chat.unreadMessages,\n      chatType: chat.chatType,\n      members: chatUser.members,\n      inputMessage: \"\",\n      isTyping: false,\n      messages: [parseMessage(chatMessage, contacts, groups, user)],\n      favorite: (chatUser === null || chatUser === void 0 ? void 0 : chatUser.favorite) || (chatUser === null || chatUser === void 0 ? void 0 : chatUser.favorite) || false,\n      added: chatUser.added\n    };\n    return iChat;\n  }\n}; //Messages\n\nexport const parseMessage = (chatMessage, contacts, groups, user) => {\n  var _contacts$get, _content$reply_to, _content$reply_to2;\n\n  let booleans = {\n    isImageMessage: chatMessage.isImage,\n    isFileMessage: chatMessage.isFile && !chatMessage.isImage && !chatMessage.isVideo && !chatMessage.isAudio,\n    isVideoMessage: chatMessage.isVideo,\n    isAudioMessage: chatMessage.isAudio\n  };\n\n  if (isUrl(chatMessage.message)) {\n    booleans = getUrlBooleans(chatMessage.message);\n  }\n\n  let content = {};\n\n  if (chatMessage.content) {\n    let newContent = chatMessage.content.replace(/'/g, '\"');\n\n    try {\n      content = JSON.parse(newContent);\n    } catch (e) {\n      content = {};\n    }\n\n    if (typeof content !== \"object\") {\n      content = {};\n    }\n\n    if (content.reply_to) content.reply_to = content.reply_to.split(\"@\")[0];\n  }\n\n  const msg = {\n    id: chatMessage.idXmpp,\n    userName: getContactName(chatMessage, contacts, groups, user),\n    userProfilePicture: getUserProfilePicture(chatMessage, contacts, groups, user),\n    message: chatMessage.message,\n    time: new Date(chatMessage.sentAt).toISOString(),\n    fileUrl: chatMessage.message,\n    toUser: chatMessage.to,\n    fromUser: chatMessage.from,\n    deliverStatus: chatMessage.deliveryStatus,\n    readStatus: chatMessage.readStatus,\n    deliverTimestamp: chatMessage.deliveryTimestamp || \"\",\n    readTimestamp: chatMessage.readTimestamp || \"\",\n    content: chatMessage.content,\n    contentType: chatMessage.contentType,\n    isReplyMessage: !!content.reply_msg,\n    isForwardMessage: !!(!content.reply_msg && content.reply_to && content.reply_msg_id),\n    ...booleans,\n    replyedMessage: content.reply_msg,\n    replyedMessageId: content.reply_msg_id,\n    replyedMessageTo: ((_contacts$get = contacts.get(((_content$reply_to = content.reply_to) === null || _content$reply_to === void 0 ? void 0 : _content$reply_to.split(\"@\")[0]) || \"\")) === null || _contacts$get === void 0 ? void 0 : _contacts$get.name) || user.id === ((_content$reply_to2 = content.reply_to) === null || _content$reply_to2 === void 0 ? void 0 : _content$reply_to2.split(\"@\")[0]) ? user.name : \"Participant\"\n  };\n  return msg;\n};\nexport function isUrl(str) {\n  var expression = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;\n  var regex = new RegExp(expression);\n  return !!str.match(regex);\n}\nexport function getUrlBooleans(msg) {\n  const splittedMsg = msg.split(\"/\");\n  const booleans = {\n    isImageMessage: /\\.(jpe?g|png|gif|ico)$/i.test(msg),\n    isVideoMessage: /\\.(mp4|avi)$/i.test(msg),\n    isAudioMessage: /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg),\n    isFileMessage: splittedMsg[splittedMsg.length - 1].includes(\".\") && splittedMsg.length > 1\n  };\n  booleans.isFileMessage = booleans.isFileMessage && !booleans.isImageMessage && !booleans.isVideoMessage && !booleans.isAudioMessage;\n  return booleans;\n}\nexport function getFileName(msg) {\n  const splittedMsg = msg.split(\"/\");\n  return splittedMsg[splittedMsg.length - 1];\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/utils/parseUtils.ts"],"names":["PresenceStatus","UserType","getContactName","getUserProfilePicture","getAttachmentType","extension","booleans","isImageMessage","test","isAudioMessage","isVideoMessage","isFileMessage","parseGroup","apiGroup","groupId","id","name","description","jid","domainName","profilePicture","imageUrl","favorite","added","members","map","member","userId","role","admin","ADMIN","USER","status","ONLINE","parseContact","apiContact","imId","department","domain","number","email","blocked","parseChats","chats","groups","contacts","user","parsedChats","forEach","chat","parsedChat","parseChat","push","chatUser","get","chatMessage","messages","iChat","undefined","unRead","unreadMessages","chatType","inputMessage","isTyping","parseMessage","isImage","isFile","isVideo","isAudio","isUrl","message","getUrlBooleans","content","newContent","replace","JSON","parse","e","reply_to","split","msg","idXmpp","userName","userProfilePicture","time","Date","sentAt","toISOString","fileUrl","toUser","to","fromUser","from","deliverStatus","deliveryStatus","readStatus","deliverTimestamp","deliveryTimestamp","readTimestamp","contentType","isReplyMessage","reply_msg","isForwardMessage","reply_msg_id","replyedMessage","replyedMessageId","replyedMessageTo","str","expression","regex","RegExp","match","splittedMsg","length","includes","getFileName"],"mappings":"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","sourcesContent":["import { Message } from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport IChat from \"../../alias/IChat\";\r\nimport IContact from \"../../alias/IContact\";\r\nimport IGroup from \"../../alias/IGroup\";\r\nimport IMessage from \"../../alias/IMessage\";\r\nimport IUser from \"../../alias/IUser\";\r\nimport PresenceStatus from \"../../enuns/PresenceStatus\";\r\nimport UserType from \"../../enuns/UserType\";\r\nimport { getContactName, getUserProfilePicture } from \"./formatUtils\";\r\n\r\ninterface MessageContent {\r\n  reply_to?: string;\r\n  reply_msg?: string;\r\n  reply_msg_id?: string;\r\n}\r\n\r\nexport function getAttachmentType(extension: string) {\r\n  const booleans = {\r\n    isImageMessage: /jpe?g|png|gif|ico$/i.test(extension),\r\n    isAudioMessage: /ogg|mp3|wav|m4a|webm$/i.test(extension),\r\n    isVideoMessage: /mp4|avi|mov$/i.test(extension),\r\n    isFileMessage: true,\r\n  };\r\n  booleans.isFileMessage =\r\n    !booleans.isAudioMessage &&\r\n    !booleans.isImageMessage &&\r\n    !booleans.isVideoMessage;\r\n  return booleans;\r\n}\r\n//Groups\r\nexport const parseGroup = (apiGroup: any) => {\r\n  return {\r\n    groupId: apiGroup.id,\r\n    name: apiGroup.name,\r\n    description: apiGroup.description,\r\n    jid: `${apiGroup.id}@conference.${apiGroup.domainName}`,\r\n    profilePicture: apiGroup.imageUrl,\r\n    favorite: apiGroup.favorite,\r\n    added: apiGroup.added,\r\n    members: apiGroup.members.map((member: any) => {\r\n      return {\r\n        userId: member.id,\r\n        name: member.name,\r\n        profilePicture: member.imageUrl,\r\n        role: member.admin ? UserType.ADMIN : UserType.USER,\r\n        status: PresenceStatus.ONLINE,\r\n      };\r\n    }),\r\n  };\r\n};\r\n//Contacts\r\nexport const parseContact = (apiContact: any) => {\r\n  return {\r\n    id: apiContact.id,\r\n    jid: apiContact.imId,\r\n    name: apiContact.name,\r\n    department: apiContact.department,\r\n    domain: apiContact.domainName,\r\n    number: apiContact.extension,\r\n    profilePicture: apiContact.imageUrl,\r\n    email: apiContact.email,\r\n    blocked: apiContact.blocked,\r\n    added: apiContact.added,\r\n    status: PresenceStatus.ONLINE,\r\n    favorite: apiContact.favorite,\r\n  };\r\n};\r\n//Chats\r\nexport const parseChats = (\r\n  chats: any[],\r\n  groups: Map<string, IGroup>,\r\n  contacts: Map<string, IContact>,\r\n  user: IUser\r\n): IChat[] => {\r\n  const parsedChats: IChat[] = [];\r\n  chats.forEach((chat) => {\r\n    const parsedChat = parseChat(chat, groups, contacts, user);\r\n    if (parsedChat) parsedChats.push(parsedChat);\r\n  });\r\n  return parsedChats;\r\n};\r\nexport const parseChat = (\r\n  chat: any,\r\n  groups: Map<string, IGroup>,\r\n  contacts: Map<string, IContact>,\r\n  user: IUser\r\n) => {\r\n  const chatUser = groups.get(chat.id) || contacts.get(chat.id);\r\n  if (chatUser) {\r\n    const chatMessage = chat.messages[0];\r\n    const iChat: IChat = {\r\n      id: chat.id,\r\n      jid: chatUser.jid,\r\n      name: chat.name,\r\n      email: (chatUser as IContact)?.email,\r\n      department: (chatUser as IContact)?.department,\r\n      profilePicture: chatUser?.profilePicture || chatUser?.profilePicture,\r\n      status: \"status\" in chatUser ? (chatUser as IContact).status : undefined,\r\n      unRead: chat.unreadMessages,\r\n      chatType: chat.chatType,\r\n      members: (chatUser as IGroup).members,\r\n      inputMessage: \"\",\r\n      isTyping: false,\r\n      messages: [parseMessage(chatMessage, contacts, groups, user)],\r\n      favorite: chatUser?.favorite || chatUser?.favorite || false,\r\n      added: chatUser.added,\r\n    };\r\n    return iChat;\r\n  }\r\n};\r\n//Messages\r\nexport const parseMessage = (\r\n  chatMessage: Message,\r\n  contacts: Map<string, IContact>,\r\n  groups: Map<string, IGroup>,\r\n  user: IUser\r\n) => {\r\n  let booleans = {\r\n    isImageMessage: chatMessage.isImage,\r\n    isFileMessage:\r\n      chatMessage.isFile &&\r\n      !chatMessage.isImage &&\r\n      !chatMessage.isVideo &&\r\n      !chatMessage.isAudio,\r\n    isVideoMessage: chatMessage.isVideo,\r\n    isAudioMessage: chatMessage.isAudio,\r\n  };\r\n  if (isUrl(chatMessage.message)) {\r\n    booleans = getUrlBooleans(chatMessage.message);\r\n  }\r\n  let content: MessageContent = {};\r\n  if (chatMessage.content) {\r\n    let newContent = chatMessage.content.replace(/'/g, '\"');\r\n    try {\r\n      content = JSON.parse(newContent);\r\n    } catch (e) {\r\n      content = {};\r\n    }\r\n    if (typeof content !== \"object\") {\r\n      content = {};\r\n    }\r\n    if (content.reply_to) content.reply_to = content.reply_to.split(\"@\")[0];\r\n  }\r\n  const msg: IMessage = {\r\n    id: chatMessage.idXmpp,\r\n    userName: getContactName(chatMessage, contacts, groups, user),\r\n    userProfilePicture: getUserProfilePicture(\r\n      chatMessage,\r\n      contacts,\r\n      groups,\r\n      user\r\n    ),\r\n    message: chatMessage.message,\r\n    time: new Date(chatMessage.sentAt).toISOString(),\r\n    fileUrl: chatMessage.message,\r\n    toUser: chatMessage.to,\r\n    fromUser: chatMessage.from,\r\n    deliverStatus: chatMessage.deliveryStatus,\r\n    readStatus: chatMessage.readStatus,\r\n    deliverTimestamp: chatMessage.deliveryTimestamp || \"\",\r\n    readTimestamp: chatMessage.readTimestamp || \"\",\r\n    content: chatMessage.content,\r\n    contentType: chatMessage.contentType,\r\n    isReplyMessage: !!content.reply_msg,\r\n    isForwardMessage: !!(\r\n      !content.reply_msg &&\r\n      content.reply_to &&\r\n      content.reply_msg_id\r\n    ),\r\n    ...booleans,\r\n    replyedMessage: content.reply_msg,\r\n    replyedMessageId: content.reply_msg_id,\r\n    replyedMessageTo:\r\n      contacts.get(content.reply_to?.split(\"@\")[0] || \"\")?.name ||\r\n      user.id === content.reply_to?.split(\"@\")[0]\r\n        ? user.name\r\n        : \"Participant\",\r\n  };\r\n  return msg;\r\n};\r\nexport function isUrl(str: string) {\r\n  var expression = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;\r\n  var regex = new RegExp(expression);\r\n  return !!str.match(regex);\r\n}\r\nexport function getUrlBooleans(msg: string) {\r\n  const splittedMsg = msg.split(\"/\");\r\n  const booleans = {\r\n    isImageMessage: /\\.(jpe?g|png|gif|ico)$/i.test(msg),\r\n    isVideoMessage: /\\.(mp4|avi)$/i.test(msg),\r\n    isAudioMessage: /\\.(ogg|mp3|wav|m4a|webm)$/i.test(msg),\r\n    isFileMessage:\r\n      splittedMsg[splittedMsg.length - 1].includes(\".\") &&\r\n      splittedMsg.length > 1,\r\n  };\r\n  booleans.isFileMessage =\r\n    booleans.isFileMessage &&\r\n    !booleans.isImageMessage &&\r\n    !booleans.isVideoMessage &&\r\n    !booleans.isAudioMessage;\r\n  return booleans;\r\n}\r\nexport function getFileName(msg: string) {\r\n  const splittedMsg = msg.split(\"/\");\r\n  return splittedMsg[splittedMsg.length - 1];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}