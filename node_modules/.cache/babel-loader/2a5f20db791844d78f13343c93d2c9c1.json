{"ast":null,"code":"'use strict';\n\nvar _construct = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/construct\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar xid = require('@xmpp/id');\n\nvar StanzaError = require('@xmpp/middleware/lib/StanzaError');\n\nvar _require = require('@xmpp/events'),\n    Deferred = _require.Deferred;\n\nvar timeoutPromise = require('@xmpp/events').timeout;\n\nvar xml = require('@xmpp/xml');\n\nfunction isReply(_ref) {\n  var name = _ref.name,\n      type = _ref.type;\n  if (name !== 'iq') return false;\n  if (type !== 'error' && type !== 'result') return false;\n  return true;\n}\n\nvar IQCaller = /*#__PURE__*/function () {\n  function IQCaller(_ref2) {\n    var entity = _ref2.entity,\n        middleware = _ref2.middleware;\n\n    _classCallCheck(this, IQCaller);\n\n    this.handlers = new Map();\n    this.entity = entity;\n    this.middleware = middleware;\n  }\n\n  _createClass(IQCaller, [{\n    key: \"start\",\n    value: function start() {\n      this.middleware.use(this._route.bind(this));\n    }\n  }, {\n    key: \"_route\",\n    value: function _route(_ref3, next) {\n      var type = _ref3.type,\n          name = _ref3.name,\n          id = _ref3.id,\n          stanza = _ref3.stanza;\n      if (!isReply({\n        name: name,\n        type: type\n      })) return next();\n      var deferred = this.handlers.get(id);\n\n      if (!deferred) {\n        return next();\n      }\n\n      if (type === 'error') {\n        deferred.reject(StanzaError.fromElement(stanza.getChild('error')));\n      } else {\n        deferred.resolve(stanza);\n      }\n\n      this.handlers.delete(id);\n    }\n  }, {\n    key: \"request\",\n    value: function () {\n      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(stanza) {\n        var timeout,\n            deferred,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                timeout = _args.length > 1 && _args[1] !== undefined ? _args[1] : 30 * 1000;\n\n                if (!stanza.attrs.id) {\n                  stanza.attrs.id = xid();\n                }\n\n                deferred = new Deferred();\n                this.handlers.set(stanza.attrs.id, deferred);\n                _context.prev = 4;\n                _context.next = 7;\n                return this.entity.send(stanza);\n\n              case 7:\n                _context.next = 9;\n                return timeoutPromise(deferred.promise, timeout);\n\n              case 9:\n                _context.next = 15;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](4);\n                this.handlers.delete(stanza.attrs.id);\n                throw _context.t0;\n\n              case 15:\n                return _context.abrupt(\"return\", deferred.promise);\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 11]]);\n      }));\n\n      function request(_x) {\n        return _request.apply(this, arguments);\n      }\n\n      return request;\n    }()\n  }, {\n    key: \"_childRequest\",\n    value: function _childRequest(type, element, to) {\n      var name = element.name;\n      var xmlns = element.attrs.xmlns;\n\n      for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n        args[_key - 3] = arguments[_key];\n      }\n\n      return this.request.apply(this, [xml('iq', {\n        type: type,\n        to: to\n      }, element)].concat(args)).then(function (stanza) {\n        return stanza.getChild(name, xmlns);\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _len2,\n            args,\n            _key2,\n            _args2 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                  args[_key2] = _args2[_key2];\n                }\n\n                return _context2.abrupt(\"return\", this._childRequest.apply(this, ['get'].concat(args)));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function get() {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _len3,\n            args,\n            _key3,\n            _args3 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                for (_len3 = _args3.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                  args[_key3] = _args3[_key3];\n                }\n\n                return _context3.abrupt(\"return\", this._childRequest.apply(this, ['set'].concat(args)));\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function set() {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }()\n  }]);\n\n  return IQCaller;\n}();\n\nmodule.exports = function iqCaller() {\n  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    args[_key4] = arguments[_key4];\n  }\n\n  var iqCaller = _construct(IQCaller, args);\n\n  iqCaller.start();\n  return iqCaller;\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/iq/caller.js"],"names":["xid","require","StanzaError","Deferred","timeoutPromise","timeout","xml","isReply","name","type","IQCaller","entity","middleware","handlers","Map","use","_route","bind","next","id","stanza","deferred","get","reject","fromElement","getChild","resolve","delete","attrs","set","send","promise","element","to","xmlns","args","request","then","_childRequest","module","exports","iqCaller","start"],"mappings":"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","sourcesContent":["'use strict'\n\nconst xid = require('@xmpp/id')\nconst StanzaError = require('@xmpp/middleware/lib/StanzaError')\nconst {Deferred} = require('@xmpp/events')\nconst timeoutPromise = require('@xmpp/events').timeout\nconst xml = require('@xmpp/xml')\n\nfunction isReply({name, type}) {\n  if (name !== 'iq') return false\n  if (type !== 'error' && type !== 'result') return false\n  return true\n}\n\nclass IQCaller {\n  constructor({entity, middleware}) {\n    this.handlers = new Map()\n    this.entity = entity\n    this.middleware = middleware\n  }\n\n  start() {\n    this.middleware.use(this._route.bind(this))\n  }\n\n  _route({type, name, id, stanza}, next) {\n    if (!isReply({name, type})) return next()\n\n    const deferred = this.handlers.get(id)\n\n    if (!deferred) {\n      return next()\n    }\n\n    if (type === 'error') {\n      deferred.reject(StanzaError.fromElement(stanza.getChild('error')))\n    } else {\n      deferred.resolve(stanza)\n    }\n\n    this.handlers.delete(id)\n  }\n\n  async request(stanza, timeout = 30 * 1000) {\n    if (!stanza.attrs.id) {\n      stanza.attrs.id = xid()\n    }\n\n    const deferred = new Deferred()\n    this.handlers.set(stanza.attrs.id, deferred)\n\n    try {\n      await this.entity.send(stanza)\n      await timeoutPromise(deferred.promise, timeout)\n    } catch (err) {\n      this.handlers.delete(stanza.attrs.id)\n      throw err\n    }\n\n    return deferred.promise\n  }\n\n  _childRequest(type, element, to, ...args) {\n    const {name} = element\n    const {xmlns} = element.attrs\n    return this.request(xml('iq', {type, to}, element), ...args).then(stanza =>\n      stanza.getChild(name, xmlns)\n    )\n  }\n\n  async get(...args) {\n    return this._childRequest('get', ...args)\n  }\n\n  async set(...args) {\n    return this._childRequest('set', ...args)\n  }\n}\n\nmodule.exports = function iqCaller(...args) {\n  const iqCaller = new IQCaller(...args)\n  iqCaller.start()\n  return iqCaller\n}\n"]},"metadata":{},"sourceType":"script"}