{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar escaping = require('./escaping');\n/**\n * JID implements\n * - XMPP addresses according to RFC6122\n * - XEP-0106: JID Escaping\n *\n * @see http://tools.ietf.org/html/rfc6122#section-2\n * @see http://xmpp.org/extensions/xep-0106.html\n */\n\n\nvar JID = /*#__PURE__*/function () {\n  function JID(local, domain, resource) {\n    _classCallCheck(this, JID);\n\n    if (typeof domain !== 'string' || !domain) {\n      throw new TypeError(\"Invalid domain.\");\n    }\n\n    this.setDomain(domain);\n    this.setLocal(typeof local === 'string' ? local : '');\n    this.setResource(typeof resource === 'string' ? resource : '');\n  }\n\n  _createClass(JID, [{\n    key: Symbol.toPrimitive,\n    value: function value(hint) {\n      if (hint === 'number') {\n        return NaN;\n      }\n\n      return this.toString();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(unescape) {\n      var s = this._domain;\n\n      if (this._local) {\n        s = this.getLocal(unescape) + '@' + s;\n      }\n\n      if (this._resource) {\n        s = s + '/' + this._resource;\n      }\n\n      return s;\n    }\n    /**\n     * Convenience method to distinguish users\n     * */\n\n  }, {\n    key: \"bare\",\n    value: function bare() {\n      if (this._resource) {\n        return new JID(this._local, this._domain, null);\n      }\n\n      return this;\n    }\n    /**\n     * Comparison function\n     * */\n\n  }, {\n    key: \"equals\",\n    value: function equals(other) {\n      return this._local === other._local && this._domain === other._domain && this._resource === other._resource;\n    }\n    /**\n     * http://xmpp.org/rfcs/rfc6122.html#addressing-localpart\n     * */\n\n  }, {\n    key: \"setLocal\",\n    value: function setLocal(local, escape) {\n      escape = escape || escaping.detect(local);\n\n      if (escape) {\n        local = escaping.escape(local);\n      }\n\n      this._local = local && local.toLowerCase();\n      return this;\n    }\n  }, {\n    key: \"getLocal\",\n    value: function getLocal(unescape) {\n      unescape = unescape || false;\n      var local = null;\n\n      if (unescape) {\n        local = escaping.unescape(this._local);\n      } else {\n        local = this._local;\n      }\n\n      return local;\n    }\n    /**\n     * http://xmpp.org/rfcs/rfc6122.html#addressing-domain\n     */\n\n  }, {\n    key: \"setDomain\",\n    value: function setDomain(domain) {\n      this._domain = domain.toLowerCase();\n      return this;\n    }\n  }, {\n    key: \"getDomain\",\n    value: function getDomain() {\n      return this._domain;\n    }\n    /**\n     * http://xmpp.org/rfcs/rfc6122.html#addressing-resourcepart\n     */\n\n  }, {\n    key: \"setResource\",\n    value: function setResource(resource) {\n      this._resource = resource;\n      return this;\n    }\n  }, {\n    key: \"getResource\",\n    value: function getResource() {\n      return this._resource;\n    }\n  }]);\n\n  return JID;\n}();\n\nObject.defineProperty(JID.prototype, 'local', {\n  get: JID.prototype.getLocal,\n  set: JID.prototype.setLocal\n});\nObject.defineProperty(JID.prototype, 'domain', {\n  get: JID.prototype.getDomain,\n  set: JID.prototype.setDomain\n});\nObject.defineProperty(JID.prototype, 'resource', {\n  get: JID.prototype.getResource,\n  set: JID.prototype.setResource\n});\nmodule.exports = JID;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/jid/lib/JID.js"],"names":["escaping","require","JID","local","domain","resource","TypeError","setDomain","setLocal","setResource","Symbol","toPrimitive","hint","NaN","toString","unescape","s","_domain","_local","getLocal","_resource","other","escape","detect","toLowerCase","Object","defineProperty","prototype","get","set","getDomain","getResource","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst escaping = require('./escaping')\n\n/**\n * JID implements\n * - XMPP addresses according to RFC6122\n * - XEP-0106: JID Escaping\n *\n * @see http://tools.ietf.org/html/rfc6122#section-2\n * @see http://xmpp.org/extensions/xep-0106.html\n */\nclass JID {\n  constructor(local, domain, resource) {\n    if (typeof domain !== 'string' || !domain) {\n      throw new TypeError(`Invalid domain.`)\n    }\n\n    this.setDomain(domain)\n    this.setLocal(typeof local === 'string' ? local : '')\n    this.setResource(typeof resource === 'string' ? resource : '')\n  }\n\n  [Symbol.toPrimitive](hint) {\n    if (hint === 'number') {\n      return NaN\n    }\n\n    return this.toString()\n  }\n\n  toString(unescape) {\n    let s = this._domain\n    if (this._local) {\n      s = this.getLocal(unescape) + '@' + s\n    }\n\n    if (this._resource) {\n      s = s + '/' + this._resource\n    }\n\n    return s\n  }\n\n  /**\n   * Convenience method to distinguish users\n   * */\n  bare() {\n    if (this._resource) {\n      return new JID(this._local, this._domain, null)\n    }\n\n    return this\n  }\n\n  /**\n   * Comparison function\n   * */\n  equals(other) {\n    return (\n      this._local === other._local &&\n      this._domain === other._domain &&\n      this._resource === other._resource\n    )\n  }\n\n  /**\n   * http://xmpp.org/rfcs/rfc6122.html#addressing-localpart\n   * */\n  setLocal(local, escape) {\n    escape = escape || escaping.detect(local)\n\n    if (escape) {\n      local = escaping.escape(local)\n    }\n\n    this._local = local && local.toLowerCase()\n    return this\n  }\n\n  getLocal(unescape) {\n    unescape = unescape || false\n    let local = null\n\n    if (unescape) {\n      local = escaping.unescape(this._local)\n    } else {\n      local = this._local\n    }\n\n    return local\n  }\n\n  /**\n   * http://xmpp.org/rfcs/rfc6122.html#addressing-domain\n   */\n  setDomain(domain) {\n    this._domain = domain.toLowerCase()\n    return this\n  }\n\n  getDomain() {\n    return this._domain\n  }\n\n  /**\n   * http://xmpp.org/rfcs/rfc6122.html#addressing-resourcepart\n   */\n  setResource(resource) {\n    this._resource = resource\n    return this\n  }\n\n  getResource() {\n    return this._resource\n  }\n}\n\nObject.defineProperty(JID.prototype, 'local', {\n  get: JID.prototype.getLocal,\n  set: JID.prototype.setLocal,\n})\n\nObject.defineProperty(JID.prototype, 'domain', {\n  get: JID.prototype.getDomain,\n  set: JID.prototype.setDomain,\n})\n\nObject.defineProperty(JID.prototype, 'resource', {\n  get: JID.prototype.getResource,\n  set: JID.prototype.setResource,\n})\n\nmodule.exports = JID\n"]},"metadata":{},"sourceType":"script"}