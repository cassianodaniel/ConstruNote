{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ChatBody.tsx\";\nimport React, { useState, useEffect } from \"react\";\nimport SimpleBar from \"simplebar-react\";\nimport { Spinner } from \"reactstrap\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport ChatMessage from \"./ChatMessage\";\nconst scrollableNodeRef = React.createRef();\n\nconst ChatBody = () => {\n  const {\n    activeChat\n  } = useChat();\n  const [showButtonBottom, setShowButtonBottom] = useState(false);\n\n  const onScroll = ev => {\n    var _ev$target, _ev$target2;\n\n    if ((ev === null || ev === void 0 ? void 0 : (_ev$target = ev.target) === null || _ev$target === void 0 ? void 0 : _ev$target.scrollTop) <= (ev === null || ev === void 0 ? void 0 : (_ev$target2 = ev.target) === null || _ev$target2 === void 0 ? void 0 : _ev$target2.scrollHeight) - 1000) {\n      setShowButtonBottom(true);\n    } else {\n      setShowButtonBottom(false);\n    }\n  };\n\n  const scrolltoBottom = () => {\n    var _scrollableNodeRef$cu;\n\n    (_scrollableNodeRef$cu = scrollableNodeRef.current) === null || _scrollableNodeRef$cu === void 0 ? void 0 : _scrollableNodeRef$cu.scrollTo({\n      top: 99999999,\n      behavior: \"smooth\"\n    });\n    setShowButtonBottom(false);\n  };\n\n  const checkScroll = () => {\n    scrolltoBottom();\n\n    if (scrollableNodeRef === null || scrollableNodeRef === void 0 ? void 0 : scrollableNodeRef.current) {\n      scrollableNodeRef.current.onscroll = onScroll;\n    }\n  };\n\n  const checkLoading = () => {\n    if (!activeChat.messageLoaded) {\n      setTimeout(scrolltoBottom, 500);\n    }\n  };\n\n  useEffect(checkLoading, [activeChat.messageLoaded]);\n  useEffect(checkScroll, [activeChat]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SimpleBar, {\n    style: {\n      maxHeight: \"100%\"\n    },\n    className: \"chat-conversation p-3 p-lg-4\",\n    id: \"messages\",\n    scrollableNodeProps: {\n      ref: scrollableNodeRef\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, activeChat.messageLoaded ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"d-flex justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  })) : /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"list-unstyled mb-0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, activeChat.messages.map((message, key) => /*#__PURE__*/React.createElement(ChatMessage, {\n    activeChat: activeChat,\n    message: message,\n    key: key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  })))), showButtonBottom && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"btn-chat-down\",\n    onClick: scrolltoBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"ri-arrow-down-s-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default ChatBody;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ChatBody.tsx"],"names":["React","useState","useEffect","SimpleBar","Spinner","useChat","ChatMessage","scrollableNodeRef","createRef","ChatBody","activeChat","showButtonBottom","setShowButtonBottom","onScroll","ev","target","scrollTop","scrollHeight","scrolltoBottom","current","scrollTo","top","behavior","checkScroll","onscroll","checkLoading","messageLoaded","setTimeout","maxHeight","ref","messages","map","message","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport { Spinner } from \"reactstrap\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport ChatMessage from \"./ChatMessage\";\r\n\r\nconst scrollableNodeRef = React.createRef<HTMLDivElement>();\r\n\r\nconst ChatBody: React.FC = () => {\r\n  const { activeChat } = useChat();\r\n  const [showButtonBottom, setShowButtonBottom] = useState(false);\r\n\r\n  const onScroll = (ev: any) => {\r\n    if (ev?.target?.scrollTop <= ev?.target?.scrollHeight - 1000) {\r\n      setShowButtonBottom(true);\r\n    } else {\r\n      setShowButtonBottom(false);\r\n    }\r\n  };\r\n\r\n  const scrolltoBottom = () => {\r\n    scrollableNodeRef.current?.scrollTo({\r\n      top: 99999999,\r\n      behavior: \"smooth\",\r\n    });\r\n    setShowButtonBottom(false);\r\n  };\r\n\r\n  const checkScroll = () => {\r\n    scrolltoBottom();\r\n    if (scrollableNodeRef?.current) {\r\n      scrollableNodeRef.current.onscroll = onScroll;\r\n    }\r\n  };\r\n\r\n  const checkLoading = () => {\r\n    if (!activeChat.messageLoaded) {\r\n      setTimeout(scrolltoBottom, 500);\r\n    }\r\n  };\r\n\r\n  useEffect(checkLoading, [activeChat.messageLoaded]);\r\n  useEffect(checkScroll, [activeChat]);\r\n\r\n  return (\r\n    <>\r\n      <SimpleBar\r\n        style={{ maxHeight: \"100%\" }}\r\n        className=\"chat-conversation p-3 p-lg-4\"\r\n        id=\"messages\"\r\n        scrollableNodeProps={{ ref: scrollableNodeRef }}\r\n      >\r\n        {activeChat.messageLoaded ? (\r\n          <div className=\"d-flex justify-content-center\">\r\n            <Spinner color=\"primary\" />\r\n          </div>\r\n        ) : (\r\n          <ul className=\"list-unstyled mb-0\">\r\n            {activeChat.messages.map((message, key) => (\r\n              <ChatMessage\r\n                activeChat={activeChat}\r\n                message={message}\r\n                key={key}\r\n              />\r\n            ))}\r\n          </ul>\r\n        )}\r\n      </SimpleBar>\r\n      {showButtonBottom && (\r\n        <div className=\"btn-chat-down\" onClick={scrolltoBottom}>\r\n          <i className=\"ri-arrow-down-s-line\"></i>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatBody;\r\n"]},"metadata":{},"sourceType":"module"}