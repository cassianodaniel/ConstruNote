{"ast":null,"code":"import io from \"socket.io-client\";\nimport { getAuthorization } from \"./utils/localStorageUtils\"; // COMMANDS\n\nexport const commands = {\n  tmute: (conferenceId, memberId) => `conference ${conferenceId} tmute ${memberId}`,\n  tvmute: (conferenceId, memberId) => `conference ${conferenceId} tvmute ${memberId}`,\n  kick: (conferenceId, memberId) => `conference ${conferenceId} kick ${memberId}`,\n  vidFloor: (conferenceId, memberId) => `conference ${conferenceId} vid-floor ${memberId}`,\n  muteNonMod: conferenceId => `conference ${conferenceId} mute non_moderator`,\n  vmuteNonMod: conferenceId => `conference ${conferenceId} vmute non_moderator`,\n  listLayouts: conferenceId => `conference ${conferenceId} vid-layout list`,\n  setLayout: (conferenceId, layoutName) => `conference ${conferenceId} vid-layout ${layoutName}`\n};\nexport let ConferenceEvents;\n\n(function (ConferenceEvents) {\n  ConferenceEvents[\"UPDATE\"] = \"UPDATE\";\n  ConferenceEvents[\"REMOVE\"] = \"REMOVE\";\n})(ConferenceEvents || (ConferenceEvents = {}));\n\nexport default class SquadEvenstCommunicator {\n  constructor(settings) {\n    this.settings = settings;\n    this.currentSocket = void 0;\n    this.eventCallback = void 0;\n\n    this.connect = (conferencesId, eventCallback) => {\n      this.eventCallback = eventCallback;\n      if (this.currentSocket) this.disconnect();\n      const auth = getAuthorization();\n      this.settings.get(s => {\n        this.currentSocket = io(\n        /*s.eventServerUrl*/\n        \"https://app.squad.us/\", {\n          query: {\n            access_token: auth.access_token,\n            api_url: auth.baseUrl\n          }\n        });\n        this.currentSocket.on(\"connect\", () => {\n          conferencesId.forEach(conferenceId => {\n            var _this$currentSocket;\n\n            console.log(conferenceId);\n            (_this$currentSocket = this.currentSocket) === null || _this$currentSocket === void 0 ? void 0 : _this$currentSocket.emit(\"enterRoom\", conferenceId.split(\"@\")[0]);\n          });\n        });\n        this.currentSocket.on(\"update\", data => {\n          console.log(data);\n          data = typeof data === \"string\" ? JSON.parse(data) : data;\n          this.eventCallback && this.eventCallback(ConferenceEvents.UPDATE, data);\n        });\n      });\n    };\n\n    this.updateEventCallback = eventCB => {\n      this.eventCallback = eventCB;\n    };\n\n    this.sendCommand = (conferenceId, command, extraParam) => {\n      var _this$currentSocket2;\n\n      const mountCommand = commands[command];\n      let commandStr;\n\n      if ([\"tmute\", \"tvmute\", \"kick\", \"vidFloor\", \"setLayout\"].includes(command) && extraParam) {\n        commandStr = mountCommand(conferenceId, extraParam);\n      } else {\n        commandStr = mountCommand(conferenceId, null);\n      }\n\n      (_this$currentSocket2 = this.currentSocket) === null || _this$currentSocket2 === void 0 ? void 0 : _this$currentSocket2.emit(\"update\", commandStr);\n    };\n\n    this.disconnect = () => {\n      var _this$currentSocket3, _this$currentSocket4;\n\n      (_this$currentSocket3 = this.currentSocket) === null || _this$currentSocket3 === void 0 ? void 0 : _this$currentSocket3.removeAllListeners();\n      (_this$currentSocket4 = this.currentSocket) === null || _this$currentSocket4 === void 0 ? void 0 : _this$currentSocket4.close();\n      this.currentSocket = undefined;\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadEventsCommunicator.ts"],"names":["io","getAuthorization","commands","tmute","conferenceId","memberId","tvmute","kick","vidFloor","muteNonMod","vmuteNonMod","listLayouts","setLayout","layoutName","ConferenceEvents","SquadEvenstCommunicator","constructor","settings","currentSocket","eventCallback","connect","conferencesId","disconnect","auth","get","s","query","access_token","api_url","baseUrl","on","forEach","console","log","emit","split","data","JSON","parse","UPDATE","updateEventCallback","eventCB","sendCommand","command","extraParam","mountCommand","commandStr","includes","removeAllListeners","close","undefined"],"mappings":"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","sourcesContent":["import SettingsBusiness from \"./business/Settings\";\r\nimport io from \"socket.io-client\";\r\nimport { Socket } from \"socket.io-client\";\r\nimport { getAuthorization } from \"./utils/localStorageUtils\";\r\n// COMMANDS\r\nexport const commands = {\r\n  tmute: (conferenceId: string, memberId: number) =>\r\n    `conference ${conferenceId} tmute ${memberId}`,\r\n  tvmute: (conferenceId: string, memberId: number) =>\r\n    `conference ${conferenceId} tvmute ${memberId}`,\r\n  kick: (conferenceId: string, memberId: number) =>\r\n    `conference ${conferenceId} kick ${memberId}`,\r\n  vidFloor: (conferenceId: string, memberId: number) =>\r\n    `conference ${conferenceId} vid-floor ${memberId}`,\r\n  muteNonMod: (conferenceId: string) =>\r\n    `conference ${conferenceId} mute non_moderator`,\r\n  vmuteNonMod: (conferenceId: string) =>\r\n    `conference ${conferenceId} vmute non_moderator`,\r\n  listLayouts: (conferenceId: string) =>\r\n    `conference ${conferenceId} vid-layout list`,\r\n  setLayout: (conferenceId: string, layoutName: string) =>\r\n    `conference ${conferenceId} vid-layout ${layoutName}`,\r\n};\r\nexport type Commands =\r\n  | \"tmute\"\r\n  | \"tvmute\"\r\n  | \"muteNonMod\"\r\n  | \"vmuteNonMod\"\r\n  | \"kick\"\r\n  | \"vidFloor\"\r\n  | \"listLayouts\"\r\n  | \"setLayout\";\r\n\r\nexport enum ConferenceEvents {\r\n  UPDATE = \"UPDATE\",\r\n  REMOVE = \"REMOVE\",\r\n}\r\nexport interface ConferenceEvent {\r\n  sip_server_ip: string;\r\n  Caller_Name: string;\r\n  members: ConferenceEventData[];\r\n}\r\nexport interface ConferenceEventData {\r\n  Caller_Name: string;\r\n  Conference_Name: string;\r\n  Caller_Caller_ID_Name: string;\r\n  Video: boolean;\r\n  Hear: boolean;\r\n  See: boolean;\r\n  Speak: boolean;\r\n  Talking: boolean;\r\n  Floor: boolean;\r\n  \"Mute-Detect\": boolean;\r\n  Hold: boolean;\r\n  \"Member-ID\": number;\r\n  \"Member-Type\": \"moderator\" | \"participant\";\r\n  \"Member-Ghost\": boolean;\r\n  Action:\r\n    | \"add-member\"\r\n    | \"floor-change\"\r\n    | \"video-floor-change\"\r\n    | \"mute-member\"\r\n    | \"unmute-member\"\r\n    | \"vmute-member\"\r\n    | \"unvmute-member\"\r\n    | \"start-talking\"\r\n    | \"stop-talking\"\r\n    | \"del-member\";\r\n}\r\ninterface EventCallback {\r\n  (event: ConferenceEvents, data: ConferenceEvent): void;\r\n}\r\n\r\nexport default interface SquadEventsCommunicator {}\r\nexport default class SquadEvenstCommunicator {\r\n  public currentSocket: typeof Socket | undefined;\r\n  private eventCallback: EventCallback | undefined;\r\n  constructor(private settings: SettingsBusiness) {}\r\n  connect = (conferencesId: string[], eventCallback: EventCallback) => {\r\n    this.eventCallback = eventCallback;\r\n    if (this.currentSocket) this.disconnect();\r\n    const auth = getAuthorization();\r\n    this.settings.get((s) => {\r\n      this.currentSocket = io(/*s.eventServerUrl*/ \"https://app.squad.us/\", {\r\n        query: {\r\n          access_token: auth.access_token,\r\n          api_url: auth.baseUrl,\r\n        },\r\n      });\r\n      this.currentSocket.on(\"connect\", () => {\r\n        conferencesId.forEach((conferenceId) => {\r\n          console.log(conferenceId);\r\n          this.currentSocket?.emit(\"enterRoom\", conferenceId.split(\"@\")[0]);\r\n        });\r\n      });\r\n      this.currentSocket.on(\"update\", (data: string | ConferenceEvent) => {\r\n        console.log(data);\r\n        data = typeof data === \"string\" ? JSON.parse(data) : data;\r\n        this.eventCallback &&\r\n          this.eventCallback(ConferenceEvents.UPDATE, data as ConferenceEvent);\r\n      });\r\n    });\r\n  };\r\n  updateEventCallback = (eventCB: EventCallback) => {\r\n    this.eventCallback = eventCB;\r\n  };\r\n  sendCommand = (\r\n    conferenceId: string,\r\n    command: Commands,\r\n    extraParam?: string\r\n  ) => {\r\n    const mountCommand = commands[command];\r\n    let commandStr;\r\n    if (\r\n      [\"tmute\", \"tvmute\", \"kick\", \"vidFloor\", \"setLayout\"].includes(command) &&\r\n      extraParam\r\n    ) {\r\n      commandStr = mountCommand(conferenceId, extraParam as never);\r\n    } else {\r\n      commandStr = mountCommand(conferenceId, null as never);\r\n    }\r\n    this.currentSocket?.emit(\"update\", commandStr);\r\n  };\r\n  disconnect = () => {\r\n    this.currentSocket?.removeAllListeners();\r\n    this.currentSocket?.close();\r\n    this.currentSocket = undefined;\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}