{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { C, fromBodyLegacy } from \"../core\";\nimport { EmitterImpl } from \"./emitter\";\nimport { PublisherState } from \"./publisher-state\";\n/**\n * A publisher publishes a publication (outgoing PUBLISH).\n * @public\n */\n\nexport var Publisher = /*#__PURE__*/function () {\n  /**\n   * Constructs a new instance of the `Publisher` class.\n   *\n   * @param userAgent - User agent. See {@link UserAgent} for details.\n   * @param targetURI - Request URI identifying the target of the message.\n   * @param eventType - The event type identifying the published document.\n   * @param options - Options bucket. See {@link PublisherOptions} for details.\n   */\n  function Publisher(userAgent, targetURI, eventType) {\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n    _classCallCheck(this, Publisher);\n\n    this.disposed = false;\n    /** The publication state. */\n\n    this._state = PublisherState.Initial; // state emitter\n\n    this._stateEventEmitter = new EmitterImpl();\n    this.userAgent = userAgent;\n    options.extraHeaders = (options.extraHeaders || []).slice();\n    options.contentType = options.contentType || \"text/plain\";\n\n    if (typeof options.expires !== \"number\" || options.expires % 1 !== 0) {\n      options.expires = 3600;\n    } else {\n      options.expires = Number(options.expires);\n    }\n\n    if (typeof options.unpublishOnClose !== \"boolean\") {\n      options.unpublishOnClose = true;\n    }\n\n    this.target = targetURI;\n    this.event = eventType;\n    this.options = options;\n    this.pubRequestExpires = options.expires;\n    this.logger = userAgent.getLogger(\"sip.Publisher\");\n    var params = options.params || {};\n    var fromURI = params.fromUri ? params.fromUri : userAgent.userAgentCore.configuration.aor;\n    var toURI = params.toUri ? params.toUri : targetURI;\n    var body;\n\n    if (options.body && options.contentType) {\n      var contentDisposition = \"render\";\n      var contentType = options.contentType;\n      var content = options.body;\n      body = {\n        contentDisposition: contentDisposition,\n        contentType: contentType,\n        content: content\n      };\n    }\n\n    var extraHeaders = (options.extraHeaders || []).slice(); // Build the request\n\n    this.request = userAgent.userAgentCore.makeOutgoingRequestMessage(C.PUBLISH, targetURI, fromURI, toURI, params, extraHeaders, body); // Identifier\n\n    this.id = this.target.toString() + \":\" + this.event; // Add to the user agent's publisher collection.\n\n    this.userAgent._publishers[this.id] = this;\n  }\n  /**\n   * Destructor.\n   */\n\n\n  _createClass(Publisher, [{\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.disposed) {\n        return Promise.resolve();\n      }\n\n      this.disposed = true;\n      this.logger.log(\"Publisher \".concat(this.id, \" in state \").concat(this.state, \" is being disposed\")); // Remove from the user agent's publisher collection\n\n      delete this.userAgent._publishers[this.id]; // Send unpublish, if requested\n\n      if (this.options.unpublishOnClose && this.state === PublisherState.Published) {\n        return this.unpublish();\n      }\n\n      if (this.publishRefreshTimer) {\n        clearTimeout(this.publishRefreshTimer);\n        this.publishRefreshTimer = undefined;\n      }\n\n      this.pubRequestBody = undefined;\n      this.pubRequestExpires = 0;\n      this.pubRequestEtag = undefined;\n      return Promise.resolve();\n    }\n    /** The publication state. */\n\n  }, {\n    key: \"publish\",\n\n    /**\n     * Publish.\n     * @param content - Body to publish\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    value: function publish(content) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      // Clean up before the run\n      if (this.publishRefreshTimer) {\n        clearTimeout(this.publishRefreshTimer);\n        this.publishRefreshTimer = undefined;\n      } // is Initial or Modify request\n\n\n      this.options.body = content;\n      this.pubRequestBody = this.options.body;\n\n      if (this.pubRequestExpires === 0) {\n        // This is Initial request after unpublish\n        if (this.options.expires === undefined) {\n          throw new Error(\"Expires undefined.\");\n        }\n\n        this.pubRequestExpires = this.options.expires;\n        this.pubRequestEtag = undefined;\n      }\n\n      this.sendPublishRequest();\n      return Promise.resolve();\n    }\n    /**\n     * Unpublish.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"unpublish\",\n    value: function unpublish() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      // Clean up before the run\n      if (this.publishRefreshTimer) {\n        clearTimeout(this.publishRefreshTimer);\n        this.publishRefreshTimer = undefined;\n      }\n\n      this.pubRequestBody = undefined;\n      this.pubRequestExpires = 0;\n\n      if (this.pubRequestEtag !== undefined) {\n        this.sendPublishRequest();\n      }\n\n      return Promise.resolve();\n    }\n    /** @internal */\n\n  }, {\n    key: \"receiveResponse\",\n    value: function receiveResponse(response) {\n      var _this = this;\n\n      var statusCode = response.statusCode || 0;\n\n      switch (true) {\n        case /^1[0-9]{2}$/.test(statusCode.toString()):\n          break;\n\n        case /^2[0-9]{2}$/.test(statusCode.toString()):\n          // Set SIP-Etag\n          if (response.hasHeader(\"SIP-ETag\")) {\n            this.pubRequestEtag = response.getHeader(\"SIP-ETag\");\n          } else {\n            this.logger.warn(\"SIP-ETag header missing in a 200-class response to PUBLISH\");\n          } // Update Expire\n\n\n          if (response.hasHeader(\"Expires\")) {\n            var expires = Number(response.getHeader(\"Expires\"));\n\n            if (typeof expires === \"number\" && expires >= 0 && expires <= this.pubRequestExpires) {\n              this.pubRequestExpires = expires;\n            } else {\n              this.logger.warn(\"Bad Expires header in a 200-class response to PUBLISH\");\n            }\n          } else {\n            this.logger.warn(\"Expires header missing in a 200-class response to PUBLISH\");\n          }\n\n          if (this.pubRequestExpires !== 0) {\n            // Schedule refresh\n            this.publishRefreshTimer = setTimeout(function () {\n              return _this.refreshRequest();\n            }, this.pubRequestExpires * 900);\n            this.stateTransition(PublisherState.Published);\n          } else {\n            this.stateTransition(PublisherState.Unpublished);\n          }\n\n          break;\n\n        case /^412$/.test(statusCode.toString()):\n          // 412 code means no matching ETag - possibly the PUBLISH expired\n          // Resubmit as new request, if the current request is not a \"remove\"\n          if (this.pubRequestEtag !== undefined && this.pubRequestExpires !== 0) {\n            this.logger.warn(\"412 response to PUBLISH, recovering\");\n            this.pubRequestEtag = undefined;\n\n            if (this.options.body === undefined) {\n              throw new Error(\"Body undefined.\");\n            }\n\n            this.publish(this.options.body);\n          } else {\n            this.logger.warn(\"412 response to PUBLISH, recovery failed\");\n            this.pubRequestExpires = 0;\n            this.stateTransition(PublisherState.Unpublished);\n            this.stateTransition(PublisherState.Terminated);\n          }\n\n          break;\n\n        case /^423$/.test(statusCode.toString()):\n          // 423 code means we need to adjust the Expires interval up\n          if (this.pubRequestExpires !== 0 && response.hasHeader(\"Min-Expires\")) {\n            var minExpires = Number(response.getHeader(\"Min-Expires\"));\n\n            if (typeof minExpires === \"number\" || minExpires > this.pubRequestExpires) {\n              this.logger.warn(\"423 code in response to PUBLISH, adjusting the Expires value and trying to recover\");\n              this.pubRequestExpires = minExpires;\n\n              if (this.options.body === undefined) {\n                throw new Error(\"Body undefined.\");\n              }\n\n              this.publish(this.options.body);\n            } else {\n              this.logger.warn(\"Bad 423 response Min-Expires header received for PUBLISH\");\n              this.pubRequestExpires = 0;\n              this.stateTransition(PublisherState.Unpublished);\n              this.stateTransition(PublisherState.Terminated);\n            }\n          } else {\n            this.logger.warn(\"423 response to PUBLISH, recovery failed\");\n            this.pubRequestExpires = 0;\n            this.stateTransition(PublisherState.Unpublished);\n            this.stateTransition(PublisherState.Terminated);\n          }\n\n          break;\n\n        default:\n          this.pubRequestExpires = 0;\n          this.stateTransition(PublisherState.Unpublished);\n          this.stateTransition(PublisherState.Terminated);\n          break;\n      } // Do the cleanup\n\n\n      if (this.pubRequestExpires === 0) {\n        if (this.publishRefreshTimer) {\n          clearTimeout(this.publishRefreshTimer);\n          this.publishRefreshTimer = undefined;\n        }\n\n        this.pubRequestBody = undefined;\n        this.pubRequestEtag = undefined;\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      var _this2 = this;\n\n      return this.userAgent.userAgentCore.publish(this.request, {\n        onAccept: function onAccept(response) {\n          return _this2.receiveResponse(response.message);\n        },\n        onProgress: function onProgress(response) {\n          return _this2.receiveResponse(response.message);\n        },\n        onRedirect: function onRedirect(response) {\n          return _this2.receiveResponse(response.message);\n        },\n        onReject: function onReject(response) {\n          return _this2.receiveResponse(response.message);\n        },\n        onTrying: function onTrying(response) {\n          return _this2.receiveResponse(response.message);\n        }\n      });\n    }\n  }, {\n    key: \"refreshRequest\",\n    value: function refreshRequest() {\n      // Clean up before the run\n      if (this.publishRefreshTimer) {\n        clearTimeout(this.publishRefreshTimer);\n        this.publishRefreshTimer = undefined;\n      } // This is Refresh request\n\n\n      this.pubRequestBody = undefined;\n\n      if (this.pubRequestEtag === undefined) {\n        throw new Error(\"Etag undefined\");\n      }\n\n      if (this.pubRequestExpires === 0) {\n        throw new Error(\"Expires zero\");\n      }\n\n      this.sendPublishRequest();\n    }\n  }, {\n    key: \"sendPublishRequest\",\n    value: function sendPublishRequest() {\n      var reqOptions = Object.assign({}, this.options);\n      reqOptions.extraHeaders = (this.options.extraHeaders || []).slice();\n      reqOptions.extraHeaders.push(\"Event: \" + this.event);\n      reqOptions.extraHeaders.push(\"Expires: \" + this.pubRequestExpires);\n\n      if (this.pubRequestEtag !== undefined) {\n        reqOptions.extraHeaders.push(\"SIP-If-Match: \" + this.pubRequestEtag);\n      }\n\n      var ruri = this.target;\n      var params = this.options.params || {};\n      var bodyAndContentType;\n\n      if (this.pubRequestBody !== undefined) {\n        if (this.options.contentType === undefined) {\n          throw new Error(\"Content type undefined.\");\n        }\n\n        bodyAndContentType = {\n          body: this.pubRequestBody,\n          contentType: this.options.contentType\n        };\n      }\n\n      var body;\n\n      if (bodyAndContentType) {\n        body = fromBodyLegacy(bodyAndContentType);\n      }\n\n      this.request = this.userAgent.userAgentCore.makeOutgoingRequestMessage(C.PUBLISH, ruri, params.fromUri ? params.fromUri : this.userAgent.userAgentCore.configuration.aor, params.toUri ? params.toUri : this.target, params, reqOptions.extraHeaders, body);\n      return this.send();\n    }\n    /**\n     * Transition publication state.\n     */\n\n  }, {\n    key: \"stateTransition\",\n    value: function stateTransition(newState) {\n      var _this3 = this;\n\n      var invalidTransition = function invalidTransition() {\n        throw new Error(\"Invalid state transition from \".concat(_this3._state, \" to \").concat(newState));\n      }; // Validate transition\n\n\n      switch (this._state) {\n        case PublisherState.Initial:\n          if (newState !== PublisherState.Published && newState !== PublisherState.Unpublished && newState !== PublisherState.Terminated) {\n            invalidTransition();\n          }\n\n          break;\n\n        case PublisherState.Published:\n          if (newState !== PublisherState.Unpublished && newState !== PublisherState.Terminated) {\n            invalidTransition();\n          }\n\n          break;\n\n        case PublisherState.Unpublished:\n          if (newState !== PublisherState.Published && newState !== PublisherState.Terminated) {\n            invalidTransition();\n          }\n\n          break;\n\n        case PublisherState.Terminated:\n          invalidTransition();\n          break;\n\n        default:\n          throw new Error(\"Unrecognized state.\");\n      } // Transition\n\n\n      this._state = newState;\n      this.logger.log(\"Publication transitioned to state \".concat(this._state));\n\n      this._stateEventEmitter.emit(this._state); // Dispose\n\n\n      if (newState === PublisherState.Terminated) {\n        this.dispose();\n      }\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._state;\n    }\n    /** Emits when the publisher state changes. */\n\n  }, {\n    key: \"stateChange\",\n    get: function get() {\n      return this._stateEventEmitter;\n    }\n  }]);\n\n  return Publisher;\n}();","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/api/publisher.js"],"names":["C","fromBodyLegacy","EmitterImpl","PublisherState","Publisher","userAgent","targetURI","eventType","options","disposed","_state","Initial","_stateEventEmitter","extraHeaders","slice","contentType","expires","Number","unpublishOnClose","target","event","pubRequestExpires","logger","getLogger","params","fromURI","fromUri","userAgentCore","configuration","aor","toURI","toUri","body","contentDisposition","content","request","makeOutgoingRequestMessage","PUBLISH","id","toString","_publishers","Promise","resolve","log","state","Published","unpublish","publishRefreshTimer","clearTimeout","undefined","pubRequestBody","pubRequestEtag","Error","sendPublishRequest","response","statusCode","test","hasHeader","getHeader","warn","setTimeout","refreshRequest","stateTransition","Unpublished","publish","Terminated","minExpires","onAccept","receiveResponse","message","onProgress","onRedirect","onReject","onTrying","reqOptions","Object","assign","push","ruri","bodyAndContentType","send","newState","invalidTransition","emit","dispose"],"mappings":"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","sourcesContent":["import { C, fromBodyLegacy } from \"../core\";\nimport { EmitterImpl } from \"./emitter\";\nimport { PublisherState } from \"./publisher-state\";\n/**\n * A publisher publishes a publication (outgoing PUBLISH).\n * @public\n */\nexport class Publisher {\n    /**\n     * Constructs a new instance of the `Publisher` class.\n     *\n     * @param userAgent - User agent. See {@link UserAgent} for details.\n     * @param targetURI - Request URI identifying the target of the message.\n     * @param eventType - The event type identifying the published document.\n     * @param options - Options bucket. See {@link PublisherOptions} for details.\n     */\n    constructor(userAgent, targetURI, eventType, options = {}) {\n        this.disposed = false;\n        /** The publication state. */\n        this._state = PublisherState.Initial;\n        // state emitter\n        this._stateEventEmitter = new EmitterImpl();\n        this.userAgent = userAgent;\n        options.extraHeaders = (options.extraHeaders || []).slice();\n        options.contentType = options.contentType || \"text/plain\";\n        if (typeof options.expires !== \"number\" || options.expires % 1 !== 0) {\n            options.expires = 3600;\n        }\n        else {\n            options.expires = Number(options.expires);\n        }\n        if (typeof options.unpublishOnClose !== \"boolean\") {\n            options.unpublishOnClose = true;\n        }\n        this.target = targetURI;\n        this.event = eventType;\n        this.options = options;\n        this.pubRequestExpires = options.expires;\n        this.logger = userAgent.getLogger(\"sip.Publisher\");\n        const params = options.params || {};\n        const fromURI = params.fromUri ? params.fromUri : userAgent.userAgentCore.configuration.aor;\n        const toURI = params.toUri ? params.toUri : targetURI;\n        let body;\n        if (options.body && options.contentType) {\n            const contentDisposition = \"render\";\n            const contentType = options.contentType;\n            const content = options.body;\n            body = {\n                contentDisposition,\n                contentType,\n                content\n            };\n        }\n        const extraHeaders = (options.extraHeaders || []).slice();\n        // Build the request\n        this.request = userAgent.userAgentCore.makeOutgoingRequestMessage(C.PUBLISH, targetURI, fromURI, toURI, params, extraHeaders, body);\n        // Identifier\n        this.id = this.target.toString() + \":\" + this.event;\n        // Add to the user agent's publisher collection.\n        this.userAgent._publishers[this.id] = this;\n    }\n    /**\n     * Destructor.\n     */\n    dispose() {\n        if (this.disposed) {\n            return Promise.resolve();\n        }\n        this.disposed = true;\n        this.logger.log(`Publisher ${this.id} in state ${this.state} is being disposed`);\n        // Remove from the user agent's publisher collection\n        delete this.userAgent._publishers[this.id];\n        // Send unpublish, if requested\n        if (this.options.unpublishOnClose && this.state === PublisherState.Published) {\n            return this.unpublish();\n        }\n        if (this.publishRefreshTimer) {\n            clearTimeout(this.publishRefreshTimer);\n            this.publishRefreshTimer = undefined;\n        }\n        this.pubRequestBody = undefined;\n        this.pubRequestExpires = 0;\n        this.pubRequestEtag = undefined;\n        return Promise.resolve();\n    }\n    /** The publication state. */\n    get state() {\n        return this._state;\n    }\n    /** Emits when the publisher state changes. */\n    get stateChange() {\n        return this._stateEventEmitter;\n    }\n    /**\n     * Publish.\n     * @param content - Body to publish\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    publish(content, options = {}) {\n        // Clean up before the run\n        if (this.publishRefreshTimer) {\n            clearTimeout(this.publishRefreshTimer);\n            this.publishRefreshTimer = undefined;\n        }\n        // is Initial or Modify request\n        this.options.body = content;\n        this.pubRequestBody = this.options.body;\n        if (this.pubRequestExpires === 0) {\n            // This is Initial request after unpublish\n            if (this.options.expires === undefined) {\n                throw new Error(\"Expires undefined.\");\n            }\n            this.pubRequestExpires = this.options.expires;\n            this.pubRequestEtag = undefined;\n        }\n        this.sendPublishRequest();\n        return Promise.resolve();\n    }\n    /**\n     * Unpublish.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    unpublish(options = {}) {\n        // Clean up before the run\n        if (this.publishRefreshTimer) {\n            clearTimeout(this.publishRefreshTimer);\n            this.publishRefreshTimer = undefined;\n        }\n        this.pubRequestBody = undefined;\n        this.pubRequestExpires = 0;\n        if (this.pubRequestEtag !== undefined) {\n            this.sendPublishRequest();\n        }\n        return Promise.resolve();\n    }\n    /** @internal */\n    receiveResponse(response) {\n        const statusCode = response.statusCode || 0;\n        switch (true) {\n            case /^1[0-9]{2}$/.test(statusCode.toString()):\n                break;\n            case /^2[0-9]{2}$/.test(statusCode.toString()):\n                // Set SIP-Etag\n                if (response.hasHeader(\"SIP-ETag\")) {\n                    this.pubRequestEtag = response.getHeader(\"SIP-ETag\");\n                }\n                else {\n                    this.logger.warn(\"SIP-ETag header missing in a 200-class response to PUBLISH\");\n                }\n                // Update Expire\n                if (response.hasHeader(\"Expires\")) {\n                    const expires = Number(response.getHeader(\"Expires\"));\n                    if (typeof expires === \"number\" && expires >= 0 && expires <= this.pubRequestExpires) {\n                        this.pubRequestExpires = expires;\n                    }\n                    else {\n                        this.logger.warn(\"Bad Expires header in a 200-class response to PUBLISH\");\n                    }\n                }\n                else {\n                    this.logger.warn(\"Expires header missing in a 200-class response to PUBLISH\");\n                }\n                if (this.pubRequestExpires !== 0) {\n                    // Schedule refresh\n                    this.publishRefreshTimer = setTimeout(() => this.refreshRequest(), this.pubRequestExpires * 900);\n                    this.stateTransition(PublisherState.Published);\n                }\n                else {\n                    this.stateTransition(PublisherState.Unpublished);\n                }\n                break;\n            case /^412$/.test(statusCode.toString()):\n                // 412 code means no matching ETag - possibly the PUBLISH expired\n                // Resubmit as new request, if the current request is not a \"remove\"\n                if (this.pubRequestEtag !== undefined && this.pubRequestExpires !== 0) {\n                    this.logger.warn(\"412 response to PUBLISH, recovering\");\n                    this.pubRequestEtag = undefined;\n                    if (this.options.body === undefined) {\n                        throw new Error(\"Body undefined.\");\n                    }\n                    this.publish(this.options.body);\n                }\n                else {\n                    this.logger.warn(\"412 response to PUBLISH, recovery failed\");\n                    this.pubRequestExpires = 0;\n                    this.stateTransition(PublisherState.Unpublished);\n                    this.stateTransition(PublisherState.Terminated);\n                }\n                break;\n            case /^423$/.test(statusCode.toString()):\n                // 423 code means we need to adjust the Expires interval up\n                if (this.pubRequestExpires !== 0 && response.hasHeader(\"Min-Expires\")) {\n                    const minExpires = Number(response.getHeader(\"Min-Expires\"));\n                    if (typeof minExpires === \"number\" || minExpires > this.pubRequestExpires) {\n                        this.logger.warn(\"423 code in response to PUBLISH, adjusting the Expires value and trying to recover\");\n                        this.pubRequestExpires = minExpires;\n                        if (this.options.body === undefined) {\n                            throw new Error(\"Body undefined.\");\n                        }\n                        this.publish(this.options.body);\n                    }\n                    else {\n                        this.logger.warn(\"Bad 423 response Min-Expires header received for PUBLISH\");\n                        this.pubRequestExpires = 0;\n                        this.stateTransition(PublisherState.Unpublished);\n                        this.stateTransition(PublisherState.Terminated);\n                    }\n                }\n                else {\n                    this.logger.warn(\"423 response to PUBLISH, recovery failed\");\n                    this.pubRequestExpires = 0;\n                    this.stateTransition(PublisherState.Unpublished);\n                    this.stateTransition(PublisherState.Terminated);\n                }\n                break;\n            default:\n                this.pubRequestExpires = 0;\n                this.stateTransition(PublisherState.Unpublished);\n                this.stateTransition(PublisherState.Terminated);\n                break;\n        }\n        // Do the cleanup\n        if (this.pubRequestExpires === 0) {\n            if (this.publishRefreshTimer) {\n                clearTimeout(this.publishRefreshTimer);\n                this.publishRefreshTimer = undefined;\n            }\n            this.pubRequestBody = undefined;\n            this.pubRequestEtag = undefined;\n        }\n    }\n    /** @internal */\n    send() {\n        return this.userAgent.userAgentCore.publish(this.request, {\n            onAccept: (response) => this.receiveResponse(response.message),\n            onProgress: (response) => this.receiveResponse(response.message),\n            onRedirect: (response) => this.receiveResponse(response.message),\n            onReject: (response) => this.receiveResponse(response.message),\n            onTrying: (response) => this.receiveResponse(response.message)\n        });\n    }\n    refreshRequest() {\n        // Clean up before the run\n        if (this.publishRefreshTimer) {\n            clearTimeout(this.publishRefreshTimer);\n            this.publishRefreshTimer = undefined;\n        }\n        // This is Refresh request\n        this.pubRequestBody = undefined;\n        if (this.pubRequestEtag === undefined) {\n            throw new Error(\"Etag undefined\");\n        }\n        if (this.pubRequestExpires === 0) {\n            throw new Error(\"Expires zero\");\n        }\n        this.sendPublishRequest();\n    }\n    sendPublishRequest() {\n        const reqOptions = Object.assign({}, this.options);\n        reqOptions.extraHeaders = (this.options.extraHeaders || []).slice();\n        reqOptions.extraHeaders.push(\"Event: \" + this.event);\n        reqOptions.extraHeaders.push(\"Expires: \" + this.pubRequestExpires);\n        if (this.pubRequestEtag !== undefined) {\n            reqOptions.extraHeaders.push(\"SIP-If-Match: \" + this.pubRequestEtag);\n        }\n        const ruri = this.target;\n        const params = this.options.params || {};\n        let bodyAndContentType;\n        if (this.pubRequestBody !== undefined) {\n            if (this.options.contentType === undefined) {\n                throw new Error(\"Content type undefined.\");\n            }\n            bodyAndContentType = {\n                body: this.pubRequestBody,\n                contentType: this.options.contentType\n            };\n        }\n        let body;\n        if (bodyAndContentType) {\n            body = fromBodyLegacy(bodyAndContentType);\n        }\n        this.request = this.userAgent.userAgentCore.makeOutgoingRequestMessage(C.PUBLISH, ruri, params.fromUri ? params.fromUri : this.userAgent.userAgentCore.configuration.aor, params.toUri ? params.toUri : this.target, params, reqOptions.extraHeaders, body);\n        return this.send();\n    }\n    /**\n     * Transition publication state.\n     */\n    stateTransition(newState) {\n        const invalidTransition = () => {\n            throw new Error(`Invalid state transition from ${this._state} to ${newState}`);\n        };\n        // Validate transition\n        switch (this._state) {\n            case PublisherState.Initial:\n                if (newState !== PublisherState.Published &&\n                    newState !== PublisherState.Unpublished &&\n                    newState !== PublisherState.Terminated) {\n                    invalidTransition();\n                }\n                break;\n            case PublisherState.Published:\n                if (newState !== PublisherState.Unpublished && newState !== PublisherState.Terminated) {\n                    invalidTransition();\n                }\n                break;\n            case PublisherState.Unpublished:\n                if (newState !== PublisherState.Published && newState !== PublisherState.Terminated) {\n                    invalidTransition();\n                }\n                break;\n            case PublisherState.Terminated:\n                invalidTransition();\n                break;\n            default:\n                throw new Error(\"Unrecognized state.\");\n        }\n        // Transition\n        this._state = newState;\n        this.logger.log(`Publication transitioned to state ${this._state}`);\n        this._stateEventEmitter.emit(this._state);\n        // Dispose\n        if (newState === PublisherState.Terminated) {\n            this.dispose();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}