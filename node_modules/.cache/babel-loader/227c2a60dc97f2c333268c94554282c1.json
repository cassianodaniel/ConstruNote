{"ast":null,"code":"import { Inviter, Registerer, SessionState // SIPExtension,\n, UserAgent, Web } from \"sip.js\";\nexport const tagsRange = [0, 1, 2, 3];\nexport default class SIP {\n  constructor(props) {\n    this.onInvite = invitation => {\n      if (this.activeCalls.size < tagsRange.length) {\n        const cb = session => {\n          this.activeCalls.set(invitation.id, invitation);\n          this.onReceiveCall(session, invitation);\n        };\n\n        invitation.stateChange.addListener(cb);\n        this.onReceiveCall(SessionState.Initial, invitation);\n      } else {\n        invitation.reject();\n      }\n    };\n\n    this.remoteVideoEnabled = session => {\n      var _ref, _ref$peerConnection;\n\n      let receivingVideo = false;\n      (_ref = session.sessionDescriptionHandler) === null || _ref === void 0 ? void 0 : (_ref$peerConnection = _ref.peerConnection) === null || _ref$peerConnection === void 0 ? void 0 : _ref$peerConnection.getReceivers().forEach(receiver => {\n        if (receiver.track) {\n          if (receiver.track.kind === \"video\") receivingVideo = true;\n        }\n      });\n      return receivingVideo;\n    };\n\n    this.localVideoEnabled = session => {\n      var _ref2, _ref3;\n\n      return !!((_ref2 = (_ref3 = session) === null || _ref3 === void 0 ? void 0 : _ref3.sessionDescriptionHandlerOptions.constraints) === null || _ref2 === void 0 ? void 0 : _ref2.video);\n    };\n\n    this.muteMic = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        var _sdh$peerConnection;\n\n        const sdh = call.sessionDescriptionHandler;\n        sdh === null || sdh === void 0 ? void 0 : (_sdh$peerConnection = sdh.peerConnection) === null || _sdh$peerConnection === void 0 ? void 0 : _sdh$peerConnection.getSenders().forEach(stream => {\n          var _stream$track;\n\n          if (((_stream$track = stream.track) === null || _stream$track === void 0 ? void 0 : _stream$track.kind) === \"audio\") stream.track.enabled = false;\n        });\n      }\n    };\n\n    this.unMuteMic = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        var _sdh$peerConnection2;\n\n        const sdh = call.sessionDescriptionHandler;\n        sdh === null || sdh === void 0 ? void 0 : (_sdh$peerConnection2 = sdh.peerConnection) === null || _sdh$peerConnection2 === void 0 ? void 0 : _sdh$peerConnection2.getSenders().forEach(stream => {\n          var _stream$track2;\n\n          if (((_stream$track2 = stream.track) === null || _stream$track2 === void 0 ? void 0 : _stream$track2.kind) === \"audio\") stream.track.enabled = true;\n        });\n      }\n    };\n\n    this.disableCam = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        if (this.localVideoEnabled(call)) {\n          var _sdh$peerConnection3;\n\n          const sdh = call.sessionDescriptionHandler;\n          sdh === null || sdh === void 0 ? void 0 : (_sdh$peerConnection3 = sdh.peerConnection) === null || _sdh$peerConnection3 === void 0 ? void 0 : _sdh$peerConnection3.getSenders().forEach(stream => {\n            var _stream$track3;\n\n            if (((_stream$track3 = stream.track) === null || _stream$track3 === void 0 ? void 0 : _stream$track3.kind) === \"video\") stream.track.enabled = false;\n          });\n        } else {\n          // TODO\n          console.log(\"re-invite\");\n        }\n      }\n    };\n\n    this.enableCam = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        if (this.localVideoEnabled(call)) {\n          var _sdh$peerConnection4;\n\n          const sdh = call.sessionDescriptionHandler;\n          sdh === null || sdh === void 0 ? void 0 : (_sdh$peerConnection4 = sdh.peerConnection) === null || _sdh$peerConnection4 === void 0 ? void 0 : _sdh$peerConnection4.getSenders().forEach(stream => {\n            var _stream$track4;\n\n            if (((_stream$track4 = stream.track) === null || _stream$track4 === void 0 ? void 0 : _stream$track4.kind) === \"video\") stream.track.enabled = true;\n          });\n        } else {\n          // TODO\n          console.log(\"re-invite\");\n        }\n      }\n    };\n\n    this.holdCall = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        const options = {\n          sessionDescriptionHandlerModifiers: [Web.holdModifier]\n        };\n        return call.invite(options);\n      }\n    };\n\n    this.unHoldCall = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        const options = {\n          sessionDescriptionHandlerModifiers: []\n        };\n\n        if (call) {\n          call.invite(options);\n        }\n      }\n    };\n\n    Object.assign(this, props);\n    this.makeSIP();\n    this.activeCalls = new Map();\n    this.usedTags = new Map();\n  }\n\n  makeSIP() {\n    const transportOptions = {\n      //   server: this.wsURL,\n      server: \"wss://test.citrussquad.com:7443\"\n    };\n    const uri = UserAgent.makeURI(`sip:${this.user}@${this.domain}`);\n    const userAgentOptions = {\n      authorizationUsername: this.user,\n      authorizationPassword: this.password,\n      transportOptions,\n      uri,\n      logBuiltinEnabled: true,\n      delegate: {\n        onInvite: this.onInvite\n      } // sipExtension100rel: SIPExtension.Required,\n\n    };\n    this.userAgent = new UserAgent(userAgentOptions);\n    this.registerer = new Registerer(this.userAgent);\n    this.userAgent.start().then(() => {\n      var _this$registerer, _this$registerer2;\n\n      (_this$registerer = this.registerer) === null || _this$registerer === void 0 ? void 0 : _this$registerer.register();\n      (_this$registerer2 = this.registerer) === null || _this$registerer2 === void 0 ? void 0 : _this$registerer2.stateChange.addListener(this.connectionCB);\n    });\n  }\n\n  invite(number, constraints = {\n    video: false,\n    audio: true\n  }) {\n    if (!(this.activeCalls.size >= tagsRange.length) && this.userAgent) {\n      const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\n      let newCall;\n\n      if (destination) {\n        newCall = new Inviter(this.userAgent, destination, {\n          sessionDescriptionHandlerOptions: {\n            constraints\n          } // inviteWithoutSdp: true,\n\n        });\n        this.activeCalls.set(newCall.id, newCall);\n      }\n\n      const currentInvite = newCall && this.activeCalls.get(newCall.id);\n\n      if (currentInvite) {\n        currentInvite.stateChange.addListener(state => {\n          if (this.activeCalls) this.onMakeCall(state, currentInvite);\n        });\n        currentInvite.invite();\n        this.onMakeCall(SessionState.Initial, currentInvite);\n      }\n    }\n  }\n\n  getAvailableTag() {\n    let tagsUsing = Array.from(this.usedTags.values());\n\n    for (const tagId of tagsRange) {\n      if (!tagsUsing.find(tgId => tgId === `remote-stream-${tagId}`)) {\n        return `remote-stream-${tagId}`;\n      }\n    }\n  }\n\n  endCall(session) {\n    switch (session.state) {\n      case SessionState.Initial:\n      case SessionState.Establishing:\n        if (session instanceof Inviter) {\n          // An unestablished outgoing session\n          session.cancel();\n        } else {\n          // An unestablished incoming session\n          session.reject();\n        }\n\n        break;\n\n      case SessionState.Established:\n        // An established session\n        session.bye();\n        break;\n\n      case SessionState.Terminating:\n      case SessionState.Terminated:\n        // Cannot terminate a session that is already terminated\n        break;\n    }\n  }\n\n  setupRemoteMedia(session, speakerId = \"\") {\n    var _ref5, _ref5$peerConnection;\n\n    const tagId = this.getAvailableTag();\n\n    if (!tagId) {\n      var _ref4;\n\n      (_ref4 = session) === null || _ref4 === void 0 ? void 0 : _ref4.reject();\n      return;\n    }\n\n    const mediaElement = document.getElementById(tagId);\n    this.usedTags.set(session.id, tagId);\n    const remoteStream = new MediaStream();\n    (_ref5 = session.sessionDescriptionHandler) === null || _ref5 === void 0 ? void 0 : (_ref5$peerConnection = _ref5.peerConnection) === null || _ref5$peerConnection === void 0 ? void 0 : _ref5$peerConnection.getReceivers().forEach(receiver => {\n      if (receiver.track) {\n        remoteStream.addTrack(receiver.track);\n      }\n    });\n\n    const playAudio = async (mediaElement, remoteStream, speakerId) => {\n      if (mediaElement) {\n        if (speakerId) {\n          try {\n            await mediaElement.setSinkId(speakerId);\n          } catch {}\n        }\n\n        mediaElement.srcObject = remoteStream;\n        mediaElement.play();\n      }\n    };\n\n    playAudio(mediaElement, remoteStream, speakerId);\n    return {\n      receivingVideo: this.remoteVideoEnabled(session),\n      tagId\n    };\n  }\n\n  cleanupMedia(callId) {\n    const tag = this.usedTags.get(callId);\n    if (!tag) return;\n    const mediaElement = document.getElementById(tag);\n\n    if (mediaElement) {\n      mediaElement.srcObject = null;\n      mediaElement.pause();\n      this.usedTags.delete(callId);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/voice/voicecommunicator.ts"],"names":["Inviter","Registerer","SessionState","UserAgent","Web","tagsRange","SIP","constructor","props","onInvite","invitation","activeCalls","size","length","cb","session","set","id","onReceiveCall","stateChange","addListener","Initial","reject","remoteVideoEnabled","receivingVideo","sessionDescriptionHandler","peerConnection","getReceivers","forEach","receiver","track","kind","localVideoEnabled","sessionDescriptionHandlerOptions","constraints","video","muteMic","callID","call","get","sdh","getSenders","stream","enabled","unMuteMic","disableCam","console","log","enableCam","holdCall","options","sessionDescriptionHandlerModifiers","holdModifier","invite","unHoldCall","Object","assign","makeSIP","Map","usedTags","transportOptions","server","uri","makeURI","user","domain","userAgentOptions","authorizationUsername","authorizationPassword","password","logBuiltinEnabled","delegate","userAgent","registerer","start","then","register","connectionCB","number","audio","destination","newCall","currentInvite","state","onMakeCall","getAvailableTag","tagsUsing","Array","from","values","tagId","find","tgId","endCall","Establishing","cancel","Established","bye","Terminating","Terminated","setupRemoteMedia","speakerId","mediaElement","document","getElementById","remoteStream","MediaStream","addTrack","playAudio","setSinkId","srcObject","play","cleanupMedia","callId","tag","pause","delete"],"mappings":"AAAA,SAEEA,OAFF,EAGEC,UAHF,EAOEC,YAPF,CAQE;AARF,EASEC,SATF,EAWEC,GAXF,QAYO,QAZP;AA+BA,OAAO,MAAMC,SAAmB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA5B;AAcP,eAAe,MAAMC,GAAN,CAAU;AACvBC,EAAAA,WAAW,CAACC,KAAD,EAAiC;AAAA,SAiE5CC,QAjE4C,GAiEhCC,UAAD,IAA4B;AACrC,UAAI,KAAKC,WAAL,CAAiBC,IAAjB,GAAwBP,SAAS,CAACQ,MAAtC,EAA8C;AAC5C,cAAMC,EAAE,GAAIC,OAAD,IAA2B;AACpC,eAAKJ,WAAL,CAAiBK,GAAjB,CAAqBN,UAAU,CAACO,EAAhC,EAAoCP,UAApC;AACA,eAAKQ,aAAL,CAAmBH,OAAnB,EAA4BL,UAA5B;AACD,SAHD;;AAIAA,QAAAA,UAAU,CAACS,WAAX,CAAuBC,WAAvB,CAAmCN,EAAnC;AACA,aAAKI,aAAL,CAAmBhB,YAAY,CAACmB,OAAhC,EAAyCX,UAAzC;AACD,OAPD,MAOO;AACLA,QAAAA,UAAU,CAACY,MAAX;AACD;AACF,KA5E2C;;AAAA,SA2I5CC,kBA3I4C,GA2ItBR,OAAD,IAAsB;AAAA;;AACzC,UAAIS,cAAc,GAAG,KAArB;AACA,cAACT,OAAO,CAACU,yBAAT,qEAAsEC,cAAtE,4EACIC,YADJ,GAEGC,OAFH,CAEYC,QAAD,IAAc;AACrB,YAAIA,QAAQ,CAACC,KAAb,EAAoB;AAClB,cAAID,QAAQ,CAACC,KAAT,CAAeC,IAAf,KAAwB,OAA5B,EAAqCP,cAAc,GAAG,IAAjB;AACtC;AACF,OANH;AAOA,aAAOA,cAAP;AACD,KArJ2C;;AAAA,SAsJ5CQ,iBAtJ4C,GAsJvBjB,OAAD,IAAsB;AAAA;;AACxC,aAAO,CAAC,oBAAGA,OAAH,0CAAE,MAAsBkB,gCAAtB,CACPC,WADK,0CAAC,MACkCC,KADnC,CAAR;AAED,KAzJ2C;;AAAA,SAsK5CC,OAtK4C,GAsKjCC,MAAD,IAAoB;AAC5B,YAAMC,IAAI,GAAG,KAAK3B,WAAL,CAAiB4B,GAAjB,CAAqBF,MAArB,CAAb;;AACA,UAAIC,IAAJ,EAAU;AAAA;;AACR,cAAME,GAAkC,GAAGF,IAAI,CAACb,yBAAhD;AACAe,QAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,mCAAAA,GAAG,CAAEd,cAAL,4EAAqBe,UAArB,GAAkCb,OAAlC,CAA2Cc,MAAD,IAAiB;AAAA;;AACzD,cAAI,kBAAAA,MAAM,CAACZ,KAAP,gEAAcC,IAAd,MAAuB,OAA3B,EAAoCW,MAAM,CAACZ,KAAP,CAAaa,OAAb,GAAuB,KAAvB;AACrC,SAFD;AAGD;AACF,KA9K2C;;AAAA,SA+K5CC,SA/K4C,GA+K/BP,MAAD,IAAoB;AAC9B,YAAMC,IAAI,GAAG,KAAK3B,WAAL,CAAiB4B,GAAjB,CAAqBF,MAArB,CAAb;;AACA,UAAIC,IAAJ,EAAU;AAAA;;AACR,cAAME,GAAkC,GAAGF,IAAI,CAACb,yBAAhD;AACAe,QAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,oCAAAA,GAAG,CAAEd,cAAL,8EAAqBe,UAArB,GAAkCb,OAAlC,CAA2Cc,MAAD,IAAiB;AAAA;;AACzD,cAAI,mBAAAA,MAAM,CAACZ,KAAP,kEAAcC,IAAd,MAAuB,OAA3B,EAAoCW,MAAM,CAACZ,KAAP,CAAaa,OAAb,GAAuB,IAAvB;AACrC,SAFD;AAGD;AACF,KAvL2C;;AAAA,SAwL5CE,UAxL4C,GAwL9BR,MAAD,IAAoB;AAC/B,YAAMC,IAAI,GAAG,KAAK3B,WAAL,CAAiB4B,GAAjB,CAAqBF,MAArB,CAAb;;AACA,UAAIC,IAAJ,EAAU;AACR,YAAI,KAAKN,iBAAL,CAAuBM,IAAvB,CAAJ,EAAkC;AAAA;;AAChC,gBAAME,GAAkC,GAAGF,IAAI,CAACb,yBAAhD;AACAe,UAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,oCAAAA,GAAG,CAAEd,cAAL,8EAAqBe,UAArB,GAAkCb,OAAlC,CAA2Cc,MAAD,IAAY;AAAA;;AACpD,gBAAI,mBAAAA,MAAM,CAACZ,KAAP,kEAAcC,IAAd,MAAuB,OAA3B,EAAoCW,MAAM,CAACZ,KAAP,CAAaa,OAAb,GAAuB,KAAvB;AACrC,WAFD;AAGD,SALD,MAKO;AACL;AACAG,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;AACF;AACF,KArM2C;;AAAA,SAsM5CC,SAtM4C,GAsM/BX,MAAD,IAAoB;AAC9B,YAAMC,IAAI,GAAG,KAAK3B,WAAL,CAAiB4B,GAAjB,CAAqBF,MAArB,CAAb;;AACA,UAAIC,IAAJ,EAAU;AACR,YAAI,KAAKN,iBAAL,CAAuBM,IAAvB,CAAJ,EAAkC;AAAA;;AAChC,gBAAME,GAAkC,GAAGF,IAAI,CAACb,yBAAhD;AACAe,UAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,oCAAAA,GAAG,CAAEd,cAAL,8EAAqBe,UAArB,GAAkCb,OAAlC,CAA2Cc,MAAD,IAAiB;AAAA;;AACzD,gBAAI,mBAAAA,MAAM,CAACZ,KAAP,kEAAcC,IAAd,MAAuB,OAA3B,EAAoCW,MAAM,CAACZ,KAAP,CAAaa,OAAb,GAAuB,IAAvB;AACrC,WAFD;AAGD,SALD,MAKO;AACL;AACAG,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;AACF;AACF,KAnN2C;;AAAA,SAoN5CE,QApN4C,GAoNhCZ,MAAD,IAAoB;AAC7B,YAAMC,IAAI,GAAG,KAAK3B,WAAL,CAAiB4B,GAAjB,CAAqBF,MAArB,CAAb;;AACA,UAAIC,IAAJ,EAAU;AACR,cAAMY,OAA6B,GAAG;AACpCC,UAAAA,kCAAkC,EAAE,CAAC/C,GAAG,CAACgD,YAAL;AADA,SAAtC;AAGA,eAAOd,IAAI,CAACe,MAAL,CAAYH,OAAZ,CAAP;AACD;AACF,KA5N2C;;AAAA,SA6N5CI,UA7N4C,GA6N9BjB,MAAD,IAAoB;AAC/B,YAAMC,IAAI,GAAG,KAAK3B,WAAL,CAAiB4B,GAAjB,CAAqBF,MAArB,CAAb;;AACA,UAAIC,IAAJ,EAAU;AACR,cAAMY,OAA6B,GAAG;AACpCC,UAAAA,kCAAkC,EAAE;AADA,SAAtC;;AAIA,YAAIb,IAAJ,EAAU;AACRA,UAAAA,IAAI,CAACe,MAAL,CAAYH,OAAZ;AACD;AACF;AACF,KAxO2C;;AAC1CK,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBhD,KAApB;AACA,SAAKiD,OAAL;AACA,SAAK9C,WAAL,GAAmB,IAAI+C,GAAJ,EAAnB;AACA,SAAKC,QAAL,GAAgB,IAAID,GAAJ,EAAhB;AACD;;AACDD,EAAAA,OAAO,GAAG;AACR,UAAMG,gBAAgB,GAAG;AACvB;AACAC,MAAAA,MAAM,EAAE;AAFe,KAAzB;AAIA,UAAMC,GAAG,GAAG3D,SAAS,CAAC4D,OAAV,CAAmB,OAAM,KAAKC,IAAK,IAAG,KAAKC,MAAO,EAAlD,CAAZ;AACA,UAAMC,gBAAkC,GAAG;AACzCC,MAAAA,qBAAqB,EAAE,KAAKH,IADa;AAEzCI,MAAAA,qBAAqB,EAAE,KAAKC,QAFa;AAGzCT,MAAAA,gBAHyC;AAIzCE,MAAAA,GAJyC;AAKzCQ,MAAAA,iBAAiB,EAAE,IALsB;AAMzCC,MAAAA,QAAQ,EAAE;AACR9D,QAAAA,QAAQ,EAAE,KAAKA;AADP,OAN+B,CASzC;;AATyC,KAA3C;AAWA,SAAK+D,SAAL,GAAiB,IAAIrE,SAAJ,CAAc+D,gBAAd,CAAjB;AACA,SAAKO,UAAL,GAAkB,IAAIxE,UAAJ,CAAe,KAAKuE,SAApB,CAAlB;AACA,SAAKA,SAAL,CAAeE,KAAf,GAAuBC,IAAvB,CAA4B,MAAM;AAAA;;AAChC,+BAAKF,UAAL,sEAAiBG,QAAjB;AACA,gCAAKH,UAAL,wEAAiBtD,WAAjB,CAA6BC,WAA7B,CAAyC,KAAKyD,YAA9C;AACD,KAHD;AAID;;AACDxB,EAAAA,MAAM,CACJyB,MADI,EAEJ5C,WAAmC,GAAG;AAAEC,IAAAA,KAAK,EAAE,KAAT;AAAgB4C,IAAAA,KAAK,EAAE;AAAvB,GAFlC,EAGJ;AACA,QAAI,EAAE,KAAKpE,WAAL,CAAiBC,IAAjB,IAAyBP,SAAS,CAACQ,MAArC,KAAgD,KAAK2D,SAAzD,EAAoE;AAClE,YAAMQ,WAAW,GAAG7E,SAAS,CAAC4D,OAAV,CAAmB,OAAMe,MAAO,IAAG,KAAKb,MAAO,EAA/C,CAApB;AACA,UAAIgB,OAAJ;;AACA,UAAID,WAAJ,EAAiB;AACfC,QAAAA,OAAO,GAAG,IAAIjF,OAAJ,CAAY,KAAKwE,SAAjB,EAA4BQ,WAA5B,EAAyC;AACjD/C,UAAAA,gCAAgC,EAAE;AAChCC,YAAAA;AADgC,WADe,CAIjD;;AAJiD,SAAzC,CAAV;AAMA,aAAKvB,WAAL,CAAiBK,GAAjB,CAAqBiE,OAAO,CAAChE,EAA7B,EAAiCgE,OAAjC;AACD;;AACD,YAAMC,aAAa,GACjBD,OAAO,IAAK,KAAKtE,WAAL,CAAiB4B,GAAjB,CAAqB0C,OAAO,CAAChE,EAA7B,CADd;;AAEA,UAAIiE,aAAJ,EAAmB;AACjBA,QAAAA,aAAa,CAAC/D,WAAd,CAA0BC,WAA1B,CAAuC+D,KAAD,IAAW;AAC/C,cAAI,KAAKxE,WAAT,EAAsB,KAAKyE,UAAL,CAAgBD,KAAhB,EAAuBD,aAAvB;AACvB,SAFD;AAGAA,QAAAA,aAAa,CAAC7B,MAAd;AACA,aAAK+B,UAAL,CAAgBlF,YAAY,CAACmB,OAA7B,EAAsC6D,aAAtC;AACD;AACF;AACF;;AACDG,EAAAA,eAAe,GAAG;AAChB,QAAIC,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAW,KAAK7B,QAAL,CAAc8B,MAAd,EAAX,CAAhB;;AACA,SAAK,MAAMC,KAAX,IAAoBrF,SAApB,EAA+B;AAC7B,UAAI,CAACiF,SAAS,CAACK,IAAV,CAAgBC,IAAD,IAAUA,IAAI,KAAM,iBAAgBF,KAAM,EAAzD,CAAL,EAAkE;AAChE,eAAQ,iBAAgBA,KAAM,EAA9B;AACD;AACF;AACF;;AAaDG,EAAAA,OAAO,CAAC9E,OAAD,EAAmB;AACxB,YAAQA,OAAO,CAACoE,KAAhB;AACE,WAAKjF,YAAY,CAACmB,OAAlB;AACA,WAAKnB,YAAY,CAAC4F,YAAlB;AACE,YAAI/E,OAAO,YAAYf,OAAvB,EAAgC;AAC9B;AACAe,UAAAA,OAAO,CAACgF,MAAR;AACD,SAHD,MAGO;AACL;AACChF,UAAAA,OAAD,CAAwBO,MAAxB;AACD;;AACD;;AACF,WAAKpB,YAAY,CAAC8F,WAAlB;AACE;AACAjF,QAAAA,OAAO,CAACkF,GAAR;AACA;;AACF,WAAK/F,YAAY,CAACgG,WAAlB;AACA,WAAKhG,YAAY,CAACiG,UAAlB;AACE;AACA;AAlBJ;AAoBD;;AACDC,EAAAA,gBAAgB,CAACrF,OAAD,EAAmBsF,SAAiB,GAAG,EAAvC,EAA2C;AAAA;;AACzD,UAAMX,KAAK,GAAG,KAAKL,eAAL,EAAd;;AACA,QAAI,CAACK,KAAL,EAAY;AAAA;;AACV,eAAC3E,OAAD,gDAAyBO,MAAzB;AACA;AACD;;AACD,UAAMgF,YAA8B,GAAGC,QAAQ,CAACC,cAAT,CACrCd,KADqC,CAAvC;AAGA,SAAK/B,QAAL,CAAc3C,GAAd,CAAkBD,OAAO,CAACE,EAA1B,EAA8ByE,KAA9B;AACA,UAAMe,YAAY,GAAG,IAAIC,WAAJ,EAArB;AAEA,aAAC3F,OAAO,CAACU,yBAAT,wEAAsEC,cAAtE,8EACIC,YADJ,GAEGC,OAFH,CAEYC,QAAD,IAAc;AACrB,UAAIA,QAAQ,CAACC,KAAb,EAAoB;AAClB2E,QAAAA,YAAY,CAACE,QAAb,CAAsB9E,QAAQ,CAACC,KAA/B;AACD;AACF,KANH;;AAOA,UAAM8E,SAAS,GAAG,OAChBN,YADgB,EAEhBG,YAFgB,EAGhBJ,SAHgB,KAIb;AACH,UAAIC,YAAJ,EAAkB;AAChB,YAAID,SAAJ,EAAe;AACb,cAAI;AACF,kBAAOC,YAAD,CAAsBO,SAAtB,CAAgCR,SAAhC,CAAN;AACD,WAFD,CAEE,MAAM,CAAE;AACX;;AACDC,QAAAA,YAAY,CAACQ,SAAb,GAAyBL,YAAzB;AACAH,QAAAA,YAAY,CAACS,IAAb;AACD;AACF,KAdD;;AAeAH,IAAAA,SAAS,CAACN,YAAD,EAAeG,YAAf,EAA6BJ,SAA7B,CAAT;AACA,WAAO;AACL7E,MAAAA,cAAc,EAAE,KAAKD,kBAAL,CAAwBR,OAAxB,CADX;AAEL2E,MAAAA;AAFK,KAAP;AAID;;AAgBDsB,EAAAA,YAAY,CAACC,MAAD,EAAiB;AAC3B,UAAMC,GAAG,GAAG,KAAKvD,QAAL,CAAcpB,GAAd,CAAkB0E,MAAlB,CAAZ;AACA,QAAI,CAACC,GAAL,EAAU;AACV,UAAMZ,YAA8B,GAAGC,QAAQ,CAACC,cAAT,CACrCU,GADqC,CAAvC;;AAGA,QAAIZ,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAACQ,SAAb,GAAyB,IAAzB;AACAR,MAAAA,YAAY,CAACa,KAAb;AACA,WAAKxD,QAAL,CAAcyD,MAAd,CAAqBH,MAArB;AACD;AACF;;AAtKsB","sourcesContent":["import {\r\n  Invitation,\r\n  Inviter,\r\n  Registerer,\r\n  RegistererState,\r\n  Session,\r\n  SessionInviteOptions,\r\n  SessionState,\r\n  // SIPExtension,\r\n  UserAgent,\r\n  UserAgentOptions,\r\n  Web,\r\n} from \"sip.js\";\r\ninterface ConnectionListenerCallback {\r\n  (data: RegistererState): void;\r\n}\r\ninterface MakeCallCallback {\r\n  (state: SessionState, inviter: Inviter): void;\r\n}\r\ninterface ReceiveCallCallback {\r\n  (state: SessionState, invitation: Invitation): void;\r\n}\r\ninterface SIPConstructorPropeties {\r\n  user: string;\r\n  password: string;\r\n  wsURL: string;\r\n  domain: string;\r\n  connectionCB: ConnectionListenerCallback;\r\n  onMakeCall: MakeCallCallback;\r\n  onReceiveCall: ReceiveCallCallback;\r\n}\r\nexport const tagsRange: number[] = [0, 1, 2, 3];\r\nexport default interface SIP {\r\n  user: string;\r\n  password: string;\r\n  wsURL: string;\r\n  domain: string;\r\n  connectionCB: ConnectionListenerCallback;\r\n  onMakeCall: MakeCallCallback;\r\n  onReceiveCall: ReceiveCallCallback;\r\n  userAgent?: UserAgent;\r\n  registerer?: Registerer;\r\n  activeCalls: Map<string, Session>;\r\n  usedTags: Map<string, string>;\r\n}\r\nexport default class SIP {\r\n  constructor(props: SIPConstructorPropeties) {\r\n    Object.assign(this, props);\r\n    this.makeSIP();\r\n    this.activeCalls = new Map<string, Session>();\r\n    this.usedTags = new Map<string, string>();\r\n  }\r\n  makeSIP() {\r\n    const transportOptions = {\r\n      //   server: this.wsURL,\r\n      server: \"wss://test.citrussquad.com:7443\",\r\n    };\r\n    const uri = UserAgent.makeURI(`sip:${this.user}@${this.domain}`);\r\n    const userAgentOptions: UserAgentOptions = {\r\n      authorizationUsername: this.user,\r\n      authorizationPassword: this.password,\r\n      transportOptions,\r\n      uri,\r\n      logBuiltinEnabled: true,\r\n      delegate: {\r\n        onInvite: this.onInvite,\r\n      },\r\n      // sipExtension100rel: SIPExtension.Required,\r\n    };\r\n    this.userAgent = new UserAgent(userAgentOptions);\r\n    this.registerer = new Registerer(this.userAgent);\r\n    this.userAgent.start().then(() => {\r\n      this.registerer?.register();\r\n      this.registerer?.stateChange.addListener(this.connectionCB);\r\n    });\r\n  }\r\n  invite(\r\n    number: string,\r\n    constraints: MediaStreamConstraints = { video: false, audio: true }\r\n  ) {\r\n    if (!(this.activeCalls.size >= tagsRange.length) && this.userAgent) {\r\n      const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\r\n      let newCall;\r\n      if (destination) {\r\n        newCall = new Inviter(this.userAgent, destination, {\r\n          sessionDescriptionHandlerOptions: {\r\n            constraints,\r\n          },\r\n          // inviteWithoutSdp: true,\r\n        });\r\n        this.activeCalls.set(newCall.id, newCall);\r\n      }\r\n      const currentInvite =\r\n        newCall && (this.activeCalls.get(newCall.id) as Inviter);\r\n      if (currentInvite) {\r\n        currentInvite.stateChange.addListener((state) => {\r\n          if (this.activeCalls) this.onMakeCall(state, currentInvite);\r\n        });\r\n        currentInvite.invite();\r\n        this.onMakeCall(SessionState.Initial, currentInvite);\r\n      }\r\n    }\r\n  }\r\n  getAvailableTag() {\r\n    let tagsUsing = Array.from(this.usedTags.values());\r\n    for (const tagId of tagsRange) {\r\n      if (!tagsUsing.find((tgId) => tgId === `remote-stream-${tagId}`)) {\r\n        return `remote-stream-${tagId}`;\r\n      }\r\n    }\r\n  }\r\n  onInvite = (invitation: Invitation) => {\r\n    if (this.activeCalls.size < tagsRange.length) {\r\n      const cb = (session: SessionState) => {\r\n        this.activeCalls.set(invitation.id, invitation);\r\n        this.onReceiveCall(session, invitation);\r\n      };\r\n      invitation.stateChange.addListener(cb);\r\n      this.onReceiveCall(SessionState.Initial, invitation);\r\n    } else {\r\n      invitation.reject();\r\n    }\r\n  };\r\n  endCall(session: Session) {\r\n    switch (session.state) {\r\n      case SessionState.Initial:\r\n      case SessionState.Establishing:\r\n        if (session instanceof Inviter) {\r\n          // An unestablished outgoing session\r\n          session.cancel();\r\n        } else {\r\n          // An unestablished incoming session\r\n          (session as Invitation).reject();\r\n        }\r\n        break;\r\n      case SessionState.Established:\r\n        // An established session\r\n        session.bye();\r\n        break;\r\n      case SessionState.Terminating:\r\n      case SessionState.Terminated:\r\n        // Cannot terminate a session that is already terminated\r\n        break;\r\n    }\r\n  }\r\n  setupRemoteMedia(session: Session, speakerId: string = \"\") {\r\n    const tagId = this.getAvailableTag();\r\n    if (!tagId) {\r\n      (session as Invitation)?.reject();\r\n      return;\r\n    }\r\n    const mediaElement: HTMLVideoElement = document.getElementById(\r\n      tagId\r\n    ) as HTMLVideoElement;\r\n    this.usedTags.set(session.id, tagId);\r\n    const remoteStream = new MediaStream();\r\n\r\n    (session.sessionDescriptionHandler as Web.SessionDescriptionHandler)?.peerConnection\r\n      ?.getReceivers()\r\n      .forEach((receiver) => {\r\n        if (receiver.track) {\r\n          remoteStream.addTrack(receiver.track);\r\n        }\r\n      });\r\n    const playAudio = async (\r\n      mediaElement: HTMLVideoElement,\r\n      remoteStream: MediaStream,\r\n      speakerId: string\r\n    ) => {\r\n      if (mediaElement) {\r\n        if (speakerId) {\r\n          try {\r\n            await (mediaElement as any).setSinkId(speakerId);\r\n          } catch {}\r\n        }\r\n        mediaElement.srcObject = remoteStream;\r\n        mediaElement.play();\r\n      }\r\n    };\r\n    playAudio(mediaElement, remoteStream, speakerId);\r\n    return {\r\n      receivingVideo: this.remoteVideoEnabled(session),\r\n      tagId,\r\n    };\r\n  }\r\n  remoteVideoEnabled = (session: Session) => {\r\n    let receivingVideo = false;\r\n    (session.sessionDescriptionHandler as Web.SessionDescriptionHandler)?.peerConnection\r\n      ?.getReceivers()\r\n      .forEach((receiver) => {\r\n        if (receiver.track) {\r\n          if (receiver.track.kind === \"video\") receivingVideo = true;\r\n        }\r\n      });\r\n    return receivingVideo;\r\n  };\r\n  localVideoEnabled = (session: Session) => {\r\n    return !!((session as Inviter)?.sessionDescriptionHandlerOptions\r\n      .constraints as MediaStreamConstraints)?.video;\r\n  };\r\n  cleanupMedia(callId: string) {\r\n    const tag = this.usedTags.get(callId);\r\n    if (!tag) return;\r\n    const mediaElement: HTMLVideoElement = document.getElementById(\r\n      tag\r\n    ) as HTMLVideoElement;\r\n    if (mediaElement) {\r\n      mediaElement.srcObject = null;\r\n      mediaElement.pause();\r\n      this.usedTags.delete(callId);\r\n    }\r\n  }\r\n  muteMic = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      const sdh: Web.SessionDescriptionHandler = call.sessionDescriptionHandler as Web.SessionDescriptionHandler;\r\n      sdh?.peerConnection?.getSenders().forEach((stream: any) => {\r\n        if (stream.track?.kind === \"audio\") stream.track.enabled = false;\r\n      });\r\n    }\r\n  };\r\n  unMuteMic = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      const sdh: Web.SessionDescriptionHandler = call.sessionDescriptionHandler as Web.SessionDescriptionHandler;\r\n      sdh?.peerConnection?.getSenders().forEach((stream: any) => {\r\n        if (stream.track?.kind === \"audio\") stream.track.enabled = true;\r\n      });\r\n    }\r\n  };\r\n  disableCam = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      if (this.localVideoEnabled(call)) {\r\n        const sdh: Web.SessionDescriptionHandler = call.sessionDescriptionHandler as Web.SessionDescriptionHandler;\r\n        sdh?.peerConnection?.getSenders().forEach((stream) => {\r\n          if (stream.track?.kind === \"video\") stream.track.enabled = false;\r\n        });\r\n      } else {\r\n        // TODO\r\n        console.log(\"re-invite\");\r\n      }\r\n    }\r\n  };\r\n  enableCam = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      if (this.localVideoEnabled(call)) {\r\n        const sdh: Web.SessionDescriptionHandler = call.sessionDescriptionHandler as Web.SessionDescriptionHandler;\r\n        sdh?.peerConnection?.getSenders().forEach((stream: any) => {\r\n          if (stream.track?.kind === \"video\") stream.track.enabled = true;\r\n        });\r\n      } else {\r\n        // TODO\r\n        console.log(\"re-invite\");\r\n      }\r\n    }\r\n  };\r\n  holdCall = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      const options: SessionInviteOptions = {\r\n        sessionDescriptionHandlerModifiers: [Web.holdModifier],\r\n      };\r\n      return call.invite(options);\r\n    }\r\n  };\r\n  unHoldCall = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      const options: SessionInviteOptions = {\r\n        sessionDescriptionHandlerModifiers: [],\r\n      };\r\n\r\n      if (call) {\r\n        call.invite(options);\r\n      }\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}