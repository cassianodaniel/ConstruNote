{"ast":null,"code":"'use strict';\n\nconst escaping = require('./escaping');\n/**\n * JID implements\n * - XMPP addresses according to RFC6122\n * - XEP-0106: JID Escaping\n *\n * @see http://tools.ietf.org/html/rfc6122#section-2\n * @see http://xmpp.org/extensions/xep-0106.html\n */\n\n\nclass JID {\n  constructor(local, domain, resource) {\n    if (typeof domain !== 'string' || !domain) {\n      throw new TypeError(`Invalid domain.`);\n    }\n\n    this.setDomain(domain);\n    this.setLocal(typeof local === 'string' ? local : '');\n    this.setResource(typeof resource === 'string' ? resource : '');\n  }\n\n  [Symbol.toPrimitive](hint) {\n    if (hint === 'number') {\n      return NaN;\n    }\n\n    return this.toString();\n  }\n\n  toString(unescape) {\n    let s = this._domain;\n\n    if (this._local) {\n      s = this.getLocal(unescape) + '@' + s;\n    }\n\n    if (this._resource) {\n      s = s + '/' + this._resource;\n    }\n\n    return s;\n  }\n  /**\n   * Convenience method to distinguish users\n   * */\n\n\n  bare() {\n    if (this._resource) {\n      return new JID(this._local, this._domain, null);\n    }\n\n    return this;\n  }\n  /**\n   * Comparison function\n   * */\n\n\n  equals(other) {\n    return this._local === other._local && this._domain === other._domain && this._resource === other._resource;\n  }\n  /**\n   * http://xmpp.org/rfcs/rfc6122.html#addressing-localpart\n   * */\n\n\n  setLocal(local, escape) {\n    escape = escape || escaping.detect(local);\n\n    if (escape) {\n      local = escaping.escape(local);\n    }\n\n    this._local = local && local.toLowerCase();\n    return this;\n  }\n\n  getLocal(unescape) {\n    unescape = unescape || false;\n    let local = null;\n\n    if (unescape) {\n      local = escaping.unescape(this._local);\n    } else {\n      local = this._local;\n    }\n\n    return local;\n  }\n  /**\n   * http://xmpp.org/rfcs/rfc6122.html#addressing-domain\n   */\n\n\n  setDomain(domain) {\n    this._domain = domain.toLowerCase();\n    return this;\n  }\n\n  getDomain() {\n    return this._domain;\n  }\n  /**\n   * http://xmpp.org/rfcs/rfc6122.html#addressing-resourcepart\n   */\n\n\n  setResource(resource) {\n    this._resource = resource;\n    return this;\n  }\n\n  getResource() {\n    return this._resource;\n  }\n\n}\n\nObject.defineProperty(JID.prototype, 'local', {\n  get: JID.prototype.getLocal,\n  set: JID.prototype.setLocal\n});\nObject.defineProperty(JID.prototype, 'domain', {\n  get: JID.prototype.getDomain,\n  set: JID.prototype.setDomain\n});\nObject.defineProperty(JID.prototype, 'resource', {\n  get: JID.prototype.getResource,\n  set: JID.prototype.setResource\n});\nmodule.exports = JID;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/@xmpp/jid/lib/JID.js"],"names":["escaping","require","JID","constructor","local","domain","resource","TypeError","setDomain","setLocal","setResource","Symbol","toPrimitive","hint","NaN","toString","unescape","s","_domain","_local","getLocal","_resource","bare","equals","other","escape","detect","toLowerCase","getDomain","getResource","Object","defineProperty","prototype","get","set","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst escaping = require('./escaping')\n\n/**\n * JID implements\n * - XMPP addresses according to RFC6122\n * - XEP-0106: JID Escaping\n *\n * @see http://tools.ietf.org/html/rfc6122#section-2\n * @see http://xmpp.org/extensions/xep-0106.html\n */\nclass JID {\n  constructor(local, domain, resource) {\n    if (typeof domain !== 'string' || !domain) {\n      throw new TypeError(`Invalid domain.`)\n    }\n\n    this.setDomain(domain)\n    this.setLocal(typeof local === 'string' ? local : '')\n    this.setResource(typeof resource === 'string' ? resource : '')\n  }\n\n  [Symbol.toPrimitive](hint) {\n    if (hint === 'number') {\n      return NaN\n    }\n\n    return this.toString()\n  }\n\n  toString(unescape) {\n    let s = this._domain\n    if (this._local) {\n      s = this.getLocal(unescape) + '@' + s\n    }\n\n    if (this._resource) {\n      s = s + '/' + this._resource\n    }\n\n    return s\n  }\n\n  /**\n   * Convenience method to distinguish users\n   * */\n  bare() {\n    if (this._resource) {\n      return new JID(this._local, this._domain, null)\n    }\n\n    return this\n  }\n\n  /**\n   * Comparison function\n   * */\n  equals(other) {\n    return (\n      this._local === other._local &&\n      this._domain === other._domain &&\n      this._resource === other._resource\n    )\n  }\n\n  /**\n   * http://xmpp.org/rfcs/rfc6122.html#addressing-localpart\n   * */\n  setLocal(local, escape) {\n    escape = escape || escaping.detect(local)\n\n    if (escape) {\n      local = escaping.escape(local)\n    }\n\n    this._local = local && local.toLowerCase()\n    return this\n  }\n\n  getLocal(unescape) {\n    unescape = unescape || false\n    let local = null\n\n    if (unescape) {\n      local = escaping.unescape(this._local)\n    } else {\n      local = this._local\n    }\n\n    return local\n  }\n\n  /**\n   * http://xmpp.org/rfcs/rfc6122.html#addressing-domain\n   */\n  setDomain(domain) {\n    this._domain = domain.toLowerCase()\n    return this\n  }\n\n  getDomain() {\n    return this._domain\n  }\n\n  /**\n   * http://xmpp.org/rfcs/rfc6122.html#addressing-resourcepart\n   */\n  setResource(resource) {\n    this._resource = resource\n    return this\n  }\n\n  getResource() {\n    return this._resource\n  }\n}\n\nObject.defineProperty(JID.prototype, 'local', {\n  get: JID.prototype.getLocal,\n  set: JID.prototype.setLocal,\n})\n\nObject.defineProperty(JID.prototype, 'domain', {\n  get: JID.prototype.getDomain,\n  set: JID.prototype.setDomain,\n})\n\nObject.defineProperty(JID.prototype, 'resource', {\n  get: JID.prototype.getResource,\n  set: JID.prototype.setResource,\n})\n\nmodule.exports = JID\n"]},"metadata":{},"sourceType":"script"}