{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ModalChangePassword.tsx\";\nimport React, { useState } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Label, Input } from \"reactstrap\";\nimport { useTranslation } from \"react-i18next\";\nimport { useModal } from \"./../contexts/ModalContext\";\nimport { useAuth } from './../contexts/AuthContext';\nexport const ModalChangePassword = () => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    setChangedUserPassword,\n    user\n  } = useAuth();\n  const {\n    showModalChangePassword,\n    setShowModalChangePassword\n  } = useModal();\n  const [currentPassword, setCurrentPassword] = useState(\"\");\n  const [newPassword, setNewPassword] = useState(\"\");\n  const [confirmNewPassword, setConfirmNewPassword] = useState(\"\");\n\n  const toggle = () => {\n    setShowModalChangePassword(!showModalChangePassword);\n  };\n\n  const checkPasswords = () => {\n    if (currentPassword === newPassword) {\n      alert('A senha atual corresponde à nova solicitada!');\n    } else if (newPassword !== confirmNewPassword) {\n      alert('A confirmação da nova senha não corresponde!');\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    isOpen: showModalChangePassword,\n    centered: true,\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    tag: \"h5\",\n    className: \"modal-title font-size-16\",\n    toggle: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, \"Alterar Senha\"), /*#__PURE__*/React.createElement(ModalBody, {\n    className: \"p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"current-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Senha atual\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"password\",\n    className: \"form-control\",\n    id: \"current-input\",\n    defaultValue: \"\",\n    onChange: e => setCurrentPassword(e.target.value),\n    placeholder: \"Senha atual\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"new-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"Nova senha\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"password\",\n    className: \"form-control\",\n    id: \"new-input\",\n    defaultValue: \"\",\n    onChange: e => setNewPassword(e.target.value),\n    placeholder: \"Nova senha\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    htmlFor: \"confirm-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \"Confirmar nova senha\"), /*#__PURE__*/React.createElement(Input, {\n    type: \"password\",\n    className: \"form-control\",\n    id: \"confirm-input\",\n    defaultValue: \"\",\n    onChange: e => setConfirmNewPassword(e.target.value),\n    placeholder: \"Confirmar nova senha\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"link\",\n    onClick: () => setShowModalChangePassword(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, t(\"Close\")), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"primary\",\n    onClick: () => {\n      /* setChangedUserPassword({ oldPassword: currentPassword, newPassword: newPassword }) */\n      setShowModalChangePassword(false);\n      checkPasswords();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"Alterar Senha\")));\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ModalChangePassword.tsx"],"names":["React","useState","Button","Modal","ModalHeader","ModalBody","ModalFooter","Form","FormGroup","Label","Input","useTranslation","useModal","useAuth","ModalChangePassword","t","setChangedUserPassword","user","showModalChangePassword","setShowModalChangePassword","currentPassword","setCurrentPassword","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","toggle","checkPasswords","alert","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n} from \"reactstrap\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useModal } from \"./../contexts/ModalContext\";\r\nimport { useAuth } from './../contexts/AuthContext';\r\n\r\nexport const ModalChangePassword: React.FC = () => {\r\n  const { t } = useTranslation();\r\n\r\n  const { setChangedUserPassword, user } = useAuth();\r\n  const { showModalChangePassword, setShowModalChangePassword } = useModal();\r\n  const [currentPassword, setCurrentPassword] = useState(\"\");\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [confirmNewPassword, setConfirmNewPassword] = useState(\"\");\r\n\r\n  const toggle = () => {\r\n    setShowModalChangePassword(!showModalChangePassword);\r\n  };\r\n\r\n  const checkPasswords = () => {\r\n    if(currentPassword === newPassword){\r\n      alert('A senha atual corresponde à nova solicitada!');\r\n    }else if(newPassword !== confirmNewPassword){\r\n      alert('A confirmação da nova senha não corresponde!');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal isOpen={showModalChangePassword} centered toggle={toggle}>\r\n      <ModalHeader\r\n        tag=\"h5\"\r\n        className=\"modal-title font-size-16\"\r\n        toggle={toggle}\r\n      >\r\n        Alterar Senha\r\n      </ModalHeader>\r\n      <ModalBody className=\"p-4\">\r\n        <Form>\r\n          <FormGroup className=\"mb-4\">\r\n            <Label htmlFor=\"current-input\">Senha atual</Label>\r\n            <Input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"current-input\"\r\n              defaultValue={\"\"}\r\n              onChange={(e) => setCurrentPassword(e.target.value)}\r\n              placeholder=\"Senha atual\"\r\n            />\r\n          </FormGroup>\r\n          <FormGroup className=\"mb-4\">\r\n            <Label htmlFor=\"new-input\">Nova senha</Label>\r\n            <Input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"new-input\"\r\n              defaultValue={\"\"}\r\n              onChange={(e) => setNewPassword(e.target.value)}\r\n              placeholder=\"Nova senha\"\r\n            />\r\n          </FormGroup>\r\n          <FormGroup className=\"mb-4\">\r\n            <Label htmlFor=\"confirm-input\">Confirmar nova senha</Label>\r\n            <Input\r\n              type=\"password\"\r\n              className=\"form-control\"\r\n              id=\"confirm-input\"\r\n              defaultValue={\"\"}\r\n              onChange={(e) => setConfirmNewPassword(e.target.value)}\r\n              placeholder=\"Confirmar nova senha\"\r\n            />\r\n          </FormGroup>\r\n        </Form>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button\r\n          type=\"button\"\r\n          color=\"link\"\r\n          onClick={() => setShowModalChangePassword(false)}\r\n        >\r\n          {t(\"Close\")}\r\n        </Button>\r\n        <Button type=\"button\" color=\"primary\" onClick={() => {\r\n          /* setChangedUserPassword({ oldPassword: currentPassword, newPassword: newPassword }) */\r\n          setShowModalChangePassword(false);\r\n          checkPasswords();\r\n        }\r\n        }>\r\n          Alterar Senha\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}