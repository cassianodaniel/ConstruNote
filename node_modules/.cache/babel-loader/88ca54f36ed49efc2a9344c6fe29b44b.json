{"ast":null,"code":"import { Inviter, Registerer, SessionState // SIPExtension,\n, UserAgent, Web } from \"sip.js\";\nimport MultiStreamsMixer from \"multistreamsmixer\";\nexport const tagsRange = [0, 1, 2, 3];\nexport default class SIP {\n  constructor(props) {\n    this.Register = () => {\n      if (this.userAgent) {\n        var _this$registerer, _this$registerer2;\n\n        if (!this.registerer) this.registerer = new Registerer(this.userAgent);\n        (_this$registerer = this.registerer) === null || _this$registerer === void 0 ? void 0 : _this$registerer.register();\n        (_this$registerer2 = this.registerer) === null || _this$registerer2 === void 0 ? void 0 : _this$registerer2.stateChange.addListener(this.connectionCB);\n      }\n    };\n\n    this.unRegister = () => {\n      var _this$registerer3, _this$registerer4;\n\n      (_this$registerer3 = this.registerer) === null || _this$registerer3 === void 0 ? void 0 : _this$registerer3.unregister();\n      (_this$registerer4 = this.registerer) === null || _this$registerer4 === void 0 ? void 0 : _this$registerer4.dispose();\n      return true;\n    };\n\n    this.myMediaStreamFactory = (constraints, sessionDescriptionHandler) => {\n      if (constraints.screenShare) {\n        // @ts-ignore\n        return navigator.mediaDevices.getDisplayMedia.call(navigator.mediaDevices, {\n          video: {\n            mediaSource: \"screen\"\n          },\n          audio: true\n        });\n      } else if (!constraints.audio && !constraints.video) {\n        return Promise.resolve(new MediaStream());\n      } else if (navigator.mediaDevices === undefined) {\n        return Promise.reject(new Error(\"Media devices not available in insecure contexts.\"));\n      } else {\n        return navigator.mediaDevices.getUserMedia.call(navigator.mediaDevices, constraints);\n      }\n    };\n\n    this.mySessionDescriptionHandlerFactory = Web.defaultSessionDescriptionHandlerFactory(this.myMediaStreamFactory);\n\n    this.onInvite = invitation => {\n      if (this.activeCalls.size < tagsRange.length) {\n        const cb = session => {\n          this.activeCalls.set(invitation.id, invitation);\n          this.onReceiveCall(session, invitation);\n        };\n\n        invitation.stateChange.addListener(cb);\n        this.onReceiveCall(SessionState.Initial, invitation);\n      } else {\n        invitation.reject();\n      }\n    };\n\n    this.remoteVideoEnabled = session => {\n      var _ref, _ref$peerConnection;\n\n      let receivingVideo = false;\n      (_ref = session.sessionDescriptionHandler) === null || _ref === void 0 ? void 0 : (_ref$peerConnection = _ref.peerConnection) === null || _ref$peerConnection === void 0 ? void 0 : _ref$peerConnection.getReceivers().forEach(receiver => {\n        if (receiver.track) {\n          if (receiver.track.kind === \"video\") receivingVideo = true;\n        }\n      });\n      return receivingVideo;\n    };\n\n    this.localVideoEnabled = session => {\n      var _ref2, _ref3;\n\n      return !!((_ref2 = (_ref3 = session) === null || _ref3 === void 0 ? void 0 : _ref3.sessionDescriptionHandlerOptions.constraints) === null || _ref2 === void 0 ? void 0 : _ref2.video);\n    };\n\n    this.muteMic = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        var _sdh$peerConnection;\n\n        const sdh = call.sessionDescriptionHandler;\n        sdh === null || sdh === void 0 ? void 0 : (_sdh$peerConnection = sdh.peerConnection) === null || _sdh$peerConnection === void 0 ? void 0 : _sdh$peerConnection.getSenders().forEach(stream => {\n          var _stream$track;\n\n          if (((_stream$track = stream.track) === null || _stream$track === void 0 ? void 0 : _stream$track.kind) === \"audio\") stream.track.enabled = false;\n        });\n      }\n    };\n\n    this.unMuteMic = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        var _sdh$peerConnection2;\n\n        const sdh = call.sessionDescriptionHandler;\n        sdh === null || sdh === void 0 ? void 0 : (_sdh$peerConnection2 = sdh.peerConnection) === null || _sdh$peerConnection2 === void 0 ? void 0 : _sdh$peerConnection2.getSenders().forEach(stream => {\n          var _stream$track2;\n\n          if (((_stream$track2 = stream.track) === null || _stream$track2 === void 0 ? void 0 : _stream$track2.kind) === \"audio\") stream.track.enabled = true;\n        });\n      }\n    };\n\n    this.disableCam = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        if (this.localVideoEnabled(call)) {\n          var _sdh$peerConnection3;\n\n          const sdh = call.sessionDescriptionHandler;\n          sdh === null || sdh === void 0 ? void 0 : (_sdh$peerConnection3 = sdh.peerConnection) === null || _sdh$peerConnection3 === void 0 ? void 0 : _sdh$peerConnection3.getSenders().forEach(stream => {\n            var _stream$track3;\n\n            if (((_stream$track3 = stream.track) === null || _stream$track3 === void 0 ? void 0 : _stream$track3.kind) === \"video\") stream.track.enabled = false;\n          });\n        } else {\n          // TODO\n          console.log(\"re-invite\");\n        }\n      }\n    };\n\n    this.enableCam = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        if (this.localVideoEnabled(call)) {\n          var _sdh$peerConnection4;\n\n          const sdh = call.sessionDescriptionHandler;\n          sdh === null || sdh === void 0 ? void 0 : (_sdh$peerConnection4 = sdh.peerConnection) === null || _sdh$peerConnection4 === void 0 ? void 0 : _sdh$peerConnection4.getSenders().forEach(stream => {\n            var _stream$track4;\n\n            if (((_stream$track4 = stream.track) === null || _stream$track4 === void 0 ? void 0 : _stream$track4.kind) === \"video\") stream.track.enabled = true;\n          });\n        } else {\n          // TODO\n          console.log(\"re-invite\");\n        }\n      }\n    };\n\n    this.holdCall = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        const options = {\n          sessionDescriptionHandlerModifiers: [Web.holdModifier]\n        };\n        return call.invite(options);\n      }\n    };\n\n    this.unHoldCall = callID => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        const options = {\n          sessionDescriptionHandlerModifiers: []\n        };\n\n        if (call) {\n          call.invite(options);\n        }\n      }\n    };\n\n    this.sendDTMF = (callID, dtmf) => {\n      const call = this.activeCalls.get(callID);\n\n      if (call) {\n        var _call$sessionDescript;\n\n        (_call$sessionDescript = call.sessionDescriptionHandler) === null || _call$sessionDescript === void 0 ? void 0 : _call$sessionDescript.sendDtmf(dtmf);\n      }\n    };\n\n    this.mixAudios = (firstStream, secondStream) => {\n      return new MultiStreamsMixer([firstStream, secondStream]).getMixedStream();\n    };\n\n    this.mergeCalls = (firstCallId, secondCallId) => {\n      const firstCall = this.activeCalls.get(firstCallId);\n      const secondCall = this.activeCalls.get(secondCallId);\n\n      if (firstCall && secondCall) {\n        var _ref4, _ref5;\n\n        const firstPeer = (_ref4 = firstCall.sessionDescriptionHandler) === null || _ref4 === void 0 ? void 0 : _ref4.peerConnection;\n        const secondPeer = (_ref5 = firstCall.sessionDescriptionHandler) === null || _ref5 === void 0 ? void 0 : _ref5.peerConnection;\n        const firstSendedTrack = firstPeer === null || firstPeer === void 0 ? void 0 : firstPeer.getSenders().filter(str => {\n          var _str$track;\n\n          return ((_str$track = str.track) === null || _str$track === void 0 ? void 0 : _str$track.kind) === \"audio\";\n        })[0].track;\n        const secondSendedTrack = secondPeer === null || secondPeer === void 0 ? void 0 : secondPeer.getSenders().filter(str => {\n          var _str$track2;\n\n          return ((_str$track2 = str.track) === null || _str$track2 === void 0 ? void 0 : _str$track2.kind) === \"audio\";\n        })[0].track;\n        const firstReceivedStream = new MediaStream();\n        const firstReceivedTrack = firstPeer === null || firstPeer === void 0 ? void 0 : firstPeer.getReceivers().filter(str => str.track.kind === \"audio\")[0].track;\n        firstReceivedTrack && firstReceivedStream.addTrack(firstReceivedTrack);\n        const secondReceivedStream = new MediaStream();\n        const secondReceivedTrack = secondPeer === null || secondPeer === void 0 ? void 0 : secondPeer.getReceivers().filter(str => str.track.kind === \"audio\")[0].track;\n        secondReceivedTrack && secondReceivedStream.addTrack(secondReceivedTrack);\n\n        if (firstSendedTrack && secondSendedTrack && firstReceivedStream && secondReceivedStream) {\n          const firtsLocalMediaStream = new MediaStream();\n          const secondLocalMediaStream = new MediaStream();\n          firtsLocalMediaStream.addTrack(firstSendedTrack);\n          secondLocalMediaStream.addTrack(secondSendedTrack);\n          firstPeer === null || firstPeer === void 0 ? void 0 : firstPeer.getSenders().filter(str => {\n            var _str$track3;\n\n            return ((_str$track3 = str.track) === null || _str$track3 === void 0 ? void 0 : _str$track3.kind) === \"audio\";\n          })[0].replaceTrack(this.mixAudios(firtsLocalMediaStream, secondReceivedStream).getAudioTracks()[0]);\n          secondPeer === null || secondPeer === void 0 ? void 0 : secondPeer.getSenders().filter(str => {\n            var _str$track4;\n\n            return ((_str$track4 = str.track) === null || _str$track4 === void 0 ? void 0 : _str$track4.kind) === \"audio\";\n          })[0].replaceTrack(this.mixAudios(secondLocalMediaStream, firstReceivedStream).getAudioTracks()[0]);\n        }\n      }\n    };\n\n    this.screenShare = number => {\n      if (this.userAgent) {\n        const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\n        let screenShare;\n\n        if (destination) {\n          screenShare = new Inviter(this.userAgent, destination, {\n            params: {\n              fromDisplayName: `${this.displayName} (Screen)`\n            },\n            sessionDescriptionHandlerOptions: {\n              constraints: {\n                screenShare: true,\n                audio: false,\n                video: false\n              }\n            }\n          });\n\n          if (screenShare) {\n            this.screenShareSession = screenShare;\n            screenShare.invite();\n          }\n        }\n      }\n    };\n\n    Object.assign(this, props);\n    this.makeSIP();\n    this.activeCalls = new Map();\n    this.usedTags = new Map();\n  }\n\n  makeSIP() {\n    const transportOptions = {\n      server: this.wsURL,\n      // server: \"wss://test.citrussquad.com:7443\",\n      keepAliveInterval: 90\n    };\n    const uri = UserAgent.makeURI(`sip:${this.user}@${this.domain}`);\n    const userAgentOptions = {\n      authorizationUsername: this.user,\n      authorizationPassword: this.password,\n      displayName: this.displayName,\n      transportOptions,\n      uri,\n      logBuiltinEnabled: true,\n      delegate: {\n        onInvite: this.onInvite\n      },\n      sessionDescriptionHandlerFactory: this.mySessionDescriptionHandlerFactory\n    };\n    this.userAgent = new UserAgent(userAgentOptions);\n    this.registerer = new Registerer(this.userAgent);\n    this.userAgent.start().then(() => {\n      var _this$registerer5, _this$registerer6;\n\n      (_this$registerer5 = this.registerer) === null || _this$registerer5 === void 0 ? void 0 : _this$registerer5.register();\n      (_this$registerer6 = this.registerer) === null || _this$registerer6 === void 0 ? void 0 : _this$registerer6.stateChange.addListener(this.connectionCB);\n    });\n    this.userAgent.transport.onDisconnect = this.onDisconnect;\n    this.userAgent.transport.onConnect = this.onConnect;\n    window.addEventListener(\"unload\", ev => {\n      ev.preventDefault();\n      return this.unRegister();\n    });\n  }\n\n  invite(number, constraints = {\n    video: false,\n    audio: true\n  }) {\n    if (!(this.activeCalls.size >= tagsRange.length) && this.userAgent) {\n      const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\n      let newCall;\n\n      if (destination) {\n        newCall = new Inviter(this.userAgent, destination, {\n          sessionDescriptionHandlerOptions: {\n            constraints\n          } // inviteWithoutSdp: true,\n\n        });\n        this.activeCalls.set(newCall.id, newCall);\n      }\n\n      const currentInvite = newCall && this.activeCalls.get(newCall.id);\n\n      if (currentInvite) {\n        currentInvite.stateChange.addListener(state => {\n          if (this.activeCalls) this.onMakeCall(state, currentInvite);\n        });\n        currentInvite.invite();\n        this.onMakeCall(SessionState.Initial, currentInvite);\n      }\n    }\n  }\n\n  blindTransfer(callId, number) {\n    const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\n    const call = this.activeCalls.get(callId);\n\n    if (call && destination) {\n      call.refer(destination); // this.activeCalls.delete(callId);\n    }\n  }\n\n  attendedTransfer(firstCallId, secondCallId) {\n    const firstCall = this.activeCalls.get(firstCallId);\n    const secondCall = this.activeCalls.get(secondCallId);\n\n    if (firstCall && secondCall) {\n      firstCall.refer(secondCall);\n    }\n  }\n\n  getAvailableTag() {\n    let tagsUsing = Array.from(this.usedTags.values());\n\n    for (const tagId of tagsRange) {\n      if (!tagsUsing.find(tgId => tgId === `remote-stream-${tagId}`)) {\n        return `remote-stream-${tagId}`;\n      }\n    }\n  }\n\n  endCall(session) {\n    switch (session.state) {\n      case SessionState.Initial:\n      case SessionState.Establishing:\n        if (session instanceof Inviter) {\n          // An unestablished outgoing session\n          session.cancel();\n        } else {\n          // An unestablished incoming session\n          session.reject();\n        }\n\n        break;\n\n      case SessionState.Established:\n        // An established session\n        session.bye();\n        break;\n\n      case SessionState.Terminating:\n      case SessionState.Terminated:\n        // Cannot terminate a session that is already terminated\n        break;\n    }\n  }\n\n  setupRemoteMedia(session, speakerId = \"\") {\n    var _ref7, _ref7$peerConnection;\n\n    const tagId = this.getAvailableTag();\n\n    if (!tagId) {\n      var _ref6;\n\n      (_ref6 = session) === null || _ref6 === void 0 ? void 0 : _ref6.reject();\n      return;\n    }\n\n    const mediaElement = document.getElementById(tagId);\n    this.usedTags.set(session.id, tagId);\n    const remoteStream = new MediaStream();\n    (_ref7 = session.sessionDescriptionHandler) === null || _ref7 === void 0 ? void 0 : (_ref7$peerConnection = _ref7.peerConnection) === null || _ref7$peerConnection === void 0 ? void 0 : _ref7$peerConnection.getReceivers().forEach(receiver => {\n      if (receiver.track) {\n        remoteStream.addTrack(receiver.track);\n      }\n    });\n\n    const playAudio = async (mediaElement, remoteStream, speakerId) => {\n      if (mediaElement) {\n        if (speakerId) {\n          try {\n            await mediaElement.setSinkId(speakerId);\n          } catch {}\n        }\n\n        mediaElement.srcObject = remoteStream;\n        mediaElement.play();\n      }\n    };\n\n    playAudio(mediaElement, remoteStream, speakerId);\n    return {\n      receivingVideo: this.remoteVideoEnabled(session),\n      tagId\n    };\n  }\n\n  cleanupMedia(callId) {\n    const tag = this.usedTags.get(callId);\n    if (!tag) return;\n    const mediaElement = document.getElementById(tag);\n\n    if (mediaElement) {\n      mediaElement.srcObject = null;\n      mediaElement.pause();\n      this.usedTags.delete(callId);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/voice/voicecommunicator.ts"],"names":["Inviter","Registerer","SessionState","UserAgent","Web","MultiStreamsMixer","tagsRange","SIP","constructor","props","Register","userAgent","registerer","register","stateChange","addListener","connectionCB","unRegister","unregister","dispose","myMediaStreamFactory","constraints","sessionDescriptionHandler","screenShare","navigator","mediaDevices","getDisplayMedia","call","video","mediaSource","audio","Promise","resolve","MediaStream","undefined","reject","Error","getUserMedia","mySessionDescriptionHandlerFactory","defaultSessionDescriptionHandlerFactory","onInvite","invitation","activeCalls","size","length","cb","session","set","id","onReceiveCall","Initial","remoteVideoEnabled","receivingVideo","peerConnection","getReceivers","forEach","receiver","track","kind","localVideoEnabled","sessionDescriptionHandlerOptions","muteMic","callID","get","sdh","getSenders","stream","enabled","unMuteMic","disableCam","console","log","enableCam","holdCall","options","sessionDescriptionHandlerModifiers","holdModifier","invite","unHoldCall","sendDTMF","dtmf","sendDtmf","mixAudios","firstStream","secondStream","getMixedStream","mergeCalls","firstCallId","secondCallId","firstCall","secondCall","firstPeer","secondPeer","firstSendedTrack","filter","str","secondSendedTrack","firstReceivedStream","firstReceivedTrack","addTrack","secondReceivedStream","secondReceivedTrack","firtsLocalMediaStream","secondLocalMediaStream","replaceTrack","getAudioTracks","number","destination","makeURI","domain","params","fromDisplayName","displayName","screenShareSession","Object","assign","makeSIP","Map","usedTags","transportOptions","server","wsURL","keepAliveInterval","uri","user","userAgentOptions","authorizationUsername","authorizationPassword","password","logBuiltinEnabled","delegate","sessionDescriptionHandlerFactory","start","then","transport","onDisconnect","onConnect","window","addEventListener","ev","preventDefault","newCall","currentInvite","state","onMakeCall","blindTransfer","callId","refer","attendedTransfer","getAvailableTag","tagsUsing","Array","from","values","tagId","find","tgId","endCall","Establishing","cancel","Established","bye","Terminating","Terminated","setupRemoteMedia","speakerId","mediaElement","document","getElementById","remoteStream","playAudio","setSinkId","srcObject","play","cleanupMedia","tag","pause","delete"],"mappings":"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","sourcesContent":["import {\r\n  Invitation,\r\n  Inviter,\r\n  Registerer,\r\n  RegistererState,\r\n  Session,\r\n  SessionInviteOptions,\r\n  SessionState,\r\n  // SIPExtension,\r\n  UserAgent,\r\n  UserAgentOptions,\r\n  Web,\r\n} from \"sip.js\";\r\nimport MultiStreamsMixer from \"multistreamsmixer\";\r\ninterface CustomMediaStreamConstraints extends MediaStreamConstraints {\r\n  screenShare?: boolean;\r\n}\r\ninterface ConnectionListenerCallback {\r\n  (data: RegistererState): void;\r\n}\r\ninterface MakeCallCallback {\r\n  (state: SessionState, inviter: Inviter): void;\r\n}\r\ninterface ReceiveCallCallback {\r\n  (state: SessionState, invitation: Invitation): void;\r\n}\r\ninterface SIPConstructorPropeties {\r\n  user: string;\r\n  password: string;\r\n  wsURL: string;\r\n  domain: string;\r\n  displayName: string;\r\n  connectionCB: ConnectionListenerCallback;\r\n  onMakeCall: MakeCallCallback;\r\n  onReceiveCall: ReceiveCallCallback;\r\n  onDisconnect(e: Error | undefined): void;\r\n  onConnect(): void;\r\n}\r\nexport const tagsRange: number[] = [0, 1, 2, 3];\r\nexport default interface SIP {\r\n  user: string;\r\n  password: string;\r\n  wsURL: string;\r\n  domain: string;\r\n  displayName: string;\r\n  connectionCB: ConnectionListenerCallback;\r\n  onDisconnect(e: Error | undefined): void;\r\n  onConnect(): void;\r\n  onMakeCall: MakeCallCallback;\r\n  onReceiveCall: ReceiveCallCallback;\r\n  userAgent?: UserAgent;\r\n  registerer?: Registerer;\r\n  activeCalls: Map<string, Session>;\r\n  usedTags: Map<string, string>;\r\n  screenShareSession: Session | undefined;\r\n}\r\nexport default class SIP {\r\n  constructor(props: SIPConstructorPropeties) {\r\n    Object.assign(this, props);\r\n    this.makeSIP();\r\n    this.activeCalls = new Map<string, Session>();\r\n    this.usedTags = new Map<string, string>();\r\n  }\r\n  makeSIP() {\r\n    const transportOptions = {\r\n      server: this.wsURL,\r\n      // server: \"wss://test.citrussquad.com:7443\",\r\n      keepAliveInterval: 90,\r\n    };\r\n    const uri = UserAgent.makeURI(`sip:${this.user}@${this.domain}`);\r\n    const userAgentOptions: UserAgentOptions = {\r\n      authorizationUsername: this.user,\r\n      authorizationPassword: this.password,\r\n      displayName: this.displayName,\r\n      transportOptions,\r\n      uri,\r\n      logBuiltinEnabled: true,\r\n      delegate: {\r\n        onInvite: this.onInvite,\r\n      },\r\n      sessionDescriptionHandlerFactory: this.mySessionDescriptionHandlerFactory,\r\n    };\r\n    this.userAgent = new UserAgent(userAgentOptions);\r\n    this.registerer = new Registerer(this.userAgent);\r\n    this.userAgent.start().then(() => {\r\n      this.registerer?.register();\r\n      this.registerer?.stateChange.addListener(this.connectionCB);\r\n    });\r\n    this.userAgent.transport.onDisconnect = this.onDisconnect;\r\n    this.userAgent.transport.onConnect = this.onConnect;\r\n    window.addEventListener(\"unload\", (ev) => {\r\n      ev.preventDefault();\r\n\r\n      return this.unRegister();\r\n    });\r\n  }\r\n  Register = () => {\r\n    if (this.userAgent) {\r\n      if (!this.registerer) this.registerer = new Registerer(this.userAgent);\r\n      this.registerer?.register();\r\n      this.registerer?.stateChange.addListener(this.connectionCB);\r\n    }\r\n  };\r\n  unRegister = () => {\r\n    this.registerer?.unregister();\r\n    this.registerer?.dispose();\r\n    return true;\r\n  };\r\n  myMediaStreamFactory: Web.MediaStreamFactory = (\r\n    constraints: CustomMediaStreamConstraints,\r\n    sessionDescriptionHandler: Web.SessionDescriptionHandler\r\n    //@ts-ignore\r\n  ): Promise<MediaStream> => {\r\n    if (constraints.screenShare) {\r\n      // @ts-ignore\r\n      return navigator.mediaDevices.getDisplayMedia.call(\r\n        navigator.mediaDevices,\r\n        {\r\n          video: { mediaSource: \"screen\" },\r\n          audio: true,\r\n        }\r\n      );\r\n    } else if (!constraints.audio && !constraints.video) {\r\n      return Promise.resolve(new MediaStream());\r\n    } else if (navigator.mediaDevices === undefined) {\r\n      return Promise.reject(\r\n        new Error(\"Media devices not available in insecure contexts.\")\r\n      );\r\n    } else {\r\n      return navigator.mediaDevices.getUserMedia.call(\r\n        navigator.mediaDevices,\r\n        constraints\r\n      );\r\n    }\r\n  };\r\n\r\n  // Create session description handler factory\r\n  mySessionDescriptionHandlerFactory: Web.SessionDescriptionHandlerFactory = Web.defaultSessionDescriptionHandlerFactory(\r\n    this.myMediaStreamFactory\r\n  );\r\n  invite(\r\n    number: string,\r\n    constraints: MediaStreamConstraints = { video: false, audio: true }\r\n  ) {\r\n    if (!(this.activeCalls.size >= tagsRange.length) && this.userAgent) {\r\n      const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\r\n      let newCall;\r\n      if (destination) {\r\n        newCall = new Inviter(this.userAgent, destination, {\r\n          sessionDescriptionHandlerOptions: {\r\n            constraints,\r\n          },\r\n          // inviteWithoutSdp: true,\r\n        });\r\n        this.activeCalls.set(newCall.id, newCall);\r\n      }\r\n      const currentInvite =\r\n        newCall && (this.activeCalls.get(newCall.id) as Inviter);\r\n      if (currentInvite) {\r\n        currentInvite.stateChange.addListener((state) => {\r\n          if (this.activeCalls) this.onMakeCall(state, currentInvite);\r\n        });\r\n        currentInvite.invite();\r\n        this.onMakeCall(SessionState.Initial, currentInvite);\r\n      }\r\n    }\r\n  }\r\n  blindTransfer(callId: string, number: string) {\r\n    const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\r\n    const call = this.activeCalls.get(callId);\r\n    if (call && destination) {\r\n      call.refer(destination);\r\n      // this.activeCalls.delete(callId);\r\n    }\r\n  }\r\n  attendedTransfer(firstCallId: string, secondCallId: string) {\r\n    const firstCall = this.activeCalls.get(firstCallId);\r\n    const secondCall = this.activeCalls.get(secondCallId);\r\n    if (firstCall && secondCall) {\r\n      firstCall.refer(secondCall);\r\n    }\r\n  }\r\n  getAvailableTag() {\r\n    let tagsUsing = Array.from(this.usedTags.values());\r\n    for (const tagId of tagsRange) {\r\n      if (!tagsUsing.find((tgId) => tgId === `remote-stream-${tagId}`)) {\r\n        return `remote-stream-${tagId}`;\r\n      }\r\n    }\r\n  }\r\n  onInvite = (invitation: Invitation) => {\r\n    if (this.activeCalls.size < tagsRange.length) {\r\n      const cb = (session: SessionState) => {\r\n        this.activeCalls.set(invitation.id, invitation);\r\n        this.onReceiveCall(session, invitation);\r\n      };\r\n      invitation.stateChange.addListener(cb);\r\n      this.onReceiveCall(SessionState.Initial, invitation);\r\n    } else {\r\n      invitation.reject();\r\n    }\r\n  };\r\n  endCall(session: Session) {\r\n    switch (session.state) {\r\n      case SessionState.Initial:\r\n      case SessionState.Establishing:\r\n        if (session instanceof Inviter) {\r\n          // An unestablished outgoing session\r\n          session.cancel();\r\n        } else {\r\n          // An unestablished incoming session\r\n          (session as Invitation).reject();\r\n        }\r\n        break;\r\n      case SessionState.Established:\r\n        // An established session\r\n        session.bye();\r\n        break;\r\n      case SessionState.Terminating:\r\n      case SessionState.Terminated:\r\n        // Cannot terminate a session that is already terminated\r\n        break;\r\n    }\r\n  }\r\n  setupRemoteMedia(session: Session, speakerId: string = \"\") {\r\n    const tagId = this.getAvailableTag();\r\n    if (!tagId) {\r\n      (session as Invitation)?.reject();\r\n      return;\r\n    }\r\n    const mediaElement: HTMLVideoElement = document.getElementById(\r\n      tagId\r\n    ) as HTMLVideoElement;\r\n    this.usedTags.set(session.id, tagId);\r\n    const remoteStream = new MediaStream();\r\n\r\n    (session.sessionDescriptionHandler as Web.SessionDescriptionHandler)?.peerConnection\r\n      ?.getReceivers()\r\n      .forEach((receiver) => {\r\n        if (receiver.track) {\r\n          remoteStream.addTrack(receiver.track);\r\n        }\r\n      });\r\n    const playAudio = async (\r\n      mediaElement: HTMLVideoElement,\r\n      remoteStream: MediaStream,\r\n      speakerId: string\r\n    ) => {\r\n      if (mediaElement) {\r\n        if (speakerId) {\r\n          try {\r\n            await (mediaElement as any).setSinkId(speakerId);\r\n          } catch {}\r\n        }\r\n        mediaElement.srcObject = remoteStream;\r\n        mediaElement.play();\r\n      }\r\n    };\r\n    playAudio(mediaElement, remoteStream, speakerId);\r\n    return {\r\n      receivingVideo: this.remoteVideoEnabled(session),\r\n      tagId,\r\n    };\r\n  }\r\n  remoteVideoEnabled = (session: Session) => {\r\n    let receivingVideo = false;\r\n    (session.sessionDescriptionHandler as Web.SessionDescriptionHandler)?.peerConnection\r\n      ?.getReceivers()\r\n      .forEach((receiver) => {\r\n        if (receiver.track) {\r\n          if (receiver.track.kind === \"video\") receivingVideo = true;\r\n        }\r\n      });\r\n    return receivingVideo;\r\n  };\r\n  localVideoEnabled = (session: Session) => {\r\n    return !!((session as Inviter)?.sessionDescriptionHandlerOptions\r\n      .constraints as MediaStreamConstraints)?.video;\r\n  };\r\n  cleanupMedia(callId: string) {\r\n    const tag = this.usedTags.get(callId);\r\n    if (!tag) return;\r\n    const mediaElement: HTMLVideoElement = document.getElementById(\r\n      tag\r\n    ) as HTMLVideoElement;\r\n    if (mediaElement) {\r\n      mediaElement.srcObject = null;\r\n      mediaElement.pause();\r\n      this.usedTags.delete(callId);\r\n    }\r\n  }\r\n  muteMic = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      const sdh: Web.SessionDescriptionHandler = call.sessionDescriptionHandler as Web.SessionDescriptionHandler;\r\n      sdh?.peerConnection?.getSenders().forEach((stream: any) => {\r\n        if (stream.track?.kind === \"audio\") stream.track.enabled = false;\r\n      });\r\n    }\r\n  };\r\n  unMuteMic = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      const sdh: Web.SessionDescriptionHandler = call.sessionDescriptionHandler as Web.SessionDescriptionHandler;\r\n      sdh?.peerConnection?.getSenders().forEach((stream: any) => {\r\n        if (stream.track?.kind === \"audio\") stream.track.enabled = true;\r\n      });\r\n    }\r\n  };\r\n  disableCam = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      if (this.localVideoEnabled(call)) {\r\n        const sdh: Web.SessionDescriptionHandler = call.sessionDescriptionHandler as Web.SessionDescriptionHandler;\r\n        sdh?.peerConnection?.getSenders().forEach((stream) => {\r\n          if (stream.track?.kind === \"video\") stream.track.enabled = false;\r\n        });\r\n      } else {\r\n        // TODO\r\n        console.log(\"re-invite\");\r\n      }\r\n    }\r\n  };\r\n  enableCam = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      if (this.localVideoEnabled(call)) {\r\n        const sdh: Web.SessionDescriptionHandler = call.sessionDescriptionHandler as Web.SessionDescriptionHandler;\r\n        sdh?.peerConnection?.getSenders().forEach((stream: any) => {\r\n          if (stream.track?.kind === \"video\") stream.track.enabled = true;\r\n        });\r\n      } else {\r\n        // TODO\r\n        console.log(\"re-invite\");\r\n      }\r\n    }\r\n  };\r\n  holdCall = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      const options: SessionInviteOptions = {\r\n        sessionDescriptionHandlerModifiers: [Web.holdModifier],\r\n      };\r\n      return call.invite(options);\r\n    }\r\n  };\r\n  unHoldCall = (callID: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      const options: SessionInviteOptions = {\r\n        sessionDescriptionHandlerModifiers: [],\r\n      };\r\n      if (call) {\r\n        call.invite(options);\r\n      }\r\n    }\r\n  };\r\n  sendDTMF = (callID: string, dtmf: string) => {\r\n    const call = this.activeCalls.get(callID);\r\n    if (call) {\r\n      call.sessionDescriptionHandler?.sendDtmf(dtmf);\r\n    }\r\n  };\r\n  mixAudios = (firstStream: MediaStream, secondStream: MediaStream) => {\r\n    return new MultiStreamsMixer([firstStream, secondStream]).getMixedStream();\r\n  };\r\n  mergeCalls = (firstCallId: string, secondCallId: string) => {\r\n    const firstCall = this.activeCalls.get(firstCallId);\r\n    const secondCall = this.activeCalls.get(secondCallId);\r\n    if (firstCall && secondCall) {\r\n      const firstPeer = (firstCall.sessionDescriptionHandler as Web.SessionDescriptionHandler)\r\n        ?.peerConnection;\r\n      const secondPeer = (firstCall.sessionDescriptionHandler as Web.SessionDescriptionHandler)\r\n        ?.peerConnection;\r\n      const firstSendedTrack = firstPeer\r\n        ?.getSenders()\r\n        .filter((str) => str.track?.kind === \"audio\")[0].track;\r\n      const secondSendedTrack = secondPeer\r\n        ?.getSenders()\r\n        .filter((str) => str.track?.kind === \"audio\")[0].track;\r\n      const firstReceivedStream = new MediaStream();\r\n      const firstReceivedTrack = firstPeer\r\n        ?.getReceivers()\r\n        .filter((str) => str.track.kind === \"audio\")[0].track;\r\n      firstReceivedTrack && firstReceivedStream.addTrack(firstReceivedTrack);\r\n      const secondReceivedStream = new MediaStream();\r\n      const secondReceivedTrack = secondPeer\r\n        ?.getReceivers()\r\n        .filter((str) => str.track.kind === \"audio\")[0].track;\r\n      secondReceivedTrack && secondReceivedStream.addTrack(secondReceivedTrack);\r\n      if (\r\n        firstSendedTrack &&\r\n        secondSendedTrack &&\r\n        firstReceivedStream &&\r\n        secondReceivedStream\r\n      ) {\r\n        const firtsLocalMediaStream = new MediaStream();\r\n        const secondLocalMediaStream = new MediaStream();\r\n        firtsLocalMediaStream.addTrack(firstSendedTrack);\r\n        secondLocalMediaStream.addTrack(secondSendedTrack);\r\n        firstPeer\r\n          ?.getSenders()\r\n          .filter((str) => str.track?.kind === \"audio\")[0]\r\n          .replaceTrack(\r\n            this.mixAudios(\r\n              firtsLocalMediaStream,\r\n              secondReceivedStream\r\n            ).getAudioTracks()[0]\r\n          );\r\n        secondPeer\r\n          ?.getSenders()\r\n          .filter((str) => str.track?.kind === \"audio\")[0]\r\n          .replaceTrack(\r\n            this.mixAudios(\r\n              secondLocalMediaStream,\r\n              firstReceivedStream\r\n            ).getAudioTracks()[0]\r\n          );\r\n      }\r\n    }\r\n  };\r\n  screenShare = (number: string) => {\r\n    if (this.userAgent) {\r\n      const destination = UserAgent.makeURI(`sip:${number}@${this.domain}`);\r\n      let screenShare: Inviter;\r\n      if (destination) {\r\n        screenShare = new Inviter(this.userAgent, destination, {\r\n          params: {\r\n            fromDisplayName: `${this.displayName} (Screen)`,\r\n          },\r\n          sessionDescriptionHandlerOptions: {\r\n            constraints: {\r\n              screenShare: true,\r\n              audio: false,\r\n              video: false,\r\n            },\r\n          },\r\n        });\r\n        if (screenShare) {\r\n          this.screenShareSession = screenShare;\r\n          screenShare.invite();\r\n        }\r\n      }\r\n    }\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}