{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _get from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport { Timers } from \"../timers\";\nimport { ServerTransaction } from \"./server-transaction\";\nimport { TransactionState } from \"./transaction-state\";\n/**\n * Non-INVITE Server Transaction.\n * @remarks\n * https://tools.ietf.org/html/rfc3261#section-17.2.2\n * @public\n */\n\nexport var NonInviteServerTransaction = /*#__PURE__*/function (_ServerTransaction) {\n  _inherits(NonInviteServerTransaction, _ServerTransaction);\n\n  var _super = _createSuper(NonInviteServerTransaction);\n\n  /**\n   * Constructor.\n   * After construction the transaction will be in the \"trying\": state and the transaction\n   * `id` will equal the branch parameter set in the Via header of the incoming request.\n   * https://tools.ietf.org/html/rfc3261#section-17.2.2\n   * @param request - Incoming Non-INVITE request from the transport.\n   * @param transport - The transport.\n   * @param user - The transaction user.\n   */\n  function NonInviteServerTransaction(request, transport, user) {\n    _classCallCheck(this, NonInviteServerTransaction);\n\n    return _super.call(this, request, transport, user, TransactionState.Trying, \"sip.transaction.nist\");\n  }\n  /**\n   * Destructor.\n   */\n\n\n  _createClass(NonInviteServerTransaction, [{\n    key: \"dispose\",\n    value: function dispose() {\n      if (this.J) {\n        clearTimeout(this.J);\n        this.J = undefined;\n      }\n\n      _get(_getPrototypeOf(NonInviteServerTransaction.prototype), \"dispose\", this).call(this);\n    }\n    /** Transaction kind. Deprecated. */\n\n  }, {\n    key: \"receiveRequest\",\n\n    /**\n     * Receive requests from transport matching this transaction.\n     * @param request - Request matching this transaction.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    value: function receiveRequest(request) {\n      var _this = this;\n\n      switch (this.state) {\n        case TransactionState.Trying:\n          // Once in the \"Trying\" state, any further request retransmissions are discarded.\n          // https://tools.ietf.org/html/rfc3261#section-17.2.2\n          break;\n\n        case TransactionState.Proceeding:\n          // If a retransmission of the request is received while in the \"Proceeding\" state,\n          // the most recently sent provisional response MUST be passed to the transport layer for retransmission.\n          // https://tools.ietf.org/html/rfc3261#section-17.2.2\n          if (!this.lastResponse) {\n            throw new Error(\"Last response undefined.\");\n          }\n\n          this.send(this.lastResponse).catch(function (error) {\n            _this.logTransportError(error, \"Failed to send retransmission of provisional response.\");\n          });\n          break;\n\n        case TransactionState.Completed:\n          // While in the \"Completed\" state, the server transaction MUST pass the final response to the transport\n          // layer for retransmission whenever a retransmission of the request is received. Any other final responses\n          // passed by the TU to the server transaction MUST be discarded while in the \"Completed\" state.\n          // https://tools.ietf.org/html/rfc3261#section-17.2.2\n          if (!this.lastResponse) {\n            throw new Error(\"Last response undefined.\");\n          }\n\n          this.send(this.lastResponse).catch(function (error) {\n            _this.logTransportError(error, \"Failed to send retransmission of final response.\");\n          });\n          break;\n\n        case TransactionState.Terminated:\n          break;\n\n        default:\n          throw new Error(\"Invalid state \".concat(this.state));\n      }\n    }\n    /**\n     * Receive responses from TU for this transaction.\n     * @param statusCode - Status code of response. 101-199 not allowed per RFC 4320.\n     * @param response - Response to send.\n     */\n\n  }, {\n    key: \"receiveResponse\",\n    value: function receiveResponse(statusCode, response) {\n      var _this2 = this;\n\n      if (statusCode < 100 || statusCode > 699) {\n        throw new Error(\"Invalid status code \".concat(statusCode));\n      } // An SIP element MUST NOT send any provisional response with a\n      // Status-Code other than 100 to a non-INVITE request.\n      // An SIP element MUST NOT respond to a non-INVITE request with a\n      // Status-Code of 100 over any unreliable transport, such as UDP,\n      // before the amount of time it takes a client transaction's Timer E to be reset to T2.\n      // An SIP element MAY respond to a non-INVITE request with a\n      // Status-Code of 100 over a reliable transport at any time.\n      // https://tools.ietf.org/html/rfc4320#section-4.1\n\n\n      if (statusCode > 100 && statusCode <= 199) {\n        throw new Error(\"Provisional response other than 100 not allowed.\");\n      }\n\n      switch (this.state) {\n        case TransactionState.Trying:\n          // While in the \"Trying\" state, if the TU passes a provisional response\n          // to the server transaction, the server transaction MUST enter the \"Proceeding\" state.\n          // The response MUST be passed to the transport layer for transmission.\n          // https://tools.ietf.org/html/rfc3261#section-17.2.2\n          this.lastResponse = response;\n\n          if (statusCode >= 100 && statusCode < 200) {\n            this.stateTransition(TransactionState.Proceeding);\n            this.send(response).catch(function (error) {\n              _this2.logTransportError(error, \"Failed to send provisional response.\");\n            });\n            return;\n          }\n\n          if (statusCode >= 200 && statusCode <= 699) {\n            this.stateTransition(TransactionState.Completed);\n            this.send(response).catch(function (error) {\n              _this2.logTransportError(error, \"Failed to send final response.\");\n            });\n            return;\n          }\n\n          break;\n\n        case TransactionState.Proceeding:\n          // Any further provisional responses that are received from the TU while\n          // in the \"Proceeding\" state MUST be passed to the transport layer for transmission.\n          // If the TU passes a final response (status codes 200-699) to the server while in\n          // the \"Proceeding\" state, the transaction MUST enter the \"Completed\" state, and\n          // the response MUST be passed to the transport layer for transmission.\n          // https://tools.ietf.org/html/rfc3261#section-17.2.2\n          this.lastResponse = response;\n\n          if (statusCode >= 200 && statusCode <= 699) {\n            this.stateTransition(TransactionState.Completed);\n            this.send(response).catch(function (error) {\n              _this2.logTransportError(error, \"Failed to send final response.\");\n            });\n            return;\n          }\n\n          break;\n\n        case TransactionState.Completed:\n          // Any other final responses passed by the TU to the server\n          // transaction MUST be discarded while in the \"Completed\" state.\n          // https://tools.ietf.org/html/rfc3261#section-17.2.2\n          return;\n\n        case TransactionState.Terminated:\n          break;\n\n        default:\n          throw new Error(\"Invalid state \".concat(this.state));\n      }\n\n      var message = \"Non-INVITE server transaction received unexpected \".concat(statusCode, \" response from TU while in state \").concat(this.state, \".\");\n      this.logger.error(message);\n      throw new Error(message);\n    }\n    /**\n     * First, the procedures in [4] are followed, which attempt to deliver the response to a backup.\n     * If those should all fail, based on the definition of failure in [4], the server transaction SHOULD\n     * inform the TU that a failure has occurred, and SHOULD transition to the terminated state.\n     * https://tools.ietf.org/html/rfc3261#section-17.2.4\n     */\n\n  }, {\n    key: \"onTransportError\",\n    value: function onTransportError(error) {\n      if (this.user.onTransportError) {\n        this.user.onTransportError(error);\n      }\n\n      this.stateTransition(TransactionState.Terminated, true);\n    }\n    /** For logging. */\n\n  }, {\n    key: \"typeToString\",\n    value: function typeToString() {\n      return \"non-INVITE server transaction\";\n    }\n  }, {\n    key: \"stateTransition\",\n    value: function stateTransition(newState) {\n      var _this3 = this;\n\n      var dueToTransportError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      // Assert valid state transitions.\n      var invalidStateTransition = function invalidStateTransition() {\n        throw new Error(\"Invalid state transition from \".concat(_this3.state, \" to \").concat(newState));\n      };\n\n      switch (newState) {\n        case TransactionState.Trying:\n          invalidStateTransition();\n          break;\n\n        case TransactionState.Proceeding:\n          if (this.state !== TransactionState.Trying) {\n            invalidStateTransition();\n          }\n\n          break;\n\n        case TransactionState.Completed:\n          if (this.state !== TransactionState.Trying && this.state !== TransactionState.Proceeding) {\n            invalidStateTransition();\n          }\n\n          break;\n\n        case TransactionState.Terminated:\n          if (this.state !== TransactionState.Proceeding && this.state !== TransactionState.Completed) {\n            if (!dueToTransportError) {\n              invalidStateTransition();\n            }\n          }\n\n          break;\n\n        default:\n          invalidStateTransition();\n      } // When the server transaction enters the \"Completed\" state, it MUST set Timer J to fire\n      // in 64*T1 seconds for unreliable transports, and zero seconds for reliable transports.\n      // https://tools.ietf.org/html/rfc3261#section-17.2.2\n\n\n      if (newState === TransactionState.Completed) {\n        this.J = setTimeout(function () {\n          return _this3.timerJ();\n        }, Timers.TIMER_J);\n      } // The server transaction MUST be destroyed the instant it enters the \"Terminated\" state.\n      // https://tools.ietf.org/html/rfc3261#section-17.2.2\n\n\n      if (newState === TransactionState.Terminated) {\n        this.dispose();\n      }\n\n      this.setState(newState);\n    }\n    /**\n     * The server transaction remains in this state until Timer J fires,\n     * at which point it MUST transition to the \"Terminated\" state.\n     * https://tools.ietf.org/html/rfc3261#section-17.2.2\n     */\n\n  }, {\n    key: \"timerJ\",\n    value: function timerJ() {\n      this.logger.debug(\"Timer J expired for NON-INVITE server transaction \".concat(this.id, \".\"));\n\n      if (this.state === TransactionState.Completed) {\n        this.stateTransition(TransactionState.Terminated);\n      }\n    }\n  }, {\n    key: \"kind\",\n    get: function get() {\n      return \"nist\";\n    }\n  }]);\n\n  return NonInviteServerTransaction;\n}(ServerTransaction);","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/node_modules/sip.js/lib/core/transactions/non-invite-server-transaction.js"],"names":["Timers","ServerTransaction","TransactionState","NonInviteServerTransaction","request","transport","user","Trying","J","clearTimeout","undefined","state","Proceeding","lastResponse","Error","send","catch","error","logTransportError","Completed","Terminated","statusCode","response","stateTransition","message","logger","onTransportError","newState","dueToTransportError","invalidStateTransition","setTimeout","timerJ","TIMER_J","dispose","setState","debug","id"],"mappings":"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","sourcesContent":["import { Timers } from \"../timers\";\nimport { ServerTransaction } from \"./server-transaction\";\nimport { TransactionState } from \"./transaction-state\";\n/**\n * Non-INVITE Server Transaction.\n * @remarks\n * https://tools.ietf.org/html/rfc3261#section-17.2.2\n * @public\n */\nexport class NonInviteServerTransaction extends ServerTransaction {\n    /**\n     * Constructor.\n     * After construction the transaction will be in the \"trying\": state and the transaction\n     * `id` will equal the branch parameter set in the Via header of the incoming request.\n     * https://tools.ietf.org/html/rfc3261#section-17.2.2\n     * @param request - Incoming Non-INVITE request from the transport.\n     * @param transport - The transport.\n     * @param user - The transaction user.\n     */\n    constructor(request, transport, user) {\n        super(request, transport, user, TransactionState.Trying, \"sip.transaction.nist\");\n    }\n    /**\n     * Destructor.\n     */\n    dispose() {\n        if (this.J) {\n            clearTimeout(this.J);\n            this.J = undefined;\n        }\n        super.dispose();\n    }\n    /** Transaction kind. Deprecated. */\n    get kind() {\n        return \"nist\";\n    }\n    /**\n     * Receive requests from transport matching this transaction.\n     * @param request - Request matching this transaction.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    receiveRequest(request) {\n        switch (this.state) {\n            case TransactionState.Trying:\n                // Once in the \"Trying\" state, any further request retransmissions are discarded.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                break;\n            case TransactionState.Proceeding:\n                // If a retransmission of the request is received while in the \"Proceeding\" state,\n                // the most recently sent provisional response MUST be passed to the transport layer for retransmission.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                if (!this.lastResponse) {\n                    throw new Error(\"Last response undefined.\");\n                }\n                this.send(this.lastResponse).catch((error) => {\n                    this.logTransportError(error, \"Failed to send retransmission of provisional response.\");\n                });\n                break;\n            case TransactionState.Completed:\n                // While in the \"Completed\" state, the server transaction MUST pass the final response to the transport\n                // layer for retransmission whenever a retransmission of the request is received. Any other final responses\n                // passed by the TU to the server transaction MUST be discarded while in the \"Completed\" state.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                if (!this.lastResponse) {\n                    throw new Error(\"Last response undefined.\");\n                }\n                this.send(this.lastResponse).catch((error) => {\n                    this.logTransportError(error, \"Failed to send retransmission of final response.\");\n                });\n                break;\n            case TransactionState.Terminated:\n                break;\n            default:\n                throw new Error(`Invalid state ${this.state}`);\n        }\n    }\n    /**\n     * Receive responses from TU for this transaction.\n     * @param statusCode - Status code of response. 101-199 not allowed per RFC 4320.\n     * @param response - Response to send.\n     */\n    receiveResponse(statusCode, response) {\n        if (statusCode < 100 || statusCode > 699) {\n            throw new Error(`Invalid status code ${statusCode}`);\n        }\n        // An SIP element MUST NOT send any provisional response with a\n        // Status-Code other than 100 to a non-INVITE request.\n        // An SIP element MUST NOT respond to a non-INVITE request with a\n        // Status-Code of 100 over any unreliable transport, such as UDP,\n        // before the amount of time it takes a client transaction's Timer E to be reset to T2.\n        // An SIP element MAY respond to a non-INVITE request with a\n        // Status-Code of 100 over a reliable transport at any time.\n        // https://tools.ietf.org/html/rfc4320#section-4.1\n        if (statusCode > 100 && statusCode <= 199) {\n            throw new Error(\"Provisional response other than 100 not allowed.\");\n        }\n        switch (this.state) {\n            case TransactionState.Trying:\n                // While in the \"Trying\" state, if the TU passes a provisional response\n                // to the server transaction, the server transaction MUST enter the \"Proceeding\" state.\n                // The response MUST be passed to the transport layer for transmission.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                this.lastResponse = response;\n                if (statusCode >= 100 && statusCode < 200) {\n                    this.stateTransition(TransactionState.Proceeding);\n                    this.send(response).catch((error) => {\n                        this.logTransportError(error, \"Failed to send provisional response.\");\n                    });\n                    return;\n                }\n                if (statusCode >= 200 && statusCode <= 699) {\n                    this.stateTransition(TransactionState.Completed);\n                    this.send(response).catch((error) => {\n                        this.logTransportError(error, \"Failed to send final response.\");\n                    });\n                    return;\n                }\n                break;\n            case TransactionState.Proceeding:\n                // Any further provisional responses that are received from the TU while\n                // in the \"Proceeding\" state MUST be passed to the transport layer for transmission.\n                // If the TU passes a final response (status codes 200-699) to the server while in\n                // the \"Proceeding\" state, the transaction MUST enter the \"Completed\" state, and\n                // the response MUST be passed to the transport layer for transmission.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                this.lastResponse = response;\n                if (statusCode >= 200 && statusCode <= 699) {\n                    this.stateTransition(TransactionState.Completed);\n                    this.send(response).catch((error) => {\n                        this.logTransportError(error, \"Failed to send final response.\");\n                    });\n                    return;\n                }\n                break;\n            case TransactionState.Completed:\n                // Any other final responses passed by the TU to the server\n                // transaction MUST be discarded while in the \"Completed\" state.\n                // https://tools.ietf.org/html/rfc3261#section-17.2.2\n                return;\n            case TransactionState.Terminated:\n                break;\n            default:\n                throw new Error(`Invalid state ${this.state}`);\n        }\n        const message = `Non-INVITE server transaction received unexpected ${statusCode} response from TU while in state ${this.state}.`;\n        this.logger.error(message);\n        throw new Error(message);\n    }\n    /**\n     * First, the procedures in [4] are followed, which attempt to deliver the response to a backup.\n     * If those should all fail, based on the definition of failure in [4], the server transaction SHOULD\n     * inform the TU that a failure has occurred, and SHOULD transition to the terminated state.\n     * https://tools.ietf.org/html/rfc3261#section-17.2.4\n     */\n    onTransportError(error) {\n        if (this.user.onTransportError) {\n            this.user.onTransportError(error);\n        }\n        this.stateTransition(TransactionState.Terminated, true);\n    }\n    /** For logging. */\n    typeToString() {\n        return \"non-INVITE server transaction\";\n    }\n    stateTransition(newState, dueToTransportError = false) {\n        // Assert valid state transitions.\n        const invalidStateTransition = () => {\n            throw new Error(`Invalid state transition from ${this.state} to ${newState}`);\n        };\n        switch (newState) {\n            case TransactionState.Trying:\n                invalidStateTransition();\n                break;\n            case TransactionState.Proceeding:\n                if (this.state !== TransactionState.Trying) {\n                    invalidStateTransition();\n                }\n                break;\n            case TransactionState.Completed:\n                if (this.state !== TransactionState.Trying && this.state !== TransactionState.Proceeding) {\n                    invalidStateTransition();\n                }\n                break;\n            case TransactionState.Terminated:\n                if (this.state !== TransactionState.Proceeding && this.state !== TransactionState.Completed) {\n                    if (!dueToTransportError) {\n                        invalidStateTransition();\n                    }\n                }\n                break;\n            default:\n                invalidStateTransition();\n        }\n        // When the server transaction enters the \"Completed\" state, it MUST set Timer J to fire\n        // in 64*T1 seconds for unreliable transports, and zero seconds for reliable transports.\n        // https://tools.ietf.org/html/rfc3261#section-17.2.2\n        if (newState === TransactionState.Completed) {\n            this.J = setTimeout(() => this.timerJ(), Timers.TIMER_J);\n        }\n        // The server transaction MUST be destroyed the instant it enters the \"Terminated\" state.\n        // https://tools.ietf.org/html/rfc3261#section-17.2.2\n        if (newState === TransactionState.Terminated) {\n            this.dispose();\n        }\n        this.setState(newState);\n    }\n    /**\n     * The server transaction remains in this state until Timer J fires,\n     * at which point it MUST transition to the \"Terminated\" state.\n     * https://tools.ietf.org/html/rfc3261#section-17.2.2\n     */\n    timerJ() {\n        this.logger.debug(`Timer J expired for NON-INVITE server transaction ${this.id}.`);\n        if (this.state === TransactionState.Completed) {\n            this.stateTransition(TransactionState.Terminated);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}