{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{useTranslation}from\"react-i18next\";import{Input,Label,FormGroup,Button}from\"reactstrap\";import SimpleBar from\"simplebar-react\";var EmailList=function EmailList(_ref){var emailList=_ref.emailList,setEmailList=_ref.setEmailList;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),name=_useState2[0],setName=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),email=_useState4[0],setEmail=_useState4[1];var addEmail=function addEmail(){var find=false;emailList.forEach(function(item){if(item.email===email){find=true;}});if(!find){var list=_toConsumableArray(emailList);list.push({name:name,email:email});setEmailList(list);}setName(\"\");setEmail(\"\");};var deleteEmailList=function deleteEmailList(data){setEmailList(emailList.filter(function(item){if(item.name===data.name&&item.email===data.email){return false;}return true;}));};return/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(FormGroup,{className:\"col-4 mb-4\"},/*#__PURE__*/React.createElement(Label,{htmlFor:\"name-i-input\"},t(\"Name\")),/*#__PURE__*/React.createElement(Input,{type:\"text\",className:\"form-control\",id:\"name-i-input\",value:name,onChange:function onChange(e){return setName(e.target.value);},placeholder:t(\"Name\")+'...'})),/*#__PURE__*/React.createElement(FormGroup,{className:\"col-6 mb-4\"},/*#__PURE__*/React.createElement(Label,{htmlFor:\"email-i-input\"},t(\"Email\")),/*#__PURE__*/React.createElement(Input,{type:\"email\",className:\"form-control\",id:\"email-i-input\",value:email,onChange:function onChange(e){return setEmail(e.target.value);},placeholder:t(\"Email\")+'...'})),/*#__PURE__*/React.createElement(FormGroup,{className:\"col-2 mb-4\"},/*#__PURE__*/React.createElement(Button,{id:\"bt-i-input\",color:\"secondary\",style:{marginTop:\"30px\"},block:true,onClick:addEmail},t(\"Invite\"))),/*#__PURE__*/React.createElement(FormGroup,{className:\"col-12 mb-4\"},/*#__PURE__*/React.createElement(\"div\",{className:\"border\"},/*#__PURE__*/React.createElement(SimpleBar,{style:{height:\"150px\"}},/*#__PURE__*/React.createElement(\"table\",{className:\"table table-sm\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,t(\"Name\")),/*#__PURE__*/React.createElement(\"th\",null,t(\"Email\")),/*#__PURE__*/React.createElement(\"th\",{style:{width:\"60px\"}},t(\"Option\")))),/*#__PURE__*/React.createElement(\"tbody\",null,emailList.length===0?/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"td\",{colSpan:3,className:\"text-muted\"},t(\"No records...\"))):emailList.map(function(item,i){return/*#__PURE__*/React.createElement(\"tr\",{key:i},/*#__PURE__*/React.createElement(\"td\",null,item.name),/*#__PURE__*/React.createElement(\"td\",null,item.email),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(Button,{id:\"bt-i-input\",color:\"danger\",block:true,size:\"sm\",onClick:function onClick(){return deleteEmailList(item);}},t(\"Delete\"))));})))))));};export default EmailList;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/EmailList.tsx"],"names":["React","useState","useTranslation","Input","Label","FormGroup","Button","SimpleBar","EmailList","emailList","setEmailList","t","name","setName","email","setEmail","addEmail","find","forEach","item","list","push","deleteEmailList","data","filter","e","target","value","marginTop","height","width","length","map","i"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Input, Label, FormGroup, Button } from \"reactstrap\";\r\nimport SimpleBar from \"simplebar-react\";\r\nimport IEmailList from \"../alias/IEmailList\";\r\n\r\ninterface IProps {\r\n  emailList: IEmailList[];\r\n  setEmailList(value: IEmailList[]): void;\r\n}\r\n\r\nconst EmailList: React.FC<IProps> = ({ emailList, setEmailList }) => {\r\n  const { t } = useTranslation();\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n\r\n  const addEmail = () => {\r\n    let find = false;\r\n    emailList.forEach((item) => {\r\n      if (item.email === email) {\r\n        find = true;\r\n      }\r\n    });\r\n    if (!find) {\r\n      let list = [...emailList];\r\n      list.push({\r\n        name,\r\n        email,\r\n      });\r\n      setEmailList(list);\r\n    }\r\n    setName(\"\");\r\n    setEmail(\"\");\r\n  };\r\n\r\n  const deleteEmailList = (data: IEmailList) => {\r\n    setEmailList(\r\n      emailList.filter((item) => {\r\n        if (item.name === data.name && item.email === data.email) {\r\n          return false;\r\n        }\r\n        return true;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <FormGroup className=\"col-4 mb-4\">\r\n        <Label htmlFor=\"name-i-input\">{t(\"Name\")}</Label>\r\n        <Input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          id=\"name-i-input\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n          placeholder={t(\"Name\") + '...'}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup className=\"col-6 mb-4\">\r\n        <Label htmlFor=\"email-i-input\">{t(\"Email\")}</Label>\r\n        <Input\r\n          type=\"email\"\r\n          className=\"form-control\"\r\n          id=\"email-i-input\"\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          placeholder={t(\"Email\") + '...'}\r\n        />\r\n      </FormGroup>\r\n\r\n      <FormGroup className=\"col-2 mb-4\">\r\n        <Button\r\n          id=\"bt-i-input\"\r\n          color=\"secondary\"\r\n          style={{ marginTop: \"30px\" }}\r\n          block\r\n          onClick={addEmail}\r\n        >\r\n          {t(\"Invite\")}\r\n        </Button>\r\n      </FormGroup>\r\n\r\n      <FormGroup className=\"col-12 mb-4\">\r\n        <div className=\"border\">\r\n          <SimpleBar style={{ height: \"150px\" }}>\r\n            <table className=\"table table-sm\">\r\n              <thead>\r\n                <tr>\r\n                  <th>{t(\"Name\")}</th>\r\n                  <th>{t(\"Email\")}</th>\r\n                  <th style={{ width: \"60px\" }}>{t(\"Option\")}</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {emailList.length === 0 ? (\r\n                  <tr>\r\n                    <td colSpan={3} className=\"text-muted\">\r\n                      {t(\"No records...\")}\r\n                    </td>\r\n                  </tr>\r\n                ) : (\r\n                  emailList.map((item, i) => (\r\n                    <tr key={i}>\r\n                      <td>{item.name}</td>\r\n                      <td>{item.email}</td>\r\n                      <td>\r\n                        <Button\r\n                          id=\"bt-i-input\"\r\n                          color=\"danger\"\r\n                          block\r\n                          size=\"sm\"\r\n                          onClick={() => deleteEmailList(item)}\r\n                        >\r\n                          {t(\"Delete\")}\r\n                        </Button>\r\n                      </td>\r\n                    </tr>\r\n                  ))\r\n                )}\r\n              </tbody>\r\n            </table>\r\n          </SimpleBar>\r\n        </div>\r\n      </FormGroup>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmailList;\r\n"]},"metadata":{},"sourceType":"module"}