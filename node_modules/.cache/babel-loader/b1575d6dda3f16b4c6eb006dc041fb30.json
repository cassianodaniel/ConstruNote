{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\DathApp\\\\ConstruNote\\\\src\\\\components\\\\Video.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport hark from \"hark\";\nexport const Video = ({\n  audioId,\n  videoId,\n  speakerId,\n  videoDevices,\n  audioDevices,\n  speakerDevices,\n  stream,\n  speakerVolume,\n  speaking,\n  modalOpen,\n  setStream,\n  setSpeakerVolume,\n  setSpeaking\n}) => {\n  const [speechEvents, setSpeechEvents] = useState();\n  const [usedVideo, setUsedVideo] = useState(videoId);\n  const [usedAudio, setUsedAudio] = useState(audioId);\n  const [usedSpeaker, setUsedSpeaker] = useState(speakerId);\n  const [localVideoDevices, setLocalVideoDevices] = useState(videoDevices);\n  const [localAudioDevices, setLocalAudioDevices] = useState(audioDevices);\n  const [localSpeakerDevices, setLocalSpeakerDevices] = useState(speakerDevices);\n  const [videoEl, setVideoEl] = useState();\n  const [localStream, setLocalStream] = useState();\n\n  const startStream = (idVideo, idAudio, speakerId) => {\n    try {\n      let videoTag = videoEl;\n\n      if (!videoTag) {\n        videoTag = document.querySelector(\"video.video\");\n      }\n\n      const constraints = {\n        audio: {\n          deviceId: idAudio ? {\n            exact: idAudio\n          } : undefined\n        },\n        video: videoDevices[0] ? {\n          deviceId: idVideo ? {\n            exact: idVideo\n          } : undefined,\n          width: {\n            min: 1280,\n            max: 1920\n          },\n          height: {\n            min: 720,\n            max: 1080\n          }\n        } : false\n      };\n      navigator.mediaDevices.getUserMedia(constraints).then(strm => {\n        if (stream) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n        }\n\n        setStream(strm);\n        setUsedVideo(videoId);\n        setUsedAudio(audioId);\n        setUsedSpeaker(speakerId);\n\n        if (videoTag) {\n          // const streamConstraints = {\n          //     width: { min: 640, ideal: 1280, max: 1920 },\n          //     height: { min: 400, ideal: 720, max: 1080 },\n          // }\n          // const track = stream.getVideoTracks()[0];\n          // track.applyConstraints(streamConstraints);\n          const harkOptions = {};\n          const speech = hark(strm, harkOptions);\n\n          if (speechEvents) {\n            speechEvents.stop();\n          }\n\n          setSpeechEvents(speech);\n          speech.on(\"speaking\", () => {\n            setSpeaking(true);\n          });\n          speech.on(\"stopped_speaking\", () => {\n            setSpeaking(false);\n          });\n          speech.on(\"volume_change\", volume => {\n            setSpeakerVolume(volume);\n          });\n          videoTag.srcObject = strm;\n          if (typeof videoTag.setSinkId == \"function\") videoTag.setSinkId(speakerId).then(_ => console.log(\"Speaker Changed to - \" + speakerId)).catch(_ => console.log(\"error\"));\n        }\n      }).catch(e => {\n        console.log(e);\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const unMount = () => {\n    return () => {\n      if (!modalOpen) {\n        if (stream) {\n          stream.getTracks().forEach(track => {\n            track.stop();\n          });\n        }\n\n        if (speechEvents) {\n          speechEvents.stop();\n        }\n\n        setStream(undefined);\n      }\n    };\n  };\n\n  const init = () => {\n    if (!stream) {\n      const el = document.querySelector(\"#deviceConfigTag\");\n\n      if (el && !videoEl) {\n        setVideoEl(el);\n        startStream(videoId, audioId, speakerId);\n      }\n    }\n  };\n\n  const update = () => {\n    if ((videoId !== usedVideo || audioId !== usedAudio || speakerId !== usedSpeaker || videoDevices !== localVideoDevices || audioDevices !== localAudioDevices || speakerDevices !== localSpeakerDevices) && modalOpen) {\n      setLocalVideoDevices(videoDevices);\n      setLocalAudioDevices(audioDevices);\n      setLocalSpeakerDevices(speakerDevices);\n      startStream(videoId, audioId, speakerId);\n    }\n  };\n\n  const onStreamChange = () => {\n    if (localStream && localStream.id !== (stream === null || stream === void 0 ? void 0 : stream.id)) {\n      localStream.getTracks().forEach(track => {\n        track.stop();\n      });\n    }\n\n    setLocalStream(stream);\n  };\n\n  useEffect(unMount, [modalOpen]);\n  useEffect(init, []);\n  useEffect(update, [videoId, audioId, speakerId, videoDevices]);\n  useEffect(onStreamChange, [stream]);\n  return /*#__PURE__*/React.createElement(\"video\", {\n    style: {\n      maxWidth: \"463px\",\n      display: videoDevices[0] ? \"block\" : \"none\"\n    },\n    id: \"deviceConfigTag\",\n    className: \"video\",\n    autoPlay: true,\n    playsInline: true,\n    muted: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 5\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/Digivox/dev/DathApp/ConstruNote/src/components/Video.tsx"],"names":["React","useEffect","useState","hark","Video","audioId","videoId","speakerId","videoDevices","audioDevices","speakerDevices","stream","speakerVolume","speaking","modalOpen","setStream","setSpeakerVolume","setSpeaking","speechEvents","setSpeechEvents","usedVideo","setUsedVideo","usedAudio","setUsedAudio","usedSpeaker","setUsedSpeaker","localVideoDevices","setLocalVideoDevices","localAudioDevices","setLocalAudioDevices","localSpeakerDevices","setLocalSpeakerDevices","videoEl","setVideoEl","localStream","setLocalStream","startStream","idVideo","idAudio","videoTag","document","querySelector","constraints","audio","deviceId","exact","undefined","video","width","min","max","height","navigator","mediaDevices","getUserMedia","then","strm","getTracks","forEach","track","stop","harkOptions","speech","on","volume","srcObject","setSinkId","_","console","log","catch","e","unMount","init","el","update","onStreamChange","id","maxWidth","display"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAgBA,OAAO,MAAMC,KAAsB,GAAG,CAAC;AACrCC,EAAAA,OADqC;AAErCC,EAAAA,OAFqC;AAGrCC,EAAAA,SAHqC;AAIrCC,EAAAA,YAJqC;AAKrCC,EAAAA,YALqC;AAMrCC,EAAAA,cANqC;AAOrCC,EAAAA,MAPqC;AAQrCC,EAAAA,aARqC;AASrCC,EAAAA,QATqC;AAUrCC,EAAAA,SAVqC;AAWrCC,EAAAA,SAXqC;AAYrCC,EAAAA,gBAZqC;AAarCC,EAAAA;AAbqC,CAAD,KAchC;AACJ,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,EAAhD;AACA,QAAM,CAACkB,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAqBI,OAArB,CAA1C;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAAqBG,OAArB,CAA1C;AACA,QAAM,CAACmB,WAAD,EAAcC,cAAd,IAAgCvB,QAAQ,CAAqBK,SAArB,CAA9C;AACA,QAAM,CAACmB,iBAAD,EAAoBC,oBAApB,IAA4CzB,QAAQ,CACxDM,YADwD,CAA1D;AAGA,QAAM,CAACoB,iBAAD,EAAoBC,oBAApB,IAA4C3B,QAAQ,CACxDO,YADwD,CAA1D;AAGA,QAAM,CAACqB,mBAAD,EAAsBC,sBAAtB,IAAgD7B,QAAQ,CAE5DQ,cAF4D,CAA9D;AAGA,QAAM,CAACsB,OAAD,EAAUC,UAAV,IAAwB/B,QAAQ,EAAtC;AACA,QAAM,CAACgC,WAAD,EAAcC,cAAd,IAAgCjC,QAAQ,EAA9C;;AACA,QAAMkC,WAAW,GAAG,CAClBC,OADkB,EAElBC,OAFkB,EAGlB/B,SAHkB,KAIf;AACH,QAAI;AACF,UAAIgC,QAAa,GAAGP,OAApB;;AACA,UAAI,CAACO,QAAL,EAAe;AACbA,QAAAA,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,aAAvB,CAAX;AACD;;AACD,YAAMC,WAAW,GAAG;AAClBC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,QAAQ,EAAEN,OAAO,GAAG;AAAEO,YAAAA,KAAK,EAAEP;AAAT,WAAH,GAAwBQ;AAA3C,SADW;AAElBC,QAAAA,KAAK,EAAEvC,YAAY,CAAC,CAAD,CAAZ,GACH;AACEoC,UAAAA,QAAQ,EAAEP,OAAO,GAAG;AAAEQ,YAAAA,KAAK,EAAER;AAAT,WAAH,GAAwBS,SAD3C;AAEEE,UAAAA,KAAK,EAAE;AAAEC,YAAAA,GAAG,EAAE,IAAP;AAAaC,YAAAA,GAAG,EAAE;AAAlB,WAFT;AAGEC,UAAAA,MAAM,EAAE;AAAEF,YAAAA,GAAG,EAAE,GAAP;AAAYC,YAAAA,GAAG,EAAE;AAAjB;AAHV,SADG,GAMH;AARc,OAApB;AAUAE,MAAAA,SAAS,CAACC,YAAV,CACGC,YADH,CACgBZ,WADhB,EAEGa,IAFH,CAESC,IAAD,IAAU;AACd,YAAI7C,MAAJ,EAAY;AACVA,UAAAA,MAAM,CAAC8C,SAAP,GAAmBC,OAAnB,CAA4BC,KAAD,IAAW;AACpCA,YAAAA,KAAK,CAACC,IAAN;AACD,WAFD;AAGD;;AACD7C,QAAAA,SAAS,CAACyC,IAAD,CAAT;AACAnC,QAAAA,YAAY,CAACf,OAAD,CAAZ;AACAiB,QAAAA,YAAY,CAAClB,OAAD,CAAZ;AACAoB,QAAAA,cAAc,CAAClB,SAAD,CAAd;;AACA,YAAIgC,QAAJ,EAAc;AACZ;AACA;AACA;AACA;AACA;AACA;AAEA,gBAAMsB,WAAW,GAAG,EAApB;AACA,gBAAMC,MAAM,GAAG3D,IAAI,CAACqD,IAAD,EAAOK,WAAP,CAAnB;;AACA,cAAI3C,YAAJ,EAAkB;AAChBA,YAAAA,YAAY,CAAC0C,IAAb;AACD;;AACDzC,UAAAA,eAAe,CAAC2C,MAAD,CAAf;AACAA,UAAAA,MAAM,CAACC,EAAP,CAAU,UAAV,EAAsB,MAAM;AAC1B9C,YAAAA,WAAW,CAAC,IAAD,CAAX;AACD,WAFD;AAIA6C,UAAAA,MAAM,CAACC,EAAP,CAAU,kBAAV,EAA8B,MAAM;AAClC9C,YAAAA,WAAW,CAAC,KAAD,CAAX;AACD,WAFD;AAIA6C,UAAAA,MAAM,CAACC,EAAP,CAAU,eAAV,EAA4BC,MAAD,IAAY;AACrChD,YAAAA,gBAAgB,CAACgD,MAAD,CAAhB;AACD,WAFD;AAIAzB,UAAAA,QAAQ,CAAC0B,SAAT,GAAqBT,IAArB;AACA,cAAI,OAAOjB,QAAQ,CAAC2B,SAAhB,IAA6B,UAAjC,EACE3B,QAAQ,CACL2B,SADH,CACa3D,SADb,EAEGgD,IAFH,CAESY,CAAD,IACJC,OAAO,CAACC,GAAR,CAAY,0BAA0B9D,SAAtC,CAHJ,EAKG+D,KALH,CAKUH,CAAD,IAAYC,OAAO,CAACC,GAAR,CAAY,OAAZ,CALrB;AAMH;AACF,OA/CH,EAgDGC,KAhDH,CAgDUC,CAAD,IAAO;AACZH,QAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACD,OAlDH;AAmDD,KAlED,CAkEE,OAAOA,CAAP,EAAU;AACVH,MAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACD;AACF,GA1ED;;AA2EA,QAAMC,OAAO,GAAG,MAAM;AACpB,WAAO,MAAM;AACX,UAAI,CAAC1D,SAAL,EAAgB;AACd,YAAIH,MAAJ,EAAY;AACVA,UAAAA,MAAM,CAAC8C,SAAP,GAAmBC,OAAnB,CAA4BC,KAAD,IAAW;AACpCA,YAAAA,KAAK,CAACC,IAAN;AACD,WAFD;AAGD;;AACD,YAAI1C,YAAJ,EAAkB;AAChBA,UAAAA,YAAY,CAAC0C,IAAb;AACD;;AACD7C,QAAAA,SAAS,CAAC+B,SAAD,CAAT;AACD;AACF,KAZD;AAaD,GAdD;;AAeA,QAAM2B,IAAI,GAAG,MAAM;AACjB,QAAI,CAAC9D,MAAL,EAAa;AACX,YAAM+D,EAAE,GAAGlC,QAAQ,CAACC,aAAT,CAAuB,kBAAvB,CAAX;;AACA,UAAIiC,EAAE,IAAI,CAAC1C,OAAX,EAAoB;AAClBC,QAAAA,UAAU,CAACyC,EAAD,CAAV;AACAtC,QAAAA,WAAW,CAAC9B,OAAD,EAAUD,OAAV,EAAmBE,SAAnB,CAAX;AACD;AACF;AACF,GARD;;AASA,QAAMoE,MAAM,GAAG,MAAM;AACnB,QACE,CAACrE,OAAO,KAAKc,SAAZ,IACCf,OAAO,KAAKiB,SADb,IAECf,SAAS,KAAKiB,WAFf,IAGChB,YAAY,KAAKkB,iBAHlB,IAICjB,YAAY,KAAKmB,iBAJlB,IAKClB,cAAc,KAAKoB,mBALrB,KAMAhB,SAPF,EAQE;AACAa,MAAAA,oBAAoB,CAACnB,YAAD,CAApB;AACAqB,MAAAA,oBAAoB,CAACpB,YAAD,CAApB;AACAsB,MAAAA,sBAAsB,CAACrB,cAAD,CAAtB;AACA0B,MAAAA,WAAW,CAAC9B,OAAD,EAAUD,OAAV,EAAmBE,SAAnB,CAAX;AACD;AACF,GAfD;;AAgBA,QAAMqE,cAAc,GAAG,MAAM;AAC3B,QAAI1C,WAAW,IAAIA,WAAW,CAAC2C,EAAZ,MAAmBlE,MAAnB,aAAmBA,MAAnB,uBAAmBA,MAAM,CAAEkE,EAA3B,CAAnB,EAAkD;AAChD3C,MAAAA,WAAW,CAACuB,SAAZ,GAAwBC,OAAxB,CAAiCC,KAAD,IAAW;AACzCA,QAAAA,KAAK,CAACC,IAAN;AACD,OAFD;AAGD;;AACDzB,IAAAA,cAAc,CAACxB,MAAD,CAAd;AACD,GAPD;;AAQAV,EAAAA,SAAS,CAACuE,OAAD,EAAU,CAAC1D,SAAD,CAAV,CAAT;AACAb,EAAAA,SAAS,CAACwE,IAAD,EAAO,EAAP,CAAT;AACAxE,EAAAA,SAAS,CAAC0E,MAAD,EAAS,CAACrE,OAAD,EAAUD,OAAV,EAAmBE,SAAnB,EAA8BC,YAA9B,CAAT,CAAT;AACAP,EAAAA,SAAS,CAAC2E,cAAD,EAAiB,CAACjE,MAAD,CAAjB,CAAT;AACA,sBACE;AACE,IAAA,KAAK,EAAE;AAAEmE,MAAAA,QAAQ,EAAE,OAAZ;AAAqBC,MAAAA,OAAO,EAAEvE,YAAY,CAAC,CAAD,CAAZ,GAAkB,OAAlB,GAA4B;AAA1D,KADT;AAEE,IAAA,EAAE,EAAC,iBAFL;AAGE,IAAA,SAAS,EAAC,OAHZ;AAIE,IAAA,QAAQ,MAJV;AAKE,IAAA,WAAW,MALb;AAME,IAAA,KAAK,MANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAUD,CAvKM","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport hark from \"hark\";\r\nexport interface Video {\r\n  audioId: string | undefined;\r\n  videoId: string | undefined;\r\n  speakerId: string | undefined;\r\n  videoDevices: MediaDeviceInfo[];\r\n  audioDevices: MediaDeviceInfo[];\r\n  speakerDevices: MediaDeviceInfo[];\r\n  speakerVolume: number | undefined;\r\n  speaking: boolean | undefined;\r\n  stream: MediaStream | undefined;\r\n  setStream(val: MediaStream | undefined): void;\r\n  modalOpen: boolean;\r\n  setSpeakerVolume(val: number): void;\r\n  setSpeaking(val: boolean): void;\r\n}\r\nexport const Video: React.FC<Video> = ({\r\n  audioId,\r\n  videoId,\r\n  speakerId,\r\n  videoDevices,\r\n  audioDevices,\r\n  speakerDevices,\r\n  stream,\r\n  speakerVolume,\r\n  speaking,\r\n  modalOpen,\r\n  setStream,\r\n  setSpeakerVolume,\r\n  setSpeaking,\r\n}) => {\r\n  const [speechEvents, setSpeechEvents] = useState<hark.Harker>();\r\n  const [usedVideo, setUsedVideo] = useState<string | undefined>(videoId);\r\n  const [usedAudio, setUsedAudio] = useState<string | undefined>(audioId);\r\n  const [usedSpeaker, setUsedSpeaker] = useState<string | undefined>(speakerId);\r\n  const [localVideoDevices, setLocalVideoDevices] = useState<MediaDeviceInfo[]>(\r\n    videoDevices\r\n  );\r\n  const [localAudioDevices, setLocalAudioDevices] = useState<MediaDeviceInfo[]>(\r\n    audioDevices\r\n  );\r\n  const [localSpeakerDevices, setLocalSpeakerDevices] = useState<\r\n    MediaDeviceInfo[]\r\n  >(speakerDevices);\r\n  const [videoEl, setVideoEl] = useState<HTMLVideoElement>();\r\n  const [localStream, setLocalStream] = useState<MediaStream>();\r\n  const startStream = (\r\n    idVideo: string | undefined,\r\n    idAudio: string | undefined,\r\n    speakerId: string | undefined\r\n  ) => {\r\n    try {\r\n      let videoTag: any = videoEl;\r\n      if (!videoTag) {\r\n        videoTag = document.querySelector(\"video.video\") as HTMLVideoElement;\r\n      }\r\n      const constraints = {\r\n        audio: { deviceId: idAudio ? { exact: idAudio } : undefined },\r\n        video: videoDevices[0]\r\n          ? {\r\n              deviceId: idVideo ? { exact: idVideo } : undefined,\r\n              width: { min: 1280, max: 1920 },\r\n              height: { min: 720, max: 1080 },\r\n            }\r\n          : false,\r\n      };\r\n      navigator.mediaDevices\r\n        .getUserMedia(constraints)\r\n        .then((strm) => {\r\n          if (stream) {\r\n            stream.getTracks().forEach((track) => {\r\n              track.stop();\r\n            });\r\n          }\r\n          setStream(strm);\r\n          setUsedVideo(videoId);\r\n          setUsedAudio(audioId);\r\n          setUsedSpeaker(speakerId);\r\n          if (videoTag) {\r\n            // const streamConstraints = {\r\n            //     width: { min: 640, ideal: 1280, max: 1920 },\r\n            //     height: { min: 400, ideal: 720, max: 1080 },\r\n            // }\r\n            // const track = stream.getVideoTracks()[0];\r\n            // track.applyConstraints(streamConstraints);\r\n\r\n            const harkOptions = {};\r\n            const speech = hark(strm, harkOptions);\r\n            if (speechEvents) {\r\n              speechEvents.stop();\r\n            }\r\n            setSpeechEvents(speech);\r\n            speech.on(\"speaking\", () => {\r\n              setSpeaking(true);\r\n            });\r\n\r\n            speech.on(\"stopped_speaking\", () => {\r\n              setSpeaking(false);\r\n            });\r\n\r\n            speech.on(\"volume_change\", (volume) => {\r\n              setSpeakerVolume(volume);\r\n            });\r\n\r\n            videoTag.srcObject = strm;\r\n            if (typeof videoTag.setSinkId == \"function\")\r\n              videoTag\r\n                .setSinkId(speakerId)\r\n                .then((_: any) =>\r\n                  console.log(\"Speaker Changed to - \" + speakerId)\r\n                )\r\n                .catch((_: any) => console.log(\"error\"));\r\n          }\r\n        })\r\n        .catch((e) => {\r\n          console.log(e);\r\n        });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n  const unMount = () => {\r\n    return () => {\r\n      if (!modalOpen) {\r\n        if (stream) {\r\n          stream.getTracks().forEach((track) => {\r\n            track.stop();\r\n          });\r\n        }\r\n        if (speechEvents) {\r\n          speechEvents.stop();\r\n        }\r\n        setStream(undefined);\r\n      }\r\n    };\r\n  };\r\n  const init = () => {\r\n    if (!stream) {\r\n      const el = document.querySelector(\"#deviceConfigTag\") as HTMLVideoElement;\r\n      if (el && !videoEl) {\r\n        setVideoEl(el);\r\n        startStream(videoId, audioId, speakerId);\r\n      }\r\n    }\r\n  };\r\n  const update = () => {\r\n    if (\r\n      (videoId !== usedVideo ||\r\n        audioId !== usedAudio ||\r\n        speakerId !== usedSpeaker ||\r\n        videoDevices !== localVideoDevices ||\r\n        audioDevices !== localAudioDevices ||\r\n        speakerDevices !== localSpeakerDevices) &&\r\n      modalOpen\r\n    ) {\r\n      setLocalVideoDevices(videoDevices);\r\n      setLocalAudioDevices(audioDevices);\r\n      setLocalSpeakerDevices(speakerDevices);\r\n      startStream(videoId, audioId, speakerId);\r\n    }\r\n  };\r\n  const onStreamChange = () => {\r\n    if (localStream && localStream.id !== stream?.id) {\r\n      localStream.getTracks().forEach((track) => {\r\n        track.stop();\r\n      });\r\n    }\r\n    setLocalStream(stream);\r\n  };\r\n  useEffect(unMount, [modalOpen]);\r\n  useEffect(init, []);\r\n  useEffect(update, [videoId, audioId, speakerId, videoDevices]);\r\n  useEffect(onStreamChange, [stream]);\r\n  return (\r\n    <video\r\n      style={{ maxWidth: \"463px\", display: videoDevices[0] ? \"block\" : \"none\" }}\r\n      id=\"deviceConfigTag\"\r\n      className=\"video\"\r\n      autoPlay\r\n      playsInline\r\n      muted\r\n    />\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}