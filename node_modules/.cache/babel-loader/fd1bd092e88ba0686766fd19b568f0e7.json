{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import{parseGroup}from\"../utils/parseUtils\";var GroupsBusiness=/*#__PURE__*/function(){function GroupsBusiness(api,settings,contacts){var _this=this;_classCallCheck(this,GroupsBusiness);this.api=api;this.settings=settings;this.contacts=contacts;this.groups=void 0;this.getGroups=function(){return _this.groups;};this.list=function(callback){_this.api.getGroups({paramsUrl:{members:true,limit:5000}},function(apiGroups,err){// Populando o Map de grupos\nif(!err){if(!_this.api)return;_this.api.getContacts({paramsUrl:{contactType:\"group\",limit:5000,added:true}},function(apiGroupsContactsFormat){_this.populate(apiGroups,apiGroupsContactsFormat);callback(Array.from(_this.groups.values()));});}});};this.create=function(group,callback){if(!_this.api)return;_this.settings.get(function(settings){var contactsId=group===null||group===void 0?void 0:group.contacts.map(function(contact){return contact.id;});var body={name:group===null||group===void 0?void 0:group.name,description:group===null||group===void 0?void 0:group.description,members:contactsId,domain:settings.sipDomain};_this.api.createGroup({body:body},function(returnGroup,err){if(err)return;if(!_this.api)return;if(!returnGroup)return;_this.api.getGroup(returnGroup.id,{paramsUrl:{members:true}},function(groupWithMember){var parsedGroup=parseGroup(groupWithMember);_this.groups.set(parsedGroup.groupId,parsedGroup);if(callback){callback(parsedGroup);}});});});};this.removeMember=function(grp,mbr,callback){_this.api.removeMember({groupId:grp,memberId:mbr.userId},callback);};this.addMember=function(grp,ctc,callback){_this.api.addMember({groupId:grp.groupId,memberId:ctc.id},callback);};this.groups=new Map();}_createClass(GroupsBusiness,[{key:\"populate\",value:function populate(apiGroups,apiGroupsContactsFormat){var _this2=this;apiGroups.groups.forEach(function(group){var apiContactGroup=apiGroupsContactsFormat.contacts.find(function(grp){return grp.id===group.id;});_this2.groups.set(group.id,parseGroup(Object.assign(group,apiContactGroup)));});}},{key:\"leftingGroup\",value:function leftingGroup(request,callback){this.api.leaveGroup({memberId:request.memberId,groupId:request.groupId},callback);}},{key:\"editGroupInfo\",value:function editGroupInfo(request,callback){this.api.changeGroupInfo({groupId:request.groupId,groupName:request.groupName,members:request.members,description:request.description},callback);}}]);return GroupsBusiness;}();export{GroupsBusiness as default};;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Groups.ts"],"names":["parseGroup","GroupsBusiness","api","settings","contacts","groups","getGroups","list","callback","paramsUrl","members","limit","apiGroups","err","getContacts","contactType","added","apiGroupsContactsFormat","populate","Array","from","values","create","group","get","contactsId","map","contact","id","body","name","description","domain","sipDomain","createGroup","returnGroup","getGroup","groupWithMember","parsedGroup","set","groupId","removeMember","grp","mbr","memberId","userId","addMember","ctc","Map","forEach","apiContactGroup","find","Object","assign","request","leaveGroup","changeGroupInfo","groupName"],"mappings":"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","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport IGroup from \"../../alias/IGroup\";\r\nimport INewGroup from \"../../alias/INewGroup\";\r\nimport IMember from \"../../alias/IMember\";\r\nimport IContact from \"../../alias/IContact\";\r\nimport { parseGroup } from \"../utils/parseUtils\";\r\nimport ContactsBusiness from \"./Contacts\";\r\nimport SettingsBusiness from \"./Settings\";\r\nimport {\r\n  LeaveGroupCallback,\r\n  LeaveGroupRequest,\r\n  RemoveMemberCallback,\r\n  AddMemberCallback,\r\n  ChangeGroupInfoRequest,\r\n  ChangeGroupInfoCallback\r\n} from \"@digivox/apicommunicator/dist/types/types/types\";\r\n\r\nexport interface NewGroupCallback {\r\n  (group: IGroup | undefined): void;\r\n}\r\nexport interface GroupsCallBack {\r\n  (groups: IGroup[]): void;\r\n}\r\nexport default interface GroupsBusiness {\r\n  getGroups(): Map<string, IGroup>;\r\n  list(callback: GroupsCallBack): void;\r\n  create(group: INewGroup | undefined, cb: NewGroupCallback | undefined): void;\r\n}\r\nexport default class GroupsBusiness {\r\n  public groups: Map<string, IGroup>;\r\n  constructor(\r\n    private api: API,\r\n    private settings: SettingsBusiness,\r\n    private contacts: ContactsBusiness\r\n  ) {\r\n    this.groups = new Map<string, IGroup>();\r\n  }\r\n  getGroups = () => {\r\n    return this.groups;\r\n  };\r\n  list = (callback: GroupsCallBack) => {\r\n    this.api.getGroups(\r\n      { paramsUrl: { members: true, limit: 5000 } },\r\n      (apiGroups: any, err) => {\r\n        // Populando o Map de grupos\r\n        if (!err) {\r\n          if (!this.api) return;\r\n          this.api.getContacts(\r\n            { paramsUrl: { contactType: \"group\", limit: 5000, added: true } },\r\n            (apiGroupsContactsFormat) => {\r\n              this.populate(apiGroups, apiGroupsContactsFormat);\r\n              callback(Array.from(this.groups.values()));\r\n            }\r\n          );\r\n        }\r\n      }\r\n    );\r\n  };\r\n  create = (group: INewGroup | undefined, callback: NewGroupCallback | undefined) => {\r\n    if (!this.api) return;\r\n    this.settings.get((settings) => {\r\n      const contactsId = group?.contacts.map((contact) => contact.id);\r\n      const body = {\r\n        name: group?.name,\r\n        description: group?.description,\r\n        members: contactsId,\r\n        domain: settings.sipDomain,\r\n      };\r\n      this.api.createGroup({ body }, (returnGroup, err) => {\r\n        if (err) return;\r\n        if (!this.api) return;\r\n        if (!returnGroup) return;\r\n        this.api.getGroup(\r\n          returnGroup.id,\r\n          { paramsUrl: { members: true } },\r\n          (groupWithMember) => {\r\n            const parsedGroup = parseGroup(groupWithMember);\r\n            this.groups.set(parsedGroup.groupId, parsedGroup);\r\n            if(callback){\r\n              callback(parsedGroup);\r\n            }\r\n          }\r\n        );\r\n      });\r\n    });\r\n  };\r\n  populate(apiGroups: any, apiGroupsContactsFormat: any) {\r\n    apiGroups.groups.forEach((group: any) => {\r\n      const apiContactGroup = apiGroupsContactsFormat.contacts.find(\r\n        (grp: any) => grp.id === group.id\r\n      );\r\n      this.groups.set(\r\n        group.id,\r\n        parseGroup(Object.assign(group, apiContactGroup))\r\n      );\r\n    });\r\n  };\r\n  leftingGroup(request: LeaveGroupRequest, callback: LeaveGroupCallback){\r\n    this.api.leaveGroup({memberId: request.memberId, groupId: request.groupId}, callback);\r\n  };\r\n  removeMember = (grp: string, mbr: IMember, callback: RemoveMemberCallback) => {\r\n    this.api.removeMember(\r\n      {\r\n        groupId: grp,\r\n        memberId: mbr.userId\r\n      },\r\n      callback\r\n    );\r\n  };\r\n  editGroupInfo(request: ChangeGroupInfoRequest, callback: ChangeGroupInfoCallback){\r\n    this.api.changeGroupInfo({\r\n      groupId: request.groupId,\r\n      groupName: request.groupName,\r\n      members: request.members,\r\n      description: request.description\r\n    }, callback)\r\n  }\r\n  addMember = (grp: IGroup, ctc: IContact, callback: AddMemberCallback) => {\r\n    this.api.addMember(\r\n      {\r\n        groupId: grp.groupId,\r\n        memberId: ctc.id\r\n      },\r\n      callback\r\n    ) \r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}