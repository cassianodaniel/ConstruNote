{"ast":null,"code":"import { parseGroup } from \"../utils/parseUtils\";\nexport default class GroupsBusiness {\n  constructor(api, settings, contacts) {\n    this.api = api;\n    this.settings = settings;\n    this.contacts = contacts;\n    this.groups = void 0;\n    this.chat = void 0;\n\n    this.setChat = chat => {\n      this.chat = chat;\n    };\n\n    this.getGroups = () => {\n      return this.groups;\n    };\n\n    this.list = callback => {\n      this.api.getGroups({\n        paramsUrl: {\n          members: true,\n          limit: 5000\n        }\n      }, (apiGroups, err) => {\n        // Populando o Map de grupos\n        if (!err) {\n          if (!this.api) return;\n          this.api.getContacts({\n            paramsUrl: {\n              contactType: \"group\",\n              limit: 5000,\n              added: true\n            }\n          }, apiGroupsContactsFormat => {\n            this.populate(apiGroups, apiGroupsContactsFormat);\n            callback(Array.from(this.groups.values()));\n          });\n        }\n      });\n    };\n\n    this.create = (group, callback) => {\n      if (!this.api) return;\n      this.settings.get(settings => {\n        const contactsId = group === null || group === void 0 ? void 0 : group.contacts.map(contact => contact.id);\n        const body = {\n          name: group === null || group === void 0 ? void 0 : group.name,\n          description: group === null || group === void 0 ? void 0 : group.description,\n          members: contactsId,\n          domain: settings.sipDomain\n        };\n        this.api.createGroup({\n          body\n        }, (returnGroup, err) => {\n          if (err) return;\n          if (!this.api) return;\n          if (!returnGroup) return;\n          this.api.getGroup(returnGroup.id, {\n            paramsUrl: {\n              members: true\n            }\n          }, groupWithMember => {\n            var _this$chat;\n\n            const parsedGroup = parseGroup(groupWithMember, (_this$chat = this.chat) === null || _this$chat === void 0 ? void 0 : _this$chat.chat.presences);\n            this.groups.set(parsedGroup.groupId, parsedGroup);\n\n            if (callback) {\n              callback(parsedGroup);\n            }\n          });\n        });\n      });\n    };\n\n    this.removeMember = (grp, mbr, callback) => {\n      this.api.removeMember({\n        groupId: grp,\n        memberId: mbr.userId\n      }, callback);\n    };\n\n    this.addMember = (grp, ctc, callback) => {\n      this.api.addMember({\n        groupId: grp.groupId,\n        memberId: ctc.id\n      }, callback);\n    };\n\n    this.groups = new Map();\n  }\n\n  populate(apiGroups, apiGroupsContactsFormat) {\n    apiGroups.groups.forEach(group => {\n      var _this$chat2;\n\n      const apiContactGroup = apiGroupsContactsFormat.contacts.find(grp => grp.id === group.id);\n      this.groups.set(group.id, parseGroup(Object.assign(group, apiContactGroup), (_this$chat2 = this.chat) === null || _this$chat2 === void 0 ? void 0 : _this$chat2.chat.presences));\n    });\n  }\n\n  leftingGroup(request, callback) {\n    this.api.leaveGroup({\n      memberId: request.memberId,\n      groupId: request.groupId\n    }, callback);\n  }\n\n  editGroupInfo(request, callback) {\n    this.api.changeGroupInfo({\n      groupId: request.groupId,\n      groupName: request.groupName,\n      members: request.members,\n      description: request.description\n    }, callback);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/business/Groups.ts"],"names":["parseGroup","GroupsBusiness","constructor","api","settings","contacts","groups","chat","setChat","getGroups","list","callback","paramsUrl","members","limit","apiGroups","err","getContacts","contactType","added","apiGroupsContactsFormat","populate","Array","from","values","create","group","get","contactsId","map","contact","id","body","name","description","domain","sipDomain","createGroup","returnGroup","getGroup","groupWithMember","parsedGroup","presences","set","groupId","removeMember","grp","mbr","memberId","userId","addMember","ctc","Map","forEach","apiContactGroup","find","Object","assign","leftingGroup","request","leaveGroup","editGroupInfo","changeGroupInfo","groupName"],"mappings":"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","sourcesContent":["import API from \"@digivox/apicommunicator\";\r\nimport IGroup from \"../../alias/IGroup\";\r\nimport INewGroup from \"../../alias/INewGroup\";\r\nimport IMember from \"../../alias/IMember\";\r\nimport IContact from \"../../alias/IContact\";\r\nimport { parseGroup } from \"../utils/parseUtils\";\r\nimport ContactsBusiness from \"./Contacts\";\r\nimport SettingsBusiness from \"./Settings\";\r\nimport {\r\n  LeaveGroupCallback,\r\n  LeaveGroupRequest,\r\n  RemoveMemberCallback,\r\n  AddMemberCallback,\r\n  ChangeGroupInfoRequest,\r\n  ChangeGroupInfoCallback,\r\n} from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport SquadChatCommunicator from \"../SquadChatCommunicator\";\r\n\r\nexport interface NewGroupCallback {\r\n  (group: IGroup | undefined): void;\r\n}\r\nexport interface GroupsCallBack {\r\n  (groups: IGroup[]): void;\r\n}\r\nexport default interface GroupsBusiness {\r\n  getGroups(): Map<string, IGroup>;\r\n  list(callback: GroupsCallBack): void;\r\n  create(group: INewGroup | undefined, cb: NewGroupCallback | undefined): void;\r\n}\r\nexport default class GroupsBusiness {\r\n  public groups: Map<string, IGroup>;\r\n  private chat: SquadChatCommunicator | undefined;\r\n  constructor(\r\n    private api: API,\r\n    private settings: SettingsBusiness,\r\n    private contacts: ContactsBusiness\r\n  ) {\r\n    this.groups = new Map<string, IGroup>();\r\n  }\r\n  setChat = (chat: SquadChatCommunicator) => {\r\n    this.chat = chat;\r\n  };\r\n  getGroups = () => {\r\n    return this.groups;\r\n  };\r\n  list = (callback: GroupsCallBack) => {\r\n    this.api.getGroups(\r\n      { paramsUrl: { members: true, limit: 5000 } },\r\n      (apiGroups: any, err) => {\r\n        // Populando o Map de grupos\r\n        if (!err) {\r\n          if (!this.api) return;\r\n          this.api.getContacts(\r\n            { paramsUrl: { contactType: \"group\", limit: 5000, added: true } },\r\n            (apiGroupsContactsFormat) => {\r\n              this.populate(apiGroups, apiGroupsContactsFormat);\r\n              callback(Array.from(this.groups.values()));\r\n            }\r\n          );\r\n        }\r\n      }\r\n    );\r\n  };\r\n  create = (\r\n    group: INewGroup | undefined,\r\n    callback: NewGroupCallback | undefined\r\n  ) => {\r\n    if (!this.api) return;\r\n    this.settings.get((settings) => {\r\n      const contactsId = group?.contacts.map((contact) => contact.id);\r\n      const body = {\r\n        name: group?.name,\r\n        description: group?.description,\r\n        members: contactsId,\r\n        domain: settings.sipDomain,\r\n      };\r\n      this.api.createGroup({ body }, (returnGroup, err) => {\r\n        if (err) return;\r\n        if (!this.api) return;\r\n        if (!returnGroup) return;\r\n        this.api.getGroup(\r\n          returnGroup.id,\r\n          { paramsUrl: { members: true } },\r\n          (groupWithMember) => {\r\n            const parsedGroup = parseGroup(\r\n              groupWithMember,\r\n              this.chat?.chat.presences\r\n            );\r\n            this.groups.set(parsedGroup.groupId, parsedGroup);\r\n            if (callback) {\r\n              callback(parsedGroup);\r\n            }\r\n          }\r\n        );\r\n      });\r\n    });\r\n  };\r\n  populate(apiGroups: any, apiGroupsContactsFormat: any) {\r\n    apiGroups.groups.forEach((group: any) => {\r\n      const apiContactGroup = apiGroupsContactsFormat.contacts.find(\r\n        (grp: any) => grp.id === group.id\r\n      );\r\n      this.groups.set(\r\n        group.id,\r\n        parseGroup(\r\n          Object.assign(group, apiContactGroup),\r\n          this.chat?.chat.presences\r\n        )\r\n      );\r\n    });\r\n  }\r\n  leftingGroup(request: LeaveGroupRequest, callback: LeaveGroupCallback) {\r\n    this.api.leaveGroup(\r\n      { memberId: request.memberId, groupId: request.groupId },\r\n      callback\r\n    );\r\n  }\r\n  removeMember = (\r\n    grp: string,\r\n    mbr: IMember,\r\n    callback: RemoveMemberCallback\r\n  ) => {\r\n    this.api.removeMember(\r\n      {\r\n        groupId: grp,\r\n        memberId: mbr.userId,\r\n      },\r\n      callback\r\n    );\r\n  };\r\n  editGroupInfo(\r\n    request: ChangeGroupInfoRequest,\r\n    callback: ChangeGroupInfoCallback\r\n  ) {\r\n    this.api.changeGroupInfo(\r\n      {\r\n        groupId: request.groupId,\r\n        groupName: request.groupName,\r\n        members: request.members,\r\n        description: request.description,\r\n      },\r\n      callback\r\n    );\r\n  }\r\n  addMember = (grp: IGroup, ctc: IContact, callback: AddMemberCallback) => {\r\n    this.api.addMember(\r\n      {\r\n        groupId: grp.groupId,\r\n        memberId: ctc.id,\r\n      },\r\n      callback\r\n    );\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}