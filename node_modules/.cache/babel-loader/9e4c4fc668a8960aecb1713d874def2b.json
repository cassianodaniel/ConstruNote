{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState,useRef}from\"react\";import{Button,Modal,ModalHeader,ModalBody,ModalFooter,Form,FormGroup,Label,Input}from\"reactstrap\";//simple bar\nimport SimpleBar from\"simplebar-react\";//components\nimport SelectContact from\"./SelectContact\";import{useTranslation}from\"react-i18next\";import{useGroup}from\"../contexts/GroupContext\";import{useContact}from\"../contexts/ContactContext\";import Swal from\"sweetalert2\";export var ModalNewGroup=function ModalNewGroup(_ref){var show=_ref.show,toggle=_ref.toggle;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useContact=useContact(),contacts=_useContact.contacts;var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),search=_useState2[0],setSearch=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),groupName=_useState4[0],setGroupName=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),groupDescription=_useState6[0],setGroupDescription=_useState6[1];var _useGroup=useGroup(),setGroupToCreate=_useGroup.setGroupToCreate;var _useContact2=useContact(),setCheckedContacts=_useContact2.setCheckedContacts,checkedContacts=_useContact2.checkedContacts;var handleCreateGroup=function handleCreateGroup(){console.log(JSON.stringify(checkedContacts));setGroupToCreate({contacts:checkedContacts,description:groupDescription,name:groupName});setGroupName(\"\");setGroupDescription(\"\");setCheckedContacts([]);setSearch(\"\");};var handleCheckContact=function handleCheckContact(selected,contact){if(selected){setCheckedContacts([].concat(_toConsumableArray(checkedContacts),[contact]));}else{setCheckedContacts(checkedContacts.filter(function(sel){if(sel.id===contact.id){return false;}return true;}));}};var inputGroupName=useRef(null);useEffect(function(){setTimeout(function(){var _inputGroupName$curre;return(_inputGroupName$curre=inputGroupName.current)===null||_inputGroupName$curre===void 0?void 0:_inputGroupName$curre.focus();},500);},[show]);return/*#__PURE__*/React.createElement(Modal,{isOpen:show,centered:true,toggle:toggle},/*#__PURE__*/React.createElement(ModalHeader,{tag:\"h5\",className:\"modal-title font-size-16\",toggle:toggle},t(\"Create group\")),/*#__PURE__*/React.createElement(ModalBody,{className:\"p-4\"},/*#__PURE__*/React.createElement(Form,null,/*#__PURE__*/React.createElement(FormGroup,{className:\"mb-4\"},/*#__PURE__*/React.createElement(Label,{htmlFor:\"addgroupname-input\"},t(\"Group Name\")),/*#__PURE__*/React.createElement(\"input\",{ref:inputGroupName,type:\"text\",className:\"form-control\",id:\"addgroupname-input\",value:groupName,onChange:function onChange(e){return setGroupName(e.target.value);},placeholder:t(\"Group Name\")})),/*#__PURE__*/React.createElement(FormGroup,{className:\"mb-4\"},/*#__PURE__*/React.createElement(Label,null,t(\"Group Members\")),/*#__PURE__*/React.createElement(Input,{type:\"text\",className:\"form-control mb-2\",id:\"addgroupname-input\",value:search,onChange:function onChange(e){return setSearch(e.target.value);},placeholder:t(\"Search users..\")}),/*#__PURE__*/React.createElement(\"div\",{className:\"border\"},/*#__PURE__*/React.createElement(SimpleBar,{style:{height:\"250px\"}},/*#__PURE__*/React.createElement(\"div\",{id:\"addContacts\"},/*#__PURE__*/React.createElement(SelectContact,{contacts:contacts,handleCheckContact:handleCheckContact,search:search,checkedContacts:checkedContacts}))))),/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Label,{htmlFor:\"addgroupdescription-input\"},t(\"Description\")),/*#__PURE__*/React.createElement(\"textarea\",{className:\"form-control\",id:\"addgroupdescription-input\",value:groupDescription,onChange:function onChange(e){return setGroupDescription(e.target.value);},rows:3,placeholder:t(\"Description\")})))),/*#__PURE__*/React.createElement(ModalFooter,null,/*#__PURE__*/React.createElement(Button,{type:\"button\",color:\"link\",onClick:toggle},t(\"Close\")),/*#__PURE__*/React.createElement(Button,{type:\"button\",color:\"primary\",onClick:function onClick(){handleCreateGroup();toggle();Swal.fire({position:'top-end',customClass:{popup:\"swal-mini-popup\"},icon:'success',title:'Group has been created!',showConfirmButton:false,timer:1500});}},t(\"Create group\"))));};","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ModalNewGroup.tsx"],"names":["React","useEffect","useState","useRef","Button","Modal","ModalHeader","ModalBody","ModalFooter","Form","FormGroup","Label","Input","SimpleBar","SelectContact","useTranslation","useGroup","useContact","Swal","ModalNewGroup","show","toggle","t","contacts","search","setSearch","groupName","setGroupName","groupDescription","setGroupDescription","setGroupToCreate","setCheckedContacts","checkedContacts","handleCreateGroup","console","log","JSON","stringify","description","name","handleCheckContact","selected","contact","filter","sel","id","inputGroupName","setTimeout","current","focus","e","target","value","height","fire","position","customClass","popup","icon","title","showConfirmButton","timer"],"mappings":"wWAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,CAAqCC,MAArC,KAAmD,OAAnD,CACA,OACEC,MADF,CAEEC,KAFF,CAGEC,WAHF,CAIEC,SAJF,CAKEC,WALF,CAMEC,IANF,CAOEC,SAPF,CAQEC,KARF,CASEC,KATF,KAUO,YAVP,CAYA;AACA,MAAOC,CAAAA,SAAP,KAAsB,iBAAtB,CAEA;AACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CAEA,OAASC,cAAT,KAA+B,eAA/B,CAEA,OAASC,QAAT,KAAyB,0BAAzB,CACA,OAASC,UAAT,KAA2B,4BAA3B,CACA,MAAOC,CAAAA,IAAP,KAAiB,aAAjB,CAOA,MAAO,IAAMC,CAAAA,aAA+B,CAAG,QAAlCA,CAAAA,aAAkC,MAAsB,IAAnBC,CAAAA,IAAmB,MAAnBA,IAAmB,CAAbC,MAAa,MAAbA,MAAa,qBACrDN,cAAc,EADuC,CAC3DO,CAD2D,iBAC3DA,CAD2D,iBAE9CL,UAAU,EAFoC,CAE3DM,QAF2D,aAE3DA,QAF2D,eAIvCrB,QAAQ,CAAC,EAAD,CAJ+B,wCAI5DsB,MAJ4D,eAIpDC,SAJoD,8BAKjCvB,QAAQ,CAAC,EAAD,CALyB,yCAK5DwB,SAL4D,eAKjDC,YALiD,8BAMnBzB,QAAQ,CAAC,EAAD,CANW,yCAM5D0B,gBAN4D,eAM1CC,mBAN0C,6BAOtCb,QAAQ,EAP8B,CAO3Dc,gBAP2D,WAO3DA,gBAP2D,kBAQnBb,UAAU,EARS,CAQ3Dc,kBAR2D,cAQ3DA,kBAR2D,CAQvCC,eARuC,cAQvCA,eARuC,CAUnE,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,EAAM,CAC9BC,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeL,eAAf,CAAZ,EACAF,gBAAgB,CAAC,CACfP,QAAQ,CAAES,eADK,CAEfM,WAAW,CAAEV,gBAFE,CAGfW,IAAI,CAAEb,SAHS,CAAD,CAAhB,CAKAC,YAAY,CAAC,EAAD,CAAZ,CACAE,mBAAmB,CAAC,EAAD,CAAnB,CACAE,kBAAkB,CAAC,EAAD,CAAlB,CACAN,SAAS,CAAC,EAAD,CAAT,CACD,CAXD,CAaA,GAAMe,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,CAAoBC,OAApB,CAA0C,CACnE,GAAID,QAAJ,CAAc,CACZV,kBAAkB,8BAAKC,eAAL,GAAsBU,OAAtB,GAAlB,CACD,CAFD,IAEO,CACLX,kBAAkB,CAChBC,eAAe,CAACW,MAAhB,CAAuB,SAACC,GAAD,CAAS,CAC9B,GAAIA,GAAG,CAACC,EAAJ,GAAWH,OAAO,CAACG,EAAvB,CAA2B,CACzB,MAAO,MAAP,CACD,CACD,MAAO,KAAP,CACD,CALD,CADgB,CAAlB,CAQD,CACF,CAbD,CAeA,GAAMC,CAAAA,cAAc,CAAG3C,MAAM,CAAmB,IAAnB,CAA7B,CAEAF,SAAS,CAAC,UAAM,CACd8C,UAAU,CAAC,kEAAMD,cAAc,CAACE,OAArB,gDAAM,sBAAwBC,KAAxB,EAAN,EAAD,CAAwC,GAAxC,CAAV,CACD,CAFQ,CAEN,CAAC7B,IAAD,CAFM,CAAT,CAIA,mBACE,oBAAC,KAAD,EAAO,MAAM,CAAEA,IAAf,CAAqB,QAAQ,KAA7B,CAA8B,MAAM,CAAEC,MAAtC,eACE,oBAAC,WAAD,EACE,GAAG,CAAC,IADN,CAEE,SAAS,CAAC,0BAFZ,CAGE,MAAM,CAAEA,MAHV,EAKGC,CAAC,CAAC,cAAD,CALJ,CADF,cAQE,oBAAC,SAAD,EAAW,SAAS,CAAC,KAArB,eACE,oBAAC,IAAD,mBACE,oBAAC,SAAD,EAAW,SAAS,CAAC,MAArB,eACE,oBAAC,KAAD,EAAO,OAAO,CAAC,oBAAf,EAAqCA,CAAC,CAAC,YAAD,CAAtC,CADF,cAEE,6BACE,GAAG,CAAEwB,cADP,CAEE,IAAI,CAAC,MAFP,CAGE,SAAS,CAAC,cAHZ,CAIE,EAAE,CAAC,oBAJL,CAKE,KAAK,CAAEpB,SALT,CAME,QAAQ,CAAE,kBAACwB,CAAD,QAAOvB,CAAAA,YAAY,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAnB,EANZ,CAOE,WAAW,CAAE9B,CAAC,CAAC,YAAD,CAPhB,EAFF,CADF,cAaE,oBAAC,SAAD,EAAW,SAAS,CAAC,MAArB,eACE,oBAAC,KAAD,MAAQA,CAAC,CAAC,eAAD,CAAT,CADF,cAEE,oBAAC,KAAD,EACE,IAAI,CAAC,MADP,CAEE,SAAS,CAAC,mBAFZ,CAGE,EAAE,CAAC,oBAHL,CAIE,KAAK,CAAEE,MAJT,CAKE,QAAQ,CAAE,kBAAC0B,CAAD,QAAOzB,CAAAA,SAAS,CAACyB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAhB,EALZ,CAME,WAAW,CAAE9B,CAAC,CAAC,gBAAD,CANhB,EAFF,cAUE,2BAAK,SAAS,CAAC,QAAf,eACE,oBAAC,SAAD,EAAW,KAAK,CAAE,CAAE+B,MAAM,CAAE,OAAV,CAAlB,eACE,2BAAK,EAAE,CAAC,aAAR,eACE,oBAAC,aAAD,EACE,QAAQ,CAAE9B,QADZ,CAEE,kBAAkB,CAAEiB,kBAFtB,CAGE,MAAM,CAAEhB,MAHV,CAIE,eAAe,CAAEQ,eAJnB,EADF,CADF,CADF,CAVF,CAbF,cAoCE,oBAAC,SAAD,mBACE,oBAAC,KAAD,EAAO,OAAO,CAAC,2BAAf,EACGV,CAAC,CAAC,aAAD,CADJ,CADF,cAIE,gCACE,SAAS,CAAC,cADZ,CAEE,EAAE,CAAC,2BAFL,CAGE,KAAK,CAAEM,gBAHT,CAIE,QAAQ,CAAE,kBAACsB,CAAD,QAAOrB,CAAAA,mBAAmB,CAACqB,CAAC,CAACC,MAAF,CAASC,KAAV,CAA1B,EAJZ,CAKE,IAAI,CAAE,CALR,CAME,WAAW,CAAE9B,CAAC,CAAC,aAAD,CANhB,EAJF,CApCF,CADF,CARF,cA4DE,oBAAC,WAAD,mBACE,oBAAC,MAAD,EAAQ,IAAI,CAAC,QAAb,CAAsB,KAAK,CAAC,MAA5B,CAAmC,OAAO,CAAED,MAA5C,EACGC,CAAC,CAAC,OAAD,CADJ,CADF,cAIE,oBAAC,MAAD,EAAQ,IAAI,CAAC,QAAb,CAAsB,KAAK,CAAC,SAA5B,CACA,OAAO,CACL,kBAAM,CACNW,iBAAiB,GACjBZ,MAAM,GACNH,IAAI,CAACoC,IAAL,CAAU,CACVC,QAAQ,CAAE,SADA,CAEVC,WAAW,CAAC,CACVC,KAAK,CAAE,iBADG,CAFF,CAKVC,IAAI,CAAE,SALI,CAMVC,KAAK,CAAE,yBANG,CAOVC,iBAAiB,CAAE,KAPT,CAQVC,KAAK,CAAE,IARG,CAAV,EAUC,CAfH,EAiBGvC,CAAC,CAAC,cAAD,CAjBJ,CAJF,CA5DF,CADF,CAuFD,CAnIM","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n} from \"reactstrap\";\r\n\r\n//simple bar\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\n//components\r\nimport SelectContact from \"./SelectContact\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\nimport IContact from \"../alias/IContact\";\r\nimport { useGroup } from \"../contexts/GroupContext\";\r\nimport { useContact } from \"../contexts/ContactContext\";\r\nimport Swal from \"sweetalert2\";\r\n\r\ninterface IProps {\r\n  show: boolean;\r\n  toggle(): void;\r\n}\r\n\r\nexport const ModalNewGroup: React.FC<IProps> = ({ show, toggle }) => {\r\n  const { t } = useTranslation();\r\n  const { contacts } = useContact();\r\n\r\n  const [search, setSearch] = useState(\"\");\r\n  const [groupName, setGroupName] = useState(\"\");\r\n  const [groupDescription, setGroupDescription] = useState(\"\");\r\n  const { setGroupToCreate } = useGroup();\r\n  const { setCheckedContacts, checkedContacts } = useContact();\r\n\r\n  const handleCreateGroup = () => {\r\n    console.log(JSON.stringify(checkedContacts));\r\n    setGroupToCreate({\r\n      contacts: checkedContacts,\r\n      description: groupDescription,\r\n      name: groupName,\r\n    });\r\n    setGroupName(\"\");\r\n    setGroupDescription(\"\");\r\n    setCheckedContacts([]);\r\n    setSearch(\"\");\r\n  };\r\n\r\n  const handleCheckContact = (selected: boolean, contact: IContact) => {\r\n    if (selected) {\r\n      setCheckedContacts([...checkedContacts, contact]);\r\n    } else {\r\n      setCheckedContacts(\r\n        checkedContacts.filter((sel) => {\r\n          if (sel.id === contact.id) {\r\n            return false;\r\n          }\r\n          return true;\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const inputGroupName = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => inputGroupName.current?.focus(), 500);\r\n  }, [show]);\r\n\r\n  return (\r\n    <Modal isOpen={show} centered toggle={toggle}>\r\n      <ModalHeader\r\n        tag=\"h5\"\r\n        className=\"modal-title font-size-16\"\r\n        toggle={toggle}\r\n      >\r\n        {t(\"Create group\")}\r\n      </ModalHeader>\r\n      <ModalBody className=\"p-4\">\r\n        <Form>\r\n          <FormGroup className=\"mb-4\">\r\n            <Label htmlFor=\"addgroupname-input\">{t(\"Group Name\")}</Label>\r\n            <input\r\n              ref={inputGroupName}\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"addgroupname-input\"\r\n              value={groupName}\r\n              onChange={(e) => setGroupName(e.target.value)}\r\n              placeholder={t(\"Group Name\")}\r\n            />\r\n          </FormGroup>\r\n          <FormGroup className=\"mb-4\">\r\n            <Label>{t(\"Group Members\")}</Label>\r\n            <Input\r\n              type=\"text\"\r\n              className=\"form-control mb-2\"\r\n              id=\"addgroupname-input\"\r\n              value={search}\r\n              onChange={(e) => setSearch(e.target.value)}\r\n              placeholder={t(\"Search users..\")}\r\n            />\r\n            <div className=\"border\">\r\n              <SimpleBar style={{ height: \"250px\" }}>\r\n                <div id=\"addContacts\">\r\n                  <SelectContact\r\n                    contacts={contacts}\r\n                    handleCheckContact={handleCheckContact}\r\n                    search={search}\r\n                    checkedContacts={checkedContacts}\r\n                  />\r\n                </div>\r\n              </SimpleBar>\r\n            </div>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label htmlFor=\"addgroupdescription-input\">\r\n              {t(\"Description\")}\r\n            </Label>\r\n            <textarea\r\n              className=\"form-control\"\r\n              id=\"addgroupdescription-input\"\r\n              value={groupDescription}\r\n              onChange={(e) => setGroupDescription(e.target.value)}\r\n              rows={3}\r\n              placeholder={t(\"Description\")}\r\n            ></textarea>\r\n          </FormGroup>\r\n        </Form>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button type=\"button\" color=\"link\" onClick={toggle}>\r\n          {t(\"Close\")}\r\n        </Button>\r\n        <Button type=\"button\" color=\"primary\"\r\n        onClick={\r\n          () => {\r\n          handleCreateGroup()\r\n          toggle()\r\n          Swal.fire({\r\n          position: 'top-end',\r\n          customClass:{\r\n            popup: \"swal-mini-popup\"\r\n          },\r\n          icon: 'success',\r\n          title: 'Group has been created!',\r\n          showConfirmButton: false,\r\n          timer: 1500\r\n            })\r\n          }\r\n        }>\r\n          {t(\"Create group\")}\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}