{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\DathApp\\\\ConstruNote\\\\src\\\\contexts\\\\LoadingContext.tsx\";\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nexport const LoadingContext = createContext({});\nexport const LoadingProvider = ({\n  children\n}) => {\n  const [isDisconnected, setDisconnected] = useState(false);\n  const [isLoadingApp, setLoadingApp] = useState(true);\n  const [isLoadingMedia, setIsLoadingMedia] = useState(true);\n\n  const init = () => {\n    setTimeout(() => setLoadingApp(false), 1200);\n  };\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(LoadingContext.Provider, {\n    value: {\n      isDisconnected,\n      setDisconnected,\n      isLoadingApp,\n      setLoadingApp,\n      isLoadingMedia,\n      setIsLoadingMedia\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport function useLoading() {\n  return useContext(LoadingContext);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/DathApp/ConstruNote/src/contexts/LoadingContext.tsx"],"names":["React","createContext","useContext","useState","useEffect","LoadingContext","LoadingProvider","children","isDisconnected","setDisconnected","isLoadingApp","setLoadingApp","isLoadingMedia","setIsLoadingMedia","init","setTimeout","useLoading"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,EAAqDC,SAArD,QAAsE,OAAtE;AAWA,OAAO,MAAMC,cAAc,GAAGJ,aAAa,CACzC,EADyC,CAApC;AAIP,OAAO,MAAMK,eAAyB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACzD,QAAM,CAACC,cAAD,EAAiBC,eAAjB,IAAoCN,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACO,YAAD,EAAeC,aAAf,IAAgCR,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACS,cAAD,EAAiBC,iBAAjB,IAAsCV,QAAQ,CAAC,IAAD,CAApD;;AAEA,QAAMW,IAAI,GAAG,MAAM;AACjBC,IAAAA,UAAU,CAAC,MAAMJ,aAAa,CAAC,KAAD,CAApB,EAA6B,IAA7B,CAAV;AACD,GAFD;;AAIAP,EAAAA,SAAS,CAACU,IAAD,EAAO,EAAP,CAAT;AAEA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EAAE;AAAEN,MAAAA,cAAF;AAAkBC,MAAAA,eAAlB;AAAmCC,MAAAA,YAAnC;AAAiDC,MAAAA,aAAjD;AAAgEC,MAAAA,cAAhE;AAAgFC,MAAAA;AAAhF,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGGN,QAHH,CADF;AAOD,CAlBM;AAoBP,OAAO,SAASS,UAAT,GAAsB;AAC3B,SAAOd,UAAU,CAACG,cAAD,CAAjB;AACD","sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\n\r\ninterface ILoadingContextData {\r\n  isDisconnected: boolean;\r\n  setDisconnected(value: boolean): void;\r\n  isLoadingApp: boolean;\r\n  setLoadingApp(value: boolean): void;\r\n  isLoadingMedia: boolean;\r\n  setIsLoadingMedia(value: boolean): void;\r\n}\r\n\r\nexport const LoadingContext = createContext<ILoadingContextData>(\r\n  {} as ILoadingContextData\r\n);\r\n\r\nexport const LoadingProvider: React.FC = ({ children }) => {\r\n  const [isDisconnected, setDisconnected] = useState(false);\r\n  const [isLoadingApp, setLoadingApp] = useState(true);\r\n  const [isLoadingMedia, setIsLoadingMedia] = useState(true);\r\n\r\n  const init = () => {\r\n    setTimeout(() => setLoadingApp(false), 1200);\r\n  };\r\n\r\n  useEffect(init, []);\r\n\r\n  return (\r\n    <LoadingContext.Provider\r\n      value={{ isDisconnected, setDisconnected, isLoadingApp, setLoadingApp, isLoadingMedia, setIsLoadingMedia }}\r\n    >\r\n      {children}\r\n    </LoadingContext.Provider>\r\n  );\r\n};\r\n\r\nexport function useLoading() {\r\n  return useContext(LoadingContext);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}