{"ast":null,"code":"import React, { useEffect } from \"react\";\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { Events } from \"./chat/types/types\";\nimport ChatType from \"./../enuns/ChatType\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\nimport { getFileName, getUrlBooleans } from \"./utils/parseUtils\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nlet squadService;\nlet typingTimeout = new Map();\n\nconst SquadCommunicator = ({\n  children\n}) => {\n  var _squadService11;\n\n  const {\n    chats,\n    activeChat,\n    contacts,\n    groups,\n    setActiveChat,\n    setChats,\n    setGroups,\n    setContacts\n  } = useChat();\n  const {\n    user,\n    setUser\n  } = useAuth();\n\n  const init = () => {\n    var _squadService;\n\n    localStorage.setItem(\"authorization\", JSON.stringify({\n      access_token: \"e9e34268a0adb4b4f009b508de092e2c\",\n      user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\n      user_name: \"ZZ Romero 2\",\n      email: \"romero2@digivox.com.br\",\n      expires_in: 2592000,\n      baseUrl: \"https://app.citrussquad.com/api/v1/\"\n    }));\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\n    (_squadService = squadService) === null || _squadService === void 0 ? void 0 : _squadService.user.get(user => {\n      setUser(user);\n    });\n  };\n\n  const clearSendFile = (chatId, messageId) => {\n    setChats(chats.map(chat => {\n      if (chat.id === chatId) {\n        chat.messages = chat.messages.map(message => {\n          if (message.id === messageId) {\n            message.deliverStatus = DeliverStatus.QUEUED;\n            message.sendFile = undefined;\n          }\n\n          return message;\n        });\n      }\n\n      return chat;\n    }));\n  };\n\n  const onChatsChange = () => {\n    chats.forEach(chat => {\n      checkSearchMessages(chat); // checkTyping(chat);\n    });\n  };\n\n  const onActiveChatChange = () => {\n    checkSendMessage(activeChat);\n    checkAttachedFiles(activeChat); // checkTyping(activeChat)\n  }; // const checkTyping = (chat: IChat) => {\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\n  //     if (oldTimeoutData)\n  //       clearTimeout(oldTimeoutData.timeout)\n  //     else\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\n  //     const timeoutData = {\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\n  //       msgStr: `${chat.inputMessage}`\n  //     }\n  //     typingTimeout.set(chat.jid, timeoutData)\n  //   }\n  // }\n\n\n  const checkAttachedFiles = cht => {\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\n      var _squadService2;\n\n      (_squadService2 = squadService) === null || _squadService2 === void 0 ? void 0 : _squadService2.attachments.list(cht, attachments => {\n        if (attachments.length > 0) setActiveChat({ ...cht,\n          attachedFileList: attachments\n        });else setActiveChat({ ...cht,\n          attachedFileList: null\n        });\n      });\n    }\n  };\n\n  const checkSearchMessages = chat => {\n    if (chat.messageLoaded) {\n      var _squadService3;\n\n      (_squadService3 = squadService) === null || _squadService3 === void 0 ? void 0 : _squadService3.messages.list(chat, messages => {\n        setChats(chats.map(cht => {\n          if (cht.id === chat.id) {\n            messages.reverse().forEach(msg => {\n              cht.messages.unshift(msg);\n            });\n            cht.messageLoaded = false;\n          }\n\n          return cht;\n        }));\n      });\n    }\n  };\n\n  const checkSendMessage = chat => {\n    chat.messages.forEach(msg => {\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\n        if (msg.sendFile) {\n          var _squadService4, _squadService4$chat;\n\n          const files = [msg.sendFile];\n          clearSendFile(chat.id, msg.id);\n          (_squadService4 = squadService) === null || _squadService4 === void 0 ? void 0 : (_squadService4$chat = _squadService4.chat) === null || _squadService4$chat === void 0 ? void 0 : _squadService4$chat.sendFiles(chat, files, data => {\n            updateMessageFiles(data, chat, msg);\n          });\n        } else {\n          sendMessage(chat, msg.message, msgId => updateMessage(msgId, chat, msg));\n        }\n      }\n    });\n  };\n\n  const updateMessageFiles = (data, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        const booleans = getUrlBooleans(data.url);\n        message.id = data.msgId;\n        message.fileUrl = data.url;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n        message.message = getFileName(data.url);\n        message.isFileMessage = booleans.isFileMessage;\n        message.isImageMessage = booleans.isImageMessage;\n        message.isVideoMessage = booleans.isVideoMessage;\n        message.isAudioMessage = booleans.isAudioMessage;\n      }\n\n      return message;\n    });\n    setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      setChats(chats.map(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n        }\n\n        return cht;\n      }));\n    }\n  };\n\n  const updateMessage = (msgId, chat, msg) => {\n    const newChat = { ...chat\n    };\n    newChat.messages = chat.messages.map(message => {\n      if (msg.id === message.id) {\n        message.id = msgId;\n        message.deliverStatus = DeliverStatus.QUEUED;\n        message.time = new Date().toISOString();\n      }\n\n      return message;\n    });\n    setActiveChat(newChat);\n\n    if (!chats.filter(cht => cht.id === chat.id)[0]) {\n      const newChats = [chat, ...chats];\n      setChats(newChats);\n    } else {\n      setChats(chats.map(cht => {\n        if (cht.id === chat.id) {\n          cht.messages = newChat.messages;\n        }\n\n        return cht;\n      }));\n    }\n  };\n\n  const forwardMessages = (ctcs, message) => {\n    const chatsFinded = [];\n    ctcs.forEach(ctc => {\n      const cht = chats.find(cht => cht.id === ctc.id);\n\n      if (cht) {\n        cht.messages.push({ ...message,\n          message: message.fileUrl || message.message,\n          deliverStatus: DeliverStatus.SENDING\n        });\n        chatsFinded.push(cht);\n      }\n    });\n    const newChats = chats.map(chat => chatsFinded.find(cht => cht.id === chat.id) || chat);\n    const ctcsNotInChat = ctcs.filter(ctc => !chatsFinded.find(cht => ctc.id === cht.id));\n    ctcsNotInChat.forEach(ctc => {\n      newChats.push({\n        id: ctc.id,\n        jid: ctc.jid,\n        name: ctc.name,\n        profilePicture: ctc.profilePicture,\n        status: ctc.status,\n        unRead: 0,\n        chatType: ChatType.USER,\n        inputMessage: \"\",\n        messageLoaded: false,\n        isTyping: false,\n        messages: [{ ...message,\n          deliverStatus: DeliverStatus.SENDING\n        }],\n        email: ctc.email\n      });\n    });\n    setChats(newChats);\n  };\n\n  useEffect(onChatsChange, [chats]);\n  useEffect(onActiveChatChange, [activeChat]);\n\n  function chatCommunicatorSubscribe(event, data) {\n    var _squadService5;\n\n    switch (event) {\n      case Events.ONLINE:\n        (_squadService5 = squadService) === null || _squadService5 === void 0 ? void 0 : _squadService5.chats.list(receivedChats => {\n          var _squadService6, _squadService8;\n\n          setChats(receivedChats); //populating groups\n\n          (_squadService6 = squadService) === null || _squadService6 === void 0 ? void 0 : _squadService6.groups.list(groups => {\n            var _squadService7, _squadService7$chat;\n\n            setGroups(groups); //Joining Groups Rooms in XMPP\n\n            (_squadService7 = squadService) === null || _squadService7 === void 0 ? void 0 : (_squadService7$chat = _squadService7.chat) === null || _squadService7$chat === void 0 ? void 0 : _squadService7$chat.joinGroups(groups.map(group => group.jid));\n          }); //populating contacts\n\n          (_squadService8 = squadService) === null || _squadService8 === void 0 ? void 0 : _squadService8.contacts.list(contacts => setContacts(contacts)); //populating chat's with messages\n\n          receivedChats.forEach(chat => {\n            var _squadService9;\n\n            (_squadService9 = squadService) === null || _squadService9 === void 0 ? void 0 : _squadService9.messages.list(chat, messages => {\n              const chatWithMessages = { ...chat\n              };\n              chatWithMessages.messages = chatWithMessages.messages.concat(messages);\n              setChats([...receivedChats.filter(cht => chat.id !== cht.id), chatWithMessages]);\n            });\n          });\n        });\n        break;\n\n      case Events.MESSAGE:\n        if (data.fromUser === user.jid) break;\n        let find = false;\n        let newChats = chats.map(chat => {\n          if (data.fromUser === chat.jid) {\n            find = true;\n            if (!chat.messages.filter(msg => msg.id === data.id)[0]) chat.messages.push(data);\n\n            if (chat.id === activeChat.id) {\n              let chatTemporary = { ...chat\n              };\n              setActiveChat(chatTemporary);\n            } else {\n              chat.unRead++;\n            }\n          }\n\n          return chat;\n        });\n\n        if (!find) {\n          var _squadService10;\n\n          let newChat = {};\n          (_squadService10 = squadService) === null || _squadService10 === void 0 ? void 0 : _squadService10.contacts.list(listContacts => {\n            listContacts.forEach(c => {\n              if (c.jid === data.fromUser) {\n                newChat = {\n                  id: c.id,\n                  jid: c.jid,\n                  name: c.name,\n                  profilePicture: c.profilePicture,\n                  status: c.status,\n                  unRead: 1,\n                  chatType: ChatType.USER,\n                  inputMessage: \"\",\n                  isTyping: false,\n                  messages: []\n                };\n                newChat.messages.push(data);\n                newChats.unshift(newChat);\n                setChats(newChats);\n              }\n            });\n          });\n        } else {\n          setChats(newChats);\n        }\n\n        break;\n\n      case Events.RECEIVED:\n        setChats(chats.map(chat => {\n          if (chat.messages.find(msg => msg.id === data.id)) chat.messages = chat.messages.map(message => {\n            message.deliverStatus = DeliverStatus.DELIVERED;\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.DISPLAYED:\n        setChats(chats.map(chat => {\n          chat.messages = chat.messages.map(message => {\n            if (message.id === data.id) {\n              message.readStatus = ReadStatus.READ;\n            }\n\n            return message;\n          });\n          return chat;\n        }));\n        break;\n\n      case Events.COMPOSING:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = true;\n            if (activeChat.jid === data) setActiveChat(chat);\n            deleteTypingTimeout(chat.jid);\n            setTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.ACTIVE:\n        setChats(chats.map(chat => {\n          if (chat.jid === data) {\n            chat.isTyping = false;\n\n            if (activeChat.jid === data) {\n              let chatUpdate = { ...chat\n              };\n              setActiveChat(chatUpdate);\n            }\n\n            deleteTypingTimeout(chat.jid);\n          }\n\n          return chat;\n        }));\n        break;\n\n      case Events.PRESENCE:\n        break;\n    }\n  }\n\n  const deleteTypingTimeout = jid => {\n    var _typingTimeout$get;\n\n    clearTimeout(((_typingTimeout$get = typingTimeout.get(jid)) === null || _typingTimeout$get === void 0 ? void 0 : _typingTimeout$get.timeout) || setTimeout(() => {}, 1));\n    typingTimeout.delete(jid);\n  };\n\n  const setTypingTimeout = jid => {\n    const timeoutData = {\n      msgStr: \"\",\n      timeout: setTimeout(() => {\n        setChats(chats.map(cht => {\n          if (cht.jid === jid) {\n            cht.isTyping = false;\n            if (activeChat.jid === jid) setActiveChat(cht);\n          }\n\n          return cht;\n        }));\n      }, 20000)\n    };\n    typingTimeout.set(jid, timeoutData);\n  };\n\n  (_squadService11 = squadService) === null || _squadService11 === void 0 ? void 0 : _squadService11.updateSubscribeFunction(chatCommunicatorSubscribe); // Comentado para evitar warnings no console enquanto não é usado\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\n  //     squadService?.groups.list((groups) => {\n  //       setGroups(groups);\n  //       callback(true);\n  //     });\n  //   });\n  // }\n\n  function sendMessage(chat, message, callback) {\n    var _squadService12, _squadService12$chat;\n\n    (_squadService12 = squadService) === null || _squadService12 === void 0 ? void 0 : (_squadService12$chat = _squadService12.chat) === null || _squadService12$chat === void 0 ? void 0 : _squadService12$chat.chat.sendMessage(chat.jid, chat.jid.includes(\"@conference.\") ? XMPPChatType.GROUPCHAT : XMPPChatType.CHAT, message, callback);\n  }\n\n  useEffect(init, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n};\n\nexport default SquadCommunicator;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/SquadCommunicator.tsx"],"names":["React","useEffect","SquadCommunicator","SquadService","useChat","useAuth","Events","ChatType","DeliverStatus","XMPPChatType","getFileName","getUrlBooleans","ReadStatus","squadService","typingTimeout","Map","children","chats","activeChat","contacts","groups","setActiveChat","setChats","setGroups","setContacts","user","setUser","init","localStorage","setItem","JSON","stringify","access_token","user_id","user_name","email","expires_in","baseUrl","getInstance","chatCommunicatorSubscribe","get","clearSendFile","chatId","messageId","map","chat","id","messages","message","deliverStatus","QUEUED","sendFile","undefined","onChatsChange","forEach","checkSearchMessages","onActiveChatChange","checkSendMessage","checkAttachedFiles","cht","attachedFileList","attachments","list","length","messageLoaded","reverse","msg","unshift","SENDING","files","sendFiles","data","updateMessageFiles","sendMessage","msgId","updateMessage","newChat","booleans","url","fileUrl","time","Date","toISOString","isFileMessage","isImageMessage","isVideoMessage","isAudioMessage","filter","newChats","forwardMessages","ctcs","chatsFinded","ctc","find","push","ctcsNotInChat","jid","name","profilePicture","status","unRead","chatType","USER","inputMessage","isTyping","event","ONLINE","receivedChats","joinGroups","group","chatWithMessages","concat","MESSAGE","fromUser","chatTemporary","listContacts","c","RECEIVED","DELIVERED","DISPLAYED","readStatus","READ","COMPOSING","deleteTypingTimeout","setTypingTimeout","ACTIVE","chatUpdate","PRESENCE","clearTimeout","timeout","setTimeout","delete","timeoutData","msgStr","set","updateSubscribeFunction","callback","includes","GROUPCHAT","CHAT"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { SquadCommunicator as SquadService } from \"./SquadCommunicatorService\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport IUser from \"../alias/IUser\";\r\n\r\nimport { Events, SendImageCallbackReturn } from \"./chat/types/types\";\r\nimport ChatType from \"./../enuns/ChatType\";\r\nimport IChat from \"../alias/IChat\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport { ChatType as XMPPChatType } from \"./chat/types/types\";\r\nimport { SendMessageCallback } from \"./types\";\r\nimport IMessage from \"../alias/IMessage\";\r\nimport { getFileName, getUrlBooleans } from \"./utils/parseUtils\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport IContact from \"../alias/IContact\";\r\n// Comentado para Evitar Warnings no console\r\n// interface CreateGroupCallback {\r\n//   (groupCreated: boolean): void;\r\n// }\r\ninterface TypingTimeoutData {\r\n  timeout: NodeJS.Timeout;\r\n  msgStr: string;\r\n}\r\nlet squadService: SquadService | undefined;\r\nlet typingTimeout: Map<string, TypingTimeoutData> = new Map<\r\n  string,\r\n  TypingTimeoutData\r\n>();\r\n\r\nconst SquadCommunicator: React.FC = ({ children }) => {\r\n  const {\r\n    chats,\r\n    activeChat,\r\n    contacts,\r\n    groups,\r\n    setActiveChat,\r\n    setChats,\r\n    setGroups,\r\n    setContacts,\r\n  } = useChat();\r\n  const { user, setUser } = useAuth();\r\n\r\n  const init = () => {\r\n    localStorage.setItem(\r\n      \"authorization\",\r\n      JSON.stringify({\r\n        access_token: \"e9e34268a0adb4b4f009b508de092e2c\",\r\n        user_id: \"11d3a709-8c53-0392-0149-3a3a0e0eeaae\",\r\n        user_name: \"ZZ Romero 2\",\r\n        email: \"romero2@digivox.com.br\",\r\n        expires_in: 2592000,\r\n        baseUrl: \"https://app.citrussquad.com/api/v1/\",\r\n      })\r\n    );\r\n    squadService = SquadService.getInstance(chatCommunicatorSubscribe);\r\n    squadService?.user.get((user: IUser) => {\r\n      setUser(user);\r\n    });\r\n  };\r\n\r\n  const clearSendFile = (chatId: string, messageId: string) => {\r\n    setChats(\r\n      chats.map((chat) => {\r\n        if (chat.id === chatId) {\r\n          chat.messages = chat.messages.map((message) => {\r\n            if (message.id === messageId) {\r\n              message.deliverStatus = DeliverStatus.QUEUED;\r\n              message.sendFile = undefined;\r\n            }\r\n            return message;\r\n          });\r\n        }\r\n        return chat;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onChatsChange = () => {\r\n    chats.forEach((chat) => {\r\n      checkSearchMessages(chat);\r\n      // checkTyping(chat);\r\n    });\r\n  };\r\n  const onActiveChatChange = () => {\r\n    checkSendMessage(activeChat);\r\n    checkAttachedFiles(activeChat);\r\n    // checkTyping(activeChat)\r\n  };\r\n  // const checkTyping = (chat: IChat) => {\r\n  //   const oldTimeoutData = typingTimeout.get(chat.jid)\r\n  //   if (chat.inputMessage !== \"\" && (!oldTimeoutData || (oldTimeoutData.msgStr !== chat.inputMessage))) {\r\n  //     if (oldTimeoutData)\r\n  //       clearTimeout(oldTimeoutData.timeout)\r\n  //     else\r\n  //       squadService?.chat?.chat.sendTyping(chat.jid)\r\n  //     const timeoutData = {\r\n  //       timeout: setTimeout(() => { squadService?.chat?.chat.sendActive(chat.jid); typingTimeout.delete(chat.jid) }, 3000),\r\n  //       msgStr: `${chat.inputMessage}`\r\n  //     }\r\n  //     typingTimeout.set(chat.jid, timeoutData)\r\n  //   }\r\n  // }\r\n  const checkAttachedFiles = (cht: IChat) => {\r\n    if (cht.attachedFileList && !cht.attachedFileList[0]) {\r\n      squadService?.attachments.list(cht, (attachments) => {\r\n        if (attachments.length > 0)\r\n          setActiveChat({ ...cht, attachedFileList: attachments });\r\n        else setActiveChat({ ...cht, attachedFileList: null });\r\n      });\r\n    }\r\n  };\r\n  const checkSearchMessages = (chat: IChat) => {\r\n    if (chat.messageLoaded) {\r\n      squadService?.messages.list(chat, (messages) => {\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.id === chat.id) {\r\n              messages.reverse().forEach((msg) => {\r\n                cht.messages.unshift(msg);\r\n              });\r\n              cht.messageLoaded = false;\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkSendMessage = (chat: IChat) => {\r\n    chat.messages.forEach((msg) => {\r\n      if (msg.deliverStatus === DeliverStatus.SENDING) {\r\n        if (msg.sendFile) {\r\n          const files = [msg.sendFile];\r\n          clearSendFile(chat.id, msg.id);\r\n          squadService?.chat?.sendFiles(\r\n            chat,\r\n            files,\r\n            (data: SendImageCallbackReturn) => {\r\n              updateMessageFiles(data, chat, msg);\r\n            }\r\n          );\r\n        } else {\r\n          sendMessage(chat, msg.message, (msgId) =>\r\n            updateMessage(msgId, chat, msg)\r\n          );\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const updateMessageFiles = (\r\n    data: SendImageCallbackReturn,\r\n    chat: IChat,\r\n    msg: IMessage\r\n  ) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        const booleans = getUrlBooleans(data.url);\r\n        message.id = data.msgId;\r\n        message.fileUrl = data.url;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n        message.message = getFileName(data.url);\r\n        message.isFileMessage = booleans.isFileMessage;\r\n        message.isImageMessage = booleans.isImageMessage;\r\n        message.isVideoMessage = booleans.isVideoMessage;\r\n        message.isAudioMessage = booleans.isAudioMessage;\r\n      }\r\n      return message;\r\n    });\r\n    setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      setChats(\r\n        chats.map((cht) => {\r\n          if (cht.id === chat.id) {\r\n            cht.messages = newChat.messages;\r\n          }\r\n          return cht;\r\n        })\r\n      );\r\n    }\r\n  };\r\n  const updateMessage = (msgId: string, chat: IChat, msg: IMessage) => {\r\n    const newChat = { ...chat };\r\n    newChat.messages = chat.messages.map((message) => {\r\n      if (msg.id === message.id) {\r\n        message.id = msgId;\r\n        message.deliverStatus = DeliverStatus.QUEUED;\r\n        message.time = new Date().toISOString();\r\n      }\r\n      return message;\r\n    });\r\n    setActiveChat(newChat);\r\n    if (!chats.filter((cht) => cht.id === chat.id)[0]) {\r\n      const newChats = [chat, ...chats];\r\n      setChats(newChats);\r\n    } else {\r\n      setChats(\r\n        chats.map((cht) => {\r\n          if (cht.id === chat.id) {\r\n            cht.messages = newChat.messages;\r\n          }\r\n          return cht;\r\n        })\r\n      );\r\n    }\r\n  };\r\n  const forwardMessages = (ctcs: IContact[], message: IMessage) => {\r\n    const chatsFinded: IChat[] = [];\r\n    ctcs.forEach((ctc) => {\r\n      const cht = chats.find((cht) => cht.id === ctc.id);\r\n      if (cht) {\r\n        cht.messages.push({\r\n          ...message,\r\n          message: message.fileUrl || message.message,\r\n          deliverStatus: DeliverStatus.SENDING,\r\n        });\r\n        chatsFinded.push(cht);\r\n      }\r\n    });\r\n    const newChats = chats.map(\r\n      (chat) => chatsFinded.find((cht) => cht.id === chat.id) || chat\r\n    );\r\n    const ctcsNotInChat: IContact[] = ctcs.filter(\r\n      (ctc) => !chatsFinded.find((cht) => ctc.id === cht.id)\r\n    );\r\n    ctcsNotInChat.forEach((ctc) => {\r\n      newChats.push({\r\n        id: ctc.id,\r\n        jid: ctc.jid,\r\n        name: ctc.name,\r\n        profilePicture: ctc.profilePicture,\r\n        status: ctc.status,\r\n        unRead: 0,\r\n        chatType: ChatType.USER,\r\n        inputMessage: \"\",\r\n        messageLoaded: false,\r\n        isTyping: false,\r\n        messages: [{ ...message, deliverStatus: DeliverStatus.SENDING }],\r\n        email: ctc.email,\r\n      });\r\n    });\r\n    setChats(newChats);\r\n  };\r\n  useEffect(onChatsChange, [chats]);\r\n  useEffect(onActiveChatChange, [activeChat]);\r\n  function chatCommunicatorSubscribe(event: string, data: any) {\r\n    switch (event) {\r\n      case Events.ONLINE:\r\n        squadService?.chats.list((receivedChats) => {\r\n          setChats(receivedChats);\r\n          //populating groups\r\n          squadService?.groups.list((groups) => {\r\n            setGroups(groups);\r\n            //Joining Groups Rooms in XMPP\r\n            squadService?.chat?.joinGroups(groups.map((group) => group.jid));\r\n          });\r\n          //populating contacts\r\n          squadService?.contacts.list((contacts) => setContacts(contacts));\r\n          //populating chat's with messages\r\n\r\n          receivedChats.forEach((chat) => {\r\n            squadService?.messages.list(chat, (messages) => {\r\n              const chatWithMessages = { ...chat };\r\n              chatWithMessages.messages = chatWithMessages.messages.concat(\r\n                messages\r\n              );\r\n              setChats([\r\n                ...receivedChats.filter((cht) => chat.id !== cht.id),\r\n                chatWithMessages,\r\n              ]);\r\n            });\r\n          });\r\n        });\r\n        break;\r\n      case Events.MESSAGE:\r\n        if (data.fromUser === user.jid) break;\r\n        let find = false;\r\n\r\n        let newChats = chats.map((chat) => {\r\n          if (data.fromUser === chat.jid) {\r\n            find = true;\r\n            if (!chat.messages.filter((msg) => msg.id === data.id)[0])\r\n              chat.messages.push(data);\r\n            if (chat.id === activeChat.id) {\r\n              let chatTemporary = { ...chat };\r\n              setActiveChat(chatTemporary);\r\n            } else {\r\n              chat.unRead++;\r\n            }\r\n          }\r\n          return chat;\r\n        });\r\n\r\n        if (!find) {\r\n          let newChat: IChat = {} as IChat;\r\n\r\n          squadService?.contacts.list((listContacts) => {\r\n            listContacts.forEach((c) => {\r\n              if (c.jid === data.fromUser) {\r\n                newChat = {\r\n                  id: c.id,\r\n                  jid: c.jid,\r\n                  name: c.name,\r\n                  profilePicture: c.profilePicture,\r\n                  status: c.status,\r\n                  unRead: 1,\r\n                  chatType: ChatType.USER,\r\n                  inputMessage: \"\",\r\n                  isTyping: false,\r\n                  messages: [],\r\n                };\r\n                newChat.messages.push(data);\r\n                newChats.unshift(newChat);\r\n                setChats(newChats);\r\n              }\r\n            });\r\n          });\r\n        } else {\r\n          setChats(newChats);\r\n        }\r\n\r\n        break;\r\n      case Events.RECEIVED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.messages.find((msg) => msg.id === data.id))\r\n              chat.messages = chat.messages.map((message) => {\r\n                message.deliverStatus = DeliverStatus.DELIVERED;\r\n                return message;\r\n              });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.DISPLAYED:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            chat.messages = chat.messages.map((message) => {\r\n              if (message.id === data.id) {\r\n                message.readStatus = ReadStatus.READ;\r\n              }\r\n              return message;\r\n            });\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.COMPOSING:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = true;\r\n              if (activeChat.jid === data) setActiveChat(chat);\r\n              deleteTypingTimeout(chat.jid);\r\n              setTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.ACTIVE:\r\n        setChats(\r\n          chats.map((chat) => {\r\n            if (chat.jid === data) {\r\n              chat.isTyping = false;\r\n              if (activeChat.jid === data) {\r\n                let chatUpdate = { ...chat };\r\n                setActiveChat(chatUpdate);\r\n              }\r\n              deleteTypingTimeout(chat.jid);\r\n            }\r\n            return chat;\r\n          })\r\n        );\r\n        break;\r\n      case Events.PRESENCE:\r\n        break;\r\n    }\r\n  }\r\n  const deleteTypingTimeout = (jid: string) => {\r\n    clearTimeout(typingTimeout.get(jid)?.timeout || setTimeout(() => {}, 1));\r\n    typingTimeout.delete(jid);\r\n  };\r\n  const setTypingTimeout = (jid: string) => {\r\n    const timeoutData: TypingTimeoutData = {\r\n      msgStr: \"\",\r\n      timeout: setTimeout(() => {\r\n        setChats(\r\n          chats.map((cht) => {\r\n            if (cht.jid === jid) {\r\n              cht.isTyping = false;\r\n              if (activeChat.jid === jid) setActiveChat(cht);\r\n            }\r\n            return cht;\r\n          })\r\n        );\r\n      }, 20000),\r\n    };\r\n    typingTimeout.set(jid, timeoutData);\r\n  };\r\n\r\n  squadService?.updateSubscribeFunction(chatCommunicatorSubscribe);\r\n  // Comentado para evitar warnings no console enquanto não é usado\r\n  // function createGroup(group: INewGroup, callback: CreateGroupCallback) {\r\n  //   squadService?.groups.create(group, (iGroup: IGroup) => {\r\n  //     squadService?.groups.list((groups) => {\r\n  //       setGroups(groups);\r\n  //       callback(true);\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  function sendMessage(\r\n    chat: IChat,\r\n    message: string,\r\n    callback: SendMessageCallback\r\n  ) {\r\n    squadService?.chat?.chat.sendMessage(\r\n      chat.jid,\r\n      chat.jid.includes(\"@conference.\")\r\n        ? XMPPChatType.GROUPCHAT\r\n        : XMPPChatType.CHAT,\r\n      message,\r\n      callback\r\n    );\r\n  }\r\n\r\n  useEffect(init, []);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport default SquadCommunicator;\r\n"]},"metadata":{},"sourceType":"module"}