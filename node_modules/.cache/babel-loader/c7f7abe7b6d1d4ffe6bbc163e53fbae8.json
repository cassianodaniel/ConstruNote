{"ast":null,"code":"import PresenceStatus from \"../../enuns/PresenceStatus\";\nimport UserType from \"../../enuns/UserType\";\nimport { getContactName } from \"./formatUtils\";\nexport function getAttachmentType(extension) {\n  const booleans = {\n    isImageMessage: /\\.(jpe?g|png|gif|ico)$/i.test(extension) && extension.includes(\"/upload/\"),\n    isAudioMessage: /\\.(ogg|mp3|wav|m4a|webm)$/i.test(extension) && extension.includes(\"/upload/\"),\n    isVideoMessage: /\\.(mp4|avi)$/i.test(extension) && extension.includes(\"/upload/\"),\n    isFileMessage: true\n  };\n  booleans.isFileMessage = !booleans.isAudioMessage && !booleans.isImageMessage && !booleans.isVideoMessage;\n  return booleans;\n} //Groups\n\nexport const parseGroup = apiGroup => {\n  return {\n    groupId: apiGroup.id,\n    name: apiGroup.name,\n    description: apiGroup.description,\n    jid: `${apiGroup.id}@conference.${apiGroup.domainName}`,\n    profilePicture: apiGroup.imageUrl,\n    members: apiGroup.members.map(member => {\n      return {\n        userId: member.id,\n        name: member.name,\n        profilePicture: member.imageUrl,\n        role: member.admin ? UserType.ADMIN : UserType.USER,\n        status: PresenceStatus.ONLINE\n      };\n    })\n  };\n}; //Contacts\n\nexport const parseContact = apiContact => {\n  return {\n    id: apiContact.id,\n    jid: apiContact.imId,\n    name: apiContact.name,\n    domain: apiContact.domainName,\n    number: apiContact.extension,\n    profilePicture: apiContact.imageUrl,\n    email: apiContact.email,\n    blocked: apiContact.blocked,\n    added: apiContact.added,\n    status: PresenceStatus.ONLINE,\n    favorite: apiContact.favorite\n  };\n}; //Chats\n\nexport const parseChats = (chats, groups, contacts) => {\n  const parsedChats = [];\n  chats.forEach(chat => {\n    const parsedChat = parseChat(chat, groups, contacts);\n    if (parsedChat) parsedChats.push(parsedChat);\n  });\n  return parsedChats;\n};\nexport const parseChat = (chat, groups, contacts) => {\n  const chatUser = groups.get(chat.id) || contacts.get(chat.id);\n\n  if (chatUser) {\n    const chatMessage = chat.messages[0];\n    const iChat = {\n      id: chat.id,\n      jid: chatUser.jid,\n      name: chat.name,\n      profilePicture: chatUser.profilePicture,\n      status: \"status\" in chatUser ? chatUser.status : undefined,\n      unRead: chat.unreadMessages,\n      chatType: chat.chatType,\n      inputMessage: \"\",\n      isTyping: false,\n      messages: [parseMessage(chatMessage, contacts)]\n    };\n    return iChat;\n  }\n}; //Messages\n\nexport const parseMessage = (chatMessage, contacts) => {\n  const booleans = {\n    isImageMessage: chatMessage.isImage,\n    isFileMessage: chatMessage.isFile && !chatMessage.isImage && !chatMessage.isVideo && !chatMessage.isAudio,\n    isVideoMessage: chatMessage.isVideo,\n    isAudioMessage: chatMessage.isAudio\n  };\n\n  if (isUrl(chatMessage.message)) {\n    booleans.isImageMessage = /\\.(jpe?g|png|gif|ico)$/i.test(chatMessage.message);\n    booleans.isVideoMessage = /\\.(mp4|avi)$/i.test(chatMessage.message);\n    booleans.isAudioMessage = /\\.(ogg|mp3|wav|m4a|webm)$/i.test(chatMessage.message);\n    booleans.isFileMessage = true && !booleans.isImageMessage && !booleans.isVideoMessage && !booleans.isAudioMessage;\n  }\n\n  const msg = {\n    id: chatMessage.idXmpp,\n    userName: getContactName(chatMessage, contacts),\n    message: chatMessage.message,\n    time: chatMessage.sentAt,\n    fileUrl: chatMessage.message,\n    toUser: chatMessage.to,\n    fromUser: chatMessage.from,\n    deliverStatus: chatMessage.deliveryStatus,\n    readStatus: chatMessage.readStatus,\n    deliverTimestamp: chatMessage.deliveryTimestamp || \"\",\n    readTimestamp: chatMessage.readTimestamp || \"\",\n    content: chatMessage.content,\n    contentType: chatMessage.contentType,\n    ...booleans\n  };\n  return msg;\n};\nexport function isUrl(str) {\n  var expression = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;\n  var regex = new RegExp(expression);\n  return !!str.match(regex);\n}","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/services/utils/parseUtils.ts"],"names":["PresenceStatus","UserType","getContactName","getAttachmentType","extension","booleans","isImageMessage","test","includes","isAudioMessage","isVideoMessage","isFileMessage","parseGroup","apiGroup","groupId","id","name","description","jid","domainName","profilePicture","imageUrl","members","map","member","userId","role","admin","ADMIN","USER","status","ONLINE","parseContact","apiContact","imId","domain","number","email","blocked","added","favorite","parseChats","chats","groups","contacts","parsedChats","forEach","chat","parsedChat","parseChat","push","chatUser","get","chatMessage","messages","iChat","undefined","unRead","unreadMessages","chatType","inputMessage","isTyping","parseMessage","isImage","isFile","isVideo","isAudio","isUrl","message","msg","idXmpp","userName","time","sentAt","fileUrl","toUser","to","fromUser","from","deliverStatus","deliveryStatus","readStatus","deliverTimestamp","deliveryTimestamp","readTimestamp","content","contentType","str","expression","regex","RegExp","match"],"mappings":"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","sourcesContent":["import { Message } from \"@digivox/apicommunicator/dist/types/types/types\";\r\nimport IChat from \"../../alias/IChat\";\r\nimport IContact from \"../../alias/IContact\";\r\nimport IGroup from \"../../alias/IGroup\";\r\nimport IMessage from \"../../alias/IMessage\";\r\nimport PresenceStatus from \"../../enuns/PresenceStatus\";\r\nimport UserType from \"../../enuns/UserType\";\r\nimport { getContactName } from \"./formatUtils\";\r\n\r\nexport function getAttachmentType(extension: string) {\r\n  const booleans = {\r\n    isImageMessage:\r\n      /\\.(jpe?g|png|gif|ico)$/i.test(extension) &&\r\n      extension.includes(\"/upload/\"),\r\n    isAudioMessage:\r\n      /\\.(ogg|mp3|wav|m4a|webm)$/i.test(extension) &&\r\n      extension.includes(\"/upload/\"),\r\n    isVideoMessage:\r\n      /\\.(mp4|avi)$/i.test(extension) && extension.includes(\"/upload/\"),\r\n    isFileMessage: true,\r\n  };\r\n  booleans.isFileMessage =\r\n    !booleans.isAudioMessage &&\r\n    !booleans.isImageMessage &&\r\n    !booleans.isVideoMessage;\r\n  return booleans;\r\n}\r\n//Groups\r\nexport const parseGroup = (apiGroup: any) => {\r\n  return {\r\n    groupId: apiGroup.id,\r\n    name: apiGroup.name,\r\n    description: apiGroup.description,\r\n    jid: `${apiGroup.id}@conference.${apiGroup.domainName}`,\r\n    profilePicture: apiGroup.imageUrl,\r\n    members: apiGroup.members.map((member: any) => {\r\n      return {\r\n        userId: member.id,\r\n        name: member.name,\r\n        profilePicture: member.imageUrl,\r\n        role: member.admin ? UserType.ADMIN : UserType.USER,\r\n        status: PresenceStatus.ONLINE,\r\n      };\r\n    }),\r\n  };\r\n};\r\n//Contacts\r\nexport const parseContact = (apiContact: any) => {\r\n  return {\r\n    id: apiContact.id,\r\n    jid: apiContact.imId,\r\n    name: apiContact.name,\r\n    domain: apiContact.domainName,\r\n    number: apiContact.extension,\r\n    profilePicture: apiContact.imageUrl,\r\n    email: apiContact.email,\r\n    blocked: apiContact.blocked,\r\n    added: apiContact.added,\r\n    status: PresenceStatus.ONLINE,\r\n    favorite: apiContact.favorite,\r\n  };\r\n};\r\n//Chats\r\nexport const parseChats = (\r\n  chats: any[],\r\n  groups: Map<string, IGroup>,\r\n  contacts: Map<string, IContact>\r\n): IChat[] => {\r\n  const parsedChats: IChat[] = [];\r\n  chats.forEach((chat) => {\r\n    const parsedChat = parseChat(chat, groups, contacts);\r\n    if (parsedChat) parsedChats.push(parsedChat);\r\n  });\r\n  return parsedChats;\r\n};\r\nexport const parseChat = (\r\n  chat: any,\r\n  groups: Map<string, IGroup>,\r\n  contacts: Map<string, IContact>\r\n) => {\r\n  const chatUser = groups.get(chat.id) || contacts.get(chat.id);\r\n  if (chatUser) {\r\n    const chatMessage = chat.messages[0];\r\n    const iChat: IChat = {\r\n      id: chat.id,\r\n      jid: chatUser.jid,\r\n      name: chat.name,\r\n      profilePicture: chatUser.profilePicture,\r\n      status: \"status\" in chatUser ? (chatUser as IContact).status : undefined,\r\n      unRead: chat.unreadMessages,\r\n      chatType: chat.chatType,\r\n      inputMessage: \"\",\r\n      isTyping: false,\r\n      messages: [parseMessage(chatMessage, contacts)],\r\n    };\r\n    return iChat;\r\n  }\r\n};\r\n//Messages\r\nexport const parseMessage = (\r\n  chatMessage: Message,\r\n  contacts: Map<string, IContact>\r\n) => {\r\n  const booleans = {\r\n    isImageMessage: chatMessage.isImage,\r\n    isFileMessage: chatMessage.isFile && !chatMessage.isImage && !chatMessage.isVideo && !chatMessage.isAudio,\r\n    isVideoMessage: chatMessage.isVideo,\r\n    isAudioMessage: chatMessage.isAudio\r\n  }\r\n  if(isUrl(chatMessage.message)){\r\n    booleans.isImageMessage = /\\.(jpe?g|png|gif|ico)$/i.test(chatMessage.message);\r\n    booleans.isVideoMessage = /\\.(mp4|avi)$/i.test(chatMessage.message);\r\n    booleans.isAudioMessage = /\\.(ogg|mp3|wav|m4a|webm)$/i.test(chatMessage.message);\r\n    booleans.isFileMessage = true && !booleans.isImageMessage && !booleans.isVideoMessage && !booleans.isAudioMessage;\r\n  }\r\n  const msg: IMessage = {\r\n    id: chatMessage.idXmpp,\r\n    userName: getContactName(chatMessage, contacts),\r\n    message: chatMessage.message,\r\n    time: chatMessage.sentAt,\r\n    fileUrl: chatMessage.message,\r\n    toUser: chatMessage.to,\r\n    fromUser: chatMessage.from,\r\n    deliverStatus: chatMessage.deliveryStatus,\r\n    readStatus: chatMessage.readStatus,\r\n    deliverTimestamp: chatMessage.deliveryTimestamp || \"\",\r\n    readTimestamp: chatMessage.readTimestamp || \"\",\r\n    content: chatMessage.content,\r\n    contentType: chatMessage.contentType,\r\n    ...booleans\r\n  };\r\n  return msg;\r\n};\r\nexport function isUrl(str: string) {\r\n  var expression = /(https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.[^\\s]{2,}|https?:\\/\\/(?:www\\.|(?!www))[a-zA-Z0-9]+\\.[^\\s]{2,}|www\\.[a-zA-Z0-9]+\\.[^\\s]{2,})/gi;\r\n  var regex = new RegExp(expression);\r\n  return !!str.match(regex);\r\n}"]},"metadata":{},"sourceType":"module"}