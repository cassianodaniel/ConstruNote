{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\ModalConfigDevices.tsx\";\nimport React, { useEffect, useState } from \"react\"; // import Webcam from \"react-user-media\";\n\nimport { useTranslation } from \"react-i18next\";\nimport { useModal } from \"../contexts/ModalContext\";\nimport { Video } from \"./Video\";\nimport { Button, Input, InputGroupText, InputGroup, InputGroupAddon, Modal, Progress, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\nimport { useCall } from \"../contexts/CallContext\";\n\nconst ModalConfigDevices = () => {\n  const [selectedVideo, setSelectedVideo] = useState();\n  const [selectedAudio, setSelectedAudio] = useState();\n  const [selectedSpeaker, setSelectedSpeaker] = useState();\n  const [videoDevices, setVideoDevices] = useState([]);\n  const [audioDevices, setAudioDevices] = useState([]);\n  const [speakerDevices, setSpeakerDevices] = useState([]);\n  const [speakerVolume, setSpeakerVolume] = useState();\n  const [speaking, setSpeaking] = useState();\n  const [stream, setStream] = useState();\n  const {\n    setUpdateConstraints\n  } = useCall();\n  const {\n    showModalDevicesConfig,\n    setShowModalDevicesConfig\n  } = useModal();\n  const {\n    t\n  } = useTranslation();\n\n  const init = () => {\n    navigator.permissions.query({\n      name: \"camera\"\n    }).then(cam => {\n      navigator.permissions.query({\n        name: \"microphone\"\n      }).then(mic => {\n        if (mic.state === \"denied\" && cam.state === \"denied\") {\n          return;\n        }\n\n        if (cam.state !== \"granted\" || mic.state !== \"granted\") {\n          navigator.getUserMedia({\n            audio: true,\n            video: true\n          }, updateDevices, e => {\n            navigator.getUserMedia({\n              audio: true,\n              video: false\n            }, updateDevices, e => {});\n          });\n        } else {\n          updateDevices();\n        }\n      });\n    });\n  };\n\n  const updateDevices = (stream = undefined) => {\n    if (stream) {\n      stream.getTracks().forEach(track => {\n        track.stop();\n      });\n    }\n\n    navigator.mediaDevices.enumerateDevices().then(devices => {\n      const vidDevices = [];\n      const audDevices = [];\n      const spkDevices = [];\n      devices.forEach(device => {\n        if (device.deviceId) switch (device.kind) {\n          case \"audioinput\":\n            audDevices.push(device);\n            break;\n\n          case \"videoinput\":\n            vidDevices.push(device);\n            break;\n\n          case \"audiooutput\":\n            spkDevices.push(device);\n            break;\n        }\n      });\n      setAudioDevices(audDevices);\n      setVideoDevices(vidDevices);\n      setSpeakerDevices(spkDevices);\n    });\n  };\n\n  const handleChangeVideo = ev => {\n    const idVideo = ev.target.value;\n    const video = videoDevices.filter(v => v.deviceId === idVideo)[0];\n    setSelectedVideo(video);\n  };\n\n  const handleChangeAudio = ev => {\n    const idAudio = ev.target.value;\n    const audio = audioDevices.filter(v => v.deviceId === idAudio)[0];\n    setSelectedAudio(audio);\n  };\n\n  const handleChangeSpeaker = ev => {\n    const idSpeaker = ev.target.value;\n    const speaker = speakerDevices.filter(v => v.deviceId === idSpeaker)[0];\n    setSelectedSpeaker(speaker);\n  };\n\n  const parseAndSetSpeakerVolumn = volume => {\n    setSpeakerVolume(Math.round(Math.abs(volume < -100 ? -100 : volume)));\n  };\n\n  const changeSpeaking = spk => {\n    setSpeaking(spk);\n  };\n\n  const onPreferencesSubmit = () => {\n    setUpdateConstraints({\n      videoId: selectedVideo === null || selectedVideo === void 0 ? void 0 : selectedVideo.deviceId,\n      audioId: selectedAudio === null || selectedAudio === void 0 ? void 0 : selectedAudio.deviceId,\n      speakerId: selectedSpeaker === null || selectedSpeaker === void 0 ? void 0 : selectedSpeaker.deviceId\n    });\n    setShowModalDevicesConfig(false);\n  };\n\n  useEffect(init, []); //navigator.mediaDevices.ondevicechange = init;\n\n  return /*#__PURE__*/React.createElement(Modal, {\n    centered: true,\n    isOpen: showModalDevicesConfig,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModalHeader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, t(\"Config Devices\")), /*#__PURE__*/React.createElement(ModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ct-live-video-view mb-2 border\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Video, {\n    audioId: selectedAudio ? selectedAudio.deviceId : undefined,\n    videoId: selectedVideo ? selectedVideo.deviceId : undefined,\n    speakerId: selectedSpeaker ? selectedSpeaker.deviceId : undefined,\n    videoDevices: videoDevices,\n    audioDevices: audioDevices,\n    speakerDevices: speakerDevices,\n    stream: stream,\n    setStream: setStream,\n    speakerVolume: speakerVolume,\n    speaking: speaking,\n    modalOpen: showModalDevicesConfig,\n    setSpeakerVolume: parseAndSetSpeakerVolumn,\n    setSpeaking: changeSpeaking,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ct-video-controller\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, videoDevices[0] && /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputGroupAddon, {\n    addonType: \"prepend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InputGroupText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"ri-vidicon-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(Input, {\n    type: \"select\",\n    defaultValue: selectedVideo && selectedVideo.deviceId ? selectedVideo.deviceId : \"default\",\n    onChange: handleChangeVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }, videoDevices.map((video, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: video.deviceId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 19\n    }\n  }, video.label)))), audioDevices[0] && /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputGroupAddon, {\n    addonType: \"prepend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InputGroupText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"ri-mic-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(Input, {\n    type: \"select\",\n    defaultValue: selectedAudio && selectedAudio.deviceId ? selectedAudio.deviceId : \"default\",\n    onChange: handleChangeAudio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }, audioDevices.map((audio, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: audio.deviceId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 19\n    }\n  }, audio.label)))), speakerDevices && /*#__PURE__*/React.createElement(InputGroup, {\n    className: \"mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputGroupAddon, {\n    addonType: \"prepend\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InputGroupText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"ri-speaker-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(Input, {\n    type: \"select\",\n    defaultValue: selectedSpeaker && selectedSpeaker.deviceId ? selectedSpeaker.deviceId : \"default\",\n    onChange: handleChangeSpeaker,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  }, speakerDevices.map((speaker, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: speaker.deviceId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 19\n    }\n  }, speaker.label)))), /*#__PURE__*/React.createElement(Progress, {\n    color: \"info\",\n    className: \"mb-2\",\n    value: speaking ? speakerVolume : 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(ModalFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    color: \"light\",\n    size: \"sm\",\n    block: true,\n    type: \"button\",\n    className: \"mr-2\",\n    onClick: onPreferencesSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 9\n    }\n  }, t(\"Salvar\")), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    color: \"light\",\n    size: \"sm\",\n    block: true,\n    onClick: () => setShowModalDevicesConfig(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, \" \", t(\"Cancel\"))));\n};\n\nexport default ModalConfigDevices;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/ModalConfigDevices.tsx"],"names":["React","useEffect","useState","useTranslation","useModal","Video","Button","Input","InputGroupText","InputGroup","InputGroupAddon","Modal","Progress","ModalBody","ModalFooter","ModalHeader","useCall","ModalConfigDevices","selectedVideo","setSelectedVideo","selectedAudio","setSelectedAudio","selectedSpeaker","setSelectedSpeaker","videoDevices","setVideoDevices","audioDevices","setAudioDevices","speakerDevices","setSpeakerDevices","speakerVolume","setSpeakerVolume","speaking","setSpeaking","stream","setStream","setUpdateConstraints","showModalDevicesConfig","setShowModalDevicesConfig","t","init","navigator","permissions","query","name","then","cam","mic","state","getUserMedia","audio","video","updateDevices","e","undefined","getTracks","forEach","track","stop","mediaDevices","enumerateDevices","devices","vidDevices","audDevices","spkDevices","device","deviceId","kind","push","handleChangeVideo","ev","idVideo","target","value","filter","v","handleChangeAudio","idAudio","handleChangeSpeaker","idSpeaker","speaker","parseAndSetSpeakerVolumn","volume","Math","round","abs","changeSpeaking","spk","onPreferencesSubmit","videoId","audioId","speakerId","map","index","label"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n// import Webcam from \"react-user-media\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useModal } from \"../contexts/ModalContext\";\r\nimport { Video } from \"./Video\";\r\nimport {\r\n  Button,\r\n  Input,\r\n  InputGroupText,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Modal,\r\n  Progress,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n} from \"reactstrap\";\r\nimport { useCall } from \"../contexts/CallContext\";\r\n\r\nconst ModalConfigDevices: React.FC = () => {\r\n  const [selectedVideo, setSelectedVideo] = useState<MediaDeviceInfo>();\r\n  const [selectedAudio, setSelectedAudio] = useState<MediaDeviceInfo>();\r\n  const [selectedSpeaker, setSelectedSpeaker] = useState<MediaDeviceInfo>();\r\n  const [videoDevices, setVideoDevices] = useState<MediaDeviceInfo[]>([]);\r\n  const [audioDevices, setAudioDevices] = useState<MediaDeviceInfo[]>([]);\r\n  const [speakerDevices, setSpeakerDevices] = useState<MediaDeviceInfo[]>([]);\r\n  const [speakerVolume, setSpeakerVolume] = useState<number>();\r\n  const [speaking, setSpeaking] = useState<boolean>();\r\n  const [stream, setStream] = useState<MediaStream | undefined>();\r\n  const { setUpdateConstraints } = useCall();\r\n  const { showModalDevicesConfig, setShowModalDevicesConfig } = useModal();\r\n  const { t } = useTranslation();\r\n  const init = () => {\r\n    navigator.permissions.query({ name: \"camera\" }).then((cam) => {\r\n      navigator.permissions.query({ name: \"microphone\" }).then((mic) => {\r\n        if (mic.state === \"denied\" && cam.state === \"denied\") {\r\n          return;\r\n        }\r\n        if (cam.state !== \"granted\" || mic.state !== \"granted\") {\r\n          navigator.getUserMedia(\r\n            { audio: true, video: true },\r\n            updateDevices,\r\n            (e) => {\r\n              navigator.getUserMedia(\r\n                { audio: true, video: false },\r\n                updateDevices,\r\n                (e) => {}\r\n              );\r\n            }\r\n          );\r\n        } else {\r\n          updateDevices();\r\n        }\r\n      });\r\n    });\r\n  };\r\n  const updateDevices = (stream: MediaStream | undefined = undefined) => {\r\n    if (stream) {\r\n      stream.getTracks().forEach((track) => {\r\n        track.stop();\r\n      });\r\n    }\r\n    navigator.mediaDevices.enumerateDevices().then((devices) => {\r\n      const vidDevices: MediaDeviceInfo[] = [];\r\n      const audDevices: MediaDeviceInfo[] = [];\r\n      const spkDevices: MediaDeviceInfo[] = [];\r\n      devices.forEach((device) => {\r\n        if (device.deviceId)\r\n          switch (device.kind) {\r\n            case \"audioinput\":\r\n              audDevices.push(device);\r\n              break;\r\n            case \"videoinput\":\r\n              vidDevices.push(device);\r\n              break;\r\n            case \"audiooutput\":\r\n              spkDevices.push(device);\r\n              break;\r\n          }\r\n      });\r\n      setAudioDevices(audDevices);\r\n      setVideoDevices(vidDevices);\r\n      setSpeakerDevices(spkDevices);\r\n    });\r\n  };\r\n\r\n  const handleChangeVideo = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n    const idVideo = ev.target.value;\r\n    const video = videoDevices.filter((v) => v.deviceId === idVideo)[0];\r\n    setSelectedVideo(video);\r\n  };\r\n  const handleChangeAudio = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n    const idAudio = ev.target.value;\r\n    const audio = audioDevices.filter((v) => v.deviceId === idAudio)[0];\r\n    setSelectedAudio(audio);\r\n  };\r\n  const handleChangeSpeaker = (ev: React.ChangeEvent<HTMLInputElement>) => {\r\n    const idSpeaker = ev.target.value;\r\n    const speaker = speakerDevices.filter((v) => v.deviceId === idSpeaker)[0];\r\n    setSelectedSpeaker(speaker);\r\n  };\r\n  const parseAndSetSpeakerVolumn = (volume: number) => {\r\n    setSpeakerVolume(Math.round(Math.abs(volume < -100 ? -100 : volume)));\r\n  };\r\n  const changeSpeaking = (spk: boolean) => {\r\n    setSpeaking(spk);\r\n  };\r\n  const onPreferencesSubmit = () => {\r\n    setUpdateConstraints({\r\n      videoId: selectedVideo?.deviceId,\r\n      audioId: selectedAudio?.deviceId,\r\n      speakerId: selectedSpeaker?.deviceId,\r\n    });\r\n    setShowModalDevicesConfig(false);\r\n  };\r\n  useEffect(init, []);\r\n  //navigator.mediaDevices.ondevicechange = init;\r\n  return (\r\n    <Modal centered isOpen={showModalDevicesConfig}>\r\n      <ModalHeader>{t(\"Config Devices\")}</ModalHeader>\r\n      <ModalBody>\r\n        <div className=\"ct-live-video-view mb-2 border\">\r\n          <Video\r\n            audioId={selectedAudio ? selectedAudio.deviceId : undefined}\r\n            videoId={selectedVideo ? selectedVideo.deviceId : undefined}\r\n            speakerId={selectedSpeaker ? selectedSpeaker.deviceId : undefined}\r\n            videoDevices={videoDevices}\r\n            audioDevices={audioDevices}\r\n            speakerDevices={speakerDevices}\r\n            stream={stream}\r\n            setStream={setStream}\r\n            speakerVolume={speakerVolume}\r\n            speaking={speaking}\r\n            modalOpen={showModalDevicesConfig}\r\n            setSpeakerVolume={parseAndSetSpeakerVolumn}\r\n            setSpeaking={changeSpeaking}\r\n          />\r\n          {/* <Webcam ref={(ref) => this.webcam = ref} \r\n\t\t\t\t\t \tvideo={{deviceId: {exact: selectedVideo ? selectedVideo.id : undefined}}}\r\n\t\t\t\t\t\taudio={{deviceId: {exact: selectedAudio ? selectedAudio.id : undefined}}}\r\n\t\t\t\t\t\t/>  */}\r\n        </div>\r\n        <div className=\"ct-video-controller\">\r\n          {videoDevices[0] && (\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroupAddon addonType=\"prepend\">\r\n                <InputGroupText>\r\n                  <i className=\"ri-vidicon-line\" />\r\n                </InputGroupText>\r\n              </InputGroupAddon>\r\n              <Input\r\n                type=\"select\"\r\n                defaultValue={\r\n                  selectedVideo && selectedVideo.deviceId\r\n                    ? selectedVideo.deviceId\r\n                    : \"default\"\r\n                }\r\n                onChange={handleChangeVideo}\r\n              >\r\n                {videoDevices.map((video, index) => (\r\n                  <option key={index} value={video.deviceId}>\r\n                    {video.label}\r\n                  </option>\r\n                ))}\r\n              </Input>\r\n            </InputGroup>\r\n          )}\r\n          {audioDevices[0] && (\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroupAddon addonType=\"prepend\">\r\n                <InputGroupText>\r\n                  <i className=\"ri-mic-line\" />\r\n                </InputGroupText>\r\n              </InputGroupAddon>\r\n              <Input\r\n                type=\"select\"\r\n                defaultValue={\r\n                  selectedAudio && selectedAudio.deviceId\r\n                    ? selectedAudio.deviceId\r\n                    : \"default\"\r\n                }\r\n                onChange={handleChangeAudio}\r\n              >\r\n                {audioDevices.map((audio, index) => (\r\n                  <option key={index} value={audio.deviceId}>\r\n                    {audio.label}\r\n                  </option>\r\n                ))}\r\n              </Input>\r\n            </InputGroup>\r\n          )}\r\n          {speakerDevices && (\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroupAddon addonType=\"prepend\">\r\n                <InputGroupText>\r\n                  <i className=\"ri-speaker-line\" />\r\n                </InputGroupText>\r\n              </InputGroupAddon>\r\n              <Input\r\n                type=\"select\"\r\n                defaultValue={\r\n                  selectedSpeaker && selectedSpeaker.deviceId\r\n                    ? selectedSpeaker.deviceId\r\n                    : \"default\"\r\n                }\r\n                onChange={handleChangeSpeaker}\r\n              >\r\n                {speakerDevices.map((speaker, index) => (\r\n                  <option key={index} value={speaker.deviceId}>\r\n                    {speaker.label}\r\n                  </option>\r\n                ))}\r\n              </Input>\r\n            </InputGroup>\r\n          )}\r\n          <Progress\r\n            color=\"info\"\r\n            className=\"mb-2\"\r\n            value={speaking ? speakerVolume : 0}\r\n          />\r\n        </div>\r\n      </ModalBody>\r\n      <ModalFooter>\r\n        <Button \r\n        color=\"light\"\r\n        size=\"sm\"\r\n        block\r\n        type=\"button\" className=\"mr-2\" onClick={onPreferencesSubmit}>\r\n          {t(\"Salvar\")}\r\n        </Button>\r\n        <Button \r\n        type=\"button\" \r\n        color=\"light\"\r\n        size=\"sm\"\r\n        block\r\n        onClick={() => setShowModalDevicesConfig(false)}>\r\n          {\" \"}\r\n          {t(\"Cancel\")}\r\n        </Button>\r\n      </ModalFooter>\r\n    </Modal>\r\n  );\r\n};\r\nexport default ModalConfigDevices;\r\n"]},"metadata":{},"sourceType":"module"}