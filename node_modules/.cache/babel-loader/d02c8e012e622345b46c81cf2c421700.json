{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Digivox\\\\dev\\\\Digivox\\\\Refatoracao\\\\squad\\\\src\\\\components\\\\DragNDropImageUpload.tsx\";\nimport React, { useState } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport { useAuth } from \"../contexts/AuthContext\";\nimport { useChat } from \"../contexts/ChatContext\";\nimport DeliverStatus from \"../enuns/DeliverStatus\";\nimport ReadStatus from \"../enuns/ReadStatus\";\nimport './../assets/css/dragndrop.css';\n\nconst ImageUpload = ({\n  addFile,\n  files\n}) => {\n  const {\n    chats,\n    setChats,\n    activeChat\n  } = useChat();\n  const {\n    user\n  } = useAuth();\n\n  const onAddMessage = file => {\n    setChats(chats.map(item => {\n      if (activeChat) if (item.id === (activeChat === null || activeChat === void 0 ? void 0 : activeChat.id)) {\n        item.messages.push({\n          id: `${item.messages.length + 1}`,\n          userName: user.name,\n          message: \"Carregando...\",\n          time: \"\",\n          isImageMessage: false,\n          isFileMessage: false,\n          isVideoMessage: false,\n          isAudioMessage: false,\n          fileUrl: \"\",\n          sendFile: file,\n          toUser: activeChat.id,\n          fromUser: user.id,\n          deliverStatus: DeliverStatus.SENDING,\n          readStatus: ReadStatus.UNREAD,\n          deliverTimestamp: \"\",\n          readTimestamp: \"\",\n          content: \"metadata\",\n          contentType: \"type\",\n          isReplyMessage: false,\n          isForwardMessage: false\n        });\n      }\n      return item;\n    }));\n  };\n\n  const [warningMsg, setWarningMsg] = useState(\"\");\n\n  const onDrop = e => {\n    /* if (Object.keys(rejected).length !== 0) {\r\n    const message = \"Please submit valid file type\";\r\n    setWarningMsg(message);\r\n    } else {\r\n        addFile(accepted);\r\n        setWarningMsg(\"\");\r\n        var blobPromise = new Promise((resolve, reject) => {\r\n            const reader = new window.FileReader();\r\n            reader.readAsDataURL(accepted[0]);\r\n            reader.onloadend = () => {\r\n            const base64data = reader.result;\r\n            resolve(base64data);\r\n            };\r\n        });\r\n        blobPromise.then(value => {\r\n            console.log(value);\r\n        });\r\n    */\n    console.log(e.target);\n\n    if (files && files.size > 15728640) {\n      alert(\"Tamanho de arquivo \" + files.name + \" não suportado. Por favor, envie um arquivo menor do que 15mb\");\n      return;\n    } else {\n      onAddMessage(files);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"selected\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, warningMsg), /*#__PURE__*/React.createElement(Dropzone, {\n    multiple: false,\n    noClick: true\n    /* accept=\"image/*\" */\n    ,\n    onDrop: (accepted, rejected) => onDrop(accepted, rejected),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, ({\n    getRootProps,\n    getInputProps\n  }) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  })), \"Drag'n'drop here!\")));\n};\n\nexport default ImageUpload;","map":{"version":3,"sources":["C:/Users/Digivox/dev/Digivox/Refatoracao/squad/src/components/DragNDropImageUpload.tsx"],"names":["React","useState","Dropzone","useAuth","useChat","DeliverStatus","ReadStatus","ImageUpload","addFile","files","chats","setChats","activeChat","user","onAddMessage","file","map","item","id","messages","push","length","userName","name","message","time","isImageMessage","isFileMessage","isVideoMessage","isAudioMessage","fileUrl","sendFile","toUser","fromUser","deliverStatus","SENDING","readStatus","UNREAD","deliverTimestamp","readTimestamp","content","contentType","isReplyMessage","isForwardMessage","warningMsg","setWarningMsg","onDrop","e","console","log","target","size","alert","accepted","rejected","getRootProps","getInputProps"],"mappings":";AACA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAO,+BAAP;;AAOA,MAAMC,WAA6B,GAAG,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,KAAwB;AAC1D,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA;AAAnB,MAAkCR,OAAO,EAA/C;AACA,QAAM;AAAES,IAAAA;AAAF,MAAWV,OAAO,EAAxB;;AAEA,QAAMW,YAAY,GAAIC,IAAD,IAAgB;AACjCJ,IAAAA,QAAQ,CACRD,KAAK,CAACM,GAAN,CAAWC,IAAD,IAAU;AAChB,UAAIL,UAAJ,EACA,IAAIK,IAAI,CAACC,EAAL,MAAYN,UAAZ,aAAYA,UAAZ,uBAAYA,UAAU,CAAEM,EAAxB,CAAJ,EAAgC;AAC5BD,QAAAA,IAAI,CAACE,QAAL,CAAcC,IAAd,CAAmB;AACnBF,UAAAA,EAAE,EAAG,GAAED,IAAI,CAACE,QAAL,CAAcE,MAAd,GAAuB,CAAE,EADb;AAEnBC,UAAAA,QAAQ,EAAET,IAAI,CAACU,IAFI;AAGnBC,UAAAA,OAAO,EAAE,eAHU;AAInBC,UAAAA,IAAI,EAAE,EAJa;AAKnBC,UAAAA,cAAc,EAAE,KALG;AAMnBC,UAAAA,aAAa,EAAE,KANI;AAOnBC,UAAAA,cAAc,EAAE,KAPG;AAQnBC,UAAAA,cAAc,EAAE,KARG;AASnBC,UAAAA,OAAO,EAAE,EATU;AAUnBC,UAAAA,QAAQ,EAAEhB,IAVS;AAWnBiB,UAAAA,MAAM,EAAEpB,UAAU,CAACM,EAXA;AAYnBe,UAAAA,QAAQ,EAAEpB,IAAI,CAACK,EAZI;AAanBgB,UAAAA,aAAa,EAAE7B,aAAa,CAAC8B,OAbV;AAcnBC,UAAAA,UAAU,EAAE9B,UAAU,CAAC+B,MAdJ;AAenBC,UAAAA,gBAAgB,EAAE,EAfC;AAgBnBC,UAAAA,aAAa,EAAE,EAhBI;AAiBnBC,UAAAA,OAAO,EAAE,UAjBU;AAkBnBC,UAAAA,WAAW,EAAE,MAlBM;AAmBnBC,UAAAA,cAAc,EAAE,KAnBG;AAoBnBC,UAAAA,gBAAgB,EAAE;AApBC,SAAnB;AAsBH;AACD,aAAO1B,IAAP;AACH,KA3BD,CADQ,CAAR;AA8BH,GA/BD;;AAgCA,QAAM,CAAC2B,UAAD,EAAaC,aAAb,IAA8B5C,QAAQ,CAAC,EAAD,CAA5C;;AACA,QAAM6C,MAAM,GAAIC,CAAD,IAA0B;AACrC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAYC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAd;;AACA,QAAIzC,KAAK,IAAIA,KAAK,CAAC0C,IAAN,GAAa,QAA1B,EAAoC;AACpCC,MAAAA,KAAK,CACD,wBACA3C,KAAK,CAACc,IADN,GAEA,+DAHC,CAAL;AAKA;AACC,KAPD,MAOK;AACDT,MAAAA,YAAY,CAACL,KAAD,CAAZ;AACH;AACJ,GA7BL;;AA+BI,sBACA;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAImC,UAAJ,CADJ,eAGI,oBAAC,QAAD;AACA,IAAA,QAAQ,EAAE,KADV;AAEA,IAAA,OAAO;AACP;AAHA;AAIA,IAAA,MAAM,EAAE,CAACS,QAAD,EAAWC,QAAX,KAAwBR,MAAM,CAACO,QAAD,EAAWC,QAAX,CAJtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMC,CAAC;AAACC,IAAAA,YAAD;AAAeC,IAAAA;AAAf,GAAD,kBACG,6CAASD,YAAY,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACA,+CAAWC,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADA,sBAPJ,CAHJ,CADA;AAmBP,CAvFD;;AAyFA,eAAejD,WAAf","sourcesContent":["import { red } from \"@material-ui/core/colors\";\r\nimport React, {useState} from \"react\";\r\nimport Dropzone from \"react-dropzone\";\r\nimport { useAuth } from \"../contexts/AuthContext\";\r\nimport { useChat } from \"../contexts/ChatContext\";\r\nimport DeliverStatus from \"../enuns/DeliverStatus\";\r\nimport ReadStatus from \"../enuns/ReadStatus\";\r\nimport './../assets/css/dragndrop.css'\r\n\r\ninterface IProps{\r\n    addFile(value: any): any;\r\n    files: any;\r\n}\r\n\r\nconst ImageUpload: React.FC<IProps> = ({ addFile, files }) => {\r\n    const { chats, setChats, activeChat } = useChat();\r\n    const { user } = useAuth();\r\n\r\n    const onAddMessage = (file: File) => {\r\n        setChats(\r\n        chats.map((item) => {\r\n            if (activeChat)\r\n            if (item.id === activeChat?.id) {\r\n                item.messages.push({\r\n                id: `${item.messages.length + 1}`,\r\n                userName: user.name,\r\n                message: \"Carregando...\",\r\n                time: \"\",\r\n                isImageMessage: false,\r\n                isFileMessage: false,\r\n                isVideoMessage: false,\r\n                isAudioMessage: false,\r\n                fileUrl: \"\",\r\n                sendFile: file,\r\n                toUser: activeChat.id,\r\n                fromUser: user.id,\r\n                deliverStatus: DeliverStatus.SENDING,\r\n                readStatus: ReadStatus.UNREAD,\r\n                deliverTimestamp: \"\",\r\n                readTimestamp: \"\",\r\n                content: \"metadata\",\r\n                contentType: \"type\",\r\n                isReplyMessage: false,\r\n                isForwardMessage: false,\r\n                });\r\n            }\r\n            return item;\r\n        })\r\n        );\r\n    };\r\n    const [warningMsg, setWarningMsg] = useState(\"\");\r\n    const onDrop = (e: DragEvent | Event) => {\r\n        /* if (Object.keys(rejected).length !== 0) {\r\n        const message = \"Please submit valid file type\";\r\n        setWarningMsg(message);\r\n        } else {\r\n            addFile(accepted);\r\n            setWarningMsg(\"\");\r\n            var blobPromise = new Promise((resolve, reject) => {\r\n                const reader = new window.FileReader();\r\n                reader.readAsDataURL(accepted[0]);\r\n                reader.onloadend = () => {\r\n                const base64data = reader.result;\r\n                resolve(base64data);\r\n                };\r\n            });\r\n            blobPromise.then(value => {\r\n                console.log(value);\r\n            });\r\n */         console.log(e.target);\r\n            if (files && files.size > 15728640) {\r\n            alert(\r\n                \"Tamanho de arquivo \" +\r\n                files.name +\r\n                \" não suportado. Por favor, envie um arquivo menor do que 15mb\"\r\n            );\r\n            return;\r\n            }else{\r\n                onAddMessage(files)\r\n            }\r\n        }\r\n\r\n        return (\r\n        <div className=\"selected\">\r\n            <p>{warningMsg}</p>\r\n\r\n            <Dropzone\r\n            multiple={false}\r\n            noClick\r\n            /* accept=\"image/*\" */\r\n            onDrop={(accepted, rejected) => onDrop(accepted, rejected)}\r\n            >\r\n            {({getRootProps, getInputProps}) => (\r\n                <div {...getRootProps()}>\r\n                <input {...getInputProps()} />\r\n                Drag'n'drop here!\r\n                </div>\r\n            )}\r\n            </Dropzone>\r\n        </div>\r\n        );\r\n}\r\n\r\nexport default ImageUpload;\r\n"]},"metadata":{},"sourceType":"module"}