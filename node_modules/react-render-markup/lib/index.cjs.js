'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var parseDom = require('dom-parse');
var PropTypes = require('prop-types');
var React = require('react');
var getDisplayName = require('react-display-name');
var cssToStyle = require('css-to-style');
var kindOf = require('kind-of');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var parseDom__default = /*#__PURE__*/_interopDefaultLegacy(parseDom);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var getDisplayName__default = /*#__PURE__*/_interopDefaultLegacy(getDisplayName);
var cssToStyle__default = /*#__PURE__*/_interopDefaultLegacy(cssToStyle);
var kindOf__default = /*#__PURE__*/_interopDefaultLegacy(kindOf);

// See https://dom.spec.whatwg.org/#dom-node-nodetype
var ELEMENT_NODE = 1;
var TEXT_NODE = 3;

// Mapping of standard attribute names to prop names.
// Based off https://github.com/facebook/react/blob/feb134c30d20ef332771d71d8d1cb66d34311637/packages/react-dom/src/shared/possibleStandardNames.js
var standardProps = new Map([// HTML
['accept-charset', 'acceptCharset'], ['accesskey', 'accessKey'], ['allowfullscreen', 'allowFullScreen'], ['autocapitalize', 'autoCapitalize'], ['autocomplete', 'autoComplete'], ['autocorrect', 'autoCorrect'], ['autofocus', 'autoFocus'], ['autoplay', 'autoPlay'], ['autosave', 'autoSave'], ['cellpadding', 'cellPadding'], ['cellspacing', 'cellSpacing'], ['charset', 'charSet'], ['class', 'className'], ['classid', 'classID'], ['classname', 'className'], ['colspan', 'colSpan'], ['contenteditable', 'contentEditable'], ['contextmenu', 'contextMenu'], ['controlslist', 'controlsList'], ['crossorigin', 'crossOrigin'], ['datetime', 'dateTime'], ['disablepictureinpicture', 'disablePictureInPicture'], ['disableremoteplayback', 'disableRemotePlayback'], ['enctype', 'encType'], ['enterkeyhint', 'enterKeyHint'], ['for', 'htmlFor'], ['formmethod', 'formMethod'], ['formaction', 'formAction'], ['formenctype', 'formEncType'], ['formnovalidate', 'formNoValidate'], ['formtarget', 'formTarget'], ['frameborder', 'frameBorder'], ['hreflang', 'hrefLang'], ['htmlfor', 'htmlFor'], ['http-equiv', 'httpEquiv'], ['inputmode', 'inputMode'], ['itemid', 'itemID'], ['itemprop', 'itemProp'], ['itemref', 'itemRef'], ['itemscope', 'itemScope'], ['itemtype', 'itemType'], ['keyparams', 'keyParams'], ['keytype', 'keyType'], ['marginwidth', 'marginWidth'], ['marginheight', 'marginHeight'], ['maxlength', 'maxLength'], ['mediagroup', 'mediaGroup'], ['minlength', 'minLength'], ['nomodule', 'noModule'], ['novalidate', 'noValidate'], ['playsinline', 'playsInline'], ['radiogroup', 'radioGroup'], ['readonly', 'readOnly'], ['referrerpolicy', 'referrerPolicy'], ['rowspan', 'rowSpan'], ['spellcheck', 'spellCheck'], ['srcdoc', 'srcDoc'], ['srclang', 'srcLang'], ['srcset', 'srcSet'], ['tabindex', 'tabIndex'], ['usemap', 'useMap'], // SVG
['accent-height', 'accentHeight'], ['alignment-baseline', 'alignmentBaseline'], ['allowreorder', 'allowReorder'], ['arabic-form', 'arabicForm'], ['attributename', 'attributeName'], ['attributetype', 'attributeType'], ['autoreverse', 'autoReverse'], ['basefrequency', 'baseFrequency'], ['baseline-shift', 'baselineShift'], ['baseprofile', 'baseProfile'], ['calcmode', 'calcMode'], ['cap-height', 'capHeight'], ['clip-path', 'clipPath'], ['clippathunits', 'clipPathUnits'], ['clip-rule', 'clipRule'], ['color-interpolation', 'colorInterpolation'], ['color-interpolation-filters', 'colorInterpolationFilters'], ['color-profile', 'colorProfile'], ['color-rendering', 'colorRendering'], ['contentscripttype', 'contentScriptType'], ['contentstyletype', 'contentStyleType'], ['diffuseconstant', 'diffuseConstant'], ['dominantbaseline', 'dominantBaseline'], ['dominant-baseline', 'dominantBaseline'], ['edgemode', 'edgeMode'], ['enable-background', 'enableBackground'], ['externalresourcesrequired', 'externalResourcesRequired'], ['fill-opacity', 'fillOpacity'], ['fill-rule', 'fillRule'], ['filterres', 'filterRes'], ['filterunits', 'filterUnits'], ['flood-opacity', 'floodOpacity'], ['flood-color', 'floodColor'], ['fontfamily', 'fontFamily'], ['font-family', 'fontFamily'], ['font-size', 'fontSize'], ['font-size-adjust', 'fontSizeAdjust'], ['font-stretch', 'fontStretch'], ['font-style', 'fontStyle'], ['font-variant', 'fontVariant'], ['font-weight', 'fontWeight'], ['glyph-name', 'glyphName'], ['glyph-orientation-horizontal', 'glyphOrientationHorizontal'], ['glyph-orientation-vertical', 'glyphOrientationVertical'], ['glyphref', 'glyphRef'], ['gradienttransform', 'gradientTransform'], ['gradientunits', 'gradientUnits'], ['horiz-adv-x', 'horizAdvX'], ['horiz-origin-x', 'horizOriginX'], ['image-rendering', 'imageRendering'], ['kernelmatrix', 'kernelMatrix'], ['kernelunitlength', 'kernelUnitLength'], ['keypoints', 'keyPoints'], ['keysplines', 'keySplines'], ['keytimes', 'keyTimes'], ['lengthadjust', 'lengthAdjust'], ['letter-spacing', 'letterSpacing'], ['lighting-color', 'lightingColor'], ['limitingconeangle', 'limitingConeAngle'], ['marker-end', 'markerEnd'], ['markerheight', 'markerHeight'], ['marker-mid', 'markerMid'], ['marker-start', 'markerStart'], ['markerunits', 'markerUnits'], ['markerwidth', 'markerWidth'], ['maskcontentunits', 'maskContentUnits'], ['maskunits', 'maskUnits'], ['numoctaves', 'numOctaves'], ['overline-position', 'overlinePosition'], ['overline-thickness', 'overlineThickness'], ['paintorder', 'paintOrder'], ['paint-order', 'paintOrder'], ['panose-1', 'panose1'], ['pathlength', 'pathLength'], ['patterncontentunits', 'patternContentUnits'], ['patterntransform', 'patternTransform'], ['patternunits', 'patternUnits'], ['pointerevents', 'pointerEvents'], ['pointer-events', 'pointerEvents'], ['pointsatx', 'pointsAtX'], ['pointsaty', 'pointsAtY'], ['pointsatz', 'pointsAtZ'], ['preservealpha', 'preserveAlpha'], ['preserveaspectratio', 'preserveAspectRatio'], ['primitiveunits', 'primitiveUnits'], ['refx', 'refX'], ['refy', 'refY'], ['rendering-intent', 'renderingIntent'], ['repeatcount', 'repeatCount'], ['repeatdur', 'repeatDur'], ['requiredextensions', 'requiredExtensions'], ['requiredfeatures', 'requiredFeatures'], ['shape-rendering', 'shapeRendering'], ['specularconstant', 'specularConstant'], ['specularexponent', 'specularExponent'], ['spreadmethod', 'spreadMethod'], ['startoffset', 'startOffset'], ['stddeviation', 'stdDeviation'], ['stitchtiles', 'stitchTiles'], ['stop-color', 'stopColor'], ['stop-opacity', 'stopOpacity'], ['strikethrough-position', 'strikethroughPosition'], ['strikethrough-thickness', 'strikethroughThickness'], ['stroke-dasharray', 'strokeDasharray'], ['stroke-dashoffset', 'strokeDashoffset'], ['stroke-linecap', 'strokeLinecap'], ['stroke-linejoin', 'strokeLinejoin'], ['stroke-miterlimit', 'strokeMiterlimit'], ['stroke-width', 'strokeWidth'], ['stroke-opacity', 'strokeOpacity'], ['surfacescale', 'surfaceScale'], ['systemlanguage', 'systemLanguage'], ['tablevalues', 'tableValues'], ['targetx', 'targetX'], ['targety', 'targetY'], ['text-anchor', 'textAnchor'], ['text-decoration', 'textDecoration'], ['textlength', 'textLength'], ['text-rendering', 'textRendering'], ['underline-position', 'underlinePosition'], ['underline-thickness', 'underlineThickness'], ['unicode-bidi', 'unicodeBidi'], ['unicode-range', 'unicodeRange'], ['units-per-em', 'unitsPerEm'], ['v-alphabetic', 'vAlphabetic'], ['vector-effect', 'vectorEffect'], ['vert-adv-y', 'vertAdvY'], ['vert-origin-x', 'vertOriginX'], ['vert-origin-y', 'vertOriginY'], ['v-hanging', 'vHanging'], ['v-ideographic', 'vIdeographic'], ['viewbox', 'viewBox'], ['viewtarget', 'viewTarget'], ['v-mathematical', 'vMathematical'], ['word-spacing', 'wordSpacing'], ['writing-mode', 'writingMode'], ['xchannelselector', 'xChannelSelector'], ['x-height', 'xHeight'], ['xlink:actuate', 'xlinkActuate'], ['xlink:arcrole', 'xlinkArcrole'], ['xlink:href', 'xlinkHref'], ['xlink:role', 'xlinkRole'], ['xlink:show', 'xlinkShow'], ['xlink:title', 'xlinkTitle'], ['xlink:type', 'xlinkType'], ['xml:base', 'xmlBase'], ['xml:lang', 'xmlLang'], ['xml:space', 'xmlSpace'], ['xmlns:xlink', 'xmlnsXlink'], ['ychannelselector', 'yChannelSelector'], ['zoomandpan', 'zoomAndPan']]);

var reactProps = new Set(['children', 'dangerouslySetInnerHTML', 'key', 'ref', 'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', // deprecated
'valueLink']);

var attrsToProps = function attrsToProps(attrs) {
  var props = {};

  for (var i = 0; i < attrs.length; i++) {
    var _standardProps$get;

    var _attrs$i = attrs[i],
        name = _attrs$i.name,
        value = _attrs$i.value; // Disallow event attributes and react props.

    if (name.startsWith('on') || reactProps.has(name)) {
      continue;
    } // Don't modify aria-* or data-* attributes.


    if (name.startsWith('aria-') || name.startsWith('data-')) {
      props[name] = value;
      continue;
    } // Handle style attribute.


    if (name === 'style') {
      props[name] = cssToStyle__default['default'](value);
      continue;
    }

    props[(_standardProps$get = standardProps.get(name)) != null ? _standardProps$get : name] = value === '' ? true : value;
  }

  return props;
};

// HTML elements are always in the canonical upper-case form,
// i.e. <h1> will have a tagName of "H1"
var isHTMLTagName = /^[A-Z]/;

var nodeNameToType = function nodeNameToType(nodeName) {
  return isHTMLTagName.test(nodeName) ? nodeName.toLowerCase() : nodeName;
};

var nodesToElements = function nodesToElements(nodeList, options) {
  var tree = [];

  for (var i = 0; i < nodeList.length; i++) {
    var node = nodeList[i]; // Only render element nodes and text nodes.

    if (node.nodeType === ELEMENT_NODE) {
      var type = nodeNameToType(node.nodeName);

      if ( // Never render <script> elements.
      type === 'script' || // Handle allowed option to only render elements that are allowed.
      options.allowed && (typeof options.allowed === 'function' ? !options.allowed(node) : !options.allowed.includes(type))) {
        continue;
      } // Handle replace option.


      if (options.replace) {
        var replacement = typeof options.replace === 'function' ? options.replace(node) : Object.prototype.hasOwnProperty.call(options.replace, type) ? options.replace[type] : undefined; // Don't render element if replacement is null.

        if (replacement === null) {
          continue;
        } // Replace element replacement (if not undefined).


        if (replacement !== undefined) {
          type = replacement;
        }
      }

      var props = attrsToProps(node.attributes);
      props.key = getDisplayName__default['default'](type) + "-" + i;
      tree.push(React.createElement(type, props, nodesToElements(node.childNodes, options)));
    } else if (node.nodeType === TEXT_NODE) {
      // Handle trim option to remove whitespace text nodes.
      if (!options.trim || node.textContent.trim() !== '') {
        tree.push(node.textContent);
      }
    }
  }

  return tree.length > 0 ? tree : null;
};

var Markup = React.memo(function Markup(_ref) {
  var _ref$allowed = _ref.allowed,
      allowed = _ref$allowed === void 0 ? null : _ref$allowed,
      _ref$markup = _ref.markup,
      markup = _ref$markup === void 0 ? null : _ref$markup,
      _ref$replace = _ref.replace,
      replace = _ref$replace === void 0 ? null : _ref$replace,
      _ref$trim = _ref.trim,
      trim = _ref$trim === void 0 ? null : _ref$trim;
  return markup ? nodesToElements(parseDom__default['default'](markup), {
    allowed: allowed,
    replace: replace,
    trim: trim
  }) : null;
});

if (process.env.NODE_ENV !== 'production') {
  Markup.propTypes = {
    allowed: PropTypes__default['default'].oneOfType([PropTypes__default['default'].arrayOf(PropTypes__default['default'].string), PropTypes__default['default'].func]),
    markup: PropTypes__default['default'].string,
    replace: PropTypes__default['default'].oneOfType([PropTypes__default['default'].func, PropTypes__default['default'].objectOf(PropTypes__default['default'].elementType)]),
    trim: PropTypes__default['default'].bool
  };
}

var renderMarkup = function renderMarkup(markup, options) {
  if (options === void 0) {
    options = {};
  }

  if (process.env.NODE_ENV !== 'production') {
    if (markup != null && kindOf__default['default'](markup) !== 'string') {
      throw new TypeError("Expected `markup` to be of type `string`, but received type `" + kindOf__default['default'](markup) + "`");
    }

    if (kindOf__default['default'](options) !== 'object') {
      throw new TypeError("Expected `options` to be of type `object`, but received type `" + kindOf__default['default'](options) + "`");
    }

    if (options.allowed != null && !['array', 'function'].includes(kindOf__default['default'](options.allowed))) {
      throw new TypeError("Expected property `allowed` to be of type `array` or `function` but received type `" + kindOf__default['default'](options.allowed) + "` in object `options`");
    }

    if (options.replace != null && !['function', 'object'].includes(kindOf__default['default'](options.replace))) {
      throw new TypeError("Expected property `replace` to be of type `function` or `object` but received type `" + kindOf__default['default'](options.replace) + "` in object `options`");
    }

    if (options.trim != null && kindOf__default['default'](options.trim) !== 'boolean') {
      throw new TypeError("Expected property `trim` to be of type `boolean` but received type `" + kindOf__default['default'](options.trim) + "` in object `options`");
    }
  }

  return markup ? nodesToElements(parseDom__default['default'](markup), options) : null;
};

exports.Markup = Markup;
exports.renderMarkup = renderMarkup;
//# sourceMappingURL=index.cjs.js.map
